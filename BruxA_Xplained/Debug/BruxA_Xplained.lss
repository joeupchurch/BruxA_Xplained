
BruxA_Xplained.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f960  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000134  20000000  0000f960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003a8c  20000134  0000fa94  00020134  2**2
                  ALLOC
  3 .stack        00002000  20003bc0  00013520  00020134  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
  5 .comment      000000b2  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005d8da  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000717c  00000000  00000000  0007dae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00011c82  00000000  00000000  00084c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b08  00000000  00000000  000968e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001740  00000000  00000000  000973ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020f43  00000000  00000000  00098b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000197eb  00000000  00000000  000b9a71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009beb4  00000000  00000000  000d325c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000251c  00000000  00000000  0016f110  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 5b 00 20 71 30 00 00 6f 30 00 00 6f 30 00 00     .[. q0..o0..o0..
	...
      2c:	6f 30 00 00 00 00 00 00 00 00 00 00 6f 30 00 00     o0..........o0..
      3c:	6f 30 00 00 6f 30 00 00 6f 30 00 00 6f 30 00 00     o0..o0..o0..o0..
      4c:	6f 30 00 00 a1 18 00 00 6f 30 00 00 6f 30 00 00     o0......o0..o0..
      5c:	6f 30 00 00 6f 30 00 00 0d 1e 00 00 1d 1e 00 00     o0..o0..........
      6c:	2d 1e 00 00 3d 1e 00 00 4d 1e 00 00 5d 1e 00 00     -...=...M...]...
      7c:	6f 30 00 00 6f 30 00 00 6f 30 00 00 31 2d 00 00     o0..o0..o0..1-..
      8c:	41 2d 00 00 51 2d 00 00 61 2d 00 00 71 2d 00 00     A-..Q-..a-..q-..
      9c:	ed 0e 00 00 6f 30 00 00 6f 30 00 00 6f 30 00 00     ....o0..o0..o0..
      ac:	6f 30 00 00 00 00 00 00                             o0......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000134 	.word	0x20000134
      d4:	00000000 	.word	0x00000000
      d8:	0000f960 	.word	0x0000f960

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000138 	.word	0x20000138
     108:	0000f960 	.word	0x0000f960
     10c:	0000f960 	.word	0x0000f960
     110:	00000000 	.word	0x00000000

00000114 <at25dfx_chip_check_presence>:
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     114:	b530      	push	{r4, r5, lr}
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     116:	b085      	sub	sp, #20
     118:	0004      	movs	r4, r0
	uint16_t status_reg = 0;

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
     11a:	2300      	movs	r3, #0

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     11c:	9303      	str	r3, [sp, #12]
     11e:	6805      	ldr	r5, [r0, #0]
     120:	4b2f      	ldr	r3, [pc, #188]	; (1e0 <at25dfx_chip_check_presence+0xcc>)
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
     122:	4798      	blx	r3
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     124:	792b      	ldrb	r3, [r5, #4]
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     126:	2b00      	cmp	r3, #0
	if (port_index < PORT_INST_NUM) {
     128:	d156      	bne.n	1d8 <at25dfx_chip_check_presence+0xc4>
     12a:	3301      	adds	r3, #1
		return &(ports[port_index]->Group[group_index]);
     12c:	712b      	strb	r3, [r5, #4]
     12e:	4b2d      	ldr	r3, [pc, #180]	; (1e4 <at25dfx_chip_check_presence+0xd0>)
     130:	4798      	blx	r3
     132:	229f      	movs	r2, #159	; 0x9f
     134:	ab01      	add	r3, sp, #4
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     136:	701a      	strb	r2, [r3, #0]
     138:	7962      	ldrb	r2, [r4, #5]
     13a:	09d1      	lsrs	r1, r2, #7
     13c:	2300      	movs	r3, #0
	} else {
		port_base->OUTCLR.reg = pin_mask;
     13e:	2900      	cmp	r1, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     140:	d104      	bne.n	14c <at25dfx_chip_check_presence+0x38>
     142:	0953      	lsrs	r3, r2, #5
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     144:	01db      	lsls	r3, r3, #7

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     146:	4928      	ldr	r1, [pc, #160]	; (1e8 <at25dfx_chip_check_presence+0xd4>)
     148:	468c      	mov	ip, r1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     14a:	4463      	add	r3, ip
     14c:	211f      	movs	r1, #31

	_at25dfx_chip_select(chip);
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
     14e:	4011      	ands	r1, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
     150:	2201      	movs	r2, #1
     152:	408a      	lsls	r2, r1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     154:	615a      	str	r2, [r3, #20]
     156:	2201      	movs	r2, #1
     158:	a901      	add	r1, sp, #4
     15a:	6820      	ldr	r0, [r4, #0]
	uint16_t status_reg = 0;
     15c:	4b23      	ldr	r3, [pc, #140]	; (1ec <at25dfx_chip_check_presence+0xd8>)
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     15e:	4798      	blx	r3
     160:	2300      	movs	r3, #0

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     162:	2203      	movs	r2, #3
     164:	a903      	add	r1, sp, #12
     166:	6820      	ldr	r0, [r4, #0]
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     168:	4d21      	ldr	r5, [pc, #132]	; (1f0 <at25dfx_chip_check_presence+0xdc>)
     16a:	47a8      	blx	r5
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     16c:	7962      	ldrb	r2, [r4, #5]
     16e:	09d1      	lsrs	r1, r2, #7
     170:	2300      	movs	r3, #0
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     172:	2900      	cmp	r1, #0
     174:	d104      	bne.n	180 <at25dfx_chip_check_presence+0x6c>

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
     176:	0953      	lsrs	r3, r2, #5
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     178:	01db      	lsls	r3, r3, #7
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
     17a:	491b      	ldr	r1, [pc, #108]	; (1e8 <at25dfx_chip_check_presence+0xd4>)
     17c:	468c      	mov	ip, r1

	_at25dfx_chip_enable_write(chip);

	switch (block_size) {
	case AT25DFX_BLOCK_SIZE_4KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
     17e:	4463      	add	r3, ip
     180:	211f      	movs	r1, #31
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     182:	4011      	ands	r1, r2
     184:	2201      	movs	r2, #1
     186:	408a      	lsls	r2, r1
     188:	619a      	str	r2, [r3, #24]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     18a:	2300      	movs	r3, #0
     18c:	6822      	ldr	r2, [r4, #0]
     18e:	7113      	strb	r3, [r2, #4]
		*rx_data = (uint8_t)spi_module->DATA.reg;
     190:	7923      	ldrb	r3, [r4, #4]
     192:	2b09      	cmp	r3, #9
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
     194:	d815      	bhi.n	1c2 <at25dfx_chip_check_presence+0xae>
     196:	009b      	lsls	r3, r3, #2
	SercomSpi *const spi_module = &(module->hw->SPI);
     198:	4a16      	ldr	r2, [pc, #88]	; (1f4 <at25dfx_chip_check_presence+0xe0>)
     19a:	58d3      	ldr	r3, [r2, r3]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     19c:	469f      	mov	pc, r3
		while (!spi_is_ready_to_write(chip->spi)) {
     19e:	4b16      	ldr	r3, [pc, #88]	; (1f8 <at25dfx_chip_check_presence+0xe4>)
     1a0:	e012      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
     1a2:	4b16      	ldr	r3, [pc, #88]	; (1fc <at25dfx_chip_check_presence+0xe8>)
	if (!spi_is_ready_to_write(module)) {
     1a4:	e010      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
     1a6:	4b16      	ldr	r3, [pc, #88]	; (200 <at25dfx_chip_check_presence+0xec>)
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     1a8:	e00e      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
		while (!spi_is_ready_to_read(chip->spi)) {
     1aa:	4b16      	ldr	r3, [pc, #88]	; (204 <at25dfx_chip_check_presence+0xf0>)
	SercomSpi *const spi_module = &(module->hw->SPI);
     1ac:	e00c      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     1ae:	4b16      	ldr	r3, [pc, #88]	; (208 <at25dfx_chip_check_presence+0xf4>)
     1b0:	e00a      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
     1b2:	4b16      	ldr	r3, [pc, #88]	; (20c <at25dfx_chip_check_presence+0xf8>)
     1b4:	e008      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
	if (!spi_is_ready_to_read(module)) {
     1b6:	4b16      	ldr	r3, [pc, #88]	; (210 <at25dfx_chip_check_presence+0xfc>)
     1b8:	e006      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     1ba:	4b16      	ldr	r3, [pc, #88]	; (214 <at25dfx_chip_check_presence+0x100>)
     1bc:	e004      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
     1be:	4b16      	ldr	r3, [pc, #88]	; (218 <at25dfx_chip_check_presence+0x104>)
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     1c0:	e002      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
     1c2:	2300      	movs	r3, #0
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     1c4:	e000      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
     1c6:	4b15      	ldr	r3, [pc, #84]	; (21c <at25dfx_chip_check_presence+0x108>)
     1c8:	9a03      	ldr	r2, [sp, #12]
     1ca:	429a      	cmp	r2, r3
	port_pin_set_output_level(chip->cs_pin, true);
     1cc:	d002      	beq.n	1d4 <at25dfx_chip_check_presence+0xc0>
	if (port_index < PORT_INST_NUM) {
     1ce:	2014      	movs	r0, #20
		return NULL;
     1d0:	b005      	add	sp, #20
	if (port_index < PORT_INST_NUM) {
     1d2:	bd30      	pop	{r4, r5, pc}
     1d4:	2000      	movs	r0, #0
		return &(ports[port_index]->Group[group_index]);
     1d6:	e7fb      	b.n	1d0 <at25dfx_chip_check_presence+0xbc>
     1d8:	4b02      	ldr	r3, [pc, #8]	; (1e4 <at25dfx_chip_check_presence+0xd0>)
     1da:	4798      	blx	r3
     1dc:	2005      	movs	r0, #5
     1de:	e7f7      	b.n	1d0 <at25dfx_chip_check_presence+0xbc>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1e0:	000017ad 	.word	0x000017ad
     1e4:	000017ed 	.word	0x000017ed
		port_base->OUTSET.reg = pin_mask;
     1e8:	41004400 	.word	0x41004400

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
		return STATUS_ERR_IO;
	}
	return STATUS_OK;
     1ec:	000012e1 	.word	0x000012e1

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);
     1f0:	000011c5 	.word	0x000011c5
	module->locked = false;
     1f4:	0000b4dc 	.word	0x0000b4dc
		return STATUS_ERR_INVALID_ARG;
     1f8:	0000431f 	.word	0x0000431f
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     1fc:	0001441f 	.word	0x0001441f
		return status;
     200:	0002451f 	.word	0x0002451f
     204:	0001451f 	.word	0x0001451f
     208:	0002461f 	.word	0x0002461f
     20c:	0003461f 	.word	0x0003461f
     210:	0000861f 	.word	0x0000861f
     214:	0001471f 	.word	0x0001471f
		return status;
     218:	0000481f 	.word	0x0000481f
     21c:	0000651f 	.word	0x0000651f

00000220 <at25dfx_chip_read_buffer>:
{
     220:	b5f0      	push	{r4, r5, r6, r7, lr}
     222:	b085      	sub	sp, #20
     224:	0004      	movs	r4, r0
     226:	000e      	movs	r6, r1
     228:	9201      	str	r2, [sp, #4]
     22a:	001f      	movs	r7, r3
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     22c:	185a      	adds	r2, r3, r1
	switch (type) {
     22e:	7903      	ldrb	r3, [r0, #4]
     230:	2b09      	cmp	r3, #9
     232:	d815      	bhi.n	260 <at25dfx_chip_read_buffer+0x40>
     234:	009b      	lsls	r3, r3, #2
     236:	4932      	ldr	r1, [pc, #200]	; (300 <at25dfx_chip_read_buffer+0xe0>)
     238:	58cb      	ldr	r3, [r1, r3]
     23a:	469f      	mov	pc, r3
		return 256 * 1024UL;
     23c:	2380      	movs	r3, #128	; 0x80
     23e:	02db      	lsls	r3, r3, #11
     240:	e012      	b.n	268 <at25dfx_chip_read_buffer+0x48>
		return 512 * 1024UL;
     242:	2380      	movs	r3, #128	; 0x80
     244:	031b      	lsls	r3, r3, #12
     246:	e00f      	b.n	268 <at25dfx_chip_read_buffer+0x48>
		return 1024 * 1024UL;
     248:	2380      	movs	r3, #128	; 0x80
     24a:	035b      	lsls	r3, r3, #13
     24c:	e00c      	b.n	268 <at25dfx_chip_read_buffer+0x48>
		return 2048 * 1024UL;
     24e:	2380      	movs	r3, #128	; 0x80
     250:	039b      	lsls	r3, r3, #14
     252:	e009      	b.n	268 <at25dfx_chip_read_buffer+0x48>
		return 4096 * 1024UL;
     254:	2380      	movs	r3, #128	; 0x80
     256:	03db      	lsls	r3, r3, #15
     258:	e006      	b.n	268 <at25dfx_chip_read_buffer+0x48>
		return 8192 * 1024UL;
     25a:	2380      	movs	r3, #128	; 0x80
     25c:	041b      	lsls	r3, r3, #16
     25e:	e003      	b.n	268 <at25dfx_chip_read_buffer+0x48>
		return 0;
     260:	2300      	movs	r3, #0
     262:	e001      	b.n	268 <at25dfx_chip_read_buffer+0x48>
		return 64 * 1024UL;
     264:	2380      	movs	r3, #128	; 0x80
     266:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
     268:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     26a:	429a      	cmp	r2, r3
     26c:	d901      	bls.n	272 <at25dfx_chip_read_buffer+0x52>
}
     26e:	b005      	add	sp, #20
     270:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
     272:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     274:	4b23      	ldr	r3, [pc, #140]	; (304 <at25dfx_chip_read_buffer+0xe4>)
     276:	4798      	blx	r3
	if (module->locked) {
     278:	792b      	ldrb	r3, [r5, #4]
     27a:	2b00      	cmp	r3, #0
     27c:	d13c      	bne.n	2f8 <at25dfx_chip_read_buffer+0xd8>
		module->locked = true;
     27e:	3301      	adds	r3, #1
     280:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
     282:	4b21      	ldr	r3, [pc, #132]	; (308 <at25dfx_chip_read_buffer+0xe8>)
     284:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     286:	230b      	movs	r3, #11
     288:	aa02      	add	r2, sp, #8
     28a:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     28c:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     28e:	0a33      	lsrs	r3, r6, #8
     290:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     292:	0c36      	lsrs	r6, r6, #16
     294:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     296:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     298:	09d1      	lsrs	r1, r2, #7
		return NULL;
     29a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     29c:	2900      	cmp	r1, #0
     29e:	d104      	bne.n	2aa <at25dfx_chip_read_buffer+0x8a>
		return &(ports[port_index]->Group[group_index]);
     2a0:	0953      	lsrs	r3, r2, #5
     2a2:	01db      	lsls	r3, r3, #7
     2a4:	4919      	ldr	r1, [pc, #100]	; (30c <at25dfx_chip_read_buffer+0xec>)
     2a6:	468c      	mov	ip, r1
     2a8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2aa:	211f      	movs	r1, #31
     2ac:	4011      	ands	r1, r2
     2ae:	2201      	movs	r2, #1
     2b0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     2b2:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     2b4:	2205      	movs	r2, #5
     2b6:	a902      	add	r1, sp, #8
     2b8:	6820      	ldr	r0, [r4, #0]
     2ba:	4b15      	ldr	r3, [pc, #84]	; (310 <at25dfx_chip_read_buffer+0xf0>)
     2bc:	4798      	blx	r3
	if (cmd.length) {
     2be:	2f00      	cmp	r7, #0
     2c0:	d113      	bne.n	2ea <at25dfx_chip_read_buffer+0xca>
	port_pin_set_output_level(chip->cs_pin, true);
     2c2:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     2c4:	09d1      	lsrs	r1, r2, #7
		return NULL;
     2c6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     2c8:	2900      	cmp	r1, #0
     2ca:	d104      	bne.n	2d6 <at25dfx_chip_read_buffer+0xb6>
		return &(ports[port_index]->Group[group_index]);
     2cc:	0953      	lsrs	r3, r2, #5
     2ce:	01db      	lsls	r3, r3, #7
     2d0:	490e      	ldr	r1, [pc, #56]	; (30c <at25dfx_chip_read_buffer+0xec>)
     2d2:	468c      	mov	ip, r1
     2d4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2d6:	211f      	movs	r1, #31
     2d8:	4011      	ands	r1, r2
     2da:	2201      	movs	r2, #1
     2dc:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     2de:	619a      	str	r2, [r3, #24]
	_at25dfx_spi_unlock(chip->spi);
     2e0:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     2e2:	2200      	movs	r2, #0
     2e4:	711a      	strb	r2, [r3, #4]
	return STATUS_OK;
     2e6:	2000      	movs	r0, #0
     2e8:	e7c1      	b.n	26e <at25dfx_chip_read_buffer+0x4e>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
     2ea:	2300      	movs	r3, #0
     2ec:	003a      	movs	r2, r7
     2ee:	9901      	ldr	r1, [sp, #4]
     2f0:	6820      	ldr	r0, [r4, #0]
     2f2:	4d08      	ldr	r5, [pc, #32]	; (314 <at25dfx_chip_read_buffer+0xf4>)
     2f4:	47a8      	blx	r5
     2f6:	e7e4      	b.n	2c2 <at25dfx_chip_read_buffer+0xa2>
     2f8:	4b03      	ldr	r3, [pc, #12]	; (308 <at25dfx_chip_read_buffer+0xe8>)
     2fa:	4798      	blx	r3
		return status;
     2fc:	2005      	movs	r0, #5
     2fe:	e7b6      	b.n	26e <at25dfx_chip_read_buffer+0x4e>
     300:	0000b504 	.word	0x0000b504
     304:	000017ad 	.word	0x000017ad
     308:	000017ed 	.word	0x000017ed
     30c:	41004400 	.word	0x41004400
     310:	000012e1 	.word	0x000012e1
     314:	000011c5 	.word	0x000011c5

00000318 <at25dfx_chip_write_buffer>:
{
     318:	b5f0      	push	{r4, r5, r6, r7, lr}
     31a:	46de      	mov	lr, fp
     31c:	4657      	mov	r7, sl
     31e:	464e      	mov	r6, r9
     320:	4645      	mov	r5, r8
     322:	b5e0      	push	{r5, r6, r7, lr}
     324:	b085      	sub	sp, #20
     326:	0005      	movs	r5, r0
     328:	000e      	movs	r6, r1
     32a:	9201      	str	r2, [sp, #4]
     32c:	001f      	movs	r7, r3
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     32e:	185a      	adds	r2, r3, r1
	switch (type) {
     330:	7903      	ldrb	r3, [r0, #4]
     332:	2b09      	cmp	r3, #9
     334:	d815      	bhi.n	362 <at25dfx_chip_write_buffer+0x4a>
     336:	009b      	lsls	r3, r3, #2
     338:	49ae      	ldr	r1, [pc, #696]	; (5f4 <at25dfx_chip_write_buffer+0x2dc>)
     33a:	58cb      	ldr	r3, [r1, r3]
     33c:	469f      	mov	pc, r3
		return 256 * 1024UL;
     33e:	2380      	movs	r3, #128	; 0x80
     340:	02db      	lsls	r3, r3, #11
     342:	e012      	b.n	36a <at25dfx_chip_write_buffer+0x52>
		return 512 * 1024UL;
     344:	2380      	movs	r3, #128	; 0x80
     346:	031b      	lsls	r3, r3, #12
     348:	e00f      	b.n	36a <at25dfx_chip_write_buffer+0x52>
		return 1024 * 1024UL;
     34a:	2380      	movs	r3, #128	; 0x80
     34c:	035b      	lsls	r3, r3, #13
     34e:	e00c      	b.n	36a <at25dfx_chip_write_buffer+0x52>
		return 2048 * 1024UL;
     350:	2380      	movs	r3, #128	; 0x80
     352:	039b      	lsls	r3, r3, #14
     354:	e009      	b.n	36a <at25dfx_chip_write_buffer+0x52>
		return 4096 * 1024UL;
     356:	2380      	movs	r3, #128	; 0x80
     358:	03db      	lsls	r3, r3, #15
     35a:	e006      	b.n	36a <at25dfx_chip_write_buffer+0x52>
		return 8192 * 1024UL;
     35c:	2380      	movs	r3, #128	; 0x80
     35e:	041b      	lsls	r3, r3, #16
     360:	e003      	b.n	36a <at25dfx_chip_write_buffer+0x52>
		return 0;
     362:	2300      	movs	r3, #0
     364:	e001      	b.n	36a <at25dfx_chip_write_buffer+0x52>
		return 64 * 1024UL;
     366:	2380      	movs	r3, #128	; 0x80
     368:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
     36a:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     36c:	429a      	cmp	r2, r3
     36e:	d906      	bls.n	37e <at25dfx_chip_write_buffer+0x66>
}
     370:	b005      	add	sp, #20
     372:	bc3c      	pop	{r2, r3, r4, r5}
     374:	4690      	mov	r8, r2
     376:	4699      	mov	r9, r3
     378:	46a2      	mov	sl, r4
     37a:	46ab      	mov	fp, r5
     37c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
     37e:	682c      	ldr	r4, [r5, #0]
	cpu_irq_enter_critical();
     380:	4b9d      	ldr	r3, [pc, #628]	; (5f8 <at25dfx_chip_write_buffer+0x2e0>)
     382:	4798      	blx	r3
	if (module->locked) {
     384:	7923      	ldrb	r3, [r4, #4]
     386:	2b00      	cmp	r3, #0
     388:	d000      	beq.n	38c <at25dfx_chip_write_buffer+0x74>
     38a:	e12e      	b.n	5ea <at25dfx_chip_write_buffer+0x2d2>
		module->locked = true;
     38c:	3301      	adds	r3, #1
     38e:	7123      	strb	r3, [r4, #4]
	cpu_irq_leave_critical();
     390:	4b9a      	ldr	r3, [pc, #616]	; (5fc <at25dfx_chip_write_buffer+0x2e4>)
     392:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     394:	2306      	movs	r3, #6
     396:	aa02      	add	r2, sp, #8
     398:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     39a:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     39c:	09d1      	lsrs	r1, r2, #7
		return NULL;
     39e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     3a0:	2900      	cmp	r1, #0
     3a2:	d104      	bne.n	3ae <at25dfx_chip_write_buffer+0x96>
		return &(ports[port_index]->Group[group_index]);
     3a4:	0953      	lsrs	r3, r2, #5
     3a6:	01db      	lsls	r3, r3, #7
     3a8:	4995      	ldr	r1, [pc, #596]	; (600 <at25dfx_chip_write_buffer+0x2e8>)
     3aa:	468c      	mov	ip, r1
     3ac:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3ae:	211f      	movs	r1, #31
     3b0:	4011      	ands	r1, r2
     3b2:	2201      	movs	r2, #1
     3b4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     3b6:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     3b8:	2201      	movs	r2, #1
     3ba:	a902      	add	r1, sp, #8
     3bc:	6828      	ldr	r0, [r5, #0]
     3be:	4b91      	ldr	r3, [pc, #580]	; (604 <at25dfx_chip_write_buffer+0x2ec>)
     3c0:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     3c2:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     3c4:	09d1      	lsrs	r1, r2, #7
		return NULL;
     3c6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     3c8:	2900      	cmp	r1, #0
     3ca:	d104      	bne.n	3d6 <at25dfx_chip_write_buffer+0xbe>
		return &(ports[port_index]->Group[group_index]);
     3cc:	0953      	lsrs	r3, r2, #5
     3ce:	01db      	lsls	r3, r3, #7
     3d0:	498b      	ldr	r1, [pc, #556]	; (600 <at25dfx_chip_write_buffer+0x2e8>)
     3d2:	468c      	mov	ip, r1
     3d4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3d6:	211f      	movs	r1, #31
     3d8:	4011      	ands	r1, r2
     3da:	2201      	movs	r2, #1
     3dc:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     3de:	619a      	str	r2, [r3, #24]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
     3e0:	22ff      	movs	r2, #255	; 0xff
     3e2:	4032      	ands	r2, r6
     3e4:	2380      	movs	r3, #128	; 0x80
     3e6:	005b      	lsls	r3, r3, #1
     3e8:	1a9b      	subs	r3, r3, r2
	cmd.length = min(page_bytes, length);
     3ea:	1c1a      	adds	r2, r3, #0
     3ec:	b29b      	uxth	r3, r3
     3ee:	42bb      	cmp	r3, r7
     3f0:	d900      	bls.n	3f4 <at25dfx_chip_write_buffer+0xdc>
     3f2:	1c3a      	adds	r2, r7, #0
     3f4:	b293      	uxth	r3, r2
     3f6:	469a      	mov	sl, r3
	cmd_buffer[0] = cmd.opcode;
     3f8:	2302      	movs	r3, #2
     3fa:	aa02      	add	r2, sp, #8
     3fc:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     3fe:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     400:	0a33      	lsrs	r3, r6, #8
     402:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     404:	0c33      	lsrs	r3, r6, #16
     406:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     408:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     40a:	09d1      	lsrs	r1, r2, #7
		return NULL;
     40c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     40e:	2900      	cmp	r1, #0
     410:	d104      	bne.n	41c <at25dfx_chip_write_buffer+0x104>
		return &(ports[port_index]->Group[group_index]);
     412:	0953      	lsrs	r3, r2, #5
     414:	01db      	lsls	r3, r3, #7
     416:	497a      	ldr	r1, [pc, #488]	; (600 <at25dfx_chip_write_buffer+0x2e8>)
     418:	468c      	mov	ip, r1
     41a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     41c:	211f      	movs	r1, #31
     41e:	4011      	ands	r1, r2
     420:	2201      	movs	r2, #1
     422:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     424:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     426:	2204      	movs	r2, #4
     428:	a902      	add	r1, sp, #8
     42a:	6828      	ldr	r0, [r5, #0]
     42c:	4b75      	ldr	r3, [pc, #468]	; (604 <at25dfx_chip_write_buffer+0x2ec>)
     42e:	4798      	blx	r3
	if (cmd.length) {
     430:	4653      	mov	r3, sl
     432:	2b00      	cmp	r3, #0
     434:	d145      	bne.n	4c2 <at25dfx_chip_write_buffer+0x1aa>
	port_pin_set_output_level(chip->cs_pin, true);
     436:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     438:	09d1      	lsrs	r1, r2, #7
		return NULL;
     43a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     43c:	2900      	cmp	r1, #0
     43e:	d104      	bne.n	44a <at25dfx_chip_write_buffer+0x132>
		return &(ports[port_index]->Group[group_index]);
     440:	0953      	lsrs	r3, r2, #5
     442:	01db      	lsls	r3, r3, #7
     444:	496e      	ldr	r1, [pc, #440]	; (600 <at25dfx_chip_write_buffer+0x2e8>)
     446:	468c      	mov	ip, r1
     448:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     44a:	211f      	movs	r1, #31
     44c:	4011      	ands	r1, r2
     44e:	2201      	movs	r2, #1
     450:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     452:	619a      	str	r2, [r3, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
     454:	682b      	ldr	r3, [r5, #0]
     456:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_ready_to_write(chip->spi)) {
     458:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     45a:	7e0b      	ldrb	r3, [r1, #24]
     45c:	4213      	tst	r3, r2
     45e:	d0fc      	beq.n	45a <at25dfx_chip_write_buffer+0x142>
	port_pin_set_output_level(chip->cs_pin, false);
     460:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     462:	09d1      	lsrs	r1, r2, #7
		return NULL;
     464:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     466:	2900      	cmp	r1, #0
     468:	d104      	bne.n	474 <at25dfx_chip_write_buffer+0x15c>
		return &(ports[port_index]->Group[group_index]);
     46a:	0953      	lsrs	r3, r2, #5
     46c:	01db      	lsls	r3, r3, #7
     46e:	4964      	ldr	r1, [pc, #400]	; (600 <at25dfx_chip_write_buffer+0x2e8>)
     470:	468c      	mov	ip, r1
     472:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     474:	211f      	movs	r1, #31
     476:	4011      	ands	r1, r2
     478:	2201      	movs	r2, #1
     47a:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     47c:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
     47e:	682b      	ldr	r3, [r5, #0]
     480:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     482:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     484:	07d2      	lsls	r2, r2, #31
     486:	d501      	bpl.n	48c <at25dfx_chip_write_buffer+0x174>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     488:	2205      	movs	r2, #5
     48a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
     48c:	6828      	ldr	r0, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     48e:	6802      	ldr	r2, [r0, #0]
     490:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     492:	7e13      	ldrb	r3, [r2, #24]
     494:	420b      	tst	r3, r1
     496:	d0fc      	beq.n	492 <at25dfx_chip_write_buffer+0x17a>
     498:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
     49a:	2400      	movs	r4, #0
	if (!spi_is_ready_to_read(module)) {
     49c:	075b      	lsls	r3, r3, #29
     49e:	d509      	bpl.n	4b4 <at25dfx_chip_write_buffer+0x19c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     4a0:	8b53      	ldrh	r3, [r2, #26]
     4a2:	075b      	lsls	r3, r3, #29
     4a4:	d501      	bpl.n	4aa <at25dfx_chip_write_buffer+0x192>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     4a6:	2304      	movs	r3, #4
     4a8:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     4aa:	7983      	ldrb	r3, [r0, #6]
     4ac:	2b01      	cmp	r3, #1
     4ae:	d00e      	beq.n	4ce <at25dfx_chip_write_buffer+0x1b6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     4b0:	6a94      	ldr	r4, [r2, #40]	; 0x28
     4b2:	b2e4      	uxtb	r4, r4
		while (!spi_is_ready_to_write(chip->spi)) {
     4b4:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     4b6:	2300      	movs	r3, #0
     4b8:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(chip->spi)) {
     4ba:	2004      	movs	r0, #4
     4bc:	46b4      	mov	ip, r6
     4be:	002e      	movs	r6, r5
     4c0:	e010      	b.n	4e4 <at25dfx_chip_write_buffer+0x1cc>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     4c2:	4652      	mov	r2, sl
     4c4:	9901      	ldr	r1, [sp, #4]
     4c6:	6828      	ldr	r0, [r5, #0]
     4c8:	4b4e      	ldr	r3, [pc, #312]	; (604 <at25dfx_chip_write_buffer+0x2ec>)
     4ca:	4798      	blx	r3
     4cc:	e7b3      	b.n	436 <at25dfx_chip_write_buffer+0x11e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     4ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
     4d0:	05db      	lsls	r3, r3, #23
     4d2:	0ddc      	lsrs	r4, r3, #23
     4d4:	e7ee      	b.n	4b4 <at25dfx_chip_write_buffer+0x19c>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     4d6:	79ab      	ldrb	r3, [r5, #6]
     4d8:	2b01      	cmp	r3, #1
     4da:	d01a      	beq.n	512 <at25dfx_chip_write_buffer+0x1fa>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     4dc:	6a94      	ldr	r4, [r2, #40]	; 0x28
     4de:	b2e4      	uxtb	r4, r4
	} while (status_reg & AT25DFX_STATUS_BUSY);
     4e0:	4221      	tst	r1, r4
     4e2:	d01a      	beq.n	51a <at25dfx_chip_write_buffer+0x202>
	SercomSpi *const spi_module = &(module->hw->SPI);
     4e4:	6833      	ldr	r3, [r6, #0]
     4e6:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     4e8:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
     4ea:	420b      	tst	r3, r1
     4ec:	d0fc      	beq.n	4e8 <at25dfx_chip_write_buffer+0x1d0>
     4ee:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     4f0:	420b      	tst	r3, r1
     4f2:	d001      	beq.n	4f8 <at25dfx_chip_write_buffer+0x1e0>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     4f4:	4643      	mov	r3, r8
     4f6:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
     4f8:	6835      	ldr	r5, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     4fa:	682a      	ldr	r2, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     4fc:	7e13      	ldrb	r3, [r2, #24]
     4fe:	4203      	tst	r3, r0
     500:	d0fc      	beq.n	4fc <at25dfx_chip_write_buffer+0x1e4>
     502:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
     504:	4203      	tst	r3, r0
     506:	d0eb      	beq.n	4e0 <at25dfx_chip_write_buffer+0x1c8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     508:	8b53      	ldrh	r3, [r2, #26]
     50a:	4203      	tst	r3, r0
     50c:	d0e3      	beq.n	4d6 <at25dfx_chip_write_buffer+0x1be>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     50e:	8350      	strh	r0, [r2, #26]
     510:	e7e1      	b.n	4d6 <at25dfx_chip_write_buffer+0x1be>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     512:	6a94      	ldr	r4, [r2, #40]	; 0x28
     514:	05e4      	lsls	r4, r4, #23
     516:	0de4      	lsrs	r4, r4, #23
     518:	e7e2      	b.n	4e0 <at25dfx_chip_write_buffer+0x1c8>
     51a:	0035      	movs	r5, r6
     51c:	4666      	mov	r6, ip
	port_pin_set_output_level(chip->cs_pin, true);
     51e:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     520:	09d1      	lsrs	r1, r2, #7
		return NULL;
     522:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     524:	2900      	cmp	r1, #0
     526:	d104      	bne.n	532 <at25dfx_chip_write_buffer+0x21a>
		return &(ports[port_index]->Group[group_index]);
     528:	0953      	lsrs	r3, r2, #5
     52a:	01db      	lsls	r3, r3, #7
     52c:	4934      	ldr	r1, [pc, #208]	; (600 <at25dfx_chip_write_buffer+0x2e8>)
     52e:	468c      	mov	ip, r1
     530:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     532:	211f      	movs	r1, #31
     534:	4011      	ands	r1, r2
     536:	2201      	movs	r2, #1
     538:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     53a:	619a      	str	r2, [r3, #24]
		return STATUS_ERR_IO;
     53c:	2010      	movs	r0, #16
	if (status_reg & AT25DFX_STATUS_ERROR) {
     53e:	06a3      	lsls	r3, r4, #26
     540:	d44f      	bmi.n	5e2 <at25dfx_chip_write_buffer+0x2ca>
	length -= cmd.length;
     542:	4653      	mov	r3, sl
     544:	1aff      	subs	r7, r7, r3
     546:	b2bb      	uxth	r3, r7
     548:	0019      	movs	r1, r3
	while (length && (status == STATUS_OK)) {
     54a:	9a01      	ldr	r2, [sp, #4]
     54c:	4691      	mov	r9, r2
	return STATUS_OK;
     54e:	2000      	movs	r0, #0
     550:	2b00      	cmp	r3, #0
     552:	d046      	beq.n	5e2 <at25dfx_chip_write_buffer+0x2ca>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     554:	231f      	movs	r3, #31
     556:	469b      	mov	fp, r3
     558:	2401      	movs	r4, #1
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     55a:	4b2a      	ldr	r3, [pc, #168]	; (604 <at25dfx_chip_write_buffer+0x2ec>)
     55c:	4698      	mov	r8, r3
     55e:	4653      	mov	r3, sl
     560:	9301      	str	r3, [sp, #4]
     562:	468a      	mov	sl, r1
     564:	e058      	b.n	618 <at25dfx_chip_write_buffer+0x300>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     566:	001a      	movs	r2, r3
     568:	4649      	mov	r1, r9
     56a:	6828      	ldr	r0, [r5, #0]
     56c:	4b25      	ldr	r3, [pc, #148]	; (604 <at25dfx_chip_write_buffer+0x2ec>)
     56e:	4798      	blx	r3
     570:	e0a4      	b.n	6bc <at25dfx_chip_write_buffer+0x3a4>
     572:	6a90      	ldr	r0, [r2, #40]	; 0x28
     574:	05c0      	lsls	r0, r0, #23
     576:	0dc0      	lsrs	r0, r0, #23
     578:	e0e1      	b.n	73e <at25dfx_chip_write_buffer+0x426>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     57a:	79bb      	ldrb	r3, [r7, #6]
     57c:	2b01      	cmp	r3, #1
     57e:	d01a      	beq.n	5b6 <at25dfx_chip_write_buffer+0x29e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     580:	6a90      	ldr	r0, [r2, #40]	; 0x28
     582:	b2c0      	uxtb	r0, r0
	} while (status_reg & AT25DFX_STATUS_BUSY);
     584:	4204      	tst	r4, r0
     586:	d01a      	beq.n	5be <at25dfx_chip_write_buffer+0x2a6>
	SercomSpi *const spi_module = &(module->hw->SPI);
     588:	682b      	ldr	r3, [r5, #0]
     58a:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     58c:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
     58e:	4223      	tst	r3, r4
     590:	d0fc      	beq.n	58c <at25dfx_chip_write_buffer+0x274>
     592:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     594:	4223      	tst	r3, r4
     596:	d001      	beq.n	59c <at25dfx_chip_write_buffer+0x284>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     598:	2300      	movs	r3, #0
     59a:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
     59c:	682f      	ldr	r7, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     59e:	683a      	ldr	r2, [r7, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     5a0:	7e13      	ldrb	r3, [r2, #24]
     5a2:	420b      	tst	r3, r1
     5a4:	d0fc      	beq.n	5a0 <at25dfx_chip_write_buffer+0x288>
     5a6:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
     5a8:	420b      	tst	r3, r1
     5aa:	d0eb      	beq.n	584 <at25dfx_chip_write_buffer+0x26c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     5ac:	8b53      	ldrh	r3, [r2, #26]
     5ae:	420b      	tst	r3, r1
     5b0:	d0e3      	beq.n	57a <at25dfx_chip_write_buffer+0x262>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     5b2:	8351      	strh	r1, [r2, #26]
     5b4:	e7e1      	b.n	57a <at25dfx_chip_write_buffer+0x262>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     5b6:	6a90      	ldr	r0, [r2, #40]	; 0x28
     5b8:	05c0      	lsls	r0, r0, #23
     5ba:	0dc0      	lsrs	r0, r0, #23
     5bc:	e7e2      	b.n	584 <at25dfx_chip_write_buffer+0x26c>
	port_pin_set_output_level(chip->cs_pin, true);
     5be:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     5c0:	09d9      	lsrs	r1, r3, #7
		return NULL;
     5c2:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     5c4:	2900      	cmp	r1, #0
     5c6:	d104      	bne.n	5d2 <at25dfx_chip_write_buffer+0x2ba>
		return &(ports[port_index]->Group[group_index]);
     5c8:	095a      	lsrs	r2, r3, #5
     5ca:	01d2      	lsls	r2, r2, #7
     5cc:	490c      	ldr	r1, [pc, #48]	; (600 <at25dfx_chip_write_buffer+0x2e8>)
     5ce:	468c      	mov	ip, r1
     5d0:	4462      	add	r2, ip
     5d2:	4659      	mov	r1, fp
     5d4:	400b      	ands	r3, r1
     5d6:	0021      	movs	r1, r4
     5d8:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
     5da:	6191      	str	r1, [r2, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
     5dc:	0683      	lsls	r3, r0, #26
     5de:	d513      	bpl.n	608 <at25dfx_chip_write_buffer+0x2f0>
		return STATUS_ERR_IO;
     5e0:	2010      	movs	r0, #16
	_at25dfx_spi_unlock(chip->spi);
     5e2:	682b      	ldr	r3, [r5, #0]
	module->locked = false;
     5e4:	2200      	movs	r2, #0
     5e6:	711a      	strb	r2, [r3, #4]
	return status;
     5e8:	e6c2      	b.n	370 <at25dfx_chip_write_buffer+0x58>
     5ea:	4b04      	ldr	r3, [pc, #16]	; (5fc <at25dfx_chip_write_buffer+0x2e4>)
     5ec:	4798      	blx	r3
		return status;
     5ee:	2005      	movs	r0, #5
     5f0:	e6be      	b.n	370 <at25dfx_chip_write_buffer+0x58>
     5f2:	46c0      	nop			; (mov r8, r8)
     5f4:	0000b530 	.word	0x0000b530
     5f8:	000017ad 	.word	0x000017ad
     5fc:	000017ed 	.word	0x000017ed
     600:	41004400 	.word	0x41004400
     604:	000012e1 	.word	0x000012e1
		length -= cmd.length;
     608:	4653      	mov	r3, sl
     60a:	9a01      	ldr	r2, [sp, #4]
     60c:	1a9b      	subs	r3, r3, r2
     60e:	b29b      	uxth	r3, r3
     610:	469a      	mov	sl, r3
	while (length && (status == STATUS_OK)) {
     612:	2b00      	cmp	r3, #0
     614:	d100      	bne.n	618 <at25dfx_chip_write_buffer+0x300>
     616:	e094      	b.n	742 <at25dfx_chip_write_buffer+0x42a>
	cmd_buffer[0] = cmd.opcode;
     618:	ab02      	add	r3, sp, #8
     61a:	2206      	movs	r2, #6
     61c:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     61e:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     620:	09d9      	lsrs	r1, r3, #7
		return NULL;
     622:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     624:	2900      	cmp	r1, #0
     626:	d104      	bne.n	632 <at25dfx_chip_write_buffer+0x31a>
		return &(ports[port_index]->Group[group_index]);
     628:	095a      	lsrs	r2, r3, #5
     62a:	01d2      	lsls	r2, r2, #7
     62c:	4946      	ldr	r1, [pc, #280]	; (748 <at25dfx_chip_write_buffer+0x430>)
     62e:	468c      	mov	ip, r1
     630:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     632:	4659      	mov	r1, fp
     634:	400b      	ands	r3, r1
     636:	0021      	movs	r1, r4
     638:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
     63a:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     63c:	0022      	movs	r2, r4
     63e:	a902      	add	r1, sp, #8
     640:	6828      	ldr	r0, [r5, #0]
     642:	47c0      	blx	r8
	port_pin_set_output_level(chip->cs_pin, true);
     644:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     646:	09d9      	lsrs	r1, r3, #7
		return NULL;
     648:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     64a:	2900      	cmp	r1, #0
     64c:	d104      	bne.n	658 <at25dfx_chip_write_buffer+0x340>
		return &(ports[port_index]->Group[group_index]);
     64e:	095a      	lsrs	r2, r3, #5
     650:	01d2      	lsls	r2, r2, #7
     652:	493d      	ldr	r1, [pc, #244]	; (748 <at25dfx_chip_write_buffer+0x430>)
     654:	468c      	mov	ip, r1
     656:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     658:	4659      	mov	r1, fp
     65a:	400b      	ands	r3, r1
     65c:	0021      	movs	r1, r4
     65e:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
     660:	6191      	str	r1, [r2, #24]
		cmd.address += cmd.length;
     662:	9a01      	ldr	r2, [sp, #4]
     664:	4694      	mov	ip, r2
     666:	4466      	add	r6, ip
		cmd.data.tx += cmd.length;
     668:	44e1      	add	r9, ip
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
     66a:	4657      	mov	r7, sl
     66c:	2380      	movs	r3, #128	; 0x80
     66e:	005b      	lsls	r3, r3, #1
     670:	459a      	cmp	sl, r3
     672:	d901      	bls.n	678 <at25dfx_chip_write_buffer+0x360>
     674:	4b35      	ldr	r3, [pc, #212]	; (74c <at25dfx_chip_write_buffer+0x434>)
     676:	881f      	ldrh	r7, [r3, #0]
     678:	b2bb      	uxth	r3, r7
     67a:	9301      	str	r3, [sp, #4]
	cmd_buffer[0] = cmd.opcode;
     67c:	2302      	movs	r3, #2
     67e:	aa02      	add	r2, sp, #8
     680:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     682:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     684:	0a33      	lsrs	r3, r6, #8
     686:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     688:	0c33      	lsrs	r3, r6, #16
     68a:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     68c:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     68e:	09d9      	lsrs	r1, r3, #7
		return NULL;
     690:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     692:	2900      	cmp	r1, #0
     694:	d104      	bne.n	6a0 <at25dfx_chip_write_buffer+0x388>
		return &(ports[port_index]->Group[group_index]);
     696:	095a      	lsrs	r2, r3, #5
     698:	01d2      	lsls	r2, r2, #7
     69a:	492b      	ldr	r1, [pc, #172]	; (748 <at25dfx_chip_write_buffer+0x430>)
     69c:	468c      	mov	ip, r1
     69e:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     6a0:	4659      	mov	r1, fp
     6a2:	400b      	ands	r3, r1
     6a4:	0021      	movs	r1, r4
     6a6:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
     6a8:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     6aa:	2204      	movs	r2, #4
     6ac:	a902      	add	r1, sp, #8
     6ae:	6828      	ldr	r0, [r5, #0]
     6b0:	4b27      	ldr	r3, [pc, #156]	; (750 <at25dfx_chip_write_buffer+0x438>)
     6b2:	4798      	blx	r3
	if (cmd.length) {
     6b4:	9b01      	ldr	r3, [sp, #4]
     6b6:	2b00      	cmp	r3, #0
     6b8:	d000      	beq.n	6bc <at25dfx_chip_write_buffer+0x3a4>
     6ba:	e754      	b.n	566 <at25dfx_chip_write_buffer+0x24e>
	port_pin_set_output_level(chip->cs_pin, true);
     6bc:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     6be:	09d9      	lsrs	r1, r3, #7
		return NULL;
     6c0:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     6c2:	2900      	cmp	r1, #0
     6c4:	d104      	bne.n	6d0 <at25dfx_chip_write_buffer+0x3b8>
		return &(ports[port_index]->Group[group_index]);
     6c6:	095a      	lsrs	r2, r3, #5
     6c8:	01d2      	lsls	r2, r2, #7
     6ca:	491f      	ldr	r1, [pc, #124]	; (748 <at25dfx_chip_write_buffer+0x430>)
     6cc:	468c      	mov	ip, r1
     6ce:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     6d0:	4659      	mov	r1, fp
     6d2:	400b      	ands	r3, r1
     6d4:	0021      	movs	r1, r4
     6d6:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
     6d8:	6191      	str	r1, [r2, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
     6da:	682b      	ldr	r3, [r5, #0]
     6dc:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     6de:	7e13      	ldrb	r3, [r2, #24]
	while (!spi_is_ready_to_write(chip->spi)) {
     6e0:	4223      	tst	r3, r4
     6e2:	d0fc      	beq.n	6de <at25dfx_chip_write_buffer+0x3c6>
	port_pin_set_output_level(chip->cs_pin, false);
     6e4:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     6e6:	09d9      	lsrs	r1, r3, #7
		return NULL;
     6e8:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     6ea:	2900      	cmp	r1, #0
     6ec:	d104      	bne.n	6f8 <at25dfx_chip_write_buffer+0x3e0>
		return &(ports[port_index]->Group[group_index]);
     6ee:	095a      	lsrs	r2, r3, #5
     6f0:	01d2      	lsls	r2, r2, #7
     6f2:	4915      	ldr	r1, [pc, #84]	; (748 <at25dfx_chip_write_buffer+0x430>)
     6f4:	468c      	mov	ip, r1
     6f6:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     6f8:	4659      	mov	r1, fp
     6fa:	400b      	ands	r3, r1
     6fc:	0021      	movs	r1, r4
     6fe:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
     700:	6151      	str	r1, [r2, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
     702:	682b      	ldr	r3, [r5, #0]
     704:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     706:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     708:	4222      	tst	r2, r4
     70a:	d001      	beq.n	710 <at25dfx_chip_write_buffer+0x3f8>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     70c:	2205      	movs	r2, #5
     70e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
     710:	682b      	ldr	r3, [r5, #0]
     712:	469c      	mov	ip, r3
	SercomSpi *const spi_module = &(module->hw->SPI);
     714:	681a      	ldr	r2, [r3, #0]
     716:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     718:	7e13      	ldrb	r3, [r2, #24]
     71a:	420b      	tst	r3, r1
     71c:	d0fc      	beq.n	718 <at25dfx_chip_write_buffer+0x400>
     71e:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
     720:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
     722:	075b      	lsls	r3, r3, #29
     724:	d50b      	bpl.n	73e <at25dfx_chip_write_buffer+0x426>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     726:	8b53      	ldrh	r3, [r2, #26]
     728:	075b      	lsls	r3, r3, #29
     72a:	d501      	bpl.n	730 <at25dfx_chip_write_buffer+0x418>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     72c:	2304      	movs	r3, #4
     72e:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     730:	4663      	mov	r3, ip
     732:	799b      	ldrb	r3, [r3, #6]
     734:	2b01      	cmp	r3, #1
     736:	d100      	bne.n	73a <at25dfx_chip_write_buffer+0x422>
     738:	e71b      	b.n	572 <at25dfx_chip_write_buffer+0x25a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     73a:	6a90      	ldr	r0, [r2, #40]	; 0x28
     73c:	b2c0      	uxtb	r0, r0
		while (!spi_is_ready_to_read(chip->spi)) {
     73e:	2104      	movs	r1, #4
     740:	e722      	b.n	588 <at25dfx_chip_write_buffer+0x270>
	return STATUS_OK;
     742:	2000      	movs	r0, #0
     744:	e74d      	b.n	5e2 <at25dfx_chip_write_buffer+0x2ca>
     746:	46c0      	nop			; (mov r8, r8)
     748:	41004400 	.word	0x41004400
     74c:	0000b52c 	.word	0x0000b52c
     750:	000012e1 	.word	0x000012e1

00000754 <at25dfx_chip_erase>:
{
     754:	b5f0      	push	{r4, r5, r6, r7, lr}
     756:	b083      	sub	sp, #12
     758:	0004      	movs	r4, r0
	status = _at25dfx_spi_lock(chip->spi);
     75a:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
     75c:	4b64      	ldr	r3, [pc, #400]	; (8f0 <at25dfx_chip_erase+0x19c>)
     75e:	4798      	blx	r3
	if (module->locked) {
     760:	792b      	ldrb	r3, [r5, #4]
     762:	2b00      	cmp	r3, #0
     764:	d000      	beq.n	768 <at25dfx_chip_erase+0x14>
     766:	e0be      	b.n	8e6 <at25dfx_chip_erase+0x192>
		module->locked = true;
     768:	3301      	adds	r3, #1
     76a:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
     76c:	4b61      	ldr	r3, [pc, #388]	; (8f4 <at25dfx_chip_erase+0x1a0>)
     76e:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     770:	2306      	movs	r3, #6
     772:	466a      	mov	r2, sp
     774:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     776:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     778:	09d1      	lsrs	r1, r2, #7
		return NULL;
     77a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     77c:	2900      	cmp	r1, #0
     77e:	d104      	bne.n	78a <at25dfx_chip_erase+0x36>
		return &(ports[port_index]->Group[group_index]);
     780:	0953      	lsrs	r3, r2, #5
     782:	01db      	lsls	r3, r3, #7
     784:	495c      	ldr	r1, [pc, #368]	; (8f8 <at25dfx_chip_erase+0x1a4>)
     786:	468c      	mov	ip, r1
     788:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     78a:	211f      	movs	r1, #31
     78c:	4011      	ands	r1, r2
     78e:	2201      	movs	r2, #1
     790:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     792:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     794:	2201      	movs	r2, #1
     796:	4669      	mov	r1, sp
     798:	6820      	ldr	r0, [r4, #0]
     79a:	4b58      	ldr	r3, [pc, #352]	; (8fc <at25dfx_chip_erase+0x1a8>)
     79c:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     79e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     7a0:	09d1      	lsrs	r1, r2, #7
		return NULL;
     7a2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     7a4:	2900      	cmp	r1, #0
     7a6:	d104      	bne.n	7b2 <at25dfx_chip_erase+0x5e>
		return &(ports[port_index]->Group[group_index]);
     7a8:	0953      	lsrs	r3, r2, #5
     7aa:	01db      	lsls	r3, r3, #7
     7ac:	4952      	ldr	r1, [pc, #328]	; (8f8 <at25dfx_chip_erase+0x1a4>)
     7ae:	468c      	mov	ip, r1
     7b0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7b2:	211f      	movs	r1, #31
     7b4:	4011      	ands	r1, r2
     7b6:	2201      	movs	r2, #1
     7b8:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     7ba:	619a      	str	r2, [r3, #24]
	cmd_buffer[0] = cmd.opcode;
     7bc:	23c7      	movs	r3, #199	; 0xc7
     7be:	466a      	mov	r2, sp
     7c0:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     7c2:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     7c4:	09d1      	lsrs	r1, r2, #7
		return NULL;
     7c6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     7c8:	2900      	cmp	r1, #0
     7ca:	d104      	bne.n	7d6 <at25dfx_chip_erase+0x82>
		return &(ports[port_index]->Group[group_index]);
     7cc:	0953      	lsrs	r3, r2, #5
     7ce:	01db      	lsls	r3, r3, #7
     7d0:	4949      	ldr	r1, [pc, #292]	; (8f8 <at25dfx_chip_erase+0x1a4>)
     7d2:	468c      	mov	ip, r1
     7d4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7d6:	211f      	movs	r1, #31
     7d8:	4011      	ands	r1, r2
     7da:	2201      	movs	r2, #1
     7dc:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     7de:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     7e0:	2201      	movs	r2, #1
     7e2:	4669      	mov	r1, sp
     7e4:	6820      	ldr	r0, [r4, #0]
     7e6:	4b45      	ldr	r3, [pc, #276]	; (8fc <at25dfx_chip_erase+0x1a8>)
     7e8:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     7ea:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     7ec:	09d1      	lsrs	r1, r2, #7
		return NULL;
     7ee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     7f0:	2900      	cmp	r1, #0
     7f2:	d104      	bne.n	7fe <at25dfx_chip_erase+0xaa>
		return &(ports[port_index]->Group[group_index]);
     7f4:	0953      	lsrs	r3, r2, #5
     7f6:	01db      	lsls	r3, r3, #7
     7f8:	493f      	ldr	r1, [pc, #252]	; (8f8 <at25dfx_chip_erase+0x1a4>)
     7fa:	468c      	mov	ip, r1
     7fc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7fe:	211f      	movs	r1, #31
     800:	4011      	ands	r1, r2
     802:	2201      	movs	r2, #1
     804:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     806:	619a      	str	r2, [r3, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
     808:	6823      	ldr	r3, [r4, #0]
     80a:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_ready_to_write(chip->spi)) {
     80c:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     80e:	7e0b      	ldrb	r3, [r1, #24]
     810:	4213      	tst	r3, r2
     812:	d0fc      	beq.n	80e <at25dfx_chip_erase+0xba>
	port_pin_set_output_level(chip->cs_pin, false);
     814:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     816:	09d1      	lsrs	r1, r2, #7
		return NULL;
     818:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     81a:	2900      	cmp	r1, #0
     81c:	d104      	bne.n	828 <at25dfx_chip_erase+0xd4>
		return &(ports[port_index]->Group[group_index]);
     81e:	0953      	lsrs	r3, r2, #5
     820:	01db      	lsls	r3, r3, #7
     822:	4935      	ldr	r1, [pc, #212]	; (8f8 <at25dfx_chip_erase+0x1a4>)
     824:	468c      	mov	ip, r1
     826:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     828:	211f      	movs	r1, #31
     82a:	4011      	ands	r1, r2
     82c:	2201      	movs	r2, #1
     82e:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     830:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
     832:	6823      	ldr	r3, [r4, #0]
     834:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     836:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     838:	07d2      	lsls	r2, r2, #31
     83a:	d501      	bpl.n	840 <at25dfx_chip_erase+0xec>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     83c:	2205      	movs	r2, #5
     83e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
     840:	6820      	ldr	r0, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     842:	6802      	ldr	r2, [r0, #0]
     844:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     846:	7e13      	ldrb	r3, [r2, #24]
     848:	420b      	tst	r3, r1
     84a:	d0fc      	beq.n	846 <at25dfx_chip_erase+0xf2>
     84c:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
     84e:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
     850:	075b      	lsls	r3, r3, #29
     852:	d509      	bpl.n	868 <at25dfx_chip_erase+0x114>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     854:	8b53      	ldrh	r3, [r2, #26]
     856:	075b      	lsls	r3, r3, #29
     858:	d501      	bpl.n	85e <at25dfx_chip_erase+0x10a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     85a:	2304      	movs	r3, #4
     85c:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     85e:	7983      	ldrb	r3, [r0, #6]
     860:	2b01      	cmp	r3, #1
     862:	d005      	beq.n	870 <at25dfx_chip_erase+0x11c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     864:	6a95      	ldr	r5, [r2, #40]	; 0x28
     866:	b2ed      	uxtb	r5, r5
		while (!spi_is_ready_to_write(chip->spi)) {
     868:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     86a:	2700      	movs	r7, #0
		while (!spi_is_ready_to_read(chip->spi)) {
     86c:	2004      	movs	r0, #4
     86e:	e00a      	b.n	886 <at25dfx_chip_erase+0x132>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     870:	6a95      	ldr	r5, [r2, #40]	; 0x28
     872:	05ed      	lsls	r5, r5, #23
     874:	0ded      	lsrs	r5, r5, #23
     876:	e7f7      	b.n	868 <at25dfx_chip_erase+0x114>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     878:	79b3      	ldrb	r3, [r6, #6]
     87a:	2b01      	cmp	r3, #1
     87c:	d019      	beq.n	8b2 <at25dfx_chip_erase+0x15e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     87e:	6a95      	ldr	r5, [r2, #40]	; 0x28
     880:	b2ed      	uxtb	r5, r5
	} while (status_reg & AT25DFX_STATUS_BUSY);
     882:	4229      	tst	r1, r5
     884:	d019      	beq.n	8ba <at25dfx_chip_erase+0x166>
	SercomSpi *const spi_module = &(module->hw->SPI);
     886:	6823      	ldr	r3, [r4, #0]
     888:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     88a:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
     88c:	420b      	tst	r3, r1
     88e:	d0fc      	beq.n	88a <at25dfx_chip_erase+0x136>
     890:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     892:	420b      	tst	r3, r1
     894:	d000      	beq.n	898 <at25dfx_chip_erase+0x144>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     896:	6297      	str	r7, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
     898:	6826      	ldr	r6, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     89a:	6832      	ldr	r2, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     89c:	7e13      	ldrb	r3, [r2, #24]
     89e:	4203      	tst	r3, r0
     8a0:	d0fc      	beq.n	89c <at25dfx_chip_erase+0x148>
     8a2:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
     8a4:	4203      	tst	r3, r0
     8a6:	d0ec      	beq.n	882 <at25dfx_chip_erase+0x12e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     8a8:	8b53      	ldrh	r3, [r2, #26]
     8aa:	4203      	tst	r3, r0
     8ac:	d0e4      	beq.n	878 <at25dfx_chip_erase+0x124>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     8ae:	8350      	strh	r0, [r2, #26]
     8b0:	e7e2      	b.n	878 <at25dfx_chip_erase+0x124>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     8b2:	6a95      	ldr	r5, [r2, #40]	; 0x28
     8b4:	05ed      	lsls	r5, r5, #23
     8b6:	0ded      	lsrs	r5, r5, #23
     8b8:	e7e3      	b.n	882 <at25dfx_chip_erase+0x12e>
	port_pin_set_output_level(chip->cs_pin, true);
     8ba:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     8bc:	09d1      	lsrs	r1, r2, #7
		return NULL;
     8be:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     8c0:	2900      	cmp	r1, #0
     8c2:	d104      	bne.n	8ce <at25dfx_chip_erase+0x17a>
		return &(ports[port_index]->Group[group_index]);
     8c4:	0953      	lsrs	r3, r2, #5
     8c6:	01db      	lsls	r3, r3, #7
     8c8:	490b      	ldr	r1, [pc, #44]	; (8f8 <at25dfx_chip_erase+0x1a4>)
     8ca:	468c      	mov	ip, r1
     8cc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     8ce:	211f      	movs	r1, #31
     8d0:	4011      	ands	r1, r2
     8d2:	2201      	movs	r2, #1
     8d4:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     8d6:	619a      	str	r2, [r3, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
     8d8:	06a8      	lsls	r0, r5, #26
	return STATUS_OK;
     8da:	0fc0      	lsrs	r0, r0, #31
     8dc:	0100      	lsls	r0, r0, #4
	_at25dfx_spi_unlock(chip->spi);
     8de:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     8e0:	2200      	movs	r2, #0
     8e2:	711a      	strb	r2, [r3, #4]
	return status;
     8e4:	e002      	b.n	8ec <at25dfx_chip_erase+0x198>
     8e6:	4b03      	ldr	r3, [pc, #12]	; (8f4 <at25dfx_chip_erase+0x1a0>)
     8e8:	4798      	blx	r3
		return status;
     8ea:	2005      	movs	r0, #5
}
     8ec:	b003      	add	sp, #12
     8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8f0:	000017ad 	.word	0x000017ad
     8f4:	000017ed 	.word	0x000017ed
     8f8:	41004400 	.word	0x41004400
     8fc:	000012e1 	.word	0x000012e1

00000900 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
     900:	b570      	push	{r4, r5, r6, lr}
     902:	b082      	sub	sp, #8
     904:	0004      	movs	r4, r0
     906:	000d      	movs	r5, r1
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     908:	6806      	ldr	r6, [r0, #0]
	cpu_irq_enter_critical();
     90a:	4b35      	ldr	r3, [pc, #212]	; (9e0 <at25dfx_chip_set_global_sector_protect+0xe0>)
     90c:	4798      	blx	r3
	if (module->locked) {
     90e:	7933      	ldrb	r3, [r6, #4]
     910:	2b00      	cmp	r3, #0
     912:	d160      	bne.n	9d6 <at25dfx_chip_set_global_sector_protect+0xd6>
		module->locked = true;
     914:	3301      	adds	r3, #1
     916:	7133      	strb	r3, [r6, #4]
	cpu_irq_leave_critical();
     918:	4b32      	ldr	r3, [pc, #200]	; (9e4 <at25dfx_chip_set_global_sector_protect+0xe4>)
     91a:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     91c:	2306      	movs	r3, #6
     91e:	466a      	mov	r2, sp
     920:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     922:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     924:	09d1      	lsrs	r1, r2, #7
		return NULL;
     926:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     928:	2900      	cmp	r1, #0
     92a:	d104      	bne.n	936 <at25dfx_chip_set_global_sector_protect+0x36>
		return &(ports[port_index]->Group[group_index]);
     92c:	0953      	lsrs	r3, r2, #5
     92e:	01db      	lsls	r3, r3, #7
     930:	492d      	ldr	r1, [pc, #180]	; (9e8 <at25dfx_chip_set_global_sector_protect+0xe8>)
     932:	468c      	mov	ip, r1
     934:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     936:	211f      	movs	r1, #31
     938:	4011      	ands	r1, r2
     93a:	2201      	movs	r2, #1
     93c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     93e:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     940:	2201      	movs	r2, #1
     942:	4669      	mov	r1, sp
     944:	6820      	ldr	r0, [r4, #0]
     946:	4b29      	ldr	r3, [pc, #164]	; (9ec <at25dfx_chip_set_global_sector_protect+0xec>)
     948:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     94a:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     94c:	09d1      	lsrs	r1, r2, #7
		return NULL;
     94e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     950:	2900      	cmp	r1, #0
     952:	d104      	bne.n	95e <at25dfx_chip_set_global_sector_protect+0x5e>
		return &(ports[port_index]->Group[group_index]);
     954:	0953      	lsrs	r3, r2, #5
     956:	01db      	lsls	r3, r3, #7
     958:	4923      	ldr	r1, [pc, #140]	; (9e8 <at25dfx_chip_set_global_sector_protect+0xe8>)
     95a:	468c      	mov	ip, r1
     95c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     95e:	211f      	movs	r1, #31
     960:	4011      	ands	r1, r2
     962:	2201      	movs	r2, #1
     964:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     966:	619a      	str	r2, [r3, #24]
		return status;
	}

	_at25dfx_chip_enable_write(chip);

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
     968:	233c      	movs	r3, #60	; 0x3c
     96a:	1e6a      	subs	r2, r5, #1
     96c:	4195      	sbcs	r5, r2
     96e:	426d      	negs	r5, r5
     970:	402b      	ands	r3, r5
     972:	466a      	mov	r2, sp
     974:	71d3      	strb	r3, [r2, #7]
	cmd_buffer[0] = cmd.opcode;
     976:	2301      	movs	r3, #1
     978:	466a      	mov	r2, sp
     97a:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     97c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     97e:	09d1      	lsrs	r1, r2, #7
		return NULL;
     980:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     982:	2900      	cmp	r1, #0
     984:	d104      	bne.n	990 <at25dfx_chip_set_global_sector_protect+0x90>
		return &(ports[port_index]->Group[group_index]);
     986:	0953      	lsrs	r3, r2, #5
     988:	01db      	lsls	r3, r3, #7
     98a:	4917      	ldr	r1, [pc, #92]	; (9e8 <at25dfx_chip_set_global_sector_protect+0xe8>)
     98c:	468c      	mov	ip, r1
     98e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     990:	211f      	movs	r1, #31
     992:	4011      	ands	r1, r2
     994:	2201      	movs	r2, #1
     996:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     998:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     99a:	2201      	movs	r2, #1
     99c:	4669      	mov	r1, sp
     99e:	6820      	ldr	r0, [r4, #0]
     9a0:	4d12      	ldr	r5, [pc, #72]	; (9ec <at25dfx_chip_set_global_sector_protect+0xec>)
     9a2:	47a8      	blx	r5
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     9a4:	2201      	movs	r2, #1
     9a6:	466b      	mov	r3, sp
     9a8:	1dd9      	adds	r1, r3, #7
     9aa:	6820      	ldr	r0, [r4, #0]
     9ac:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
     9ae:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     9b0:	09d1      	lsrs	r1, r2, #7
		return NULL;
     9b2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     9b4:	2900      	cmp	r1, #0
     9b6:	d104      	bne.n	9c2 <at25dfx_chip_set_global_sector_protect+0xc2>
		return &(ports[port_index]->Group[group_index]);
     9b8:	0953      	lsrs	r3, r2, #5
     9ba:	01db      	lsls	r3, r3, #7
     9bc:	490a      	ldr	r1, [pc, #40]	; (9e8 <at25dfx_chip_set_global_sector_protect+0xe8>)
     9be:	468c      	mov	ip, r1
     9c0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9c2:	211f      	movs	r1, #31
     9c4:	4011      	ands	r1, r2
     9c6:	2201      	movs	r2, #1
     9c8:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     9ca:	619a      	str	r2, [r3, #24]
	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
     9cc:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     9ce:	2200      	movs	r2, #0
     9d0:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
     9d2:	2000      	movs	r0, #0
     9d4:	e002      	b.n	9dc <at25dfx_chip_set_global_sector_protect+0xdc>
     9d6:	4b03      	ldr	r3, [pc, #12]	; (9e4 <at25dfx_chip_set_global_sector_protect+0xe4>)
     9d8:	4798      	blx	r3
		return status;
     9da:	2005      	movs	r0, #5
}
     9dc:	b002      	add	sp, #8
     9de:	bd70      	pop	{r4, r5, r6, pc}
     9e0:	000017ad 	.word	0x000017ad
     9e4:	000017ed 	.word	0x000017ed
     9e8:	41004400 	.word	0x41004400
     9ec:	000012e1 	.word	0x000012e1

000009f0 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
     9f0:	b530      	push	{r4, r5, lr}
     9f2:	b083      	sub	sp, #12
     9f4:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     9f6:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
     9f8:	4b1c      	ldr	r3, [pc, #112]	; (a6c <at25dfx_chip_wake+0x7c>)
     9fa:	4798      	blx	r3
	if (module->locked) {
     9fc:	792b      	ldrb	r3, [r5, #4]
     9fe:	2b00      	cmp	r3, #0
     a00:	d12e      	bne.n	a60 <at25dfx_chip_wake+0x70>
		module->locked = true;
     a02:	3301      	adds	r3, #1
     a04:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
     a06:	4b1a      	ldr	r3, [pc, #104]	; (a70 <at25dfx_chip_wake+0x80>)
     a08:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     a0a:	23ab      	movs	r3, #171	; 0xab
     a0c:	466a      	mov	r2, sp
     a0e:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     a10:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     a12:	09d1      	lsrs	r1, r2, #7
		return NULL;
     a14:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     a16:	2900      	cmp	r1, #0
     a18:	d104      	bne.n	a24 <at25dfx_chip_wake+0x34>
		return &(ports[port_index]->Group[group_index]);
     a1a:	0953      	lsrs	r3, r2, #5
     a1c:	01db      	lsls	r3, r3, #7
     a1e:	4915      	ldr	r1, [pc, #84]	; (a74 <at25dfx_chip_wake+0x84>)
     a20:	468c      	mov	ip, r1
     a22:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a24:	211f      	movs	r1, #31
     a26:	4011      	ands	r1, r2
     a28:	2201      	movs	r2, #1
     a2a:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     a2c:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     a2e:	2201      	movs	r2, #1
     a30:	4669      	mov	r1, sp
     a32:	6820      	ldr	r0, [r4, #0]
     a34:	4b10      	ldr	r3, [pc, #64]	; (a78 <at25dfx_chip_wake+0x88>)
     a36:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     a38:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     a3a:	09d1      	lsrs	r1, r2, #7
		return NULL;
     a3c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     a3e:	2900      	cmp	r1, #0
     a40:	d104      	bne.n	a4c <at25dfx_chip_wake+0x5c>
		return &(ports[port_index]->Group[group_index]);
     a42:	0953      	lsrs	r3, r2, #5
     a44:	01db      	lsls	r3, r3, #7
     a46:	490b      	ldr	r1, [pc, #44]	; (a74 <at25dfx_chip_wake+0x84>)
     a48:	468c      	mov	ip, r1
     a4a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a4c:	211f      	movs	r1, #31
     a4e:	4011      	ands	r1, r2
     a50:	2201      	movs	r2, #1
     a52:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     a54:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
     a56:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     a58:	2200      	movs	r2, #0
     a5a:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
     a5c:	2000      	movs	r0, #0
     a5e:	e002      	b.n	a66 <at25dfx_chip_wake+0x76>
     a60:	4b03      	ldr	r3, [pc, #12]	; (a70 <at25dfx_chip_wake+0x80>)
     a62:	4798      	blx	r3
		return status;
     a64:	2005      	movs	r0, #5
     a66:	b003      	add	sp, #12
     a68:	bd30      	pop	{r4, r5, pc}
     a6a:	46c0      	nop			; (mov r8, r8)
     a6c:	000017ad 	.word	0x000017ad
     a70:	000017ed 	.word	0x000017ed
     a74:	41004400 	.word	0x41004400
     a78:	000012e1 	.word	0x000012e1

00000a7c <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     a7c:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     a7e:	2200      	movs	r2, #0
     a80:	2300      	movs	r3, #0
     a82:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     a84:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     a86:	2100      	movs	r1, #0
     a88:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     a8a:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     a8c:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     a8e:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     a90:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     a92:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     a94:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     a96:	24c0      	movs	r4, #192	; 0xc0
     a98:	0164      	lsls	r4, r4, #5
     a9a:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     a9c:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     a9e:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     aa0:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     aa2:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     aa4:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     aa6:	242a      	movs	r4, #42	; 0x2a
     aa8:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     aaa:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     aac:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     aae:	3c06      	subs	r4, #6
     ab0:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     ab2:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     ab4:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     ab6:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     ab8:	232b      	movs	r3, #43	; 0x2b
     aba:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     abc:	3301      	adds	r3, #1
     abe:	54c1      	strb	r1, [r0, r3]
}
     ac0:	bd10      	pop	{r4, pc}
	...

00000ac4 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ac6:	46d6      	mov	lr, sl
     ac8:	464f      	mov	r7, r9
     aca:	4646      	mov	r6, r8
     acc:	b5c0      	push	{r6, r7, lr}
     ace:	b096      	sub	sp, #88	; 0x58
     ad0:	0007      	movs	r7, r0
     ad2:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     ad4:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     ad6:	4ac6      	ldr	r2, [pc, #792]	; (df0 <adc_init+0x32c>)
     ad8:	6a10      	ldr	r0, [r2, #32]
     ada:	2380      	movs	r3, #128	; 0x80
     adc:	025b      	lsls	r3, r3, #9
     ade:	4303      	orrs	r3, r0
     ae0:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     ae2:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     ae4:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     ae6:	07db      	lsls	r3, r3, #31
     ae8:	d505      	bpl.n	af6 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     aea:	b016      	add	sp, #88	; 0x58
     aec:	bc1c      	pop	{r2, r3, r4}
     aee:	4690      	mov	r8, r2
     af0:	4699      	mov	r9, r3
     af2:	46a2      	mov	sl, r4
     af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     af6:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     af8:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     afa:	079b      	lsls	r3, r3, #30
     afc:	d4f5      	bmi.n	aea <adc_init+0x26>
	module_inst->reference = config->reference;
     afe:	7873      	ldrb	r3, [r6, #1]
     b00:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     b02:	2b00      	cmp	r3, #0
     b04:	d104      	bne.n	b10 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     b06:	4abb      	ldr	r2, [pc, #748]	; (df4 <adc_init+0x330>)
     b08:	6c13      	ldr	r3, [r2, #64]	; 0x40
     b0a:	2104      	movs	r1, #4
     b0c:	430b      	orrs	r3, r1
     b0e:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     b10:	2300      	movs	r3, #0
     b12:	60bb      	str	r3, [r7, #8]
     b14:	60fb      	str	r3, [r7, #12]
     b16:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     b18:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     b1a:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     b1c:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     b1e:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     b20:	4bb5      	ldr	r3, [pc, #724]	; (df8 <adc_init+0x334>)
     b22:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     b24:	232a      	movs	r3, #42	; 0x2a
     b26:	5cf3      	ldrb	r3, [r6, r3]
     b28:	2b00      	cmp	r3, #0
     b2a:	d105      	bne.n	b38 <adc_init+0x74>
     b2c:	7d33      	ldrb	r3, [r6, #20]
     b2e:	2b00      	cmp	r3, #0
     b30:	d102      	bne.n	b38 <adc_init+0x74>
		module_inst->software_trigger = true;
     b32:	3301      	adds	r3, #1
     b34:	777b      	strb	r3, [r7, #29]
     b36:	e001      	b.n	b3c <adc_init+0x78>
		module_inst->software_trigger = false;
     b38:	2300      	movs	r3, #0
     b3a:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     b3c:	683b      	ldr	r3, [r7, #0]
     b3e:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     b40:	7833      	ldrb	r3, [r6, #0]
     b42:	466a      	mov	r2, sp
     b44:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     b46:	4669      	mov	r1, sp
     b48:	201e      	movs	r0, #30
     b4a:	4bac      	ldr	r3, [pc, #688]	; (dfc <adc_init+0x338>)
     b4c:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     b4e:	201e      	movs	r0, #30
     b50:	4bab      	ldr	r3, [pc, #684]	; (e00 <adc_init+0x33c>)
     b52:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     b54:	232c      	movs	r3, #44	; 0x2c
     b56:	5cf2      	ldrb	r2, [r6, r3]
     b58:	2a00      	cmp	r2, #0
     b5a:	d054      	beq.n	c06 <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     b5c:	3b01      	subs	r3, #1
     b5e:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     b60:	7b33      	ldrb	r3, [r6, #12]
     b62:	18eb      	adds	r3, r5, r3
     b64:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     b66:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     b68:	b2c9      	uxtb	r1, r1
     b6a:	428b      	cmp	r3, r1
     b6c:	d221      	bcs.n	bb2 <adc_init+0xee>
     b6e:	1952      	adds	r2, r2, r5
     b70:	b2d3      	uxtb	r3, r2
     b72:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     b74:	4ba3      	ldr	r3, [pc, #652]	; (e04 <adc_init+0x340>)
     b76:	469a      	mov	sl, r3
     b78:	e003      	b.n	b82 <adc_init+0xbe>
			offset++;
     b7a:	3501      	adds	r5, #1
     b7c:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     b7e:	454d      	cmp	r5, r9
     b80:	d017      	beq.n	bb2 <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     b82:	240f      	movs	r4, #15
     b84:	402c      	ands	r4, r5
     b86:	7b33      	ldrb	r3, [r6, #12]
     b88:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     b8a:	2250      	movs	r2, #80	; 0x50
     b8c:	499e      	ldr	r1, [pc, #632]	; (e08 <adc_init+0x344>)
     b8e:	a802      	add	r0, sp, #8
     b90:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     b92:	2c13      	cmp	r4, #19
     b94:	d8f1      	bhi.n	b7a <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     b96:	00a4      	lsls	r4, r4, #2
     b98:	ab02      	add	r3, sp, #8
     b9a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b9c:	a901      	add	r1, sp, #4
     b9e:	2300      	movs	r3, #0
     ba0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     ba2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     ba4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     ba6:	3301      	adds	r3, #1
     ba8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     baa:	b2c0      	uxtb	r0, r0
     bac:	4b97      	ldr	r3, [pc, #604]	; (e0c <adc_init+0x348>)
     bae:	4798      	blx	r3
     bb0:	e7e3      	b.n	b7a <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     bb2:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     bb4:	2250      	movs	r2, #80	; 0x50
     bb6:	4994      	ldr	r1, [pc, #592]	; (e08 <adc_init+0x344>)
     bb8:	a802      	add	r0, sp, #8
     bba:	4b92      	ldr	r3, [pc, #584]	; (e04 <adc_init+0x340>)
     bbc:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     bbe:	2c13      	cmp	r4, #19
     bc0:	d913      	bls.n	bea <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     bc2:	7d73      	ldrb	r3, [r6, #21]
     bc4:	009b      	lsls	r3, r3, #2
     bc6:	b2db      	uxtb	r3, r3
     bc8:	4642      	mov	r2, r8
     bca:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     bcc:	7db3      	ldrb	r3, [r6, #22]
     bce:	01db      	lsls	r3, r3, #7
     bd0:	7872      	ldrb	r2, [r6, #1]
     bd2:	4313      	orrs	r3, r2
     bd4:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     bd6:	4642      	mov	r2, r8
     bd8:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     bda:	7933      	ldrb	r3, [r6, #4]
     bdc:	2b34      	cmp	r3, #52	; 0x34
     bde:	d900      	bls.n	be2 <adc_init+0x11e>
     be0:	e17b      	b.n	eda <adc_init+0x416>
     be2:	009b      	lsls	r3, r3, #2
     be4:	4a8a      	ldr	r2, [pc, #552]	; (e10 <adc_init+0x34c>)
     be6:	58d3      	ldr	r3, [r2, r3]
     be8:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     bea:	00a4      	lsls	r4, r4, #2
     bec:	ab02      	add	r3, sp, #8
     bee:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     bf0:	a901      	add	r1, sp, #4
     bf2:	2300      	movs	r3, #0
     bf4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     bf6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     bf8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     bfa:	3301      	adds	r3, #1
     bfc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     bfe:	b2c0      	uxtb	r0, r0
     c00:	4b82      	ldr	r3, [pc, #520]	; (e0c <adc_init+0x348>)
     c02:	4798      	blx	r3
     c04:	e7dd      	b.n	bc2 <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     c06:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     c08:	2250      	movs	r2, #80	; 0x50
     c0a:	497f      	ldr	r1, [pc, #508]	; (e08 <adc_init+0x344>)
     c0c:	a802      	add	r0, sp, #8
     c0e:	4b7d      	ldr	r3, [pc, #500]	; (e04 <adc_init+0x340>)
     c10:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     c12:	2c13      	cmp	r4, #19
     c14:	d915      	bls.n	c42 <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     c16:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     c18:	2250      	movs	r2, #80	; 0x50
     c1a:	497b      	ldr	r1, [pc, #492]	; (e08 <adc_init+0x344>)
     c1c:	a802      	add	r0, sp, #8
     c1e:	4b79      	ldr	r3, [pc, #484]	; (e04 <adc_init+0x340>)
     c20:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     c22:	2c13      	cmp	r4, #19
     c24:	d8cd      	bhi.n	bc2 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     c26:	00a4      	lsls	r4, r4, #2
     c28:	ab02      	add	r3, sp, #8
     c2a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c2c:	a901      	add	r1, sp, #4
     c2e:	2300      	movs	r3, #0
     c30:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     c32:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     c34:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     c36:	3301      	adds	r3, #1
     c38:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     c3a:	b2c0      	uxtb	r0, r0
     c3c:	4b73      	ldr	r3, [pc, #460]	; (e0c <adc_init+0x348>)
     c3e:	4798      	blx	r3
     c40:	e7bf      	b.n	bc2 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     c42:	00a4      	lsls	r4, r4, #2
     c44:	ab02      	add	r3, sp, #8
     c46:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c48:	a901      	add	r1, sp, #4
     c4a:	2300      	movs	r3, #0
     c4c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     c4e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     c50:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     c52:	3301      	adds	r3, #1
     c54:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     c56:	b2c0      	uxtb	r0, r0
     c58:	4b6c      	ldr	r3, [pc, #432]	; (e0c <adc_init+0x348>)
     c5a:	4798      	blx	r3
     c5c:	e7db      	b.n	c16 <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     c5e:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     c60:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     c62:	2102      	movs	r1, #2
     c64:	e01a      	b.n	c9c <adc_init+0x1d8>
		adjres = config->divide_result;
     c66:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     c68:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     c6a:	2410      	movs	r4, #16
     c6c:	e016      	b.n	c9c <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     c6e:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     c70:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     c72:	2101      	movs	r1, #1
     c74:	e012      	b.n	c9c <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     c76:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     c78:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     c7a:	2100      	movs	r1, #0
     c7c:	e00e      	b.n	c9c <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     c7e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     c80:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     c82:	2100      	movs	r1, #0
     c84:	e00a      	b.n	c9c <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     c86:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     c88:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     c8a:	2100      	movs	r1, #0
     c8c:	e006      	b.n	c9c <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     c8e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     c90:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     c92:	2100      	movs	r1, #0
     c94:	e002      	b.n	c9c <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     c96:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     c98:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     c9a:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     c9c:	0109      	lsls	r1, r1, #4
     c9e:	2270      	movs	r2, #112	; 0x70
     ca0:	400a      	ands	r2, r1
     ca2:	4313      	orrs	r3, r2
     ca4:	4642      	mov	r2, r8
     ca6:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     ca8:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     caa:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     cac:	2b3f      	cmp	r3, #63	; 0x3f
     cae:	d900      	bls.n	cb2 <adc_init+0x1ee>
     cb0:	e71b      	b.n	aea <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     cb2:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     cb4:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     cb6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     cb8:	b25b      	sxtb	r3, r3
     cba:	2b00      	cmp	r3, #0
     cbc:	dbfb      	blt.n	cb6 <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     cbe:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     cc0:	8872      	ldrh	r2, [r6, #2]
     cc2:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     cc4:	2224      	movs	r2, #36	; 0x24
     cc6:	5cb2      	ldrb	r2, [r6, r2]
     cc8:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     cca:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     ccc:	7d32      	ldrb	r2, [r6, #20]
     cce:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     cd0:	4313      	orrs	r3, r2
     cd2:	7cb2      	ldrb	r2, [r6, #18]
     cd4:	0052      	lsls	r2, r2, #1
     cd6:	4313      	orrs	r3, r2
     cd8:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     cda:	4642      	mov	r2, r8
     cdc:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     cde:	7e33      	ldrb	r3, [r6, #24]
     ce0:	2b00      	cmp	r3, #0
     ce2:	d020      	beq.n	d26 <adc_init+0x262>
		switch (resolution) {
     ce4:	2c10      	cmp	r4, #16
     ce6:	d100      	bne.n	cea <adc_init+0x226>
     ce8:	e0d9      	b.n	e9e <adc_init+0x3da>
     cea:	d800      	bhi.n	cee <adc_init+0x22a>
     cec:	e098      	b.n	e20 <adc_init+0x35c>
     cee:	2c20      	cmp	r4, #32
     cf0:	d100      	bne.n	cf4 <adc_init+0x230>
     cf2:	e0b6      	b.n	e62 <adc_init+0x39e>
     cf4:	2c30      	cmp	r4, #48	; 0x30
     cf6:	d116      	bne.n	d26 <adc_init+0x262>
			if (config->differential_mode &&
     cf8:	7cf2      	ldrb	r2, [r6, #19]
     cfa:	2a00      	cmp	r2, #0
     cfc:	d00a      	beq.n	d14 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     cfe:	69f2      	ldr	r2, [r6, #28]
     d00:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     d02:	2017      	movs	r0, #23
			if (config->differential_mode &&
     d04:	2aff      	cmp	r2, #255	; 0xff
     d06:	d900      	bls.n	d0a <adc_init+0x246>
     d08:	e6ef      	b.n	aea <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     d0a:	6a32      	ldr	r2, [r6, #32]
     d0c:	3280      	adds	r2, #128	; 0x80
     d0e:	2aff      	cmp	r2, #255	; 0xff
     d10:	d900      	bls.n	d14 <adc_init+0x250>
     d12:	e6ea      	b.n	aea <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     d14:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     d16:	69f2      	ldr	r2, [r6, #28]
     d18:	2aff      	cmp	r2, #255	; 0xff
     d1a:	dd00      	ble.n	d1e <adc_init+0x25a>
     d1c:	e6e5      	b.n	aea <adc_init+0x26>
     d1e:	6a32      	ldr	r2, [r6, #32]
     d20:	2aff      	cmp	r2, #255	; 0xff
     d22:	dd00      	ble.n	d26 <adc_init+0x262>
     d24:	e6e1      	b.n	aea <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     d26:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     d28:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     d2a:	b252      	sxtb	r2, r2
     d2c:	2a00      	cmp	r2, #0
     d2e:	dbfb      	blt.n	d28 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     d30:	4642      	mov	r2, r8
     d32:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     d34:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     d36:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     d38:	b25b      	sxtb	r3, r3
     d3a:	2b00      	cmp	r3, #0
     d3c:	dbfb      	blt.n	d36 <adc_init+0x272>
	adc_module->WINLT.reg =
     d3e:	8bb3      	ldrh	r3, [r6, #28]
     d40:	4642      	mov	r2, r8
     d42:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     d44:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     d46:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     d48:	b25b      	sxtb	r3, r3
     d4a:	2b00      	cmp	r3, #0
     d4c:	dbfb      	blt.n	d46 <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     d4e:	8c33      	ldrh	r3, [r6, #32]
     d50:	4642      	mov	r2, r8
     d52:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     d54:	232c      	movs	r3, #44	; 0x2c
     d56:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     d58:	2b00      	cmp	r3, #0
     d5a:	d005      	beq.n	d68 <adc_init+0x2a4>
		inputs_to_scan--;
     d5c:	3b01      	subs	r3, #1
     d5e:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     d60:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     d62:	2b0f      	cmp	r3, #15
     d64:	d900      	bls.n	d68 <adc_init+0x2a4>
     d66:	e6c0      	b.n	aea <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     d68:	222b      	movs	r2, #43	; 0x2b
     d6a:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     d6c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     d6e:	290f      	cmp	r1, #15
     d70:	d900      	bls.n	d74 <adc_init+0x2b0>
     d72:	e6ba      	b.n	aea <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     d74:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     d76:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     d78:	b252      	sxtb	r2, r2
     d7a:	2a00      	cmp	r2, #0
     d7c:	dbfb      	blt.n	d76 <adc_init+0x2b2>
			config->negative_input |
     d7e:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     d80:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     d82:	4302      	orrs	r2, r0
     d84:	68b0      	ldr	r0, [r6, #8]
     d86:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     d88:	0509      	lsls	r1, r1, #20
			config->negative_input |
     d8a:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     d8c:	041b      	lsls	r3, r3, #16
			config->negative_input |
     d8e:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     d90:	4642      	mov	r2, r8
     d92:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     d94:	232a      	movs	r3, #42	; 0x2a
     d96:	5cf3      	ldrb	r3, [r6, r3]
     d98:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     d9a:	230f      	movs	r3, #15
     d9c:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     d9e:	3315      	adds	r3, #21
     da0:	5cf3      	ldrb	r3, [r6, r3]
     da2:	2b00      	cmp	r3, #0
     da4:	d012      	beq.n	dcc <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     da6:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     da8:	4a1a      	ldr	r2, [pc, #104]	; (e14 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     daa:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     dac:	4293      	cmp	r3, r2
     dae:	d900      	bls.n	db2 <adc_init+0x2ee>
     db0:	e69b      	b.n	aea <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     db2:	4642      	mov	r2, r8
     db4:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     db6:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     db8:	2380      	movs	r3, #128	; 0x80
     dba:	011b      	lsls	r3, r3, #4
     dbc:	18d3      	adds	r3, r2, r3
     dbe:	4915      	ldr	r1, [pc, #84]	; (e14 <adc_init+0x350>)
     dc0:	b29b      	uxth	r3, r3
     dc2:	428b      	cmp	r3, r1
     dc4:	d900      	bls.n	dc8 <adc_init+0x304>
     dc6:	e690      	b.n	aea <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     dc8:	4643      	mov	r3, r8
     dca:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     dcc:	4b12      	ldr	r3, [pc, #72]	; (e18 <adc_init+0x354>)
     dce:	681b      	ldr	r3, [r3, #0]
     dd0:	015b      	lsls	r3, r3, #5
     dd2:	22e0      	movs	r2, #224	; 0xe0
     dd4:	00d2      	lsls	r2, r2, #3
     dd6:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     dd8:	4a10      	ldr	r2, [pc, #64]	; (e1c <adc_init+0x358>)
     dda:	6851      	ldr	r1, [r2, #4]
     ddc:	0149      	lsls	r1, r1, #5
     dde:	6812      	ldr	r2, [r2, #0]
     de0:	0ed2      	lsrs	r2, r2, #27
     de2:	430a      	orrs	r2, r1
     de4:	b2d2      	uxtb	r2, r2
			) |
     de6:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     de8:	4642      	mov	r2, r8
     dea:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     dec:	2000      	movs	r0, #0
     dee:	e67c      	b.n	aea <adc_init+0x26>
     df0:	40000400 	.word	0x40000400
     df4:	40000800 	.word	0x40000800
     df8:	200024a4 	.word	0x200024a4
     dfc:	00002b41 	.word	0x00002b41
     e00:	00002ab5 	.word	0x00002ab5
     e04:	0000a2f7 	.word	0x0000a2f7
     e08:	0000b62c 	.word	0x0000b62c
     e0c:	00002c39 	.word	0x00002c39
     e10:	0000b558 	.word	0x0000b558
     e14:	00000fff 	.word	0x00000fff
     e18:	00806024 	.word	0x00806024
     e1c:	00806020 	.word	0x00806020
		switch (resolution) {
     e20:	2c00      	cmp	r4, #0
     e22:	d000      	beq.n	e26 <adc_init+0x362>
     e24:	e77f      	b.n	d26 <adc_init+0x262>
			if (config->differential_mode &&
     e26:	7cf2      	ldrb	r2, [r6, #19]
     e28:	2a00      	cmp	r2, #0
     e2a:	d00f      	beq.n	e4c <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     e2c:	69f2      	ldr	r2, [r6, #28]
     e2e:	2180      	movs	r1, #128	; 0x80
     e30:	0109      	lsls	r1, r1, #4
     e32:	468c      	mov	ip, r1
     e34:	4462      	add	r2, ip
			if (config->differential_mode &&
     e36:	492a      	ldr	r1, [pc, #168]	; (ee0 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     e38:	2017      	movs	r0, #23
			if (config->differential_mode &&
     e3a:	428a      	cmp	r2, r1
     e3c:	d900      	bls.n	e40 <adc_init+0x37c>
     e3e:	e654      	b.n	aea <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     e40:	6a32      	ldr	r2, [r6, #32]
     e42:	4462      	add	r2, ip
     e44:	4926      	ldr	r1, [pc, #152]	; (ee0 <adc_init+0x41c>)
     e46:	428a      	cmp	r2, r1
     e48:	d900      	bls.n	e4c <adc_init+0x388>
     e4a:	e64e      	b.n	aea <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     e4c:	4a24      	ldr	r2, [pc, #144]	; (ee0 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     e4e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     e50:	69f1      	ldr	r1, [r6, #28]
     e52:	4291      	cmp	r1, r2
     e54:	dd00      	ble.n	e58 <adc_init+0x394>
     e56:	e648      	b.n	aea <adc_init+0x26>
     e58:	6a31      	ldr	r1, [r6, #32]
     e5a:	4291      	cmp	r1, r2
     e5c:	dd00      	ble.n	e60 <adc_init+0x39c>
     e5e:	e644      	b.n	aea <adc_init+0x26>
     e60:	e761      	b.n	d26 <adc_init+0x262>
			if (config->differential_mode &&
     e62:	7cf2      	ldrb	r2, [r6, #19]
     e64:	2a00      	cmp	r2, #0
     e66:	d00f      	beq.n	e88 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     e68:	69f2      	ldr	r2, [r6, #28]
     e6a:	2180      	movs	r1, #128	; 0x80
     e6c:	0089      	lsls	r1, r1, #2
     e6e:	468c      	mov	ip, r1
     e70:	4462      	add	r2, ip
			if (config->differential_mode &&
     e72:	491c      	ldr	r1, [pc, #112]	; (ee4 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     e74:	2017      	movs	r0, #23
			if (config->differential_mode &&
     e76:	428a      	cmp	r2, r1
     e78:	d900      	bls.n	e7c <adc_init+0x3b8>
     e7a:	e636      	b.n	aea <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     e7c:	6a32      	ldr	r2, [r6, #32]
     e7e:	4462      	add	r2, ip
     e80:	4918      	ldr	r1, [pc, #96]	; (ee4 <adc_init+0x420>)
     e82:	428a      	cmp	r2, r1
     e84:	d900      	bls.n	e88 <adc_init+0x3c4>
     e86:	e630      	b.n	aea <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     e88:	4a16      	ldr	r2, [pc, #88]	; (ee4 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     e8a:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     e8c:	69f1      	ldr	r1, [r6, #28]
     e8e:	4291      	cmp	r1, r2
     e90:	dd00      	ble.n	e94 <adc_init+0x3d0>
     e92:	e62a      	b.n	aea <adc_init+0x26>
     e94:	6a31      	ldr	r1, [r6, #32]
     e96:	4291      	cmp	r1, r2
     e98:	dd00      	ble.n	e9c <adc_init+0x3d8>
     e9a:	e626      	b.n	aea <adc_init+0x26>
     e9c:	e743      	b.n	d26 <adc_init+0x262>
			if (config->differential_mode &&
     e9e:	7cf2      	ldrb	r2, [r6, #19]
     ea0:	2a00      	cmp	r2, #0
     ea2:	d00f      	beq.n	ec4 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     ea4:	69f2      	ldr	r2, [r6, #28]
     ea6:	2180      	movs	r1, #128	; 0x80
     ea8:	0209      	lsls	r1, r1, #8
     eaa:	468c      	mov	ip, r1
     eac:	4462      	add	r2, ip
			if (config->differential_mode &&
     eae:	490e      	ldr	r1, [pc, #56]	; (ee8 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     eb0:	2017      	movs	r0, #23
			if (config->differential_mode &&
     eb2:	428a      	cmp	r2, r1
     eb4:	d900      	bls.n	eb8 <adc_init+0x3f4>
     eb6:	e618      	b.n	aea <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     eb8:	6a32      	ldr	r2, [r6, #32]
     eba:	4462      	add	r2, ip
     ebc:	490a      	ldr	r1, [pc, #40]	; (ee8 <adc_init+0x424>)
     ebe:	428a      	cmp	r2, r1
     ec0:	d900      	bls.n	ec4 <adc_init+0x400>
     ec2:	e612      	b.n	aea <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     ec4:	4a08      	ldr	r2, [pc, #32]	; (ee8 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     ec6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     ec8:	69f1      	ldr	r1, [r6, #28]
     eca:	4291      	cmp	r1, r2
     ecc:	dd00      	ble.n	ed0 <adc_init+0x40c>
     ece:	e60c      	b.n	aea <adc_init+0x26>
     ed0:	6a31      	ldr	r1, [r6, #32]
     ed2:	4291      	cmp	r1, r2
     ed4:	dd00      	ble.n	ed8 <adc_init+0x414>
     ed6:	e608      	b.n	aea <adc_init+0x26>
     ed8:	e725      	b.n	d26 <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     eda:	2017      	movs	r0, #23
     edc:	e605      	b.n	aea <adc_init+0x26>
     ede:	46c0      	nop			; (mov r8, r8)
     ee0:	00000fff 	.word	0x00000fff
     ee4:	000003ff 	.word	0x000003ff
     ee8:	0000ffff 	.word	0x0000ffff

00000eec <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     eec:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     eee:	4b2f      	ldr	r3, [pc, #188]	; (fac <ADC_Handler+0xc0>)
     ef0:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     ef2:	682b      	ldr	r3, [r5, #0]
     ef4:	7e1a      	ldrb	r2, [r3, #24]
     ef6:	7ddc      	ldrb	r4, [r3, #23]
     ef8:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     efa:	07e2      	lsls	r2, r4, #31
     efc:	d416      	bmi.n	f2c <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     efe:	0763      	lsls	r3, r4, #29
     f00:	d508      	bpl.n	f14 <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     f02:	2304      	movs	r3, #4
     f04:	682a      	ldr	r2, [r5, #0]
     f06:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     f08:	7eeb      	ldrb	r3, [r5, #27]
     f0a:	079b      	lsls	r3, r3, #30
     f0c:	d502      	bpl.n	f14 <ADC_Handler+0x28>
     f0e:	7eab      	ldrb	r3, [r5, #26]
     f10:	079b      	lsls	r3, r3, #30
     f12:	d442      	bmi.n	f9a <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     f14:	07a3      	lsls	r3, r4, #30
     f16:	d508      	bpl.n	f2a <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     f18:	2302      	movs	r3, #2
     f1a:	682a      	ldr	r2, [r5, #0]
     f1c:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     f1e:	7eeb      	ldrb	r3, [r5, #27]
     f20:	075b      	lsls	r3, r3, #29
     f22:	d502      	bpl.n	f2a <ADC_Handler+0x3e>
     f24:	7eab      	ldrb	r3, [r5, #26]
     f26:	075b      	lsls	r3, r3, #29
     f28:	d43b      	bmi.n	fa2 <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     f2a:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     f2c:	2201      	movs	r2, #1
     f2e:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     f30:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     f32:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     f34:	b25b      	sxtb	r3, r3
     f36:	2b00      	cmp	r3, #0
     f38:	dbfb      	blt.n	f32 <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     f3a:	6969      	ldr	r1, [r5, #20]
     f3c:	1c8b      	adds	r3, r1, #2
     f3e:	616b      	str	r3, [r5, #20]
     f40:	8b53      	ldrh	r3, [r2, #26]
     f42:	b29b      	uxth	r3, r3
     f44:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     f46:	8b2b      	ldrh	r3, [r5, #24]
     f48:	3b01      	subs	r3, #1
     f4a:	b29b      	uxth	r3, r3
     f4c:	832b      	strh	r3, [r5, #24]
     f4e:	2b00      	cmp	r3, #0
     f50:	d011      	beq.n	f76 <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     f52:	7f6b      	ldrb	r3, [r5, #29]
     f54:	2b00      	cmp	r3, #0
     f56:	d0d2      	beq.n	efe <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     f58:	682a      	ldr	r2, [r5, #0]
     f5a:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     f5c:	b25b      	sxtb	r3, r3
     f5e:	2b00      	cmp	r3, #0
     f60:	dbfb      	blt.n	f5a <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     f62:	7b13      	ldrb	r3, [r2, #12]
     f64:	2102      	movs	r1, #2
     f66:	430b      	orrs	r3, r1
     f68:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     f6a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     f6c:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     f6e:	b25b      	sxtb	r3, r3
     f70:	2b00      	cmp	r3, #0
     f72:	dbfb      	blt.n	f6c <ADC_Handler+0x80>
     f74:	e7c3      	b.n	efe <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     f76:	2301      	movs	r3, #1
     f78:	682a      	ldr	r2, [r5, #0]
     f7a:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     f7c:	7f2b      	ldrb	r3, [r5, #28]
     f7e:	2b05      	cmp	r3, #5
     f80:	d1bd      	bne.n	efe <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     f82:	2300      	movs	r3, #0
     f84:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     f86:	7eeb      	ldrb	r3, [r5, #27]
     f88:	07db      	lsls	r3, r3, #31
     f8a:	d5b8      	bpl.n	efe <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     f8c:	7eab      	ldrb	r3, [r5, #26]
     f8e:	07db      	lsls	r3, r3, #31
     f90:	d5b5      	bpl.n	efe <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     f92:	0028      	movs	r0, r5
     f94:	68ab      	ldr	r3, [r5, #8]
     f96:	4798      	blx	r3
     f98:	e7b1      	b.n	efe <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     f9a:	0028      	movs	r0, r5
     f9c:	68eb      	ldr	r3, [r5, #12]
     f9e:	4798      	blx	r3
     fa0:	e7b8      	b.n	f14 <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     fa2:	692b      	ldr	r3, [r5, #16]
     fa4:	0028      	movs	r0, r5
     fa6:	4798      	blx	r3
}
     fa8:	e7bf      	b.n	f2a <ADC_Handler+0x3e>
     faa:	46c0      	nop			; (mov r8, r8)
     fac:	200024a4 	.word	0x200024a4

00000fb0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fb2:	b08b      	sub	sp, #44	; 0x2c
     fb4:	0005      	movs	r5, r0
     fb6:	000c      	movs	r4, r1
     fb8:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     fba:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     fbc:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     fbe:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     fc0:	079b      	lsls	r3, r3, #30
     fc2:	d501      	bpl.n	fc8 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     fc4:	b00b      	add	sp, #44	; 0x2c
     fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     fc8:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     fca:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     fcc:	07db      	lsls	r3, r3, #31
     fce:	d4f9      	bmi.n	fc4 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     fd0:	0008      	movs	r0, r1
     fd2:	4b6f      	ldr	r3, [pc, #444]	; (1190 <spi_init+0x1e0>)
     fd4:	4798      	blx	r3
     fd6:	4a6f      	ldr	r2, [pc, #444]	; (1194 <spi_init+0x1e4>)
     fd8:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     fda:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     fdc:	2301      	movs	r3, #1
     fde:	40bb      	lsls	r3, r7
     fe0:	430b      	orrs	r3, r1
     fe2:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     fe4:	a909      	add	r1, sp, #36	; 0x24
     fe6:	2724      	movs	r7, #36	; 0x24
     fe8:	5df3      	ldrb	r3, [r6, r7]
     fea:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     fec:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     fee:	b2c3      	uxtb	r3, r0
     ff0:	9301      	str	r3, [sp, #4]
     ff2:	0018      	movs	r0, r3
     ff4:	4b68      	ldr	r3, [pc, #416]	; (1198 <spi_init+0x1e8>)
     ff6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     ff8:	9801      	ldr	r0, [sp, #4]
     ffa:	4b68      	ldr	r3, [pc, #416]	; (119c <spi_init+0x1ec>)
     ffc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     ffe:	5df0      	ldrb	r0, [r6, r7]
    1000:	2100      	movs	r1, #0
    1002:	4b67      	ldr	r3, [pc, #412]	; (11a0 <spi_init+0x1f0>)
    1004:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1006:	7833      	ldrb	r3, [r6, #0]
    1008:	2b01      	cmp	r3, #1
    100a:	d03f      	beq.n	108c <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    100c:	7833      	ldrb	r3, [r6, #0]
    100e:	2b00      	cmp	r3, #0
    1010:	d103      	bne.n	101a <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    1012:	6823      	ldr	r3, [r4, #0]
    1014:	2208      	movs	r2, #8
    1016:	4313      	orrs	r3, r2
    1018:	6023      	str	r3, [r4, #0]
    101a:	002b      	movs	r3, r5
    101c:	330c      	adds	r3, #12
    101e:	0029      	movs	r1, r5
    1020:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    1022:	2200      	movs	r2, #0
    1024:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1026:	428b      	cmp	r3, r1
    1028:	d1fc      	bne.n	1024 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    102a:	2300      	movs	r3, #0
    102c:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    102e:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    1030:	2400      	movs	r4, #0
    1032:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    1034:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    1036:	3336      	adds	r3, #54	; 0x36
    1038:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    103a:	3301      	adds	r3, #1
    103c:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    103e:	3301      	adds	r3, #1
    1040:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    1042:	3b35      	subs	r3, #53	; 0x35
    1044:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    1046:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1048:	6828      	ldr	r0, [r5, #0]
    104a:	4b51      	ldr	r3, [pc, #324]	; (1190 <spi_init+0x1e0>)
    104c:	4798      	blx	r3
    104e:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    1050:	4954      	ldr	r1, [pc, #336]	; (11a4 <spi_init+0x1f4>)
    1052:	4b55      	ldr	r3, [pc, #340]	; (11a8 <spi_init+0x1f8>)
    1054:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1056:	00bf      	lsls	r7, r7, #2
    1058:	4b54      	ldr	r3, [pc, #336]	; (11ac <spi_init+0x1fc>)
    105a:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    105c:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    105e:	ab04      	add	r3, sp, #16
    1060:	2280      	movs	r2, #128	; 0x80
    1062:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1064:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1066:	3a7f      	subs	r2, #127	; 0x7f
    1068:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    106a:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    106c:	7833      	ldrb	r3, [r6, #0]
    106e:	2b00      	cmp	r3, #0
    1070:	d102      	bne.n	1078 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1072:	2200      	movs	r2, #0
    1074:	ab04      	add	r3, sp, #16
    1076:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1078:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    107a:	9305      	str	r3, [sp, #20]
    107c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    107e:	9306      	str	r3, [sp, #24]
    1080:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1082:	9307      	str	r3, [sp, #28]
    1084:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1086:	9308      	str	r3, [sp, #32]
    1088:	2400      	movs	r4, #0
    108a:	e00b      	b.n	10a4 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    108c:	6823      	ldr	r3, [r4, #0]
    108e:	220c      	movs	r2, #12
    1090:	4313      	orrs	r3, r2
    1092:	6023      	str	r3, [r4, #0]
    1094:	e7ba      	b.n	100c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1096:	0038      	movs	r0, r7
    1098:	4b45      	ldr	r3, [pc, #276]	; (11b0 <spi_init+0x200>)
    109a:	4798      	blx	r3
    109c:	e00a      	b.n	10b4 <spi_init+0x104>
    109e:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    10a0:	2c04      	cmp	r4, #4
    10a2:	d010      	beq.n	10c6 <spi_init+0x116>
    10a4:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    10a6:	00a3      	lsls	r3, r4, #2
    10a8:	aa02      	add	r2, sp, #8
    10aa:	200c      	movs	r0, #12
    10ac:	1812      	adds	r2, r2, r0
    10ae:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    10b0:	2800      	cmp	r0, #0
    10b2:	d0f0      	beq.n	1096 <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    10b4:	1c43      	adds	r3, r0, #1
    10b6:	d0f2      	beq.n	109e <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    10b8:	a904      	add	r1, sp, #16
    10ba:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    10bc:	0c00      	lsrs	r0, r0, #16
    10be:	b2c0      	uxtb	r0, r0
    10c0:	4b3c      	ldr	r3, [pc, #240]	; (11b4 <spi_init+0x204>)
    10c2:	4798      	blx	r3
    10c4:	e7eb      	b.n	109e <spi_init+0xee>
	module->mode             = config->mode;
    10c6:	7833      	ldrb	r3, [r6, #0]
    10c8:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    10ca:	7c33      	ldrb	r3, [r6, #16]
    10cc:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    10ce:	7cb3      	ldrb	r3, [r6, #18]
    10d0:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    10d2:	7d33      	ldrb	r3, [r6, #20]
    10d4:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    10d6:	2200      	movs	r2, #0
    10d8:	ab02      	add	r3, sp, #8
    10da:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    10dc:	7833      	ldrb	r3, [r6, #0]
    10de:	2b01      	cmp	r3, #1
    10e0:	d012      	beq.n	1108 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    10e2:	7833      	ldrb	r3, [r6, #0]
    10e4:	2b00      	cmp	r3, #0
    10e6:	d126      	bne.n	1136 <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    10e8:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    10ea:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    10ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    10ee:	7ff1      	ldrb	r1, [r6, #31]
    10f0:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    10f2:	7fb4      	ldrb	r4, [r6, #30]
    10f4:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    10f6:	4319      	orrs	r1, r3
    10f8:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    10fa:	2320      	movs	r3, #32
    10fc:	5cf3      	ldrb	r3, [r6, r3]
    10fe:	2b00      	cmp	r3, #0
    1100:	d01b      	beq.n	113a <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    1102:	2340      	movs	r3, #64	; 0x40
    1104:	431a      	orrs	r2, r3
    1106:	e018      	b.n	113a <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1108:	6828      	ldr	r0, [r5, #0]
    110a:	4b21      	ldr	r3, [pc, #132]	; (1190 <spi_init+0x1e0>)
    110c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    110e:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1110:	b2c0      	uxtb	r0, r0
    1112:	4b29      	ldr	r3, [pc, #164]	; (11b8 <spi_init+0x208>)
    1114:	4798      	blx	r3
    1116:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    1118:	ab02      	add	r3, sp, #8
    111a:	1d9a      	adds	r2, r3, #6
    111c:	69b0      	ldr	r0, [r6, #24]
    111e:	4b27      	ldr	r3, [pc, #156]	; (11bc <spi_init+0x20c>)
    1120:	4798      	blx	r3
    1122:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1124:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1126:	2b00      	cmp	r3, #0
    1128:	d000      	beq.n	112c <spi_init+0x17c>
    112a:	e74b      	b.n	fc4 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    112c:	ab02      	add	r3, sp, #8
    112e:	3306      	adds	r3, #6
    1130:	781b      	ldrb	r3, [r3, #0]
    1132:	733b      	strb	r3, [r7, #12]
    1134:	e7d5      	b.n	10e2 <spi_init+0x132>
	uint32_t ctrlb = 0;
    1136:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    1138:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    113a:	6873      	ldr	r3, [r6, #4]
    113c:	68b1      	ldr	r1, [r6, #8]
    113e:	430b      	orrs	r3, r1
    1140:	68f1      	ldr	r1, [r6, #12]
    1142:	430b      	orrs	r3, r1
    1144:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    1146:	7c31      	ldrb	r1, [r6, #16]
    1148:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    114a:	7c71      	ldrb	r1, [r6, #17]
    114c:	2900      	cmp	r1, #0
    114e:	d103      	bne.n	1158 <spi_init+0x1a8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1150:	491b      	ldr	r1, [pc, #108]	; (11c0 <spi_init+0x210>)
    1152:	7889      	ldrb	r1, [r1, #2]
    1154:	0789      	lsls	r1, r1, #30
    1156:	d501      	bpl.n	115c <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1158:	2180      	movs	r1, #128	; 0x80
    115a:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    115c:	7cb1      	ldrb	r1, [r6, #18]
    115e:	2900      	cmp	r1, #0
    1160:	d002      	beq.n	1168 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1162:	2180      	movs	r1, #128	; 0x80
    1164:	0289      	lsls	r1, r1, #10
    1166:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    1168:	7cf1      	ldrb	r1, [r6, #19]
    116a:	2900      	cmp	r1, #0
    116c:	d002      	beq.n	1174 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    116e:	2180      	movs	r1, #128	; 0x80
    1170:	0089      	lsls	r1, r1, #2
    1172:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    1174:	7d31      	ldrb	r1, [r6, #20]
    1176:	2900      	cmp	r1, #0
    1178:	d002      	beq.n	1180 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    117a:	2180      	movs	r1, #128	; 0x80
    117c:	0189      	lsls	r1, r1, #6
    117e:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    1180:	6839      	ldr	r1, [r7, #0]
    1182:	430b      	orrs	r3, r1
    1184:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    1186:	687b      	ldr	r3, [r7, #4]
    1188:	431a      	orrs	r2, r3
    118a:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    118c:	2000      	movs	r0, #0
    118e:	e719      	b.n	fc4 <spi_init+0x14>
    1190:	00001d65 	.word	0x00001d65
    1194:	40000400 	.word	0x40000400
    1198:	00002b41 	.word	0x00002b41
    119c:	00002ab5 	.word	0x00002ab5
    11a0:	00001ba1 	.word	0x00001ba1
    11a4:	000014f1 	.word	0x000014f1
    11a8:	00001da1 	.word	0x00001da1
    11ac:	200024ec 	.word	0x200024ec
    11b0:	00001bed 	.word	0x00001bed
    11b4:	00002c39 	.word	0x00002c39
    11b8:	00002b5d 	.word	0x00002b5d
    11bc:	00001ae3 	.word	0x00001ae3
    11c0:	41002000 	.word	0x41002000

000011c4 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    11c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11c6:	46d6      	mov	lr, sl
    11c8:	464f      	mov	r7, r9
    11ca:	b580      	push	{r7, lr}
    11cc:	b083      	sub	sp, #12
    11ce:	468c      	mov	ip, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    11d0:	2538      	movs	r5, #56	; 0x38
    11d2:	5d46      	ldrb	r6, [r0, r5]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    11d4:	3d33      	subs	r5, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    11d6:	2e05      	cmp	r6, #5
    11d8:	d075      	beq.n	12c6 <spi_read_buffer_wait+0x102>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    11da:	3512      	adds	r5, #18
	if (length == 0) {
    11dc:	2a00      	cmp	r2, #0
    11de:	d072      	beq.n	12c6 <spi_read_buffer_wait+0x102>
	}

	if (!(module->receiver_enabled)) {
    11e0:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    11e2:	3505      	adds	r5, #5
	if (!(module->receiver_enabled)) {
    11e4:	2c00      	cmp	r4, #0
    11e6:	d06e      	beq.n	12c6 <spi_read_buffer_wait+0x102>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    11e8:	7944      	ldrb	r4, [r0, #5]
    11ea:	2c00      	cmp	r4, #0
    11ec:	d103      	bne.n	11f6 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    11ee:	6804      	ldr	r4, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    11f0:	7e25      	ldrb	r5, [r4, #24]
    11f2:	07a9      	lsls	r1, r5, #30
    11f4:	d40a      	bmi.n	120c <spi_read_buffer_wait+0x48>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    11f6:	3a01      	subs	r2, #1
    11f8:	b294      	uxth	r4, r2
    11fa:	2600      	movs	r6, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    11fc:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    11fe:	2102      	movs	r1, #2
    1200:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    1202:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1204:	05db      	lsls	r3, r3, #23
    1206:	0ddb      	lsrs	r3, r3, #23
    1208:	469a      	mov	sl, r3
    120a:	e037      	b.n	127c <spi_read_buffer_wait+0xb8>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    120c:	2502      	movs	r5, #2
    120e:	7625      	strb	r5, [r4, #24]
    1210:	e7f1      	b.n	11f6 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1212:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1214:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    1216:	423b      	tst	r3, r7
    1218:	d0fc      	beq.n	1214 <spi_read_buffer_wait+0x50>
    121a:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    121c:	423b      	tst	r3, r7
    121e:	d009      	beq.n	1234 <spi_read_buffer_wait+0x70>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1220:	4653      	mov	r3, sl
    1222:	628b      	str	r3, [r1, #40]	; 0x28
    1224:	e02d      	b.n	1282 <spi_read_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1226:	7e0b      	ldrb	r3, [r1, #24]
			if (spi_is_write_complete(module)) {
    1228:	464d      	mov	r5, r9
    122a:	422b      	tst	r3, r5
    122c:	d138      	bne.n	12a0 <spi_read_buffer_wait+0xdc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    122e:	7e0b      	ldrb	r3, [r1, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    1230:	4213      	tst	r3, r2
    1232:	d045      	beq.n	12c0 <spi_read_buffer_wait+0xfc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1234:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1236:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    1238:	4213      	tst	r3, r2
    123a:	d0fc      	beq.n	1236 <spi_read_buffer_wait+0x72>
    123c:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    123e:	4213      	tst	r3, r2
    1240:	d040      	beq.n	12c4 <spi_read_buffer_wait+0x100>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1242:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    1244:	2500      	movs	r5, #0
    1246:	9501      	str	r5, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1248:	4213      	tst	r3, r2
    124a:	d002      	beq.n	1252 <spi_read_buffer_wait+0x8e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    124c:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    124e:	231e      	movs	r3, #30
    1250:	9301      	str	r3, [sp, #4]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1252:	7983      	ldrb	r3, [r0, #6]
    1254:	2b01      	cmp	r3, #1
    1256:	d027      	beq.n	12a8 <spi_read_buffer_wait+0xe4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1258:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    125a:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    125c:	9901      	ldr	r1, [sp, #4]
    125e:	2900      	cmp	r1, #0
    1260:	d137      	bne.n	12d2 <spi_read_buffer_wait+0x10e>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    1262:	1c75      	adds	r5, r6, #1
    1264:	b2ad      	uxth	r5, r5
    1266:	4661      	mov	r1, ip
    1268:	558b      	strb	r3, [r1, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    126a:	7981      	ldrb	r1, [r0, #6]
    126c:	2901      	cmp	r1, #1
    126e:	d01f      	beq.n	12b0 <spi_read_buffer_wait+0xec>
		rx_data[rx_pos++] = received_data;
    1270:	002e      	movs	r6, r5
	while (length--) {
    1272:	3c01      	subs	r4, #1
    1274:	b2a4      	uxth	r4, r4
    1276:	4b18      	ldr	r3, [pc, #96]	; (12d8 <spi_read_buffer_wait+0x114>)
    1278:	429c      	cmp	r4, r3
    127a:	d01f      	beq.n	12bc <spi_read_buffer_wait+0xf8>
		if (module->mode == SPI_MODE_MASTER) {
    127c:	7943      	ldrb	r3, [r0, #5]
    127e:	2b01      	cmp	r3, #1
    1280:	d0c7      	beq.n	1212 <spi_read_buffer_wait+0x4e>
		if (module->mode == SPI_MODE_SLAVE) {
    1282:	7943      	ldrb	r3, [r0, #5]
    1284:	2b00      	cmp	r3, #0
    1286:	d1d5      	bne.n	1234 <spi_read_buffer_wait+0x70>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1288:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    128a:	7e0b      	ldrb	r3, [r1, #24]
				if (spi_is_ready_to_read(module)) {
    128c:	4213      	tst	r3, r2
    128e:	d1ca      	bne.n	1226 <spi_read_buffer_wait+0x62>
    1290:	4b12      	ldr	r3, [pc, #72]	; (12dc <spi_read_buffer_wait+0x118>)
    1292:	7e0d      	ldrb	r5, [r1, #24]
    1294:	4215      	tst	r5, r2
    1296:	d1c6      	bne.n	1226 <spi_read_buffer_wait+0x62>
    1298:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    129a:	2b00      	cmp	r3, #0
    129c:	d1f9      	bne.n	1292 <spi_read_buffer_wait+0xce>
    129e:	e7c2      	b.n	1226 <spi_read_buffer_wait+0x62>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    12a0:	2302      	movs	r3, #2
    12a2:	760b      	strb	r3, [r1, #24]
				return STATUS_ABORTED;
    12a4:	2504      	movs	r5, #4
    12a6:	e00e      	b.n	12c6 <spi_read_buffer_wait+0x102>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    12a8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    12aa:	05db      	lsls	r3, r3, #23
    12ac:	0ddb      	lsrs	r3, r3, #23
    12ae:	e7d5      	b.n	125c <spi_read_buffer_wait+0x98>
			rx_data[rx_pos++] = (received_data >> 8);
    12b0:	3602      	adds	r6, #2
    12b2:	b2b6      	uxth	r6, r6
    12b4:	0a1b      	lsrs	r3, r3, #8
    12b6:	4661      	mov	r1, ip
    12b8:	554b      	strb	r3, [r1, r5]
    12ba:	e7da      	b.n	1272 <spi_read_buffer_wait+0xae>
    12bc:	9d01      	ldr	r5, [sp, #4]
    12be:	e002      	b.n	12c6 <spi_read_buffer_wait+0x102>
				return STATUS_ERR_TIMEOUT;
    12c0:	2512      	movs	r5, #18
    12c2:	e000      	b.n	12c6 <spi_read_buffer_wait+0x102>
		return STATUS_ERR_IO;
    12c4:	2510      	movs	r5, #16
		}
	}

	return STATUS_OK;
}
    12c6:	0028      	movs	r0, r5
    12c8:	b003      	add	sp, #12
    12ca:	bc0c      	pop	{r2, r3}
    12cc:	4691      	mov	r9, r2
    12ce:	469a      	mov	sl, r3
    12d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12d2:	9d01      	ldr	r5, [sp, #4]
    12d4:	e7f7      	b.n	12c6 <spi_read_buffer_wait+0x102>
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	0000ffff 	.word	0x0000ffff
    12dc:	00002710 	.word	0x00002710

000012e0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    12e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    12e2:	46de      	mov	lr, fp
    12e4:	4657      	mov	r7, sl
    12e6:	464e      	mov	r6, r9
    12e8:	4645      	mov	r5, r8
    12ea:	b5e0      	push	{r5, r6, r7, lr}
    12ec:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    12ee:	2338      	movs	r3, #56	; 0x38
    12f0:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    12f2:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    12f4:	2c05      	cmp	r4, #5
    12f6:	d002      	beq.n	12fe <spi_write_buffer_wait+0x1e>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    12f8:	3312      	adds	r3, #18
	if (length == 0) {
    12fa:	2a00      	cmp	r2, #0
    12fc:	d107      	bne.n	130e <spi_write_buffer_wait+0x2e>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    12fe:	0018      	movs	r0, r3
    1300:	b003      	add	sp, #12
    1302:	bc3c      	pop	{r2, r3, r4, r5}
    1304:	4690      	mov	r8, r2
    1306:	4699      	mov	r9, r3
    1308:	46a2      	mov	sl, r4
    130a:	46ab      	mov	fp, r5
    130c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    130e:	7943      	ldrb	r3, [r0, #5]
    1310:	2b00      	cmp	r3, #0
    1312:	d103      	bne.n	131c <spi_write_buffer_wait+0x3c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1314:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1316:	7e1c      	ldrb	r4, [r3, #24]
    1318:	07a4      	lsls	r4, r4, #30
    131a:	d40a      	bmi.n	1332 <spi_write_buffer_wait+0x52>
						data_to_send = tx_data[tx_pos++];
    131c:	4693      	mov	fp, r2
    131e:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    1320:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    1322:	2502      	movs	r5, #2
    1324:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    1326:	3502      	adds	r5, #2
    1328:	46a8      	mov	r8, r5
    132a:	3a01      	subs	r2, #1
    132c:	b292      	uxth	r2, r2
    132e:	468a      	mov	sl, r1
    1330:	e023      	b.n	137a <spi_write_buffer_wait+0x9a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1332:	2402      	movs	r4, #2
    1334:	761c      	strb	r4, [r3, #24]
    1336:	e7f1      	b.n	131c <spi_write_buffer_wait+0x3c>
    1338:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    133a:	4661      	mov	r1, ip
    133c:	420d      	tst	r5, r1
    133e:	d12e      	bne.n	139e <spi_write_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1340:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    1342:	421d      	tst	r5, r3
    1344:	d100      	bne.n	1348 <spi_write_buffer_wait+0x68>
    1346:	e0c2      	b.n	14ce <spi_write_buffer_wait+0x1ee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1348:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    134a:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    134c:	421d      	tst	r5, r3
    134e:	d0fc      	beq.n	134a <spi_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    1350:	1c67      	adds	r7, r4, #1
    1352:	b2bf      	uxth	r7, r7
    1354:	4651      	mov	r1, sl
    1356:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1358:	7981      	ldrb	r1, [r0, #6]
    135a:	2901      	cmp	r1, #1
    135c:	d023      	beq.n	13a6 <spi_write_buffer_wait+0xc6>
		uint16_t data_to_send = tx_data[tx_pos++];
    135e:	b2ad      	uxth	r5, r5
    1360:	003c      	movs	r4, r7
    1362:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    1364:	421f      	tst	r7, r3
    1366:	d002      	beq.n	136e <spi_write_buffer_wait+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1368:	05ed      	lsls	r5, r5, #23
    136a:	0ded      	lsrs	r5, r5, #23
    136c:	62b5      	str	r5, [r6, #40]	; 0x28
    136e:	1e55      	subs	r5, r2, #1
    1370:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    1372:	79c6      	ldrb	r6, [r0, #7]
    1374:	2e00      	cmp	r6, #0
    1376:	d11d      	bne.n	13b4 <spi_write_buffer_wait+0xd4>
    1378:	002a      	movs	r2, r5
	while (length--) {
    137a:	4d5a      	ldr	r5, [pc, #360]	; (14e4 <spi_write_buffer_wait+0x204>)
    137c:	42aa      	cmp	r2, r5
    137e:	d070      	beq.n	1462 <spi_write_buffer_wait+0x182>
		if (module->mode == SPI_MODE_SLAVE) {
    1380:	7945      	ldrb	r5, [r0, #5]
    1382:	2d00      	cmp	r5, #0
    1384:	d1e0      	bne.n	1348 <spi_write_buffer_wait+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1386:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1388:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    138a:	421d      	tst	r5, r3
    138c:	d1d4      	bne.n	1338 <spi_write_buffer_wait+0x58>
    138e:	4d56      	ldr	r5, [pc, #344]	; (14e8 <spi_write_buffer_wait+0x208>)
    1390:	7e37      	ldrb	r7, [r6, #24]
    1392:	421f      	tst	r7, r3
    1394:	d1d0      	bne.n	1338 <spi_write_buffer_wait+0x58>
    1396:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1398:	2d00      	cmp	r5, #0
    139a:	d1f9      	bne.n	1390 <spi_write_buffer_wait+0xb0>
    139c:	e7cc      	b.n	1338 <spi_write_buffer_wait+0x58>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    139e:	2302      	movs	r3, #2
    13a0:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    13a2:	3302      	adds	r3, #2
    13a4:	e7ab      	b.n	12fe <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    13a6:	3402      	adds	r4, #2
    13a8:	b2a4      	uxth	r4, r4
    13aa:	4651      	mov	r1, sl
    13ac:	5dcf      	ldrb	r7, [r1, r7]
    13ae:	023f      	lsls	r7, r7, #8
    13b0:	433d      	orrs	r5, r7
    13b2:	e7d6      	b.n	1362 <spi_write_buffer_wait+0x82>
    13b4:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    13b6:	7945      	ldrb	r5, [r0, #5]
    13b8:	2d00      	cmp	r5, #0
    13ba:	d137      	bne.n	142c <spi_write_buffer_wait+0x14c>
    13bc:	4d4b      	ldr	r5, [pc, #300]	; (14ec <spi_write_buffer_wait+0x20c>)
    13be:	9101      	str	r1, [sp, #4]
    13c0:	e012      	b.n	13e8 <spi_write_buffer_wait+0x108>
							data_to_send |= (tx_data[tx_pos++] << 8);
    13c2:	3402      	adds	r4, #2
    13c4:	b2a4      	uxth	r4, r4
    13c6:	4649      	mov	r1, r9
    13c8:	9f01      	ldr	r7, [sp, #4]
    13ca:	5c79      	ldrb	r1, [r7, r1]
    13cc:	0209      	lsls	r1, r1, #8
    13ce:	9f00      	ldr	r7, [sp, #0]
    13d0:	430f      	orrs	r7, r1
    13d2:	e01b      	b.n	140c <spi_write_buffer_wait+0x12c>
						length--;
    13d4:	3a01      	subs	r2, #1
    13d6:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    13d8:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    13da:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    13dc:	4641      	mov	r1, r8
    13de:	420f      	tst	r7, r1
    13e0:	d11b      	bne.n	141a <spi_write_buffer_wait+0x13a>
    13e2:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    13e4:	2d00      	cmp	r5, #0
    13e6:	d018      	beq.n	141a <spi_write_buffer_wait+0x13a>
					if (length && spi_is_ready_to_write(module)) {
    13e8:	2a00      	cmp	r2, #0
    13ea:	d0f5      	beq.n	13d8 <spi_write_buffer_wait+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    13ec:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    13ee:	7e37      	ldrb	r7, [r6, #24]
    13f0:	421f      	tst	r7, r3
    13f2:	d0f1      	beq.n	13d8 <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
    13f4:	1c67      	adds	r7, r4, #1
    13f6:	b2b9      	uxth	r1, r7
    13f8:	4689      	mov	r9, r1
    13fa:	9901      	ldr	r1, [sp, #4]
    13fc:	5d09      	ldrb	r1, [r1, r4]
    13fe:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1400:	7981      	ldrb	r1, [r0, #6]
    1402:	2901      	cmp	r1, #1
    1404:	d0dd      	beq.n	13c2 <spi_write_buffer_wait+0xe2>
						data_to_send = tx_data[tx_pos++];
    1406:	4669      	mov	r1, sp
    1408:	880f      	ldrh	r7, [r1, #0]
    140a:	464c      	mov	r4, r9
    140c:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    140e:	4219      	tst	r1, r3
    1410:	d0e0      	beq.n	13d4 <spi_write_buffer_wait+0xf4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1412:	05ff      	lsls	r7, r7, #23
    1414:	0dff      	lsrs	r7, r7, #23
    1416:	62b7      	str	r7, [r6, #40]	; 0x28
    1418:	e7dc      	b.n	13d4 <spi_write_buffer_wait+0xf4>
    141a:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    141c:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    141e:	4667      	mov	r7, ip
    1420:	423d      	tst	r5, r7
    1422:	d118      	bne.n	1456 <spi_write_buffer_wait+0x176>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1424:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    1426:	4646      	mov	r6, r8
    1428:	4235      	tst	r5, r6
    142a:	d052      	beq.n	14d2 <spi_write_buffer_wait+0x1f2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    142c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    142e:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    1430:	4647      	mov	r7, r8
    1432:	423d      	tst	r5, r7
    1434:	d0fb      	beq.n	142e <spi_write_buffer_wait+0x14e>
    1436:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    1438:	423d      	tst	r5, r7
    143a:	d007      	beq.n	144c <spi_write_buffer_wait+0x16c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    143c:	8b75      	ldrh	r5, [r6, #26]
    143e:	423d      	tst	r5, r7
    1440:	d000      	beq.n	1444 <spi_write_buffer_wait+0x164>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1442:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1444:	7985      	ldrb	r5, [r0, #6]
    1446:	2d01      	cmp	r5, #1
    1448:	d009      	beq.n	145e <spi_write_buffer_wait+0x17e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    144a:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    144c:	465d      	mov	r5, fp
    144e:	3d01      	subs	r5, #1
    1450:	b2ad      	uxth	r5, r5
    1452:	46ab      	mov	fp, r5
    1454:	e769      	b.n	132a <spi_write_buffer_wait+0x4a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1456:	2302      	movs	r3, #2
    1458:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    145a:	3302      	adds	r3, #2
    145c:	e74f      	b.n	12fe <spi_write_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    145e:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    1460:	e7f4      	b.n	144c <spi_write_buffer_wait+0x16c>
	if (module->mode == SPI_MODE_MASTER) {
    1462:	7943      	ldrb	r3, [r0, #5]
    1464:	2b01      	cmp	r3, #1
    1466:	d00b      	beq.n	1480 <spi_write_buffer_wait+0x1a0>
	if (module->mode == SPI_MODE_SLAVE) {
    1468:	2b00      	cmp	r3, #0
    146a:	d134      	bne.n	14d6 <spi_write_buffer_wait+0x1f6>
		if (module->receiver_enabled) {
    146c:	79c2      	ldrb	r2, [r0, #7]
    146e:	2a00      	cmp	r2, #0
    1470:	d100      	bne.n	1474 <spi_write_buffer_wait+0x194>
    1472:	e744      	b.n	12fe <spi_write_buffer_wait+0x1e>
					if (spi_is_ready_to_read(module)) {
    1474:	2404      	movs	r4, #4
			while (flush_length) {
    1476:	465b      	mov	r3, fp
    1478:	465d      	mov	r5, fp
    147a:	2b00      	cmp	r3, #0
    147c:	d119      	bne.n	14b2 <spi_write_buffer_wait+0x1d2>
    147e:	e73e      	b.n	12fe <spi_write_buffer_wait+0x1e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1480:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    1482:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1484:	7e0b      	ldrb	r3, [r1, #24]
    1486:	4213      	tst	r3, r2
    1488:	d0fc      	beq.n	1484 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    148a:	2300      	movs	r3, #0
    148c:	e737      	b.n	12fe <spi_write_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    148e:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    1490:	4223      	tst	r3, r4
    1492:	d022      	beq.n	14da <spi_write_buffer_wait+0x1fa>
    1494:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    1496:	4223      	tst	r3, r4
    1498:	d007      	beq.n	14aa <spi_write_buffer_wait+0x1ca>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    149a:	8b4b      	ldrh	r3, [r1, #26]
    149c:	4223      	tst	r3, r4
    149e:	d000      	beq.n	14a2 <spi_write_buffer_wait+0x1c2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    14a0:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14a2:	7983      	ldrb	r3, [r0, #6]
    14a4:	2b01      	cmp	r3, #1
    14a6:	d010      	beq.n	14ca <spi_write_buffer_wait+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    14a8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    14aa:	3d01      	subs	r5, #1
    14ac:	b2ad      	uxth	r5, r5
			while (flush_length) {
    14ae:	2d00      	cmp	r5, #0
    14b0:	d015      	beq.n	14de <spi_write_buffer_wait+0x1fe>
	SercomSpi *const spi_module = &(module->hw->SPI);
    14b2:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    14b4:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    14b6:	4223      	tst	r3, r4
    14b8:	d1e9      	bne.n	148e <spi_write_buffer_wait+0x1ae>
    14ba:	4b0b      	ldr	r3, [pc, #44]	; (14e8 <spi_write_buffer_wait+0x208>)
    14bc:	7e0a      	ldrb	r2, [r1, #24]
    14be:	4222      	tst	r2, r4
    14c0:	d1e5      	bne.n	148e <spi_write_buffer_wait+0x1ae>
    14c2:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    14c4:	2b00      	cmp	r3, #0
    14c6:	d1f9      	bne.n	14bc <spi_write_buffer_wait+0x1dc>
    14c8:	e7e1      	b.n	148e <spi_write_buffer_wait+0x1ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    14ca:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    14cc:	e7ed      	b.n	14aa <spi_write_buffer_wait+0x1ca>
				return STATUS_ERR_TIMEOUT;
    14ce:	2312      	movs	r3, #18
    14d0:	e715      	b.n	12fe <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    14d2:	2312      	movs	r3, #18
    14d4:	e713      	b.n	12fe <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    14d6:	2300      	movs	r3, #0
    14d8:	e711      	b.n	12fe <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    14da:	2312      	movs	r3, #18
    14dc:	e70f      	b.n	12fe <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    14de:	2300      	movs	r3, #0
    14e0:	e70d      	b.n	12fe <spi_write_buffer_wait+0x1e>
    14e2:	46c0      	nop			; (mov r8, r8)
    14e4:	0000ffff 	.word	0x0000ffff
    14e8:	00002710 	.word	0x00002710
    14ec:	00002711 	.word	0x00002711

000014f0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    14f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    14f2:	0080      	lsls	r0, r0, #2
    14f4:	4b85      	ldr	r3, [pc, #532]	; (170c <_spi_interrupt_handler+0x21c>)
    14f6:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    14f8:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    14fa:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    14fc:	5ce3      	ldrb	r3, [r4, r3]
    14fe:	2236      	movs	r2, #54	; 0x36
    1500:	5ca7      	ldrb	r7, [r4, r2]
    1502:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1504:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    1506:	7db5      	ldrb	r5, [r6, #22]
    1508:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    150a:	07eb      	lsls	r3, r5, #31
    150c:	d52e      	bpl.n	156c <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    150e:	7963      	ldrb	r3, [r4, #5]
    1510:	2b01      	cmp	r3, #1
    1512:	d025      	beq.n	1560 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1514:	2b00      	cmp	r3, #0
    1516:	d129      	bne.n	156c <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    1518:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    151a:	2b00      	cmp	r3, #0
    151c:	d026      	beq.n	156c <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    151e:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1520:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1522:	7813      	ldrb	r3, [r2, #0]
    1524:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    1526:	1c50      	adds	r0, r2, #1
    1528:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    152a:	79a0      	ldrb	r0, [r4, #6]
    152c:	2801      	cmp	r0, #1
    152e:	d100      	bne.n	1532 <_spi_interrupt_handler+0x42>
    1530:	e069      	b.n	1606 <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1532:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    1534:	05db      	lsls	r3, r3, #23
    1536:	0ddb      	lsrs	r3, r3, #23
    1538:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    153a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    153c:	3b01      	subs	r3, #1
    153e:	b29b      	uxth	r3, r3
    1540:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    1542:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1544:	b29b      	uxth	r3, r3
    1546:	2b00      	cmp	r3, #0
    1548:	d110      	bne.n	156c <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    154a:	3301      	adds	r3, #1
    154c:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    154e:	7a63      	ldrb	r3, [r4, #9]
    1550:	2b01      	cmp	r3, #1
    1552:	d10b      	bne.n	156c <_spi_interrupt_handler+0x7c>
    1554:	79e3      	ldrb	r3, [r4, #7]
    1556:	2b00      	cmp	r3, #0
    1558:	d108      	bne.n	156c <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    155a:	3302      	adds	r3, #2
    155c:	75b3      	strb	r3, [r6, #22]
    155e:	e005      	b.n	156c <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    1560:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1562:	2b00      	cmp	r3, #0
    1564:	d03e      	beq.n	15e4 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    1566:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1568:	2b00      	cmp	r3, #0
    156a:	d1d8      	bne.n	151e <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    156c:	076b      	lsls	r3, r5, #29
    156e:	d511      	bpl.n	1594 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1570:	8b73      	ldrh	r3, [r6, #26]
    1572:	075b      	lsls	r3, r3, #29
    1574:	d551      	bpl.n	161a <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1576:	7a63      	ldrb	r3, [r4, #9]
    1578:	2b01      	cmp	r3, #1
    157a:	d008      	beq.n	158e <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    157c:	221e      	movs	r2, #30
    157e:	2338      	movs	r3, #56	; 0x38
    1580:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1582:	3b35      	subs	r3, #53	; 0x35
    1584:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1586:	3302      	adds	r3, #2
    1588:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    158a:	073b      	lsls	r3, r7, #28
    158c:	d441      	bmi.n	1612 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    158e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1590:	2304      	movs	r3, #4
    1592:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1594:	07ab      	lsls	r3, r5, #30
    1596:	d515      	bpl.n	15c4 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    1598:	7963      	ldrb	r3, [r4, #5]
    159a:	2b00      	cmp	r3, #0
    159c:	d10e      	bne.n	15bc <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    159e:	3307      	adds	r3, #7
    15a0:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    15a2:	3b05      	subs	r3, #5
    15a4:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    15a6:	3301      	adds	r3, #1
    15a8:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    15aa:	2300      	movs	r3, #0
    15ac:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    15ae:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    15b0:	3338      	adds	r3, #56	; 0x38
    15b2:	2200      	movs	r2, #0
    15b4:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    15b6:	06fb      	lsls	r3, r7, #27
    15b8:	d500      	bpl.n	15bc <_spi_interrupt_handler+0xcc>
    15ba:	e07f      	b.n	16bc <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    15bc:	7963      	ldrb	r3, [r4, #5]
    15be:	2b01      	cmp	r3, #1
    15c0:	d100      	bne.n	15c4 <_spi_interrupt_handler+0xd4>
    15c2:	e07f      	b.n	16c4 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    15c4:	072b      	lsls	r3, r5, #28
    15c6:	d508      	bpl.n	15da <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    15c8:	7963      	ldrb	r3, [r4, #5]
    15ca:	2b00      	cmp	r3, #0
    15cc:	d105      	bne.n	15da <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    15ce:	3308      	adds	r3, #8
    15d0:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    15d2:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    15d4:	06bb      	lsls	r3, r7, #26
    15d6:	d500      	bpl.n	15da <_spi_interrupt_handler+0xea>
    15d8:	e08a      	b.n	16f0 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    15da:	b26d      	sxtb	r5, r5
    15dc:	2d00      	cmp	r5, #0
    15de:	da00      	bge.n	15e2 <_spi_interrupt_handler+0xf2>
    15e0:	e08a      	b.n	16f8 <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    15e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    15e4:	4b4a      	ldr	r3, [pc, #296]	; (1710 <_spi_interrupt_handler+0x220>)
    15e6:	881b      	ldrh	r3, [r3, #0]
    15e8:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    15ea:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    15ec:	3b01      	subs	r3, #1
    15ee:	b29b      	uxth	r3, r3
    15f0:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    15f2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    15f4:	b29b      	uxth	r3, r3
    15f6:	2b00      	cmp	r3, #0
    15f8:	d101      	bne.n	15fe <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    15fa:	3301      	adds	r3, #1
    15fc:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    15fe:	7963      	ldrb	r3, [r4, #5]
		if (0
    1600:	2b01      	cmp	r3, #1
    1602:	d0b0      	beq.n	1566 <_spi_interrupt_handler+0x76>
    1604:	e786      	b.n	1514 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1606:	7850      	ldrb	r0, [r2, #1]
    1608:	0200      	lsls	r0, r0, #8
    160a:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    160c:	3202      	adds	r2, #2
    160e:	62e2      	str	r2, [r4, #44]	; 0x2c
    1610:	e790      	b.n	1534 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1612:	0020      	movs	r0, r4
    1614:	69a3      	ldr	r3, [r4, #24]
    1616:	4798      	blx	r3
    1618:	e7b9      	b.n	158e <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    161a:	7a63      	ldrb	r3, [r4, #9]
    161c:	2b01      	cmp	r3, #1
    161e:	d027      	beq.n	1670 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1620:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1624:	05db      	lsls	r3, r3, #23
    1626:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    1628:	b2da      	uxtb	r2, r3
    162a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    162c:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    162e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1630:	1c51      	adds	r1, r2, #1
    1632:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1634:	79a1      	ldrb	r1, [r4, #6]
    1636:	2901      	cmp	r1, #1
    1638:	d033      	beq.n	16a2 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    163a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    163c:	3b01      	subs	r3, #1
    163e:	b29b      	uxth	r3, r3
    1640:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    1642:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1644:	b29b      	uxth	r3, r3
    1646:	2b00      	cmp	r3, #0
    1648:	d1a4      	bne.n	1594 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    164a:	2200      	movs	r2, #0
    164c:	3338      	adds	r3, #56	; 0x38
    164e:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1650:	3b34      	subs	r3, #52	; 0x34
    1652:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1654:	7a63      	ldrb	r3, [r4, #9]
    1656:	2b02      	cmp	r3, #2
    1658:	d029      	beq.n	16ae <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    165a:	7a63      	ldrb	r3, [r4, #9]
    165c:	2b00      	cmp	r3, #0
    165e:	d000      	beq.n	1662 <_spi_interrupt_handler+0x172>
    1660:	e798      	b.n	1594 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1662:	07bb      	lsls	r3, r7, #30
    1664:	d400      	bmi.n	1668 <_spi_interrupt_handler+0x178>
    1666:	e795      	b.n	1594 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1668:	0020      	movs	r0, r4
    166a:	6923      	ldr	r3, [r4, #16]
    166c:	4798      	blx	r3
    166e:	e791      	b.n	1594 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1670:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    1672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1674:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1676:	3b01      	subs	r3, #1
    1678:	b29b      	uxth	r3, r3
    167a:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    167c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    167e:	b29b      	uxth	r3, r3
    1680:	2b00      	cmp	r3, #0
    1682:	d000      	beq.n	1686 <_spi_interrupt_handler+0x196>
    1684:	e786      	b.n	1594 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1686:	3304      	adds	r3, #4
    1688:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    168a:	2200      	movs	r2, #0
    168c:	3334      	adds	r3, #52	; 0x34
    168e:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1690:	3b35      	subs	r3, #53	; 0x35
    1692:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    1694:	07fb      	lsls	r3, r7, #31
    1696:	d400      	bmi.n	169a <_spi_interrupt_handler+0x1aa>
    1698:	e77c      	b.n	1594 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    169a:	0020      	movs	r0, r4
    169c:	68e3      	ldr	r3, [r4, #12]
    169e:	4798      	blx	r3
    16a0:	e778      	b.n	1594 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    16a2:	0a1b      	lsrs	r3, r3, #8
    16a4:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    16a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16a8:	3301      	adds	r3, #1
    16aa:	62a3      	str	r3, [r4, #40]	; 0x28
    16ac:	e7c5      	b.n	163a <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    16ae:	077b      	lsls	r3, r7, #29
    16b0:	d400      	bmi.n	16b4 <_spi_interrupt_handler+0x1c4>
    16b2:	e76f      	b.n	1594 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    16b4:	0020      	movs	r0, r4
    16b6:	6963      	ldr	r3, [r4, #20]
    16b8:	4798      	blx	r3
    16ba:	e76b      	b.n	1594 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    16bc:	0020      	movs	r0, r4
    16be:	69e3      	ldr	r3, [r4, #28]
    16c0:	4798      	blx	r3
    16c2:	e77b      	b.n	15bc <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    16c4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    16c6:	2b01      	cmp	r3, #1
    16c8:	d000      	beq.n	16cc <_spi_interrupt_handler+0x1dc>
    16ca:	e786      	b.n	15da <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    16cc:	79e3      	ldrb	r3, [r4, #7]
    16ce:	2b00      	cmp	r3, #0
    16d0:	d000      	beq.n	16d4 <_spi_interrupt_handler+0x1e4>
    16d2:	e782      	b.n	15da <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    16d4:	3302      	adds	r3, #2
    16d6:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    16d8:	3301      	adds	r3, #1
    16da:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    16dc:	2200      	movs	r2, #0
    16de:	3335      	adds	r3, #53	; 0x35
    16e0:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    16e2:	07fb      	lsls	r3, r7, #31
    16e4:	d400      	bmi.n	16e8 <_spi_interrupt_handler+0x1f8>
    16e6:	e76d      	b.n	15c4 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    16e8:	0020      	movs	r0, r4
    16ea:	68e3      	ldr	r3, [r4, #12]
    16ec:	4798      	blx	r3
    16ee:	e769      	b.n	15c4 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    16f0:	0020      	movs	r0, r4
    16f2:	6a23      	ldr	r3, [r4, #32]
    16f4:	4798      	blx	r3
    16f6:	e770      	b.n	15da <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    16f8:	2380      	movs	r3, #128	; 0x80
    16fa:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    16fc:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    16fe:	067b      	lsls	r3, r7, #25
    1700:	d400      	bmi.n	1704 <_spi_interrupt_handler+0x214>
    1702:	e76e      	b.n	15e2 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1704:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1706:	0020      	movs	r0, r4
    1708:	4798      	blx	r3
}
    170a:	e76a      	b.n	15e2 <_spi_interrupt_handler+0xf2>
    170c:	200024ec 	.word	0x200024ec
    1710:	200024a8 	.word	0x200024a8

00001714 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1714:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1716:	2000      	movs	r0, #0
    1718:	4b08      	ldr	r3, [pc, #32]	; (173c <delay_init+0x28>)
    171a:	4798      	blx	r3
    171c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    171e:	4c08      	ldr	r4, [pc, #32]	; (1740 <delay_init+0x2c>)
    1720:	21fa      	movs	r1, #250	; 0xfa
    1722:	0089      	lsls	r1, r1, #2
    1724:	47a0      	blx	r4
    1726:	4b07      	ldr	r3, [pc, #28]	; (1744 <delay_init+0x30>)
    1728:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    172a:	4907      	ldr	r1, [pc, #28]	; (1748 <delay_init+0x34>)
    172c:	0028      	movs	r0, r5
    172e:	47a0      	blx	r4
    1730:	4b06      	ldr	r3, [pc, #24]	; (174c <delay_init+0x38>)
    1732:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1734:	2205      	movs	r2, #5
    1736:	4b06      	ldr	r3, [pc, #24]	; (1750 <delay_init+0x3c>)
    1738:	601a      	str	r2, [r3, #0]
}
    173a:	bd70      	pop	{r4, r5, r6, pc}
    173c:	00002a29 	.word	0x00002a29
    1740:	00009f51 	.word	0x00009f51
    1744:	20000000 	.word	0x20000000
    1748:	000f4240 	.word	0x000f4240
    174c:	20000004 	.word	0x20000004
    1750:	e000e010 	.word	0xe000e010

00001754 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    1754:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    1756:	4b08      	ldr	r3, [pc, #32]	; (1778 <delay_cycles_us+0x24>)
    1758:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    175a:	4a08      	ldr	r2, [pc, #32]	; (177c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    175c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    175e:	2180      	movs	r1, #128	; 0x80
    1760:	0249      	lsls	r1, r1, #9
	while (n--) {
    1762:	3801      	subs	r0, #1
    1764:	d307      	bcc.n	1776 <delay_cycles_us+0x22>
	if (n > 0) {
    1766:	2c00      	cmp	r4, #0
    1768:	d0fb      	beq.n	1762 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    176a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    176c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    176e:	6813      	ldr	r3, [r2, #0]
    1770:	420b      	tst	r3, r1
    1772:	d0fc      	beq.n	176e <delay_cycles_us+0x1a>
    1774:	e7f5      	b.n	1762 <delay_cycles_us+0xe>
	}
}
    1776:	bd30      	pop	{r4, r5, pc}
    1778:	20000004 	.word	0x20000004
    177c:	e000e010 	.word	0xe000e010

00001780 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1780:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1782:	4b08      	ldr	r3, [pc, #32]	; (17a4 <delay_cycles_ms+0x24>)
    1784:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    1786:	4a08      	ldr	r2, [pc, #32]	; (17a8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1788:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    178a:	2180      	movs	r1, #128	; 0x80
    178c:	0249      	lsls	r1, r1, #9
	while (n--) {
    178e:	3801      	subs	r0, #1
    1790:	d307      	bcc.n	17a2 <delay_cycles_ms+0x22>
	if (n > 0) {
    1792:	2c00      	cmp	r4, #0
    1794:	d0fb      	beq.n	178e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    1796:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1798:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    179a:	6813      	ldr	r3, [r2, #0]
    179c:	420b      	tst	r3, r1
    179e:	d0fc      	beq.n	179a <delay_cycles_ms+0x1a>
    17a0:	e7f5      	b.n	178e <delay_cycles_ms+0xe>
	}
}
    17a2:	bd30      	pop	{r4, r5, pc}
    17a4:	20000000 	.word	0x20000000
    17a8:	e000e010 	.word	0xe000e010

000017ac <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    17ac:	4b0c      	ldr	r3, [pc, #48]	; (17e0 <cpu_irq_enter_critical+0x34>)
    17ae:	681b      	ldr	r3, [r3, #0]
    17b0:	2b00      	cmp	r3, #0
    17b2:	d106      	bne.n	17c2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    17b4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    17b8:	2b00      	cmp	r3, #0
    17ba:	d007      	beq.n	17cc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    17bc:	2200      	movs	r2, #0
    17be:	4b09      	ldr	r3, [pc, #36]	; (17e4 <cpu_irq_enter_critical+0x38>)
    17c0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    17c2:	4a07      	ldr	r2, [pc, #28]	; (17e0 <cpu_irq_enter_critical+0x34>)
    17c4:	6813      	ldr	r3, [r2, #0]
    17c6:	3301      	adds	r3, #1
    17c8:	6013      	str	r3, [r2, #0]
}
    17ca:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    17cc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    17ce:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    17d2:	2200      	movs	r2, #0
    17d4:	4b04      	ldr	r3, [pc, #16]	; (17e8 <cpu_irq_enter_critical+0x3c>)
    17d6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    17d8:	3201      	adds	r2, #1
    17da:	4b02      	ldr	r3, [pc, #8]	; (17e4 <cpu_irq_enter_critical+0x38>)
    17dc:	701a      	strb	r2, [r3, #0]
    17de:	e7f0      	b.n	17c2 <cpu_irq_enter_critical+0x16>
    17e0:	20000150 	.word	0x20000150
    17e4:	20000154 	.word	0x20000154
    17e8:	20000008 	.word	0x20000008

000017ec <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    17ec:	4b08      	ldr	r3, [pc, #32]	; (1810 <cpu_irq_leave_critical+0x24>)
    17ee:	681a      	ldr	r2, [r3, #0]
    17f0:	3a01      	subs	r2, #1
    17f2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    17f4:	681b      	ldr	r3, [r3, #0]
    17f6:	2b00      	cmp	r3, #0
    17f8:	d109      	bne.n	180e <cpu_irq_leave_critical+0x22>
    17fa:	4b06      	ldr	r3, [pc, #24]	; (1814 <cpu_irq_leave_critical+0x28>)
    17fc:	781b      	ldrb	r3, [r3, #0]
    17fe:	2b00      	cmp	r3, #0
    1800:	d005      	beq.n	180e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1802:	2201      	movs	r2, #1
    1804:	4b04      	ldr	r3, [pc, #16]	; (1818 <cpu_irq_leave_critical+0x2c>)
    1806:	701a      	strb	r2, [r3, #0]
    1808:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    180c:	b662      	cpsie	i
	}
}
    180e:	4770      	bx	lr
    1810:	20000150 	.word	0x20000150
    1814:	20000154 	.word	0x20000154
    1818:	20000008 	.word	0x20000008

0000181c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    181c:	b5f0      	push	{r4, r5, r6, r7, lr}
    181e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1820:	ac01      	add	r4, sp, #4
    1822:	2501      	movs	r5, #1
    1824:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1826:	2700      	movs	r7, #0
    1828:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    182a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    182c:	0021      	movs	r1, r4
    182e:	203e      	movs	r0, #62	; 0x3e
    1830:	4e06      	ldr	r6, [pc, #24]	; (184c <system_board_init+0x30>)
    1832:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1834:	2280      	movs	r2, #128	; 0x80
    1836:	05d2      	lsls	r2, r2, #23
    1838:	4b05      	ldr	r3, [pc, #20]	; (1850 <system_board_init+0x34>)
    183a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    183c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    183e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1840:	0021      	movs	r1, r4
    1842:	200f      	movs	r0, #15
    1844:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    1846:	b003      	add	sp, #12
    1848:	bdf0      	pop	{r4, r5, r6, r7, pc}
    184a:	46c0      	nop			; (mov r8, r8)
    184c:	00001a05 	.word	0x00001a05
    1850:	41004480 	.word	0x41004480

00001854 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1854:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    1856:	2a00      	cmp	r2, #0
    1858:	d001      	beq.n	185e <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    185a:	0018      	movs	r0, r3
    185c:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    185e:	008b      	lsls	r3, r1, #2
    1860:	4a06      	ldr	r2, [pc, #24]	; (187c <extint_register_callback+0x28>)
    1862:	589b      	ldr	r3, [r3, r2]
    1864:	2b00      	cmp	r3, #0
    1866:	d003      	beq.n	1870 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    1868:	4283      	cmp	r3, r0
    186a:	d005      	beq.n	1878 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    186c:	231d      	movs	r3, #29
    186e:	e7f4      	b.n	185a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    1870:	0089      	lsls	r1, r1, #2
    1872:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    1874:	2300      	movs	r3, #0
    1876:	e7f0      	b.n	185a <extint_register_callback+0x6>
		return STATUS_OK;
    1878:	2300      	movs	r3, #0
    187a:	e7ee      	b.n	185a <extint_register_callback+0x6>
    187c:	200024ac 	.word	0x200024ac

00001880 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1880:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1882:	2900      	cmp	r1, #0
    1884:	d001      	beq.n	188a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    1886:	0018      	movs	r0, r3
    1888:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    188a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    188c:	281f      	cmp	r0, #31
    188e:	d800      	bhi.n	1892 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    1890:	4a02      	ldr	r2, [pc, #8]	; (189c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    1892:	2301      	movs	r3, #1
    1894:	4083      	lsls	r3, r0
    1896:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    1898:	2300      	movs	r3, #0
    189a:	e7f4      	b.n	1886 <extint_chan_enable_callback+0x6>
    189c:	40001800 	.word	0x40001800

000018a0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    18a0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    18a2:	2200      	movs	r2, #0
    18a4:	4b10      	ldr	r3, [pc, #64]	; (18e8 <EIC_Handler+0x48>)
    18a6:	701a      	strb	r2, [r3, #0]
    18a8:	2300      	movs	r3, #0
    18aa:	4910      	ldr	r1, [pc, #64]	; (18ec <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    18ac:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    18ae:	4e10      	ldr	r6, [pc, #64]	; (18f0 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    18b0:	4c0d      	ldr	r4, [pc, #52]	; (18e8 <EIC_Handler+0x48>)
    18b2:	e00a      	b.n	18ca <EIC_Handler+0x2a>
		return eics[eic_index];
    18b4:	490d      	ldr	r1, [pc, #52]	; (18ec <EIC_Handler+0x4c>)
    18b6:	e008      	b.n	18ca <EIC_Handler+0x2a>
    18b8:	7823      	ldrb	r3, [r4, #0]
    18ba:	3301      	adds	r3, #1
    18bc:	b2db      	uxtb	r3, r3
    18be:	7023      	strb	r3, [r4, #0]
    18c0:	2b0f      	cmp	r3, #15
    18c2:	d810      	bhi.n	18e6 <EIC_Handler+0x46>
		return NULL;
    18c4:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    18c6:	2b1f      	cmp	r3, #31
    18c8:	d9f4      	bls.n	18b4 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    18ca:	0028      	movs	r0, r5
    18cc:	4018      	ands	r0, r3
    18ce:	2201      	movs	r2, #1
    18d0:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    18d2:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    18d4:	4210      	tst	r0, r2
    18d6:	d0ef      	beq.n	18b8 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    18d8:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    18da:	009b      	lsls	r3, r3, #2
    18dc:	599b      	ldr	r3, [r3, r6]
    18de:	2b00      	cmp	r3, #0
    18e0:	d0ea      	beq.n	18b8 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    18e2:	4798      	blx	r3
    18e4:	e7e8      	b.n	18b8 <EIC_Handler+0x18>
			}
		}
	}
}
    18e6:	bd70      	pop	{r4, r5, r6, pc}
    18e8:	200024aa 	.word	0x200024aa
    18ec:	40001800 	.word	0x40001800
    18f0:	200024ac 	.word	0x200024ac

000018f4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    18f4:	4a04      	ldr	r2, [pc, #16]	; (1908 <_extint_enable+0x14>)
    18f6:	7813      	ldrb	r3, [r2, #0]
    18f8:	2102      	movs	r1, #2
    18fa:	430b      	orrs	r3, r1
    18fc:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    18fe:	7853      	ldrb	r3, [r2, #1]
    1900:	b25b      	sxtb	r3, r3
    1902:	2b00      	cmp	r3, #0
    1904:	dbfb      	blt.n	18fe <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1906:	4770      	bx	lr
    1908:	40001800 	.word	0x40001800

0000190c <_system_extint_init>:
{
    190c:	b500      	push	{lr}
    190e:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    1910:	4a12      	ldr	r2, [pc, #72]	; (195c <_system_extint_init+0x50>)
    1912:	6993      	ldr	r3, [r2, #24]
    1914:	2140      	movs	r1, #64	; 0x40
    1916:	430b      	orrs	r3, r1
    1918:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    191a:	a901      	add	r1, sp, #4
    191c:	2300      	movs	r3, #0
    191e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1920:	2005      	movs	r0, #5
    1922:	4b0f      	ldr	r3, [pc, #60]	; (1960 <_system_extint_init+0x54>)
    1924:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    1926:	2005      	movs	r0, #5
    1928:	4b0e      	ldr	r3, [pc, #56]	; (1964 <_system_extint_init+0x58>)
    192a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    192c:	4a0e      	ldr	r2, [pc, #56]	; (1968 <_system_extint_init+0x5c>)
    192e:	7813      	ldrb	r3, [r2, #0]
    1930:	2101      	movs	r1, #1
    1932:	430b      	orrs	r3, r1
    1934:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1936:	7853      	ldrb	r3, [r2, #1]
    1938:	b25b      	sxtb	r3, r3
    193a:	2b00      	cmp	r3, #0
    193c:	dbfb      	blt.n	1936 <_system_extint_init+0x2a>
    193e:	4b0b      	ldr	r3, [pc, #44]	; (196c <_system_extint_init+0x60>)
    1940:	0019      	movs	r1, r3
    1942:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    1944:	2200      	movs	r2, #0
    1946:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1948:	4299      	cmp	r1, r3
    194a:	d1fc      	bne.n	1946 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    194c:	2210      	movs	r2, #16
    194e:	4b08      	ldr	r3, [pc, #32]	; (1970 <_system_extint_init+0x64>)
    1950:	601a      	str	r2, [r3, #0]
	_extint_enable();
    1952:	4b08      	ldr	r3, [pc, #32]	; (1974 <_system_extint_init+0x68>)
    1954:	4798      	blx	r3
}
    1956:	b003      	add	sp, #12
    1958:	bd00      	pop	{pc}
    195a:	46c0      	nop			; (mov r8, r8)
    195c:	40000400 	.word	0x40000400
    1960:	00002b41 	.word	0x00002b41
    1964:	00002ab5 	.word	0x00002ab5
    1968:	40001800 	.word	0x40001800
    196c:	200024ac 	.word	0x200024ac
    1970:	e000e100 	.word	0xe000e100
    1974:	000018f5 	.word	0x000018f5

00001978 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    1978:	2300      	movs	r3, #0
    197a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    197c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    197e:	2201      	movs	r2, #1
    1980:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    1982:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    1984:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    1986:	3302      	adds	r3, #2
    1988:	72c3      	strb	r3, [r0, #11]
}
    198a:	4770      	bx	lr

0000198c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    198c:	b5f0      	push	{r4, r5, r6, r7, lr}
    198e:	b083      	sub	sp, #12
    1990:	0005      	movs	r5, r0
    1992:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1994:	a901      	add	r1, sp, #4
    1996:	2300      	movs	r3, #0
    1998:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    199a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    199c:	7923      	ldrb	r3, [r4, #4]
    199e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    19a0:	7a23      	ldrb	r3, [r4, #8]
    19a2:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    19a4:	7820      	ldrb	r0, [r4, #0]
    19a6:	4b15      	ldr	r3, [pc, #84]	; (19fc <extint_chan_set_config+0x70>)
    19a8:	4798      	blx	r3
		return NULL;
    19aa:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    19ac:	2d1f      	cmp	r5, #31
    19ae:	d800      	bhi.n	19b2 <extint_chan_set_config+0x26>
		return eics[eic_index];
    19b0:	4813      	ldr	r0, [pc, #76]	; (1a00 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    19b2:	2207      	movs	r2, #7
    19b4:	402a      	ands	r2, r5
    19b6:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    19b8:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    19ba:	7aa3      	ldrb	r3, [r4, #10]
    19bc:	2b00      	cmp	r3, #0
    19be:	d001      	beq.n	19c4 <extint_chan_set_config+0x38>
    19c0:	2308      	movs	r3, #8
    19c2:	431f      	orrs	r7, r3
    19c4:	08eb      	lsrs	r3, r5, #3
    19c6:	009b      	lsls	r3, r3, #2
    19c8:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    19ca:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    19cc:	260f      	movs	r6, #15
    19ce:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    19d0:	43b1      	bics	r1, r6
			(new_config << config_pos);
    19d2:	4097      	lsls	r7, r2
    19d4:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    19d6:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    19d8:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    19da:	7a63      	ldrb	r3, [r4, #9]
    19dc:	2b00      	cmp	r3, #0
    19de:	d106      	bne.n	19ee <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    19e0:	6943      	ldr	r3, [r0, #20]
    19e2:	2201      	movs	r2, #1
    19e4:	40aa      	lsls	r2, r5
    19e6:	4393      	bics	r3, r2
    19e8:	6143      	str	r3, [r0, #20]
	}
}
    19ea:	b003      	add	sp, #12
    19ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    19ee:	6942      	ldr	r2, [r0, #20]
    19f0:	2301      	movs	r3, #1
    19f2:	40ab      	lsls	r3, r5
    19f4:	4313      	orrs	r3, r2
    19f6:	6143      	str	r3, [r0, #20]
    19f8:	e7f7      	b.n	19ea <extint_chan_set_config+0x5e>
    19fa:	46c0      	nop			; (mov r8, r8)
    19fc:	00002c39 	.word	0x00002c39
    1a00:	40001800 	.word	0x40001800

00001a04 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1a04:	b500      	push	{lr}
    1a06:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1a08:	ab01      	add	r3, sp, #4
    1a0a:	2280      	movs	r2, #128	; 0x80
    1a0c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1a0e:	780a      	ldrb	r2, [r1, #0]
    1a10:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1a12:	784a      	ldrb	r2, [r1, #1]
    1a14:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1a16:	788a      	ldrb	r2, [r1, #2]
    1a18:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1a1a:	0019      	movs	r1, r3
    1a1c:	4b01      	ldr	r3, [pc, #4]	; (1a24 <port_pin_set_config+0x20>)
    1a1e:	4798      	blx	r3
}
    1a20:	b003      	add	sp, #12
    1a22:	bd00      	pop	{pc}
    1a24:	00002c39 	.word	0x00002c39

00001a28 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1a28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a2a:	46de      	mov	lr, fp
    1a2c:	4657      	mov	r7, sl
    1a2e:	464e      	mov	r6, r9
    1a30:	4645      	mov	r5, r8
    1a32:	b5e0      	push	{r5, r6, r7, lr}
    1a34:	b087      	sub	sp, #28
    1a36:	4680      	mov	r8, r0
    1a38:	9104      	str	r1, [sp, #16]
    1a3a:	0016      	movs	r6, r2
    1a3c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1a3e:	2200      	movs	r2, #0
    1a40:	2300      	movs	r3, #0
    1a42:	2100      	movs	r1, #0
    1a44:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1a46:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1a48:	2001      	movs	r0, #1
    1a4a:	0021      	movs	r1, r4
    1a4c:	9600      	str	r6, [sp, #0]
    1a4e:	9701      	str	r7, [sp, #4]
    1a50:	465c      	mov	r4, fp
    1a52:	9403      	str	r4, [sp, #12]
    1a54:	4644      	mov	r4, r8
    1a56:	9405      	str	r4, [sp, #20]
    1a58:	e013      	b.n	1a82 <long_division+0x5a>
    1a5a:	2420      	movs	r4, #32
    1a5c:	1a64      	subs	r4, r4, r1
    1a5e:	0005      	movs	r5, r0
    1a60:	40e5      	lsrs	r5, r4
    1a62:	46a8      	mov	r8, r5
    1a64:	e014      	b.n	1a90 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1a66:	9c00      	ldr	r4, [sp, #0]
    1a68:	9d01      	ldr	r5, [sp, #4]
    1a6a:	1b12      	subs	r2, r2, r4
    1a6c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1a6e:	465c      	mov	r4, fp
    1a70:	464d      	mov	r5, r9
    1a72:	432c      	orrs	r4, r5
    1a74:	46a3      	mov	fp, r4
    1a76:	9c03      	ldr	r4, [sp, #12]
    1a78:	4645      	mov	r5, r8
    1a7a:	432c      	orrs	r4, r5
    1a7c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1a7e:	3901      	subs	r1, #1
    1a80:	d325      	bcc.n	1ace <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1a82:	2420      	movs	r4, #32
    1a84:	4264      	negs	r4, r4
    1a86:	190c      	adds	r4, r1, r4
    1a88:	d4e7      	bmi.n	1a5a <long_division+0x32>
    1a8a:	0005      	movs	r5, r0
    1a8c:	40a5      	lsls	r5, r4
    1a8e:	46a8      	mov	r8, r5
    1a90:	0004      	movs	r4, r0
    1a92:	408c      	lsls	r4, r1
    1a94:	46a1      	mov	r9, r4
		r = r << 1;
    1a96:	1892      	adds	r2, r2, r2
    1a98:	415b      	adcs	r3, r3
    1a9a:	0014      	movs	r4, r2
    1a9c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1a9e:	9e05      	ldr	r6, [sp, #20]
    1aa0:	464f      	mov	r7, r9
    1aa2:	403e      	ands	r6, r7
    1aa4:	46b4      	mov	ip, r6
    1aa6:	9e04      	ldr	r6, [sp, #16]
    1aa8:	4647      	mov	r7, r8
    1aaa:	403e      	ands	r6, r7
    1aac:	46b2      	mov	sl, r6
    1aae:	4666      	mov	r6, ip
    1ab0:	4657      	mov	r7, sl
    1ab2:	433e      	orrs	r6, r7
    1ab4:	d003      	beq.n	1abe <long_division+0x96>
			r |= 0x01;
    1ab6:	0006      	movs	r6, r0
    1ab8:	4326      	orrs	r6, r4
    1aba:	0032      	movs	r2, r6
    1abc:	002b      	movs	r3, r5
		if (r >= d) {
    1abe:	9c00      	ldr	r4, [sp, #0]
    1ac0:	9d01      	ldr	r5, [sp, #4]
    1ac2:	429d      	cmp	r5, r3
    1ac4:	d8db      	bhi.n	1a7e <long_division+0x56>
    1ac6:	d1ce      	bne.n	1a66 <long_division+0x3e>
    1ac8:	4294      	cmp	r4, r2
    1aca:	d8d8      	bhi.n	1a7e <long_division+0x56>
    1acc:	e7cb      	b.n	1a66 <long_division+0x3e>
    1ace:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1ad0:	4658      	mov	r0, fp
    1ad2:	0019      	movs	r1, r3
    1ad4:	b007      	add	sp, #28
    1ad6:	bc3c      	pop	{r2, r3, r4, r5}
    1ad8:	4690      	mov	r8, r2
    1ada:	4699      	mov	r9, r3
    1adc:	46a2      	mov	sl, r4
    1ade:	46ab      	mov	fp, r5
    1ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001ae2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1ae2:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1ae4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1ae6:	2340      	movs	r3, #64	; 0x40
    1ae8:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1aea:	4281      	cmp	r1, r0
    1aec:	d202      	bcs.n	1af4 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1aee:	0018      	movs	r0, r3
    1af0:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1af2:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1af4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1af6:	1c63      	adds	r3, r4, #1
    1af8:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1afa:	4288      	cmp	r0, r1
    1afc:	d9f9      	bls.n	1af2 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1afe:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1b00:	2cff      	cmp	r4, #255	; 0xff
    1b02:	d8f4      	bhi.n	1aee <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1b04:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1b06:	2300      	movs	r3, #0
    1b08:	e7f1      	b.n	1aee <_sercom_get_sync_baud_val+0xc>
	...

00001b0c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b0e:	b083      	sub	sp, #12
    1b10:	000f      	movs	r7, r1
    1b12:	0016      	movs	r6, r2
    1b14:	aa08      	add	r2, sp, #32
    1b16:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1b18:	0004      	movs	r4, r0
    1b1a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1b1c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1b1e:	42bc      	cmp	r4, r7
    1b20:	d902      	bls.n	1b28 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1b22:	0010      	movs	r0, r2
    1b24:	b003      	add	sp, #12
    1b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d114      	bne.n	1b56 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1b2c:	0002      	movs	r2, r0
    1b2e:	0008      	movs	r0, r1
    1b30:	2100      	movs	r1, #0
    1b32:	4c19      	ldr	r4, [pc, #100]	; (1b98 <_sercom_get_async_baud_val+0x8c>)
    1b34:	47a0      	blx	r4
    1b36:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1b38:	003a      	movs	r2, r7
    1b3a:	2300      	movs	r3, #0
    1b3c:	2000      	movs	r0, #0
    1b3e:	4c17      	ldr	r4, [pc, #92]	; (1b9c <_sercom_get_async_baud_val+0x90>)
    1b40:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1b42:	2200      	movs	r2, #0
    1b44:	2301      	movs	r3, #1
    1b46:	1a12      	subs	r2, r2, r0
    1b48:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1b4a:	0c12      	lsrs	r2, r2, #16
    1b4c:	041b      	lsls	r3, r3, #16
    1b4e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1b50:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1b52:	2200      	movs	r2, #0
    1b54:	e7e5      	b.n	1b22 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1b56:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1b58:	2b01      	cmp	r3, #1
    1b5a:	d1f9      	bne.n	1b50 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1b5c:	000a      	movs	r2, r1
    1b5e:	2300      	movs	r3, #0
    1b60:	2100      	movs	r1, #0
    1b62:	4c0d      	ldr	r4, [pc, #52]	; (1b98 <_sercom_get_async_baud_val+0x8c>)
    1b64:	47a0      	blx	r4
    1b66:	0002      	movs	r2, r0
    1b68:	000b      	movs	r3, r1
    1b6a:	9200      	str	r2, [sp, #0]
    1b6c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1b6e:	0038      	movs	r0, r7
    1b70:	2100      	movs	r1, #0
    1b72:	4c0a      	ldr	r4, [pc, #40]	; (1b9c <_sercom_get_async_baud_val+0x90>)
    1b74:	47a0      	blx	r4
    1b76:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1b78:	2380      	movs	r3, #128	; 0x80
    1b7a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1b7c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1b7e:	4298      	cmp	r0, r3
    1b80:	d8cf      	bhi.n	1b22 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1b82:	0f79      	lsrs	r1, r7, #29
    1b84:	00f8      	lsls	r0, r7, #3
    1b86:	9a00      	ldr	r2, [sp, #0]
    1b88:	9b01      	ldr	r3, [sp, #4]
    1b8a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1b8c:	00ea      	lsls	r2, r5, #3
    1b8e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1b90:	b2d2      	uxtb	r2, r2
    1b92:	0352      	lsls	r2, r2, #13
    1b94:	432a      	orrs	r2, r5
    1b96:	e7db      	b.n	1b50 <_sercom_get_async_baud_val+0x44>
    1b98:	0000a23d 	.word	0x0000a23d
    1b9c:	00001a29 	.word	0x00001a29

00001ba0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1ba0:	b510      	push	{r4, lr}
    1ba2:	b082      	sub	sp, #8
    1ba4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1ba6:	4b0e      	ldr	r3, [pc, #56]	; (1be0 <sercom_set_gclk_generator+0x40>)
    1ba8:	781b      	ldrb	r3, [r3, #0]
    1baa:	2b00      	cmp	r3, #0
    1bac:	d007      	beq.n	1bbe <sercom_set_gclk_generator+0x1e>
    1bae:	2900      	cmp	r1, #0
    1bb0:	d105      	bne.n	1bbe <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1bb2:	4b0b      	ldr	r3, [pc, #44]	; (1be0 <sercom_set_gclk_generator+0x40>)
    1bb4:	785b      	ldrb	r3, [r3, #1]
    1bb6:	4283      	cmp	r3, r0
    1bb8:	d010      	beq.n	1bdc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1bba:	201d      	movs	r0, #29
    1bbc:	e00c      	b.n	1bd8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1bbe:	a901      	add	r1, sp, #4
    1bc0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1bc2:	2013      	movs	r0, #19
    1bc4:	4b07      	ldr	r3, [pc, #28]	; (1be4 <sercom_set_gclk_generator+0x44>)
    1bc6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1bc8:	2013      	movs	r0, #19
    1bca:	4b07      	ldr	r3, [pc, #28]	; (1be8 <sercom_set_gclk_generator+0x48>)
    1bcc:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1bce:	4b04      	ldr	r3, [pc, #16]	; (1be0 <sercom_set_gclk_generator+0x40>)
    1bd0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1bd2:	2201      	movs	r2, #1
    1bd4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1bd6:	2000      	movs	r0, #0
}
    1bd8:	b002      	add	sp, #8
    1bda:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1bdc:	2000      	movs	r0, #0
    1bde:	e7fb      	b.n	1bd8 <sercom_set_gclk_generator+0x38>
    1be0:	20000158 	.word	0x20000158
    1be4:	00002b41 	.word	0x00002b41
    1be8:	00002ab5 	.word	0x00002ab5

00001bec <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1bec:	4b40      	ldr	r3, [pc, #256]	; (1cf0 <_sercom_get_default_pad+0x104>)
    1bee:	4298      	cmp	r0, r3
    1bf0:	d031      	beq.n	1c56 <_sercom_get_default_pad+0x6a>
    1bf2:	d90a      	bls.n	1c0a <_sercom_get_default_pad+0x1e>
    1bf4:	4b3f      	ldr	r3, [pc, #252]	; (1cf4 <_sercom_get_default_pad+0x108>)
    1bf6:	4298      	cmp	r0, r3
    1bf8:	d04d      	beq.n	1c96 <_sercom_get_default_pad+0xaa>
    1bfa:	4b3f      	ldr	r3, [pc, #252]	; (1cf8 <_sercom_get_default_pad+0x10c>)
    1bfc:	4298      	cmp	r0, r3
    1bfe:	d05a      	beq.n	1cb6 <_sercom_get_default_pad+0xca>
    1c00:	4b3e      	ldr	r3, [pc, #248]	; (1cfc <_sercom_get_default_pad+0x110>)
    1c02:	4298      	cmp	r0, r3
    1c04:	d037      	beq.n	1c76 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1c06:	2000      	movs	r0, #0
}
    1c08:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1c0a:	4b3d      	ldr	r3, [pc, #244]	; (1d00 <_sercom_get_default_pad+0x114>)
    1c0c:	4298      	cmp	r0, r3
    1c0e:	d00c      	beq.n	1c2a <_sercom_get_default_pad+0x3e>
    1c10:	4b3c      	ldr	r3, [pc, #240]	; (1d04 <_sercom_get_default_pad+0x118>)
    1c12:	4298      	cmp	r0, r3
    1c14:	d1f7      	bne.n	1c06 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c16:	2901      	cmp	r1, #1
    1c18:	d017      	beq.n	1c4a <_sercom_get_default_pad+0x5e>
    1c1a:	2900      	cmp	r1, #0
    1c1c:	d05d      	beq.n	1cda <_sercom_get_default_pad+0xee>
    1c1e:	2902      	cmp	r1, #2
    1c20:	d015      	beq.n	1c4e <_sercom_get_default_pad+0x62>
    1c22:	2903      	cmp	r1, #3
    1c24:	d015      	beq.n	1c52 <_sercom_get_default_pad+0x66>
	return 0;
    1c26:	2000      	movs	r0, #0
    1c28:	e7ee      	b.n	1c08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c2a:	2901      	cmp	r1, #1
    1c2c:	d007      	beq.n	1c3e <_sercom_get_default_pad+0x52>
    1c2e:	2900      	cmp	r1, #0
    1c30:	d051      	beq.n	1cd6 <_sercom_get_default_pad+0xea>
    1c32:	2902      	cmp	r1, #2
    1c34:	d005      	beq.n	1c42 <_sercom_get_default_pad+0x56>
    1c36:	2903      	cmp	r1, #3
    1c38:	d005      	beq.n	1c46 <_sercom_get_default_pad+0x5a>
	return 0;
    1c3a:	2000      	movs	r0, #0
    1c3c:	e7e4      	b.n	1c08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c3e:	4832      	ldr	r0, [pc, #200]	; (1d08 <_sercom_get_default_pad+0x11c>)
    1c40:	e7e2      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1c42:	4832      	ldr	r0, [pc, #200]	; (1d0c <_sercom_get_default_pad+0x120>)
    1c44:	e7e0      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1c46:	4832      	ldr	r0, [pc, #200]	; (1d10 <_sercom_get_default_pad+0x124>)
    1c48:	e7de      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1c4a:	4832      	ldr	r0, [pc, #200]	; (1d14 <_sercom_get_default_pad+0x128>)
    1c4c:	e7dc      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1c4e:	4832      	ldr	r0, [pc, #200]	; (1d18 <_sercom_get_default_pad+0x12c>)
    1c50:	e7da      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1c52:	4832      	ldr	r0, [pc, #200]	; (1d1c <_sercom_get_default_pad+0x130>)
    1c54:	e7d8      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1c56:	2901      	cmp	r1, #1
    1c58:	d007      	beq.n	1c6a <_sercom_get_default_pad+0x7e>
    1c5a:	2900      	cmp	r1, #0
    1c5c:	d03f      	beq.n	1cde <_sercom_get_default_pad+0xf2>
    1c5e:	2902      	cmp	r1, #2
    1c60:	d005      	beq.n	1c6e <_sercom_get_default_pad+0x82>
    1c62:	2903      	cmp	r1, #3
    1c64:	d005      	beq.n	1c72 <_sercom_get_default_pad+0x86>
	return 0;
    1c66:	2000      	movs	r0, #0
    1c68:	e7ce      	b.n	1c08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c6a:	482d      	ldr	r0, [pc, #180]	; (1d20 <_sercom_get_default_pad+0x134>)
    1c6c:	e7cc      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1c6e:	482d      	ldr	r0, [pc, #180]	; (1d24 <_sercom_get_default_pad+0x138>)
    1c70:	e7ca      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1c72:	482d      	ldr	r0, [pc, #180]	; (1d28 <_sercom_get_default_pad+0x13c>)
    1c74:	e7c8      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1c76:	2901      	cmp	r1, #1
    1c78:	d007      	beq.n	1c8a <_sercom_get_default_pad+0x9e>
    1c7a:	2900      	cmp	r1, #0
    1c7c:	d031      	beq.n	1ce2 <_sercom_get_default_pad+0xf6>
    1c7e:	2902      	cmp	r1, #2
    1c80:	d005      	beq.n	1c8e <_sercom_get_default_pad+0xa2>
    1c82:	2903      	cmp	r1, #3
    1c84:	d005      	beq.n	1c92 <_sercom_get_default_pad+0xa6>
	return 0;
    1c86:	2000      	movs	r0, #0
    1c88:	e7be      	b.n	1c08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c8a:	4828      	ldr	r0, [pc, #160]	; (1d2c <_sercom_get_default_pad+0x140>)
    1c8c:	e7bc      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1c8e:	4828      	ldr	r0, [pc, #160]	; (1d30 <_sercom_get_default_pad+0x144>)
    1c90:	e7ba      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1c92:	4828      	ldr	r0, [pc, #160]	; (1d34 <_sercom_get_default_pad+0x148>)
    1c94:	e7b8      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1c96:	2901      	cmp	r1, #1
    1c98:	d007      	beq.n	1caa <_sercom_get_default_pad+0xbe>
    1c9a:	2900      	cmp	r1, #0
    1c9c:	d023      	beq.n	1ce6 <_sercom_get_default_pad+0xfa>
    1c9e:	2902      	cmp	r1, #2
    1ca0:	d005      	beq.n	1cae <_sercom_get_default_pad+0xc2>
    1ca2:	2903      	cmp	r1, #3
    1ca4:	d005      	beq.n	1cb2 <_sercom_get_default_pad+0xc6>
	return 0;
    1ca6:	2000      	movs	r0, #0
    1ca8:	e7ae      	b.n	1c08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1caa:	4823      	ldr	r0, [pc, #140]	; (1d38 <_sercom_get_default_pad+0x14c>)
    1cac:	e7ac      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1cae:	4823      	ldr	r0, [pc, #140]	; (1d3c <_sercom_get_default_pad+0x150>)
    1cb0:	e7aa      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1cb2:	4823      	ldr	r0, [pc, #140]	; (1d40 <_sercom_get_default_pad+0x154>)
    1cb4:	e7a8      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1cb6:	2901      	cmp	r1, #1
    1cb8:	d007      	beq.n	1cca <_sercom_get_default_pad+0xde>
    1cba:	2900      	cmp	r1, #0
    1cbc:	d015      	beq.n	1cea <_sercom_get_default_pad+0xfe>
    1cbe:	2902      	cmp	r1, #2
    1cc0:	d005      	beq.n	1cce <_sercom_get_default_pad+0xe2>
    1cc2:	2903      	cmp	r1, #3
    1cc4:	d005      	beq.n	1cd2 <_sercom_get_default_pad+0xe6>
	return 0;
    1cc6:	2000      	movs	r0, #0
    1cc8:	e79e      	b.n	1c08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1cca:	481e      	ldr	r0, [pc, #120]	; (1d44 <_sercom_get_default_pad+0x158>)
    1ccc:	e79c      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1cce:	481e      	ldr	r0, [pc, #120]	; (1d48 <_sercom_get_default_pad+0x15c>)
    1cd0:	e79a      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1cd2:	481e      	ldr	r0, [pc, #120]	; (1d4c <_sercom_get_default_pad+0x160>)
    1cd4:	e798      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1cd6:	481e      	ldr	r0, [pc, #120]	; (1d50 <_sercom_get_default_pad+0x164>)
    1cd8:	e796      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1cda:	2003      	movs	r0, #3
    1cdc:	e794      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1cde:	481d      	ldr	r0, [pc, #116]	; (1d54 <_sercom_get_default_pad+0x168>)
    1ce0:	e792      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1ce2:	481d      	ldr	r0, [pc, #116]	; (1d58 <_sercom_get_default_pad+0x16c>)
    1ce4:	e790      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1ce6:	481d      	ldr	r0, [pc, #116]	; (1d5c <_sercom_get_default_pad+0x170>)
    1ce8:	e78e      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1cea:	481d      	ldr	r0, [pc, #116]	; (1d60 <_sercom_get_default_pad+0x174>)
    1cec:	e78c      	b.n	1c08 <_sercom_get_default_pad+0x1c>
    1cee:	46c0      	nop			; (mov r8, r8)
    1cf0:	42001000 	.word	0x42001000
    1cf4:	42001800 	.word	0x42001800
    1cf8:	42001c00 	.word	0x42001c00
    1cfc:	42001400 	.word	0x42001400
    1d00:	42000800 	.word	0x42000800
    1d04:	42000c00 	.word	0x42000c00
    1d08:	00050003 	.word	0x00050003
    1d0c:	00060003 	.word	0x00060003
    1d10:	00070003 	.word	0x00070003
    1d14:	00010003 	.word	0x00010003
    1d18:	001e0003 	.word	0x001e0003
    1d1c:	001f0003 	.word	0x001f0003
    1d20:	00090003 	.word	0x00090003
    1d24:	000a0003 	.word	0x000a0003
    1d28:	000b0003 	.word	0x000b0003
    1d2c:	00110003 	.word	0x00110003
    1d30:	00120003 	.word	0x00120003
    1d34:	00130003 	.word	0x00130003
    1d38:	000d0003 	.word	0x000d0003
    1d3c:	000e0003 	.word	0x000e0003
    1d40:	000f0003 	.word	0x000f0003
    1d44:	00170003 	.word	0x00170003
    1d48:	00180003 	.word	0x00180003
    1d4c:	00190003 	.word	0x00190003
    1d50:	00040003 	.word	0x00040003
    1d54:	00080003 	.word	0x00080003
    1d58:	00100003 	.word	0x00100003
    1d5c:	000c0003 	.word	0x000c0003
    1d60:	00160003 	.word	0x00160003

00001d64 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1d64:	b530      	push	{r4, r5, lr}
    1d66:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1d68:	4b0b      	ldr	r3, [pc, #44]	; (1d98 <_sercom_get_sercom_inst_index+0x34>)
    1d6a:	466a      	mov	r2, sp
    1d6c:	cb32      	ldmia	r3!, {r1, r4, r5}
    1d6e:	c232      	stmia	r2!, {r1, r4, r5}
    1d70:	cb32      	ldmia	r3!, {r1, r4, r5}
    1d72:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1d74:	9b00      	ldr	r3, [sp, #0]
    1d76:	4283      	cmp	r3, r0
    1d78:	d00b      	beq.n	1d92 <_sercom_get_sercom_inst_index+0x2e>
    1d7a:	2301      	movs	r3, #1
    1d7c:	009a      	lsls	r2, r3, #2
    1d7e:	4669      	mov	r1, sp
    1d80:	5852      	ldr	r2, [r2, r1]
    1d82:	4282      	cmp	r2, r0
    1d84:	d006      	beq.n	1d94 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d86:	3301      	adds	r3, #1
    1d88:	2b06      	cmp	r3, #6
    1d8a:	d1f7      	bne.n	1d7c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1d8c:	2000      	movs	r0, #0
}
    1d8e:	b007      	add	sp, #28
    1d90:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d92:	2300      	movs	r3, #0
			return i;
    1d94:	b2d8      	uxtb	r0, r3
    1d96:	e7fa      	b.n	1d8e <_sercom_get_sercom_inst_index+0x2a>
    1d98:	0000b67c 	.word	0x0000b67c

00001d9c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1d9c:	4770      	bx	lr
	...

00001da0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1da0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1da2:	4b0a      	ldr	r3, [pc, #40]	; (1dcc <_sercom_set_handler+0x2c>)
    1da4:	781b      	ldrb	r3, [r3, #0]
    1da6:	2b00      	cmp	r3, #0
    1da8:	d10c      	bne.n	1dc4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1daa:	4f09      	ldr	r7, [pc, #36]	; (1dd0 <_sercom_set_handler+0x30>)
    1dac:	4e09      	ldr	r6, [pc, #36]	; (1dd4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1dae:	4d0a      	ldr	r5, [pc, #40]	; (1dd8 <_sercom_set_handler+0x38>)
    1db0:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1db2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1db4:	195a      	adds	r2, r3, r5
    1db6:	6014      	str	r4, [r2, #0]
    1db8:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1dba:	2b18      	cmp	r3, #24
    1dbc:	d1f9      	bne.n	1db2 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1dbe:	2201      	movs	r2, #1
    1dc0:	4b02      	ldr	r3, [pc, #8]	; (1dcc <_sercom_set_handler+0x2c>)
    1dc2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1dc4:	0080      	lsls	r0, r0, #2
    1dc6:	4b02      	ldr	r3, [pc, #8]	; (1dd0 <_sercom_set_handler+0x30>)
    1dc8:	50c1      	str	r1, [r0, r3]
}
    1dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dcc:	2000015a 	.word	0x2000015a
    1dd0:	2000015c 	.word	0x2000015c
    1dd4:	00001d9d 	.word	0x00001d9d
    1dd8:	200024ec 	.word	0x200024ec

00001ddc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1ddc:	b500      	push	{lr}
    1dde:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1de0:	2309      	movs	r3, #9
    1de2:	466a      	mov	r2, sp
    1de4:	7013      	strb	r3, [r2, #0]
    1de6:	3301      	adds	r3, #1
    1de8:	7053      	strb	r3, [r2, #1]
    1dea:	3301      	adds	r3, #1
    1dec:	7093      	strb	r3, [r2, #2]
    1dee:	3301      	adds	r3, #1
    1df0:	70d3      	strb	r3, [r2, #3]
    1df2:	3301      	adds	r3, #1
    1df4:	7113      	strb	r3, [r2, #4]
    1df6:	3301      	adds	r3, #1
    1df8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1dfa:	4b03      	ldr	r3, [pc, #12]	; (1e08 <_sercom_get_interrupt_vector+0x2c>)
    1dfc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1dfe:	466b      	mov	r3, sp
    1e00:	5618      	ldrsb	r0, [r3, r0]
}
    1e02:	b003      	add	sp, #12
    1e04:	bd00      	pop	{pc}
    1e06:	46c0      	nop			; (mov r8, r8)
    1e08:	00001d65 	.word	0x00001d65

00001e0c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1e0c:	b510      	push	{r4, lr}
    1e0e:	4b02      	ldr	r3, [pc, #8]	; (1e18 <SERCOM0_Handler+0xc>)
    1e10:	681b      	ldr	r3, [r3, #0]
    1e12:	2000      	movs	r0, #0
    1e14:	4798      	blx	r3
    1e16:	bd10      	pop	{r4, pc}
    1e18:	2000015c 	.word	0x2000015c

00001e1c <SERCOM1_Handler>:
    1e1c:	b510      	push	{r4, lr}
    1e1e:	4b02      	ldr	r3, [pc, #8]	; (1e28 <SERCOM1_Handler+0xc>)
    1e20:	685b      	ldr	r3, [r3, #4]
    1e22:	2001      	movs	r0, #1
    1e24:	4798      	blx	r3
    1e26:	bd10      	pop	{r4, pc}
    1e28:	2000015c 	.word	0x2000015c

00001e2c <SERCOM2_Handler>:
    1e2c:	b510      	push	{r4, lr}
    1e2e:	4b02      	ldr	r3, [pc, #8]	; (1e38 <SERCOM2_Handler+0xc>)
    1e30:	689b      	ldr	r3, [r3, #8]
    1e32:	2002      	movs	r0, #2
    1e34:	4798      	blx	r3
    1e36:	bd10      	pop	{r4, pc}
    1e38:	2000015c 	.word	0x2000015c

00001e3c <SERCOM3_Handler>:
    1e3c:	b510      	push	{r4, lr}
    1e3e:	4b02      	ldr	r3, [pc, #8]	; (1e48 <SERCOM3_Handler+0xc>)
    1e40:	68db      	ldr	r3, [r3, #12]
    1e42:	2003      	movs	r0, #3
    1e44:	4798      	blx	r3
    1e46:	bd10      	pop	{r4, pc}
    1e48:	2000015c 	.word	0x2000015c

00001e4c <SERCOM4_Handler>:
    1e4c:	b510      	push	{r4, lr}
    1e4e:	4b02      	ldr	r3, [pc, #8]	; (1e58 <SERCOM4_Handler+0xc>)
    1e50:	691b      	ldr	r3, [r3, #16]
    1e52:	2004      	movs	r0, #4
    1e54:	4798      	blx	r3
    1e56:	bd10      	pop	{r4, pc}
    1e58:	2000015c 	.word	0x2000015c

00001e5c <SERCOM5_Handler>:
    1e5c:	b510      	push	{r4, lr}
    1e5e:	4b02      	ldr	r3, [pc, #8]	; (1e68 <SERCOM5_Handler+0xc>)
    1e60:	695b      	ldr	r3, [r3, #20]
    1e62:	2005      	movs	r0, #5
    1e64:	4798      	blx	r3
    1e66:	bd10      	pop	{r4, pc}
    1e68:	2000015c 	.word	0x2000015c

00001e6c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e6e:	46de      	mov	lr, fp
    1e70:	4657      	mov	r7, sl
    1e72:	464e      	mov	r6, r9
    1e74:	4645      	mov	r5, r8
    1e76:	b5e0      	push	{r5, r6, r7, lr}
    1e78:	b091      	sub	sp, #68	; 0x44
    1e7a:	0005      	movs	r5, r0
    1e7c:	000c      	movs	r4, r1
    1e7e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1e80:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1e82:	0008      	movs	r0, r1
    1e84:	4bbc      	ldr	r3, [pc, #752]	; (2178 <STACK_SIZE+0x178>)
    1e86:	4798      	blx	r3
    1e88:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1e8a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1e8c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1e8e:	07db      	lsls	r3, r3, #31
    1e90:	d506      	bpl.n	1ea0 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1e92:	b011      	add	sp, #68	; 0x44
    1e94:	bc3c      	pop	{r2, r3, r4, r5}
    1e96:	4690      	mov	r8, r2
    1e98:	4699      	mov	r9, r3
    1e9a:	46a2      	mov	sl, r4
    1e9c:	46ab      	mov	fp, r5
    1e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1ea0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1ea2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1ea4:	079b      	lsls	r3, r3, #30
    1ea6:	d4f4      	bmi.n	1e92 <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    1ea8:	49b4      	ldr	r1, [pc, #720]	; (217c <STACK_SIZE+0x17c>)
    1eaa:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1eac:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1eae:	2301      	movs	r3, #1
    1eb0:	40bb      	lsls	r3, r7
    1eb2:	4303      	orrs	r3, r0
    1eb4:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1eb6:	a90f      	add	r1, sp, #60	; 0x3c
    1eb8:	272d      	movs	r7, #45	; 0x2d
    1eba:	5df3      	ldrb	r3, [r6, r7]
    1ebc:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1ebe:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1ec0:	b2d3      	uxtb	r3, r2
    1ec2:	9302      	str	r3, [sp, #8]
    1ec4:	0018      	movs	r0, r3
    1ec6:	4bae      	ldr	r3, [pc, #696]	; (2180 <STACK_SIZE+0x180>)
    1ec8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1eca:	9802      	ldr	r0, [sp, #8]
    1ecc:	4bad      	ldr	r3, [pc, #692]	; (2184 <STACK_SIZE+0x184>)
    1ece:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1ed0:	5df0      	ldrb	r0, [r6, r7]
    1ed2:	2100      	movs	r1, #0
    1ed4:	4bac      	ldr	r3, [pc, #688]	; (2188 <STACK_SIZE+0x188>)
    1ed6:	4798      	blx	r3
	module->character_size = config->character_size;
    1ed8:	7af3      	ldrb	r3, [r6, #11]
    1eda:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1edc:	2324      	movs	r3, #36	; 0x24
    1ede:	5cf3      	ldrb	r3, [r6, r3]
    1ee0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1ee2:	2325      	movs	r3, #37	; 0x25
    1ee4:	5cf3      	ldrb	r3, [r6, r3]
    1ee6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1ee8:	7ef3      	ldrb	r3, [r6, #27]
    1eea:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1eec:	7f33      	ldrb	r3, [r6, #28]
    1eee:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ef0:	682b      	ldr	r3, [r5, #0]
    1ef2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1ef4:	0018      	movs	r0, r3
    1ef6:	4ba0      	ldr	r3, [pc, #640]	; (2178 <STACK_SIZE+0x178>)
    1ef8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1efa:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1efc:	2200      	movs	r2, #0
    1efe:	230e      	movs	r3, #14
    1f00:	a906      	add	r1, sp, #24
    1f02:	468c      	mov	ip, r1
    1f04:	4463      	add	r3, ip
    1f06:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1f08:	8a32      	ldrh	r2, [r6, #16]
    1f0a:	9202      	str	r2, [sp, #8]
    1f0c:	2380      	movs	r3, #128	; 0x80
    1f0e:	01db      	lsls	r3, r3, #7
    1f10:	429a      	cmp	r2, r3
    1f12:	d100      	bne.n	1f16 <usart_init+0xaa>
    1f14:	e09e      	b.n	2054 <STACK_SIZE+0x54>
    1f16:	d90f      	bls.n	1f38 <usart_init+0xcc>
    1f18:	23c0      	movs	r3, #192	; 0xc0
    1f1a:	01db      	lsls	r3, r3, #7
    1f1c:	9a02      	ldr	r2, [sp, #8]
    1f1e:	429a      	cmp	r2, r3
    1f20:	d100      	bne.n	1f24 <usart_init+0xb8>
    1f22:	e092      	b.n	204a <STACK_SIZE+0x4a>
    1f24:	2380      	movs	r3, #128	; 0x80
    1f26:	021b      	lsls	r3, r3, #8
    1f28:	429a      	cmp	r2, r3
    1f2a:	d000      	beq.n	1f2e <usart_init+0xc2>
    1f2c:	e11f      	b.n	216e <STACK_SIZE+0x16e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1f2e:	2303      	movs	r3, #3
    1f30:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1f32:	2300      	movs	r3, #0
    1f34:	9307      	str	r3, [sp, #28]
    1f36:	e008      	b.n	1f4a <usart_init+0xde>
	switch (config->sample_rate) {
    1f38:	2380      	movs	r3, #128	; 0x80
    1f3a:	019b      	lsls	r3, r3, #6
    1f3c:	429a      	cmp	r2, r3
    1f3e:	d000      	beq.n	1f42 <usart_init+0xd6>
    1f40:	e115      	b.n	216e <STACK_SIZE+0x16e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1f42:	2310      	movs	r3, #16
    1f44:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1f46:	3b0f      	subs	r3, #15
    1f48:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1f4a:	6833      	ldr	r3, [r6, #0]
    1f4c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1f4e:	68f3      	ldr	r3, [r6, #12]
    1f50:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1f52:	6973      	ldr	r3, [r6, #20]
    1f54:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1f56:	7e33      	ldrb	r3, [r6, #24]
    1f58:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1f5a:	2326      	movs	r3, #38	; 0x26
    1f5c:	5cf3      	ldrb	r3, [r6, r3]
    1f5e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1f60:	6873      	ldr	r3, [r6, #4]
    1f62:	4699      	mov	r9, r3
	switch (transfer_mode)
    1f64:	2b00      	cmp	r3, #0
    1f66:	d100      	bne.n	1f6a <usart_init+0xfe>
    1f68:	e0a0      	b.n	20ac <STACK_SIZE+0xac>
    1f6a:	2380      	movs	r3, #128	; 0x80
    1f6c:	055b      	lsls	r3, r3, #21
    1f6e:	4599      	cmp	r9, r3
    1f70:	d100      	bne.n	1f74 <usart_init+0x108>
    1f72:	e084      	b.n	207e <STACK_SIZE+0x7e>
	if(config->encoding_format_enable) {
    1f74:	7e73      	ldrb	r3, [r6, #25]
    1f76:	2b00      	cmp	r3, #0
    1f78:	d002      	beq.n	1f80 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1f7a:	7eb3      	ldrb	r3, [r6, #26]
    1f7c:	4642      	mov	r2, r8
    1f7e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1f80:	682a      	ldr	r2, [r5, #0]
    1f82:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1f84:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1f86:	2b00      	cmp	r3, #0
    1f88:	d1fc      	bne.n	1f84 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    1f8a:	330e      	adds	r3, #14
    1f8c:	aa06      	add	r2, sp, #24
    1f8e:	4694      	mov	ip, r2
    1f90:	4463      	add	r3, ip
    1f92:	881b      	ldrh	r3, [r3, #0]
    1f94:	4642      	mov	r2, r8
    1f96:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1f98:	9b05      	ldr	r3, [sp, #20]
    1f9a:	9a03      	ldr	r2, [sp, #12]
    1f9c:	4313      	orrs	r3, r2
    1f9e:	9a04      	ldr	r2, [sp, #16]
    1fa0:	4313      	orrs	r3, r2
    1fa2:	464a      	mov	r2, r9
    1fa4:	4313      	orrs	r3, r2
    1fa6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1fa8:	465b      	mov	r3, fp
    1faa:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1fac:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1fae:	4653      	mov	r3, sl
    1fb0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1fb2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1fb4:	2327      	movs	r3, #39	; 0x27
    1fb6:	5cf3      	ldrb	r3, [r6, r3]
    1fb8:	2b00      	cmp	r3, #0
    1fba:	d101      	bne.n	1fc0 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1fbc:	3304      	adds	r3, #4
    1fbe:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1fc0:	7e73      	ldrb	r3, [r6, #25]
    1fc2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1fc4:	7f32      	ldrb	r2, [r6, #28]
    1fc6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1fc8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1fca:	7f72      	ldrb	r2, [r6, #29]
    1fcc:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1fce:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1fd0:	2224      	movs	r2, #36	; 0x24
    1fd2:	5cb2      	ldrb	r2, [r6, r2]
    1fd4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1fd6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1fd8:	2225      	movs	r2, #37	; 0x25
    1fda:	5cb2      	ldrb	r2, [r6, r2]
    1fdc:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1fde:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1fe0:	7ab1      	ldrb	r1, [r6, #10]
    1fe2:	7af2      	ldrb	r2, [r6, #11]
    1fe4:	4311      	orrs	r1, r2
    1fe6:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1fe8:	8933      	ldrh	r3, [r6, #8]
    1fea:	2bff      	cmp	r3, #255	; 0xff
    1fec:	d100      	bne.n	1ff0 <usart_init+0x184>
    1fee:	e081      	b.n	20f4 <STACK_SIZE+0xf4>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1ff0:	2280      	movs	r2, #128	; 0x80
    1ff2:	0452      	lsls	r2, r2, #17
    1ff4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1ff6:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1ff8:	232c      	movs	r3, #44	; 0x2c
    1ffa:	5cf3      	ldrb	r3, [r6, r3]
    1ffc:	2b00      	cmp	r3, #0
    1ffe:	d103      	bne.n	2008 <STACK_SIZE+0x8>
    2000:	4b62      	ldr	r3, [pc, #392]	; (218c <STACK_SIZE+0x18c>)
    2002:	789b      	ldrb	r3, [r3, #2]
    2004:	079b      	lsls	r3, r3, #30
    2006:	d501      	bpl.n	200c <STACK_SIZE+0xc>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2008:	2380      	movs	r3, #128	; 0x80
    200a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    200c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    200e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2010:	2b00      	cmp	r3, #0
    2012:	d1fc      	bne.n	200e <STACK_SIZE+0xe>
	usart_hw->CTRLB.reg = ctrlb;
    2014:	4643      	mov	r3, r8
    2016:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2018:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    201a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    201c:	2b00      	cmp	r3, #0
    201e:	d1fc      	bne.n	201a <STACK_SIZE+0x1a>
	usart_hw->CTRLA.reg = ctrla;
    2020:	4643      	mov	r3, r8
    2022:	601f      	str	r7, [r3, #0]
    2024:	ab0e      	add	r3, sp, #56	; 0x38
    2026:	2280      	movs	r2, #128	; 0x80
    2028:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    202a:	2200      	movs	r2, #0
    202c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    202e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2030:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2032:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2034:	930a      	str	r3, [sp, #40]	; 0x28
    2036:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2038:	930b      	str	r3, [sp, #44]	; 0x2c
    203a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    203c:	930c      	str	r3, [sp, #48]	; 0x30
    203e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2040:	9302      	str	r3, [sp, #8]
    2042:	930d      	str	r3, [sp, #52]	; 0x34
    2044:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2046:	ae0a      	add	r6, sp, #40	; 0x28
    2048:	e063      	b.n	2112 <STACK_SIZE+0x112>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    204a:	2308      	movs	r3, #8
    204c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    204e:	3b07      	subs	r3, #7
    2050:	9307      	str	r3, [sp, #28]
    2052:	e77a      	b.n	1f4a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2054:	6833      	ldr	r3, [r6, #0]
    2056:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2058:	68f3      	ldr	r3, [r6, #12]
    205a:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    205c:	6973      	ldr	r3, [r6, #20]
    205e:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2060:	7e33      	ldrb	r3, [r6, #24]
    2062:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2064:	2326      	movs	r3, #38	; 0x26
    2066:	5cf3      	ldrb	r3, [r6, r3]
    2068:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    206a:	6873      	ldr	r3, [r6, #4]
    206c:	4699      	mov	r9, r3
	switch (transfer_mode)
    206e:	2b00      	cmp	r3, #0
    2070:	d018      	beq.n	20a4 <STACK_SIZE+0xa4>
    2072:	2380      	movs	r3, #128	; 0x80
    2074:	055b      	lsls	r3, r3, #21
    2076:	4599      	cmp	r9, r3
    2078:	d001      	beq.n	207e <STACK_SIZE+0x7e>
	enum status_code status_code = STATUS_OK;
    207a:	2000      	movs	r0, #0
    207c:	e025      	b.n	20ca <STACK_SIZE+0xca>
			if (!config->use_external_clock) {
    207e:	2327      	movs	r3, #39	; 0x27
    2080:	5cf3      	ldrb	r3, [r6, r3]
    2082:	2b00      	cmp	r3, #0
    2084:	d000      	beq.n	2088 <STACK_SIZE+0x88>
    2086:	e775      	b.n	1f74 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2088:	6a33      	ldr	r3, [r6, #32]
    208a:	001f      	movs	r7, r3
    208c:	b2c0      	uxtb	r0, r0
    208e:	4b40      	ldr	r3, [pc, #256]	; (2190 <STACK_SIZE+0x190>)
    2090:	4798      	blx	r3
    2092:	0001      	movs	r1, r0
    2094:	220e      	movs	r2, #14
    2096:	ab06      	add	r3, sp, #24
    2098:	469c      	mov	ip, r3
    209a:	4462      	add	r2, ip
    209c:	0038      	movs	r0, r7
    209e:	4b3d      	ldr	r3, [pc, #244]	; (2194 <STACK_SIZE+0x194>)
    20a0:	4798      	blx	r3
    20a2:	e012      	b.n	20ca <STACK_SIZE+0xca>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    20a4:	2308      	movs	r3, #8
    20a6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    20a8:	2300      	movs	r3, #0
    20aa:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    20ac:	2327      	movs	r3, #39	; 0x27
    20ae:	5cf3      	ldrb	r3, [r6, r3]
    20b0:	2b00      	cmp	r3, #0
    20b2:	d00e      	beq.n	20d2 <STACK_SIZE+0xd2>
				status_code =
    20b4:	9b06      	ldr	r3, [sp, #24]
    20b6:	9300      	str	r3, [sp, #0]
    20b8:	9b07      	ldr	r3, [sp, #28]
    20ba:	220e      	movs	r2, #14
    20bc:	a906      	add	r1, sp, #24
    20be:	468c      	mov	ip, r1
    20c0:	4462      	add	r2, ip
    20c2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    20c4:	6a30      	ldr	r0, [r6, #32]
    20c6:	4f34      	ldr	r7, [pc, #208]	; (2198 <STACK_SIZE+0x198>)
    20c8:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    20ca:	2800      	cmp	r0, #0
    20cc:	d000      	beq.n	20d0 <STACK_SIZE+0xd0>
    20ce:	e6e0      	b.n	1e92 <usart_init+0x26>
    20d0:	e750      	b.n	1f74 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    20d2:	6a33      	ldr	r3, [r6, #32]
    20d4:	001f      	movs	r7, r3
    20d6:	b2c0      	uxtb	r0, r0
    20d8:	4b2d      	ldr	r3, [pc, #180]	; (2190 <STACK_SIZE+0x190>)
    20da:	4798      	blx	r3
    20dc:	0001      	movs	r1, r0
				status_code =
    20de:	9b06      	ldr	r3, [sp, #24]
    20e0:	9300      	str	r3, [sp, #0]
    20e2:	9b07      	ldr	r3, [sp, #28]
    20e4:	220e      	movs	r2, #14
    20e6:	a806      	add	r0, sp, #24
    20e8:	4684      	mov	ip, r0
    20ea:	4462      	add	r2, ip
    20ec:	0038      	movs	r0, r7
    20ee:	4f2a      	ldr	r7, [pc, #168]	; (2198 <STACK_SIZE+0x198>)
    20f0:	47b8      	blx	r7
    20f2:	e7ea      	b.n	20ca <STACK_SIZE+0xca>
		if(config->lin_slave_enable) {
    20f4:	7ef3      	ldrb	r3, [r6, #27]
    20f6:	2b00      	cmp	r3, #0
    20f8:	d100      	bne.n	20fc <STACK_SIZE+0xfc>
    20fa:	e77d      	b.n	1ff8 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    20fc:	2380      	movs	r3, #128	; 0x80
    20fe:	04db      	lsls	r3, r3, #19
    2100:	431f      	orrs	r7, r3
    2102:	e779      	b.n	1ff8 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2104:	0020      	movs	r0, r4
    2106:	4b25      	ldr	r3, [pc, #148]	; (219c <STACK_SIZE+0x19c>)
    2108:	4798      	blx	r3
    210a:	e007      	b.n	211c <STACK_SIZE+0x11c>
    210c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    210e:	2f04      	cmp	r7, #4
    2110:	d00d      	beq.n	212e <STACK_SIZE+0x12e>
    2112:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2114:	00bb      	lsls	r3, r7, #2
    2116:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2118:	2800      	cmp	r0, #0
    211a:	d0f3      	beq.n	2104 <STACK_SIZE+0x104>
		if (current_pinmux != PINMUX_UNUSED) {
    211c:	1c43      	adds	r3, r0, #1
    211e:	d0f5      	beq.n	210c <STACK_SIZE+0x10c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2120:	a90e      	add	r1, sp, #56	; 0x38
    2122:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2124:	0c00      	lsrs	r0, r0, #16
    2126:	b2c0      	uxtb	r0, r0
    2128:	4b1d      	ldr	r3, [pc, #116]	; (21a0 <STACK_SIZE+0x1a0>)
    212a:	4798      	blx	r3
    212c:	e7ee      	b.n	210c <STACK_SIZE+0x10c>
		module->callback[i]            = NULL;
    212e:	2300      	movs	r3, #0
    2130:	60eb      	str	r3, [r5, #12]
    2132:	612b      	str	r3, [r5, #16]
    2134:	616b      	str	r3, [r5, #20]
    2136:	61ab      	str	r3, [r5, #24]
    2138:	61eb      	str	r3, [r5, #28]
    213a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    213c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    213e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2140:	2200      	movs	r2, #0
    2142:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2144:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2146:	3330      	adds	r3, #48	; 0x30
    2148:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    214a:	3301      	adds	r3, #1
    214c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    214e:	3301      	adds	r3, #1
    2150:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2152:	3301      	adds	r3, #1
    2154:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2156:	6828      	ldr	r0, [r5, #0]
    2158:	4b07      	ldr	r3, [pc, #28]	; (2178 <STACK_SIZE+0x178>)
    215a:	4798      	blx	r3
    215c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    215e:	4911      	ldr	r1, [pc, #68]	; (21a4 <STACK_SIZE+0x1a4>)
    2160:	4b11      	ldr	r3, [pc, #68]	; (21a8 <STACK_SIZE+0x1a8>)
    2162:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2164:	00a4      	lsls	r4, r4, #2
    2166:	4b11      	ldr	r3, [pc, #68]	; (21ac <STACK_SIZE+0x1ac>)
    2168:	50e5      	str	r5, [r4, r3]
	return status_code;
    216a:	2000      	movs	r0, #0
    216c:	e691      	b.n	1e92 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    216e:	2310      	movs	r3, #16
    2170:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2172:	2300      	movs	r3, #0
    2174:	9307      	str	r3, [sp, #28]
    2176:	e6e8      	b.n	1f4a <usart_init+0xde>
    2178:	00001d65 	.word	0x00001d65
    217c:	40000400 	.word	0x40000400
    2180:	00002b41 	.word	0x00002b41
    2184:	00002ab5 	.word	0x00002ab5
    2188:	00001ba1 	.word	0x00001ba1
    218c:	41002000 	.word	0x41002000
    2190:	00002b5d 	.word	0x00002b5d
    2194:	00001ae3 	.word	0x00001ae3
    2198:	00001b0d 	.word	0x00001b0d
    219c:	00001bed 	.word	0x00001bed
    21a0:	00002c39 	.word	0x00002c39
    21a4:	0000233d 	.word	0x0000233d
    21a8:	00001da1 	.word	0x00001da1
    21ac:	200024ec 	.word	0x200024ec

000021b0 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    21b0:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    21b2:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    21b4:	2a00      	cmp	r2, #0
    21b6:	d101      	bne.n	21bc <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    21b8:	0018      	movs	r0, r3
    21ba:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    21bc:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    21be:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    21c0:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    21c2:	2a00      	cmp	r2, #0
    21c4:	d1f8      	bne.n	21b8 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    21c6:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    21c8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    21ca:	2a00      	cmp	r2, #0
    21cc:	d1fc      	bne.n	21c8 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    21ce:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    21d0:	2102      	movs	r1, #2
    21d2:	7e1a      	ldrb	r2, [r3, #24]
    21d4:	420a      	tst	r2, r1
    21d6:	d0fc      	beq.n	21d2 <usart_write_wait+0x22>
	return STATUS_OK;
    21d8:	2300      	movs	r3, #0
    21da:	e7ed      	b.n	21b8 <usart_write_wait+0x8>

000021dc <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    21dc:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    21de:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    21e0:	2a00      	cmp	r2, #0
    21e2:	d101      	bne.n	21e8 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    21e4:	0018      	movs	r0, r3
    21e6:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    21e8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    21ea:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    21ec:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    21ee:	2a00      	cmp	r2, #0
    21f0:	d1f8      	bne.n	21e4 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    21f2:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    21f4:	7e10      	ldrb	r0, [r2, #24]
    21f6:	0740      	lsls	r0, r0, #29
    21f8:	d5f4      	bpl.n	21e4 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    21fa:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    21fc:	2b00      	cmp	r3, #0
    21fe:	d1fc      	bne.n	21fa <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2200:	8b53      	ldrh	r3, [r2, #26]
    2202:	b2db      	uxtb	r3, r3
	if (error_code) {
    2204:	0698      	lsls	r0, r3, #26
    2206:	d01d      	beq.n	2244 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2208:	0798      	lsls	r0, r3, #30
    220a:	d503      	bpl.n	2214 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    220c:	2302      	movs	r3, #2
    220e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2210:	3318      	adds	r3, #24
    2212:	e7e7      	b.n	21e4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2214:	0758      	lsls	r0, r3, #29
    2216:	d503      	bpl.n	2220 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2218:	2304      	movs	r3, #4
    221a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    221c:	331a      	adds	r3, #26
    221e:	e7e1      	b.n	21e4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2220:	07d8      	lsls	r0, r3, #31
    2222:	d503      	bpl.n	222c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2224:	2301      	movs	r3, #1
    2226:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2228:	3312      	adds	r3, #18
    222a:	e7db      	b.n	21e4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    222c:	06d8      	lsls	r0, r3, #27
    222e:	d503      	bpl.n	2238 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2230:	2310      	movs	r3, #16
    2232:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2234:	3332      	adds	r3, #50	; 0x32
    2236:	e7d5      	b.n	21e4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2238:	069b      	lsls	r3, r3, #26
    223a:	d503      	bpl.n	2244 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    223c:	2320      	movs	r3, #32
    223e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2240:	3321      	adds	r3, #33	; 0x21
    2242:	e7cf      	b.n	21e4 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2244:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2246:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2248:	2300      	movs	r3, #0
    224a:	e7cb      	b.n	21e4 <usart_read_wait+0x8>

0000224c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    224e:	0006      	movs	r6, r0
    2250:	000c      	movs	r4, r1
    2252:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2254:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2256:	4b0a      	ldr	r3, [pc, #40]	; (2280 <_usart_write_buffer+0x34>)
    2258:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    225a:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    225c:	b29b      	uxth	r3, r3
    225e:	2b00      	cmp	r3, #0
    2260:	d003      	beq.n	226a <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    2262:	4b08      	ldr	r3, [pc, #32]	; (2284 <_usart_write_buffer+0x38>)
    2264:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2266:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    2268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    226a:	85f5      	strh	r5, [r6, #46]	; 0x2e
    226c:	4b05      	ldr	r3, [pc, #20]	; (2284 <_usart_write_buffer+0x38>)
    226e:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    2270:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    2272:	2205      	movs	r2, #5
    2274:	2333      	movs	r3, #51	; 0x33
    2276:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    2278:	3b32      	subs	r3, #50	; 0x32
    227a:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    227c:	2000      	movs	r0, #0
    227e:	e7f3      	b.n	2268 <_usart_write_buffer+0x1c>
    2280:	000017ad 	.word	0x000017ad
    2284:	000017ed 	.word	0x000017ed

00002288 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    228a:	0004      	movs	r4, r0
    228c:	000d      	movs	r5, r1
    228e:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2290:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2292:	4b0f      	ldr	r3, [pc, #60]	; (22d0 <_usart_read_buffer+0x48>)
    2294:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2296:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2298:	b29b      	uxth	r3, r3
    229a:	2b00      	cmp	r3, #0
    229c:	d003      	beq.n	22a6 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    229e:	4b0d      	ldr	r3, [pc, #52]	; (22d4 <_usart_read_buffer+0x4c>)
    22a0:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    22a2:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    22a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    22a6:	85a6      	strh	r6, [r4, #44]	; 0x2c
    22a8:	4b0a      	ldr	r3, [pc, #40]	; (22d4 <_usart_read_buffer+0x4c>)
    22aa:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    22ac:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    22ae:	2205      	movs	r2, #5
    22b0:	2332      	movs	r3, #50	; 0x32
    22b2:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    22b4:	3b2e      	subs	r3, #46	; 0x2e
    22b6:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    22b8:	7a23      	ldrb	r3, [r4, #8]
    22ba:	2b00      	cmp	r3, #0
    22bc:	d001      	beq.n	22c2 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    22be:	2320      	movs	r3, #32
    22c0:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    22c2:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    22c4:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    22c6:	2b00      	cmp	r3, #0
    22c8:	d0ec      	beq.n	22a4 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    22ca:	2308      	movs	r3, #8
    22cc:	75bb      	strb	r3, [r7, #22]
    22ce:	e7e9      	b.n	22a4 <_usart_read_buffer+0x1c>
    22d0:	000017ad 	.word	0x000017ad
    22d4:	000017ed 	.word	0x000017ed

000022d8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    22d8:	1c93      	adds	r3, r2, #2
    22da:	009b      	lsls	r3, r3, #2
    22dc:	18c3      	adds	r3, r0, r3
    22de:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    22e0:	2130      	movs	r1, #48	; 0x30
    22e2:	2301      	movs	r3, #1
    22e4:	4093      	lsls	r3, r2
    22e6:	001a      	movs	r2, r3
    22e8:	5c43      	ldrb	r3, [r0, r1]
    22ea:	4313      	orrs	r3, r2
    22ec:	5443      	strb	r3, [r0, r1]
}
    22ee:	4770      	bx	lr

000022f0 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    22f0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    22f2:	2201      	movs	r2, #1
    22f4:	4b01      	ldr	r3, [pc, #4]	; (22fc <usart_read_job+0xc>)
    22f6:	4798      	blx	r3
}
    22f8:	bd10      	pop	{r4, pc}
    22fa:	46c0      	nop			; (mov r8, r8)
    22fc:	00002289 	.word	0x00002289

00002300 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2300:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2302:	2317      	movs	r3, #23
	if (length == 0) {
    2304:	2a00      	cmp	r2, #0
    2306:	d101      	bne.n	230c <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    2308:	0018      	movs	r0, r3
    230a:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    230c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    230e:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    2310:	2c00      	cmp	r4, #0
    2312:	d0f9      	beq.n	2308 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    2314:	4b01      	ldr	r3, [pc, #4]	; (231c <usart_write_buffer_job+0x1c>)
    2316:	4798      	blx	r3
    2318:	0003      	movs	r3, r0
    231a:	e7f5      	b.n	2308 <usart_write_buffer_job+0x8>
    231c:	0000224d 	.word	0x0000224d

00002320 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    2320:	2900      	cmp	r1, #0
    2322:	d003      	beq.n	232c <usart_get_job_status+0xc>
    2324:	2901      	cmp	r1, #1
    2326:	d005      	beq.n	2334 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    2328:	2017      	movs	r0, #23
    232a:	e002      	b.n	2332 <usart_get_job_status+0x12>
			status_code = module->rx_status;
    232c:	2332      	movs	r3, #50	; 0x32
    232e:	5cc0      	ldrb	r0, [r0, r3]
    2330:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    2332:	4770      	bx	lr
			status_code = module->tx_status;
    2334:	2333      	movs	r3, #51	; 0x33
    2336:	5cc0      	ldrb	r0, [r0, r3]
    2338:	b2c0      	uxtb	r0, r0
			break;
    233a:	e7fa      	b.n	2332 <usart_get_job_status+0x12>

0000233c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    233e:	0080      	lsls	r0, r0, #2
    2340:	4b62      	ldr	r3, [pc, #392]	; (24cc <_usart_interrupt_handler+0x190>)
    2342:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2344:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2346:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2348:	2b00      	cmp	r3, #0
    234a:	d1fc      	bne.n	2346 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    234c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    234e:	7da6      	ldrb	r6, [r4, #22]
    2350:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2352:	2330      	movs	r3, #48	; 0x30
    2354:	5ceb      	ldrb	r3, [r5, r3]
    2356:	2231      	movs	r2, #49	; 0x31
    2358:	5caf      	ldrb	r7, [r5, r2]
    235a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    235c:	07f3      	lsls	r3, r6, #31
    235e:	d522      	bpl.n	23a6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2360:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2362:	b29b      	uxth	r3, r3
    2364:	2b00      	cmp	r3, #0
    2366:	d01c      	beq.n	23a2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2368:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    236a:	7813      	ldrb	r3, [r2, #0]
    236c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    236e:	1c51      	adds	r1, r2, #1
    2370:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2372:	7969      	ldrb	r1, [r5, #5]
    2374:	2901      	cmp	r1, #1
    2376:	d00e      	beq.n	2396 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2378:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    237a:	05db      	lsls	r3, r3, #23
    237c:	0ddb      	lsrs	r3, r3, #23
    237e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2380:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2382:	3b01      	subs	r3, #1
    2384:	b29b      	uxth	r3, r3
    2386:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2388:	2b00      	cmp	r3, #0
    238a:	d10c      	bne.n	23a6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    238c:	3301      	adds	r3, #1
    238e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2390:	3301      	adds	r3, #1
    2392:	75a3      	strb	r3, [r4, #22]
    2394:	e007      	b.n	23a6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2396:	7851      	ldrb	r1, [r2, #1]
    2398:	0209      	lsls	r1, r1, #8
    239a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    239c:	3202      	adds	r2, #2
    239e:	62aa      	str	r2, [r5, #40]	; 0x28
    23a0:	e7eb      	b.n	237a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    23a2:	2301      	movs	r3, #1
    23a4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    23a6:	07b3      	lsls	r3, r6, #30
    23a8:	d506      	bpl.n	23b8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    23aa:	2302      	movs	r3, #2
    23ac:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    23ae:	2200      	movs	r2, #0
    23b0:	3331      	adds	r3, #49	; 0x31
    23b2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    23b4:	07fb      	lsls	r3, r7, #31
    23b6:	d41a      	bmi.n	23ee <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    23b8:	0773      	lsls	r3, r6, #29
    23ba:	d565      	bpl.n	2488 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    23bc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    23be:	b29b      	uxth	r3, r3
    23c0:	2b00      	cmp	r3, #0
    23c2:	d05f      	beq.n	2484 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    23c4:	8b63      	ldrh	r3, [r4, #26]
    23c6:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    23c8:	071a      	lsls	r2, r3, #28
    23ca:	d414      	bmi.n	23f6 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    23cc:	223f      	movs	r2, #63	; 0x3f
    23ce:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    23d0:	2b00      	cmp	r3, #0
    23d2:	d034      	beq.n	243e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    23d4:	079a      	lsls	r2, r3, #30
    23d6:	d511      	bpl.n	23fc <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    23d8:	221a      	movs	r2, #26
    23da:	2332      	movs	r3, #50	; 0x32
    23dc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    23de:	3b30      	subs	r3, #48	; 0x30
    23e0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    23e2:	077b      	lsls	r3, r7, #29
    23e4:	d550      	bpl.n	2488 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    23e6:	0028      	movs	r0, r5
    23e8:	696b      	ldr	r3, [r5, #20]
    23ea:	4798      	blx	r3
    23ec:	e04c      	b.n	2488 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    23ee:	0028      	movs	r0, r5
    23f0:	68eb      	ldr	r3, [r5, #12]
    23f2:	4798      	blx	r3
    23f4:	e7e0      	b.n	23b8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    23f6:	2237      	movs	r2, #55	; 0x37
    23f8:	4013      	ands	r3, r2
    23fa:	e7e9      	b.n	23d0 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    23fc:	075a      	lsls	r2, r3, #29
    23fe:	d505      	bpl.n	240c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2400:	221e      	movs	r2, #30
    2402:	2332      	movs	r3, #50	; 0x32
    2404:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2406:	3b2e      	subs	r3, #46	; 0x2e
    2408:	8363      	strh	r3, [r4, #26]
    240a:	e7ea      	b.n	23e2 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    240c:	07da      	lsls	r2, r3, #31
    240e:	d505      	bpl.n	241c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2410:	2213      	movs	r2, #19
    2412:	2332      	movs	r3, #50	; 0x32
    2414:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2416:	3b31      	subs	r3, #49	; 0x31
    2418:	8363      	strh	r3, [r4, #26]
    241a:	e7e2      	b.n	23e2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    241c:	06da      	lsls	r2, r3, #27
    241e:	d505      	bpl.n	242c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2420:	2242      	movs	r2, #66	; 0x42
    2422:	2332      	movs	r3, #50	; 0x32
    2424:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2426:	3b22      	subs	r3, #34	; 0x22
    2428:	8363      	strh	r3, [r4, #26]
    242a:	e7da      	b.n	23e2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    242c:	2220      	movs	r2, #32
    242e:	421a      	tst	r2, r3
    2430:	d0d7      	beq.n	23e2 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2432:	3221      	adds	r2, #33	; 0x21
    2434:	2332      	movs	r3, #50	; 0x32
    2436:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2438:	3b12      	subs	r3, #18
    243a:	8363      	strh	r3, [r4, #26]
    243c:	e7d1      	b.n	23e2 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    243e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2440:	05db      	lsls	r3, r3, #23
    2442:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2444:	b2da      	uxtb	r2, r3
    2446:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2448:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    244a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    244c:	1c51      	adds	r1, r2, #1
    244e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2450:	7969      	ldrb	r1, [r5, #5]
    2452:	2901      	cmp	r1, #1
    2454:	d010      	beq.n	2478 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2456:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2458:	3b01      	subs	r3, #1
    245a:	b29b      	uxth	r3, r3
    245c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    245e:	2b00      	cmp	r3, #0
    2460:	d112      	bne.n	2488 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2462:	3304      	adds	r3, #4
    2464:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2466:	2200      	movs	r2, #0
    2468:	332e      	adds	r3, #46	; 0x2e
    246a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    246c:	07bb      	lsls	r3, r7, #30
    246e:	d50b      	bpl.n	2488 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2470:	0028      	movs	r0, r5
    2472:	692b      	ldr	r3, [r5, #16]
    2474:	4798      	blx	r3
    2476:	e007      	b.n	2488 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2478:	0a1b      	lsrs	r3, r3, #8
    247a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    247c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    247e:	3301      	adds	r3, #1
    2480:	626b      	str	r3, [r5, #36]	; 0x24
    2482:	e7e8      	b.n	2456 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2484:	2304      	movs	r3, #4
    2486:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2488:	06f3      	lsls	r3, r6, #27
    248a:	d504      	bpl.n	2496 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    248c:	2310      	movs	r3, #16
    248e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2490:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2492:	06fb      	lsls	r3, r7, #27
    2494:	d40e      	bmi.n	24b4 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2496:	06b3      	lsls	r3, r6, #26
    2498:	d504      	bpl.n	24a4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    249a:	2320      	movs	r3, #32
    249c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    249e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    24a0:	073b      	lsls	r3, r7, #28
    24a2:	d40b      	bmi.n	24bc <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    24a4:	0733      	lsls	r3, r6, #28
    24a6:	d504      	bpl.n	24b2 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    24a8:	2308      	movs	r3, #8
    24aa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    24ac:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    24ae:	06bb      	lsls	r3, r7, #26
    24b0:	d408      	bmi.n	24c4 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    24b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    24b4:	0028      	movs	r0, r5
    24b6:	69eb      	ldr	r3, [r5, #28]
    24b8:	4798      	blx	r3
    24ba:	e7ec      	b.n	2496 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    24bc:	0028      	movs	r0, r5
    24be:	69ab      	ldr	r3, [r5, #24]
    24c0:	4798      	blx	r3
    24c2:	e7ef      	b.n	24a4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    24c4:	6a2b      	ldr	r3, [r5, #32]
    24c6:	0028      	movs	r0, r5
    24c8:	4798      	blx	r3
}
    24ca:	e7f2      	b.n	24b2 <_usart_interrupt_handler+0x176>
    24cc:	200024ec 	.word	0x200024ec

000024d0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    24d0:	b510      	push	{r4, lr}
	switch (clock_source) {
    24d2:	2808      	cmp	r0, #8
    24d4:	d803      	bhi.n	24de <system_clock_source_get_hz+0xe>
    24d6:	0080      	lsls	r0, r0, #2
    24d8:	4b1c      	ldr	r3, [pc, #112]	; (254c <system_clock_source_get_hz+0x7c>)
    24da:	581b      	ldr	r3, [r3, r0]
    24dc:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    24de:	2000      	movs	r0, #0
    24e0:	e032      	b.n	2548 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    24e2:	4b1b      	ldr	r3, [pc, #108]	; (2550 <system_clock_source_get_hz+0x80>)
    24e4:	6918      	ldr	r0, [r3, #16]
    24e6:	e02f      	b.n	2548 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    24e8:	4b1a      	ldr	r3, [pc, #104]	; (2554 <system_clock_source_get_hz+0x84>)
    24ea:	6a1b      	ldr	r3, [r3, #32]
    24ec:	059b      	lsls	r3, r3, #22
    24ee:	0f9b      	lsrs	r3, r3, #30
    24f0:	4819      	ldr	r0, [pc, #100]	; (2558 <system_clock_source_get_hz+0x88>)
    24f2:	40d8      	lsrs	r0, r3
    24f4:	e028      	b.n	2548 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    24f6:	4b16      	ldr	r3, [pc, #88]	; (2550 <system_clock_source_get_hz+0x80>)
    24f8:	6958      	ldr	r0, [r3, #20]
    24fa:	e025      	b.n	2548 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    24fc:	4b14      	ldr	r3, [pc, #80]	; (2550 <system_clock_source_get_hz+0x80>)
    24fe:	681b      	ldr	r3, [r3, #0]
			return 0;
    2500:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2502:	079b      	lsls	r3, r3, #30
    2504:	d520      	bpl.n	2548 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2506:	4913      	ldr	r1, [pc, #76]	; (2554 <system_clock_source_get_hz+0x84>)
    2508:	2210      	movs	r2, #16
    250a:	68cb      	ldr	r3, [r1, #12]
    250c:	421a      	tst	r2, r3
    250e:	d0fc      	beq.n	250a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    2510:	4b0f      	ldr	r3, [pc, #60]	; (2550 <system_clock_source_get_hz+0x80>)
    2512:	681a      	ldr	r2, [r3, #0]
    2514:	2324      	movs	r3, #36	; 0x24
    2516:	4013      	ands	r3, r2
    2518:	2b04      	cmp	r3, #4
    251a:	d001      	beq.n	2520 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    251c:	480f      	ldr	r0, [pc, #60]	; (255c <system_clock_source_get_hz+0x8c>)
    251e:	e013      	b.n	2548 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2520:	2000      	movs	r0, #0
    2522:	4b0f      	ldr	r3, [pc, #60]	; (2560 <system_clock_source_get_hz+0x90>)
    2524:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2526:	4b0a      	ldr	r3, [pc, #40]	; (2550 <system_clock_source_get_hz+0x80>)
    2528:	689b      	ldr	r3, [r3, #8]
    252a:	041b      	lsls	r3, r3, #16
    252c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    252e:	4358      	muls	r0, r3
    2530:	e00a      	b.n	2548 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2532:	2350      	movs	r3, #80	; 0x50
    2534:	4a07      	ldr	r2, [pc, #28]	; (2554 <system_clock_source_get_hz+0x84>)
    2536:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2538:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    253a:	075b      	lsls	r3, r3, #29
    253c:	d504      	bpl.n	2548 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    253e:	4b04      	ldr	r3, [pc, #16]	; (2550 <system_clock_source_get_hz+0x80>)
    2540:	68d8      	ldr	r0, [r3, #12]
    2542:	e001      	b.n	2548 <system_clock_source_get_hz+0x78>
		return 32768UL;
    2544:	2080      	movs	r0, #128	; 0x80
    2546:	0200      	lsls	r0, r0, #8
	}
}
    2548:	bd10      	pop	{r4, pc}
    254a:	46c0      	nop			; (mov r8, r8)
    254c:	0000b694 	.word	0x0000b694
    2550:	20000174 	.word	0x20000174
    2554:	40000800 	.word	0x40000800
    2558:	007a1200 	.word	0x007a1200
    255c:	02dc6c00 	.word	0x02dc6c00
    2560:	00002b5d 	.word	0x00002b5d

00002564 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2564:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2566:	490c      	ldr	r1, [pc, #48]	; (2598 <system_clock_source_osc8m_set_config+0x34>)
    2568:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    256a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    256c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    256e:	7840      	ldrb	r0, [r0, #1]
    2570:	2201      	movs	r2, #1
    2572:	4010      	ands	r0, r2
    2574:	0180      	lsls	r0, r0, #6
    2576:	2640      	movs	r6, #64	; 0x40
    2578:	43b3      	bics	r3, r6
    257a:	4303      	orrs	r3, r0
    257c:	402a      	ands	r2, r5
    257e:	01d2      	lsls	r2, r2, #7
    2580:	2080      	movs	r0, #128	; 0x80
    2582:	4383      	bics	r3, r0
    2584:	4313      	orrs	r3, r2
    2586:	2203      	movs	r2, #3
    2588:	4022      	ands	r2, r4
    258a:	0212      	lsls	r2, r2, #8
    258c:	4803      	ldr	r0, [pc, #12]	; (259c <system_clock_source_osc8m_set_config+0x38>)
    258e:	4003      	ands	r3, r0
    2590:	4313      	orrs	r3, r2
    2592:	620b      	str	r3, [r1, #32]
}
    2594:	bd70      	pop	{r4, r5, r6, pc}
    2596:	46c0      	nop			; (mov r8, r8)
    2598:	40000800 	.word	0x40000800
    259c:	fffffcff 	.word	0xfffffcff

000025a0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    25a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    25a2:	46de      	mov	lr, fp
    25a4:	4657      	mov	r7, sl
    25a6:	464e      	mov	r6, r9
    25a8:	4645      	mov	r5, r8
    25aa:	b5e0      	push	{r5, r6, r7, lr}
    25ac:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    25ae:	4b26      	ldr	r3, [pc, #152]	; (2648 <system_clock_source_xosc32k_set_config+0xa8>)
    25b0:	469b      	mov	fp, r3
    25b2:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    25b4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    25b6:	7800      	ldrb	r0, [r0, #0]
    25b8:	4242      	negs	r2, r0
    25ba:	4142      	adcs	r2, r0
    25bc:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    25be:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    25c0:	78ca      	ldrb	r2, [r1, #3]
    25c2:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    25c4:	790a      	ldrb	r2, [r1, #4]
    25c6:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    25c8:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    25ca:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    25cc:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    25ce:	688a      	ldr	r2, [r1, #8]
    25d0:	491e      	ldr	r1, [pc, #120]	; (264c <system_clock_source_xosc32k_set_config+0xac>)
    25d2:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    25d4:	2101      	movs	r1, #1
    25d6:	464a      	mov	r2, r9
    25d8:	0092      	lsls	r2, r2, #2
    25da:	4691      	mov	r9, r2
    25dc:	2204      	movs	r2, #4
    25de:	4393      	bics	r3, r2
    25e0:	464a      	mov	r2, r9
    25e2:	4313      	orrs	r3, r2
    25e4:	4642      	mov	r2, r8
    25e6:	400a      	ands	r2, r1
    25e8:	00d2      	lsls	r2, r2, #3
    25ea:	4690      	mov	r8, r2
    25ec:	2208      	movs	r2, #8
    25ee:	4393      	bics	r3, r2
    25f0:	4642      	mov	r2, r8
    25f2:	4313      	orrs	r3, r2
    25f4:	4662      	mov	r2, ip
    25f6:	400a      	ands	r2, r1
    25f8:	0112      	lsls	r2, r2, #4
    25fa:	4694      	mov	ip, r2
    25fc:	2210      	movs	r2, #16
    25fe:	4393      	bics	r3, r2
    2600:	4662      	mov	r2, ip
    2602:	4313      	orrs	r3, r2
    2604:	4008      	ands	r0, r1
    2606:	0140      	lsls	r0, r0, #5
    2608:	2220      	movs	r2, #32
    260a:	4393      	bics	r3, r2
    260c:	4303      	orrs	r3, r0
    260e:	400f      	ands	r7, r1
    2610:	01bf      	lsls	r7, r7, #6
    2612:	2040      	movs	r0, #64	; 0x40
    2614:	4383      	bics	r3, r0
    2616:	433b      	orrs	r3, r7
    2618:	400e      	ands	r6, r1
    261a:	01f6      	lsls	r6, r6, #7
    261c:	3040      	adds	r0, #64	; 0x40
    261e:	4383      	bics	r3, r0
    2620:	4333      	orrs	r3, r6
    2622:	3879      	subs	r0, #121	; 0x79
    2624:	4005      	ands	r5, r0
    2626:	022d      	lsls	r5, r5, #8
    2628:	4809      	ldr	r0, [pc, #36]	; (2650 <system_clock_source_xosc32k_set_config+0xb0>)
    262a:	4003      	ands	r3, r0
    262c:	432b      	orrs	r3, r5
    262e:	4021      	ands	r1, r4
    2630:	0309      	lsls	r1, r1, #12
    2632:	4808      	ldr	r0, [pc, #32]	; (2654 <system_clock_source_xosc32k_set_config+0xb4>)
    2634:	4003      	ands	r3, r0
    2636:	430b      	orrs	r3, r1
    2638:	465a      	mov	r2, fp
    263a:	8293      	strh	r3, [r2, #20]
}
    263c:	bc3c      	pop	{r2, r3, r4, r5}
    263e:	4690      	mov	r8, r2
    2640:	4699      	mov	r9, r3
    2642:	46a2      	mov	sl, r4
    2644:	46ab      	mov	fp, r5
    2646:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2648:	40000800 	.word	0x40000800
    264c:	20000174 	.word	0x20000174
    2650:	fffff8ff 	.word	0xfffff8ff
    2654:	ffffefff 	.word	0xffffefff

00002658 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2658:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    265a:	7a03      	ldrb	r3, [r0, #8]
    265c:	069b      	lsls	r3, r3, #26
    265e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2660:	8942      	ldrh	r2, [r0, #10]
    2662:	0592      	lsls	r2, r2, #22
    2664:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2666:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2668:	4918      	ldr	r1, [pc, #96]	; (26cc <system_clock_source_dfll_set_config+0x74>)
    266a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    266c:	7983      	ldrb	r3, [r0, #6]
    266e:	79c2      	ldrb	r2, [r0, #7]
    2670:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2672:	8842      	ldrh	r2, [r0, #2]
    2674:	8884      	ldrh	r4, [r0, #4]
    2676:	4322      	orrs	r2, r4
    2678:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    267a:	7842      	ldrb	r2, [r0, #1]
    267c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    267e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2680:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2682:	7803      	ldrb	r3, [r0, #0]
    2684:	2b04      	cmp	r3, #4
    2686:	d011      	beq.n	26ac <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2688:	2b20      	cmp	r3, #32
    268a:	d10e      	bne.n	26aa <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    268c:	7b03      	ldrb	r3, [r0, #12]
    268e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2690:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2692:	4313      	orrs	r3, r2
    2694:	89c2      	ldrh	r2, [r0, #14]
    2696:	0412      	lsls	r2, r2, #16
    2698:	490d      	ldr	r1, [pc, #52]	; (26d0 <system_clock_source_dfll_set_config+0x78>)
    269a:	400a      	ands	r2, r1
    269c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    269e:	4a0b      	ldr	r2, [pc, #44]	; (26cc <system_clock_source_dfll_set_config+0x74>)
    26a0:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    26a2:	6811      	ldr	r1, [r2, #0]
    26a4:	4b0b      	ldr	r3, [pc, #44]	; (26d4 <system_clock_source_dfll_set_config+0x7c>)
    26a6:	430b      	orrs	r3, r1
    26a8:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    26aa:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    26ac:	7b03      	ldrb	r3, [r0, #12]
    26ae:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    26b0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    26b2:	4313      	orrs	r3, r2
    26b4:	89c2      	ldrh	r2, [r0, #14]
    26b6:	0412      	lsls	r2, r2, #16
    26b8:	4905      	ldr	r1, [pc, #20]	; (26d0 <system_clock_source_dfll_set_config+0x78>)
    26ba:	400a      	ands	r2, r1
    26bc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    26be:	4a03      	ldr	r2, [pc, #12]	; (26cc <system_clock_source_dfll_set_config+0x74>)
    26c0:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    26c2:	6813      	ldr	r3, [r2, #0]
    26c4:	2104      	movs	r1, #4
    26c6:	430b      	orrs	r3, r1
    26c8:	6013      	str	r3, [r2, #0]
    26ca:	e7ee      	b.n	26aa <system_clock_source_dfll_set_config+0x52>
    26cc:	20000174 	.word	0x20000174
    26d0:	03ff0000 	.word	0x03ff0000
    26d4:	00000424 	.word	0x00000424

000026d8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    26d8:	2808      	cmp	r0, #8
    26da:	d803      	bhi.n	26e4 <system_clock_source_enable+0xc>
    26dc:	0080      	lsls	r0, r0, #2
    26de:	4b25      	ldr	r3, [pc, #148]	; (2774 <system_clock_source_enable+0x9c>)
    26e0:	581b      	ldr	r3, [r3, r0]
    26e2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    26e4:	2017      	movs	r0, #23
    26e6:	e044      	b.n	2772 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    26e8:	4a23      	ldr	r2, [pc, #140]	; (2778 <system_clock_source_enable+0xa0>)
    26ea:	6a13      	ldr	r3, [r2, #32]
    26ec:	2102      	movs	r1, #2
    26ee:	430b      	orrs	r3, r1
    26f0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    26f2:	2000      	movs	r0, #0
    26f4:	e03d      	b.n	2772 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    26f6:	4a20      	ldr	r2, [pc, #128]	; (2778 <system_clock_source_enable+0xa0>)
    26f8:	6993      	ldr	r3, [r2, #24]
    26fa:	2102      	movs	r1, #2
    26fc:	430b      	orrs	r3, r1
    26fe:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2700:	2000      	movs	r0, #0
		break;
    2702:	e036      	b.n	2772 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2704:	4a1c      	ldr	r2, [pc, #112]	; (2778 <system_clock_source_enable+0xa0>)
    2706:	8a13      	ldrh	r3, [r2, #16]
    2708:	2102      	movs	r1, #2
    270a:	430b      	orrs	r3, r1
    270c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    270e:	2000      	movs	r0, #0
		break;
    2710:	e02f      	b.n	2772 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2712:	4a19      	ldr	r2, [pc, #100]	; (2778 <system_clock_source_enable+0xa0>)
    2714:	8a93      	ldrh	r3, [r2, #20]
    2716:	2102      	movs	r1, #2
    2718:	430b      	orrs	r3, r1
    271a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    271c:	2000      	movs	r0, #0
		break;
    271e:	e028      	b.n	2772 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2720:	4916      	ldr	r1, [pc, #88]	; (277c <system_clock_source_enable+0xa4>)
    2722:	680b      	ldr	r3, [r1, #0]
    2724:	2202      	movs	r2, #2
    2726:	4313      	orrs	r3, r2
    2728:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    272a:	4b13      	ldr	r3, [pc, #76]	; (2778 <system_clock_source_enable+0xa0>)
    272c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    272e:	0019      	movs	r1, r3
    2730:	320e      	adds	r2, #14
    2732:	68cb      	ldr	r3, [r1, #12]
    2734:	421a      	tst	r2, r3
    2736:	d0fc      	beq.n	2732 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2738:	4a10      	ldr	r2, [pc, #64]	; (277c <system_clock_source_enable+0xa4>)
    273a:	6891      	ldr	r1, [r2, #8]
    273c:	4b0e      	ldr	r3, [pc, #56]	; (2778 <system_clock_source_enable+0xa0>)
    273e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2740:	6852      	ldr	r2, [r2, #4]
    2742:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2744:	2200      	movs	r2, #0
    2746:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2748:	0019      	movs	r1, r3
    274a:	3210      	adds	r2, #16
    274c:	68cb      	ldr	r3, [r1, #12]
    274e:	421a      	tst	r2, r3
    2750:	d0fc      	beq.n	274c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2752:	4b0a      	ldr	r3, [pc, #40]	; (277c <system_clock_source_enable+0xa4>)
    2754:	681b      	ldr	r3, [r3, #0]
    2756:	b29b      	uxth	r3, r3
    2758:	4a07      	ldr	r2, [pc, #28]	; (2778 <system_clock_source_enable+0xa0>)
    275a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    275c:	2000      	movs	r0, #0
    275e:	e008      	b.n	2772 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2760:	4905      	ldr	r1, [pc, #20]	; (2778 <system_clock_source_enable+0xa0>)
    2762:	2244      	movs	r2, #68	; 0x44
    2764:	5c8b      	ldrb	r3, [r1, r2]
    2766:	2002      	movs	r0, #2
    2768:	4303      	orrs	r3, r0
    276a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    276c:	2000      	movs	r0, #0
		break;
    276e:	e000      	b.n	2772 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2770:	2000      	movs	r0, #0
}
    2772:	4770      	bx	lr
    2774:	0000b6b8 	.word	0x0000b6b8
    2778:	40000800 	.word	0x40000800
    277c:	20000174 	.word	0x20000174

00002780 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2780:	b5f0      	push	{r4, r5, r6, r7, lr}
    2782:	46ce      	mov	lr, r9
    2784:	4647      	mov	r7, r8
    2786:	b580      	push	{r7, lr}
    2788:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    278a:	22c2      	movs	r2, #194	; 0xc2
    278c:	00d2      	lsls	r2, r2, #3
    278e:	4b51      	ldr	r3, [pc, #324]	; (28d4 <system_clock_init+0x154>)
    2790:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2792:	4a51      	ldr	r2, [pc, #324]	; (28d8 <system_clock_init+0x158>)
    2794:	6853      	ldr	r3, [r2, #4]
    2796:	211e      	movs	r1, #30
    2798:	438b      	bics	r3, r1
    279a:	391a      	subs	r1, #26
    279c:	430b      	orrs	r3, r1
    279e:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    27a0:	2202      	movs	r2, #2
    27a2:	ab01      	add	r3, sp, #4
    27a4:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    27a6:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    27a8:	4d4c      	ldr	r5, [pc, #304]	; (28dc <system_clock_init+0x15c>)
    27aa:	b2e0      	uxtb	r0, r4
    27ac:	a901      	add	r1, sp, #4
    27ae:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    27b0:	3401      	adds	r4, #1
    27b2:	2c25      	cmp	r4, #37	; 0x25
    27b4:	d1f9      	bne.n	27aa <system_clock_init+0x2a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    27b6:	a80a      	add	r0, sp, #40	; 0x28
    27b8:	2300      	movs	r3, #0
    27ba:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    27bc:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    27be:	2280      	movs	r2, #128	; 0x80
    27c0:	0212      	lsls	r2, r2, #8
    27c2:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    27c4:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    27c6:	2201      	movs	r2, #1
    27c8:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
    27ca:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    27cc:	2106      	movs	r1, #6
    27ce:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    27d0:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    27d2:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    27d4:	4b42      	ldr	r3, [pc, #264]	; (28e0 <system_clock_init+0x160>)
    27d6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    27d8:	2005      	movs	r0, #5
    27da:	4b42      	ldr	r3, [pc, #264]	; (28e4 <system_clock_init+0x164>)
    27dc:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    27de:	493d      	ldr	r1, [pc, #244]	; (28d4 <system_clock_init+0x154>)
    27e0:	2202      	movs	r2, #2
    27e2:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    27e4:	421a      	tst	r2, r3
    27e6:	d0fc      	beq.n	27e2 <system_clock_init+0x62>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    27e8:	ab05      	add	r3, sp, #20
    27ea:	2100      	movs	r1, #0
    27ec:	2200      	movs	r2, #0
    27ee:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    27f0:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    27f2:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    27f4:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    27f6:	313f      	adds	r1, #63	; 0x3f
    27f8:	8159      	strh	r1, [r3, #10]
	config->coarse_max_step = 1;
    27fa:	393e      	subs	r1, #62	; 0x3e
	config->fine_max_step   = 1;
    27fc:	81d9      	strh	r1, [r3, #14]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    27fe:	3103      	adds	r1, #3
    2800:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2802:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2804:	4b38      	ldr	r3, [pc, #224]	; (28e8 <system_clock_init+0x168>)
    2806:	681b      	ldr	r3, [r3, #0]
    2808:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    280a:	2b3f      	cmp	r3, #63	; 0x3f
    280c:	d05f      	beq.n	28ce <system_clock_init+0x14e>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    280e:	a805      	add	r0, sp, #20
    2810:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2812:	23b7      	movs	r3, #183	; 0xb7
    2814:	00db      	lsls	r3, r3, #3
    2816:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2818:	2307      	movs	r3, #7
    281a:	7303      	strb	r3, [r0, #12]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    281c:	4b33      	ldr	r3, [pc, #204]	; (28ec <system_clock_init+0x16c>)
    281e:	4798      	blx	r3
	config->run_in_standby  = false;
    2820:	a804      	add	r0, sp, #16
    2822:	2500      	movs	r5, #0
    2824:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2826:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    2828:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    282a:	4b31      	ldr	r3, [pc, #196]	; (28f0 <system_clock_init+0x170>)
    282c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    282e:	2006      	movs	r0, #6
    2830:	4f2c      	ldr	r7, [pc, #176]	; (28e4 <system_clock_init+0x164>)
    2832:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2834:	4b2f      	ldr	r3, [pc, #188]	; (28f4 <system_clock_init+0x174>)
    2836:	4798      	blx	r3
	config->division_factor    = 1;
    2838:	ac01      	add	r4, sp, #4
    283a:	2601      	movs	r6, #1
    283c:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    283e:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2840:	2306      	movs	r3, #6
    2842:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    2844:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2846:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2848:	0021      	movs	r1, r4
    284a:	2001      	movs	r0, #1
    284c:	4b2a      	ldr	r3, [pc, #168]	; (28f8 <system_clock_init+0x178>)
    284e:	4699      	mov	r9, r3
    2850:	4798      	blx	r3
    2852:	2001      	movs	r0, #1
    2854:	4b29      	ldr	r3, [pc, #164]	; (28fc <system_clock_init+0x17c>)
    2856:	4698      	mov	r8, r3
    2858:	4798      	blx	r3
	config->division_factor    = 1;
    285a:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    285c:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    285e:	7265      	strb	r5, [r4, #9]
    2860:	2305      	movs	r3, #5
    2862:	7023      	strb	r3, [r4, #0]
    2864:	7226      	strb	r6, [r4, #8]
    2866:	0021      	movs	r1, r4
    2868:	2003      	movs	r0, #3
    286a:	47c8      	blx	r9
    286c:	2003      	movs	r0, #3
    286e:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2870:	2303      	movs	r3, #3
    2872:	7023      	strb	r3, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2874:	0021      	movs	r1, r4
    2876:	2000      	movs	r0, #0
    2878:	4b18      	ldr	r3, [pc, #96]	; (28dc <system_clock_init+0x15c>)
    287a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    287c:	2000      	movs	r0, #0
    287e:	4b20      	ldr	r3, [pc, #128]	; (2900 <system_clock_init+0x180>)
    2880:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2882:	2007      	movs	r0, #7
    2884:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2886:	4913      	ldr	r1, [pc, #76]	; (28d4 <system_clock_init+0x154>)
    2888:	22d0      	movs	r2, #208	; 0xd0
    288a:	68cb      	ldr	r3, [r1, #12]
    288c:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    288e:	2bd0      	cmp	r3, #208	; 0xd0
    2890:	d1fb      	bne.n	288a <system_clock_init+0x10a>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    2892:	4a10      	ldr	r2, [pc, #64]	; (28d4 <system_clock_init+0x154>)
    2894:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2896:	2180      	movs	r1, #128	; 0x80
    2898:	430b      	orrs	r3, r1
    289a:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    289c:	4a19      	ldr	r2, [pc, #100]	; (2904 <system_clock_init+0x184>)
    289e:	2300      	movs	r3, #0
    28a0:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    28a2:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    28a4:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    28a6:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    28a8:	a901      	add	r1, sp, #4
    28aa:	2201      	movs	r2, #1
    28ac:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    28ae:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    28b0:	720b      	strb	r3, [r1, #8]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    28b2:	3307      	adds	r3, #7
    28b4:	700b      	strb	r3, [r1, #0]
    28b6:	724a      	strb	r2, [r1, #9]
    28b8:	2000      	movs	r0, #0
    28ba:	4b0f      	ldr	r3, [pc, #60]	; (28f8 <system_clock_init+0x178>)
    28bc:	4798      	blx	r3
    28be:	2000      	movs	r0, #0
    28c0:	4b0e      	ldr	r3, [pc, #56]	; (28fc <system_clock_init+0x17c>)
    28c2:	4798      	blx	r3
#endif
}
    28c4:	b00f      	add	sp, #60	; 0x3c
    28c6:	bc0c      	pop	{r2, r3}
    28c8:	4690      	mov	r8, r2
    28ca:	4699      	mov	r9, r3
    28cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    28ce:	3b20      	subs	r3, #32
    28d0:	e79d      	b.n	280e <system_clock_init+0x8e>
    28d2:	46c0      	nop			; (mov r8, r8)
    28d4:	40000800 	.word	0x40000800
    28d8:	41004000 	.word	0x41004000
    28dc:	00002b41 	.word	0x00002b41
    28e0:	000025a1 	.word	0x000025a1
    28e4:	000026d9 	.word	0x000026d9
    28e8:	00806024 	.word	0x00806024
    28ec:	00002659 	.word	0x00002659
    28f0:	00002565 	.word	0x00002565
    28f4:	00002909 	.word	0x00002909
    28f8:	0000292d 	.word	0x0000292d
    28fc:	000029e5 	.word	0x000029e5
    2900:	00002ab5 	.word	0x00002ab5
    2904:	40000400 	.word	0x40000400

00002908 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2908:	4a06      	ldr	r2, [pc, #24]	; (2924 <system_gclk_init+0x1c>)
    290a:	6993      	ldr	r3, [r2, #24]
    290c:	2108      	movs	r1, #8
    290e:	430b      	orrs	r3, r1
    2910:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2912:	2201      	movs	r2, #1
    2914:	4b04      	ldr	r3, [pc, #16]	; (2928 <system_gclk_init+0x20>)
    2916:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2918:	0019      	movs	r1, r3
    291a:	780b      	ldrb	r3, [r1, #0]
    291c:	4213      	tst	r3, r2
    291e:	d1fc      	bne.n	291a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2920:	4770      	bx	lr
    2922:	46c0      	nop			; (mov r8, r8)
    2924:	40000400 	.word	0x40000400
    2928:	40000c00 	.word	0x40000c00

0000292c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    292c:	b570      	push	{r4, r5, r6, lr}
    292e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2930:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2932:	780d      	ldrb	r5, [r1, #0]
    2934:	022d      	lsls	r5, r5, #8
    2936:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2938:	784b      	ldrb	r3, [r1, #1]
    293a:	2b00      	cmp	r3, #0
    293c:	d002      	beq.n	2944 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    293e:	2380      	movs	r3, #128	; 0x80
    2940:	02db      	lsls	r3, r3, #11
    2942:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2944:	7a4b      	ldrb	r3, [r1, #9]
    2946:	2b00      	cmp	r3, #0
    2948:	d002      	beq.n	2950 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    294a:	2380      	movs	r3, #128	; 0x80
    294c:	031b      	lsls	r3, r3, #12
    294e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2950:	6848      	ldr	r0, [r1, #4]
    2952:	2801      	cmp	r0, #1
    2954:	d910      	bls.n	2978 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2956:	1e43      	subs	r3, r0, #1
    2958:	4218      	tst	r0, r3
    295a:	d134      	bne.n	29c6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    295c:	2802      	cmp	r0, #2
    295e:	d930      	bls.n	29c2 <system_gclk_gen_set_config+0x96>
    2960:	2302      	movs	r3, #2
    2962:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2964:	3201      	adds	r2, #1
						mask <<= 1) {
    2966:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2968:	4298      	cmp	r0, r3
    296a:	d8fb      	bhi.n	2964 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    296c:	0212      	lsls	r2, r2, #8
    296e:	4332      	orrs	r2, r6
    2970:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2972:	2380      	movs	r3, #128	; 0x80
    2974:	035b      	lsls	r3, r3, #13
    2976:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2978:	7a0b      	ldrb	r3, [r1, #8]
    297a:	2b00      	cmp	r3, #0
    297c:	d002      	beq.n	2984 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    297e:	2380      	movs	r3, #128	; 0x80
    2980:	039b      	lsls	r3, r3, #14
    2982:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2984:	4a13      	ldr	r2, [pc, #76]	; (29d4 <system_gclk_gen_set_config+0xa8>)
    2986:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2988:	b25b      	sxtb	r3, r3
    298a:	2b00      	cmp	r3, #0
    298c:	dbfb      	blt.n	2986 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    298e:	4b12      	ldr	r3, [pc, #72]	; (29d8 <system_gclk_gen_set_config+0xac>)
    2990:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2992:	4b12      	ldr	r3, [pc, #72]	; (29dc <system_gclk_gen_set_config+0xb0>)
    2994:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2996:	4a0f      	ldr	r2, [pc, #60]	; (29d4 <system_gclk_gen_set_config+0xa8>)
    2998:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    299a:	b25b      	sxtb	r3, r3
    299c:	2b00      	cmp	r3, #0
    299e:	dbfb      	blt.n	2998 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    29a0:	4b0c      	ldr	r3, [pc, #48]	; (29d4 <system_gclk_gen_set_config+0xa8>)
    29a2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    29a4:	001a      	movs	r2, r3
    29a6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    29a8:	b25b      	sxtb	r3, r3
    29aa:	2b00      	cmp	r3, #0
    29ac:	dbfb      	blt.n	29a6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    29ae:	4a09      	ldr	r2, [pc, #36]	; (29d4 <system_gclk_gen_set_config+0xa8>)
    29b0:	6853      	ldr	r3, [r2, #4]
    29b2:	2180      	movs	r1, #128	; 0x80
    29b4:	0249      	lsls	r1, r1, #9
    29b6:	400b      	ands	r3, r1
    29b8:	431d      	orrs	r5, r3
    29ba:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    29bc:	4b08      	ldr	r3, [pc, #32]	; (29e0 <system_gclk_gen_set_config+0xb4>)
    29be:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    29c0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    29c2:	2200      	movs	r2, #0
    29c4:	e7d2      	b.n	296c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    29c6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    29c8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    29ca:	2380      	movs	r3, #128	; 0x80
    29cc:	029b      	lsls	r3, r3, #10
    29ce:	431d      	orrs	r5, r3
    29d0:	e7d2      	b.n	2978 <system_gclk_gen_set_config+0x4c>
    29d2:	46c0      	nop			; (mov r8, r8)
    29d4:	40000c00 	.word	0x40000c00
    29d8:	000017ad 	.word	0x000017ad
    29dc:	40000c08 	.word	0x40000c08
    29e0:	000017ed 	.word	0x000017ed

000029e4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    29e4:	b510      	push	{r4, lr}
    29e6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    29e8:	4a0b      	ldr	r2, [pc, #44]	; (2a18 <system_gclk_gen_enable+0x34>)
    29ea:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    29ec:	b25b      	sxtb	r3, r3
    29ee:	2b00      	cmp	r3, #0
    29f0:	dbfb      	blt.n	29ea <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    29f2:	4b0a      	ldr	r3, [pc, #40]	; (2a1c <system_gclk_gen_enable+0x38>)
    29f4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    29f6:	4b0a      	ldr	r3, [pc, #40]	; (2a20 <system_gclk_gen_enable+0x3c>)
    29f8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    29fa:	4a07      	ldr	r2, [pc, #28]	; (2a18 <system_gclk_gen_enable+0x34>)
    29fc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    29fe:	b25b      	sxtb	r3, r3
    2a00:	2b00      	cmp	r3, #0
    2a02:	dbfb      	blt.n	29fc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2a04:	4a04      	ldr	r2, [pc, #16]	; (2a18 <system_gclk_gen_enable+0x34>)
    2a06:	6851      	ldr	r1, [r2, #4]
    2a08:	2380      	movs	r3, #128	; 0x80
    2a0a:	025b      	lsls	r3, r3, #9
    2a0c:	430b      	orrs	r3, r1
    2a0e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2a10:	4b04      	ldr	r3, [pc, #16]	; (2a24 <system_gclk_gen_enable+0x40>)
    2a12:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2a14:	bd10      	pop	{r4, pc}
    2a16:	46c0      	nop			; (mov r8, r8)
    2a18:	40000c00 	.word	0x40000c00
    2a1c:	000017ad 	.word	0x000017ad
    2a20:	40000c04 	.word	0x40000c04
    2a24:	000017ed 	.word	0x000017ed

00002a28 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2a28:	b570      	push	{r4, r5, r6, lr}
    2a2a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2a2c:	4a1a      	ldr	r2, [pc, #104]	; (2a98 <system_gclk_gen_get_hz+0x70>)
    2a2e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2a30:	b25b      	sxtb	r3, r3
    2a32:	2b00      	cmp	r3, #0
    2a34:	dbfb      	blt.n	2a2e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2a36:	4b19      	ldr	r3, [pc, #100]	; (2a9c <system_gclk_gen_get_hz+0x74>)
    2a38:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2a3a:	4b19      	ldr	r3, [pc, #100]	; (2aa0 <system_gclk_gen_get_hz+0x78>)
    2a3c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2a3e:	4a16      	ldr	r2, [pc, #88]	; (2a98 <system_gclk_gen_get_hz+0x70>)
    2a40:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2a42:	b25b      	sxtb	r3, r3
    2a44:	2b00      	cmp	r3, #0
    2a46:	dbfb      	blt.n	2a40 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2a48:	4e13      	ldr	r6, [pc, #76]	; (2a98 <system_gclk_gen_get_hz+0x70>)
    2a4a:	6870      	ldr	r0, [r6, #4]
    2a4c:	04c0      	lsls	r0, r0, #19
    2a4e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2a50:	4b14      	ldr	r3, [pc, #80]	; (2aa4 <system_gclk_gen_get_hz+0x7c>)
    2a52:	4798      	blx	r3
    2a54:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2a56:	4b12      	ldr	r3, [pc, #72]	; (2aa0 <system_gclk_gen_get_hz+0x78>)
    2a58:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2a5a:	6876      	ldr	r6, [r6, #4]
    2a5c:	02f6      	lsls	r6, r6, #11
    2a5e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2a60:	4b11      	ldr	r3, [pc, #68]	; (2aa8 <system_gclk_gen_get_hz+0x80>)
    2a62:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2a64:	4a0c      	ldr	r2, [pc, #48]	; (2a98 <system_gclk_gen_get_hz+0x70>)
    2a66:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2a68:	b25b      	sxtb	r3, r3
    2a6a:	2b00      	cmp	r3, #0
    2a6c:	dbfb      	blt.n	2a66 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2a6e:	4b0a      	ldr	r3, [pc, #40]	; (2a98 <system_gclk_gen_get_hz+0x70>)
    2a70:	689c      	ldr	r4, [r3, #8]
    2a72:	0224      	lsls	r4, r4, #8
    2a74:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2a76:	4b0d      	ldr	r3, [pc, #52]	; (2aac <system_gclk_gen_get_hz+0x84>)
    2a78:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2a7a:	2e00      	cmp	r6, #0
    2a7c:	d107      	bne.n	2a8e <system_gclk_gen_get_hz+0x66>
    2a7e:	2c01      	cmp	r4, #1
    2a80:	d907      	bls.n	2a92 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2a82:	0021      	movs	r1, r4
    2a84:	0028      	movs	r0, r5
    2a86:	4b0a      	ldr	r3, [pc, #40]	; (2ab0 <system_gclk_gen_get_hz+0x88>)
    2a88:	4798      	blx	r3
    2a8a:	0005      	movs	r5, r0
    2a8c:	e001      	b.n	2a92 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2a8e:	3401      	adds	r4, #1
    2a90:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2a92:	0028      	movs	r0, r5
    2a94:	bd70      	pop	{r4, r5, r6, pc}
    2a96:	46c0      	nop			; (mov r8, r8)
    2a98:	40000c00 	.word	0x40000c00
    2a9c:	000017ad 	.word	0x000017ad
    2aa0:	40000c04 	.word	0x40000c04
    2aa4:	000024d1 	.word	0x000024d1
    2aa8:	40000c08 	.word	0x40000c08
    2aac:	000017ed 	.word	0x000017ed
    2ab0:	00009f51 	.word	0x00009f51

00002ab4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2ab4:	b510      	push	{r4, lr}
    2ab6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2ab8:	4b06      	ldr	r3, [pc, #24]	; (2ad4 <system_gclk_chan_enable+0x20>)
    2aba:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2abc:	4b06      	ldr	r3, [pc, #24]	; (2ad8 <system_gclk_chan_enable+0x24>)
    2abe:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2ac0:	4a06      	ldr	r2, [pc, #24]	; (2adc <system_gclk_chan_enable+0x28>)
    2ac2:	8853      	ldrh	r3, [r2, #2]
    2ac4:	2180      	movs	r1, #128	; 0x80
    2ac6:	01c9      	lsls	r1, r1, #7
    2ac8:	430b      	orrs	r3, r1
    2aca:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2acc:	4b04      	ldr	r3, [pc, #16]	; (2ae0 <system_gclk_chan_enable+0x2c>)
    2ace:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2ad0:	bd10      	pop	{r4, pc}
    2ad2:	46c0      	nop			; (mov r8, r8)
    2ad4:	000017ad 	.word	0x000017ad
    2ad8:	40000c02 	.word	0x40000c02
    2adc:	40000c00 	.word	0x40000c00
    2ae0:	000017ed 	.word	0x000017ed

00002ae4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2ae4:	b510      	push	{r4, lr}
    2ae6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2ae8:	4b0f      	ldr	r3, [pc, #60]	; (2b28 <system_gclk_chan_disable+0x44>)
    2aea:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2aec:	4b0f      	ldr	r3, [pc, #60]	; (2b2c <system_gclk_chan_disable+0x48>)
    2aee:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2af0:	4a0f      	ldr	r2, [pc, #60]	; (2b30 <system_gclk_chan_disable+0x4c>)
    2af2:	8853      	ldrh	r3, [r2, #2]
    2af4:	051b      	lsls	r3, r3, #20
    2af6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2af8:	8853      	ldrh	r3, [r2, #2]
    2afa:	490e      	ldr	r1, [pc, #56]	; (2b34 <system_gclk_chan_disable+0x50>)
    2afc:	400b      	ands	r3, r1
    2afe:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2b00:	8853      	ldrh	r3, [r2, #2]
    2b02:	490d      	ldr	r1, [pc, #52]	; (2b38 <system_gclk_chan_disable+0x54>)
    2b04:	400b      	ands	r3, r1
    2b06:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2b08:	0011      	movs	r1, r2
    2b0a:	2280      	movs	r2, #128	; 0x80
    2b0c:	01d2      	lsls	r2, r2, #7
    2b0e:	884b      	ldrh	r3, [r1, #2]
    2b10:	4213      	tst	r3, r2
    2b12:	d1fc      	bne.n	2b0e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2b14:	4906      	ldr	r1, [pc, #24]	; (2b30 <system_gclk_chan_disable+0x4c>)
    2b16:	884a      	ldrh	r2, [r1, #2]
    2b18:	0203      	lsls	r3, r0, #8
    2b1a:	4806      	ldr	r0, [pc, #24]	; (2b34 <system_gclk_chan_disable+0x50>)
    2b1c:	4002      	ands	r2, r0
    2b1e:	4313      	orrs	r3, r2
    2b20:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2b22:	4b06      	ldr	r3, [pc, #24]	; (2b3c <system_gclk_chan_disable+0x58>)
    2b24:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2b26:	bd10      	pop	{r4, pc}
    2b28:	000017ad 	.word	0x000017ad
    2b2c:	40000c02 	.word	0x40000c02
    2b30:	40000c00 	.word	0x40000c00
    2b34:	fffff0ff 	.word	0xfffff0ff
    2b38:	ffffbfff 	.word	0xffffbfff
    2b3c:	000017ed 	.word	0x000017ed

00002b40 <system_gclk_chan_set_config>:
{
    2b40:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2b42:	780c      	ldrb	r4, [r1, #0]
    2b44:	0224      	lsls	r4, r4, #8
    2b46:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2b48:	4b02      	ldr	r3, [pc, #8]	; (2b54 <system_gclk_chan_set_config+0x14>)
    2b4a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2b4c:	b2a4      	uxth	r4, r4
    2b4e:	4b02      	ldr	r3, [pc, #8]	; (2b58 <system_gclk_chan_set_config+0x18>)
    2b50:	805c      	strh	r4, [r3, #2]
}
    2b52:	bd10      	pop	{r4, pc}
    2b54:	00002ae5 	.word	0x00002ae5
    2b58:	40000c00 	.word	0x40000c00

00002b5c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2b5c:	b510      	push	{r4, lr}
    2b5e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2b60:	4b06      	ldr	r3, [pc, #24]	; (2b7c <system_gclk_chan_get_hz+0x20>)
    2b62:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2b64:	4b06      	ldr	r3, [pc, #24]	; (2b80 <system_gclk_chan_get_hz+0x24>)
    2b66:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2b68:	4b06      	ldr	r3, [pc, #24]	; (2b84 <system_gclk_chan_get_hz+0x28>)
    2b6a:	885c      	ldrh	r4, [r3, #2]
    2b6c:	0524      	lsls	r4, r4, #20
    2b6e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2b70:	4b05      	ldr	r3, [pc, #20]	; (2b88 <system_gclk_chan_get_hz+0x2c>)
    2b72:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2b74:	0020      	movs	r0, r4
    2b76:	4b05      	ldr	r3, [pc, #20]	; (2b8c <system_gclk_chan_get_hz+0x30>)
    2b78:	4798      	blx	r3
}
    2b7a:	bd10      	pop	{r4, pc}
    2b7c:	000017ad 	.word	0x000017ad
    2b80:	40000c02 	.word	0x40000c02
    2b84:	40000c00 	.word	0x40000c00
    2b88:	000017ed 	.word	0x000017ed
    2b8c:	00002a29 	.word	0x00002a29

00002b90 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2b90:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2b92:	78d3      	ldrb	r3, [r2, #3]
    2b94:	2b00      	cmp	r3, #0
    2b96:	d135      	bne.n	2c04 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2b98:	7813      	ldrb	r3, [r2, #0]
    2b9a:	2b80      	cmp	r3, #128	; 0x80
    2b9c:	d029      	beq.n	2bf2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2b9e:	061b      	lsls	r3, r3, #24
    2ba0:	2480      	movs	r4, #128	; 0x80
    2ba2:	0264      	lsls	r4, r4, #9
    2ba4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2ba6:	7854      	ldrb	r4, [r2, #1]
    2ba8:	2502      	movs	r5, #2
    2baa:	43ac      	bics	r4, r5
    2bac:	d106      	bne.n	2bbc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2bae:	7894      	ldrb	r4, [r2, #2]
    2bb0:	2c00      	cmp	r4, #0
    2bb2:	d120      	bne.n	2bf6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2bb4:	2480      	movs	r4, #128	; 0x80
    2bb6:	02a4      	lsls	r4, r4, #10
    2bb8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2bba:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2bbc:	7854      	ldrb	r4, [r2, #1]
    2bbe:	3c01      	subs	r4, #1
    2bc0:	2c01      	cmp	r4, #1
    2bc2:	d91c      	bls.n	2bfe <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2bc4:	040d      	lsls	r5, r1, #16
    2bc6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2bc8:	24a0      	movs	r4, #160	; 0xa0
    2bca:	05e4      	lsls	r4, r4, #23
    2bcc:	432c      	orrs	r4, r5
    2bce:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2bd0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2bd2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2bd4:	24d0      	movs	r4, #208	; 0xd0
    2bd6:	0624      	lsls	r4, r4, #24
    2bd8:	432c      	orrs	r4, r5
    2bda:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2bdc:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2bde:	78d4      	ldrb	r4, [r2, #3]
    2be0:	2c00      	cmp	r4, #0
    2be2:	d122      	bne.n	2c2a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2be4:	035b      	lsls	r3, r3, #13
    2be6:	d51c      	bpl.n	2c22 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2be8:	7893      	ldrb	r3, [r2, #2]
    2bea:	2b01      	cmp	r3, #1
    2bec:	d01e      	beq.n	2c2c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2bee:	6141      	str	r1, [r0, #20]
    2bf0:	e017      	b.n	2c22 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2bf2:	2300      	movs	r3, #0
    2bf4:	e7d7      	b.n	2ba6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2bf6:	24c0      	movs	r4, #192	; 0xc0
    2bf8:	02e4      	lsls	r4, r4, #11
    2bfa:	4323      	orrs	r3, r4
    2bfc:	e7dd      	b.n	2bba <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2bfe:	4c0d      	ldr	r4, [pc, #52]	; (2c34 <_system_pinmux_config+0xa4>)
    2c00:	4023      	ands	r3, r4
    2c02:	e7df      	b.n	2bc4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2c04:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2c06:	040c      	lsls	r4, r1, #16
    2c08:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2c0a:	23a0      	movs	r3, #160	; 0xa0
    2c0c:	05db      	lsls	r3, r3, #23
    2c0e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2c10:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2c12:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2c14:	23d0      	movs	r3, #208	; 0xd0
    2c16:	061b      	lsls	r3, r3, #24
    2c18:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2c1a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2c1c:	78d3      	ldrb	r3, [r2, #3]
    2c1e:	2b00      	cmp	r3, #0
    2c20:	d103      	bne.n	2c2a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2c22:	7853      	ldrb	r3, [r2, #1]
    2c24:	3b01      	subs	r3, #1
    2c26:	2b01      	cmp	r3, #1
    2c28:	d902      	bls.n	2c30 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2c2a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2c2c:	6181      	str	r1, [r0, #24]
    2c2e:	e7f8      	b.n	2c22 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2c30:	6081      	str	r1, [r0, #8]
}
    2c32:	e7fa      	b.n	2c2a <_system_pinmux_config+0x9a>
    2c34:	fffbffff 	.word	0xfffbffff

00002c38 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2c38:	b510      	push	{r4, lr}
    2c3a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    2c3c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    2c3e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2c40:	2900      	cmp	r1, #0
    2c42:	d104      	bne.n	2c4e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2c44:	0943      	lsrs	r3, r0, #5
    2c46:	01db      	lsls	r3, r3, #7
    2c48:	4905      	ldr	r1, [pc, #20]	; (2c60 <system_pinmux_pin_set_config+0x28>)
    2c4a:	468c      	mov	ip, r1
    2c4c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2c4e:	241f      	movs	r4, #31
    2c50:	4020      	ands	r0, r4
    2c52:	2101      	movs	r1, #1
    2c54:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2c56:	0018      	movs	r0, r3
    2c58:	4b02      	ldr	r3, [pc, #8]	; (2c64 <system_pinmux_pin_set_config+0x2c>)
    2c5a:	4798      	blx	r3
}
    2c5c:	bd10      	pop	{r4, pc}
    2c5e:	46c0      	nop			; (mov r8, r8)
    2c60:	41004400 	.word	0x41004400
    2c64:	00002b91 	.word	0x00002b91

00002c68 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2c68:	4770      	bx	lr
	...

00002c6c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2c6c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2c6e:	4b05      	ldr	r3, [pc, #20]	; (2c84 <system_init+0x18>)
    2c70:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2c72:	4b05      	ldr	r3, [pc, #20]	; (2c88 <system_init+0x1c>)
    2c74:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2c76:	4b05      	ldr	r3, [pc, #20]	; (2c8c <system_init+0x20>)
    2c78:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2c7a:	4b05      	ldr	r3, [pc, #20]	; (2c90 <system_init+0x24>)
    2c7c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2c7e:	4b05      	ldr	r3, [pc, #20]	; (2c94 <system_init+0x28>)
    2c80:	4798      	blx	r3
}
    2c82:	bd10      	pop	{r4, pc}
    2c84:	00002781 	.word	0x00002781
    2c88:	0000181d 	.word	0x0000181d
    2c8c:	00002c69 	.word	0x00002c69
    2c90:	0000190d 	.word	0x0000190d
    2c94:	00002c69 	.word	0x00002c69

00002c98 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2c98:	1c93      	adds	r3, r2, #2
    2c9a:	009b      	lsls	r3, r3, #2
    2c9c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    2c9e:	2a02      	cmp	r2, #2
    2ca0:	d009      	beq.n	2cb6 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    2ca2:	2a03      	cmp	r2, #3
    2ca4:	d00c      	beq.n	2cc0 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    2ca6:	2301      	movs	r3, #1
    2ca8:	4093      	lsls	r3, r2
    2caa:	001a      	movs	r2, r3
    2cac:	7e03      	ldrb	r3, [r0, #24]
    2cae:	4313      	orrs	r3, r2
    2cb0:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    2cb2:	2000      	movs	r0, #0
    2cb4:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    2cb6:	7e03      	ldrb	r3, [r0, #24]
    2cb8:	2210      	movs	r2, #16
    2cba:	4313      	orrs	r3, r2
    2cbc:	7603      	strb	r3, [r0, #24]
    2cbe:	e7f8      	b.n	2cb2 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    2cc0:	7e03      	ldrb	r3, [r0, #24]
    2cc2:	2220      	movs	r2, #32
    2cc4:	4313      	orrs	r3, r2
    2cc6:	7603      	strb	r3, [r0, #24]
    2cc8:	e7f3      	b.n	2cb2 <tc_register_callback+0x1a>
	...

00002ccc <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2ccc:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    2cce:	0080      	lsls	r0, r0, #2
    2cd0:	4b16      	ldr	r3, [pc, #88]	; (2d2c <_tc_interrupt_handler+0x60>)
    2cd2:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2cd4:	6823      	ldr	r3, [r4, #0]
    2cd6:	7b9d      	ldrb	r5, [r3, #14]
    2cd8:	7e22      	ldrb	r2, [r4, #24]
    2cda:	7e63      	ldrb	r3, [r4, #25]
    2cdc:	4013      	ands	r3, r2
    2cde:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2ce0:	07eb      	lsls	r3, r5, #31
    2ce2:	d406      	bmi.n	2cf2 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    2ce4:	07ab      	lsls	r3, r5, #30
    2ce6:	d40b      	bmi.n	2d00 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2ce8:	06eb      	lsls	r3, r5, #27
    2cea:	d410      	bmi.n	2d0e <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2cec:	06ab      	lsls	r3, r5, #26
    2cee:	d415      	bmi.n	2d1c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    2cf0:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    2cf2:	0020      	movs	r0, r4
    2cf4:	68a3      	ldr	r3, [r4, #8]
    2cf6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2cf8:	2301      	movs	r3, #1
    2cfa:	6822      	ldr	r2, [r4, #0]
    2cfc:	7393      	strb	r3, [r2, #14]
    2cfe:	e7f1      	b.n	2ce4 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    2d00:	0020      	movs	r0, r4
    2d02:	68e3      	ldr	r3, [r4, #12]
    2d04:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2d06:	2302      	movs	r3, #2
    2d08:	6822      	ldr	r2, [r4, #0]
    2d0a:	7393      	strb	r3, [r2, #14]
    2d0c:	e7ec      	b.n	2ce8 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    2d0e:	0020      	movs	r0, r4
    2d10:	6923      	ldr	r3, [r4, #16]
    2d12:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    2d14:	2310      	movs	r3, #16
    2d16:	6822      	ldr	r2, [r4, #0]
    2d18:	7393      	strb	r3, [r2, #14]
    2d1a:	e7e7      	b.n	2cec <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2d1c:	0020      	movs	r0, r4
    2d1e:	6963      	ldr	r3, [r4, #20]
    2d20:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    2d22:	6823      	ldr	r3, [r4, #0]
    2d24:	2220      	movs	r2, #32
    2d26:	739a      	strb	r2, [r3, #14]
}
    2d28:	e7e2      	b.n	2cf0 <_tc_interrupt_handler+0x24>
    2d2a:	46c0      	nop			; (mov r8, r8)
    2d2c:	20002504 	.word	0x20002504

00002d30 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    2d30:	b510      	push	{r4, lr}
    2d32:	2000      	movs	r0, #0
    2d34:	4b01      	ldr	r3, [pc, #4]	; (2d3c <TC3_Handler+0xc>)
    2d36:	4798      	blx	r3
    2d38:	bd10      	pop	{r4, pc}
    2d3a:	46c0      	nop			; (mov r8, r8)
    2d3c:	00002ccd 	.word	0x00002ccd

00002d40 <TC4_Handler>:
    2d40:	b510      	push	{r4, lr}
    2d42:	2001      	movs	r0, #1
    2d44:	4b01      	ldr	r3, [pc, #4]	; (2d4c <TC4_Handler+0xc>)
    2d46:	4798      	blx	r3
    2d48:	bd10      	pop	{r4, pc}
    2d4a:	46c0      	nop			; (mov r8, r8)
    2d4c:	00002ccd 	.word	0x00002ccd

00002d50 <TC5_Handler>:
    2d50:	b510      	push	{r4, lr}
    2d52:	2002      	movs	r0, #2
    2d54:	4b01      	ldr	r3, [pc, #4]	; (2d5c <TC5_Handler+0xc>)
    2d56:	4798      	blx	r3
    2d58:	bd10      	pop	{r4, pc}
    2d5a:	46c0      	nop			; (mov r8, r8)
    2d5c:	00002ccd 	.word	0x00002ccd

00002d60 <TC6_Handler>:
    2d60:	b510      	push	{r4, lr}
    2d62:	2003      	movs	r0, #3
    2d64:	4b01      	ldr	r3, [pc, #4]	; (2d6c <TC6_Handler+0xc>)
    2d66:	4798      	blx	r3
    2d68:	bd10      	pop	{r4, pc}
    2d6a:	46c0      	nop			; (mov r8, r8)
    2d6c:	00002ccd 	.word	0x00002ccd

00002d70 <TC7_Handler>:
    2d70:	b510      	push	{r4, lr}
    2d72:	2004      	movs	r0, #4
    2d74:	4b01      	ldr	r3, [pc, #4]	; (2d7c <TC7_Handler+0xc>)
    2d76:	4798      	blx	r3
    2d78:	bd10      	pop	{r4, pc}
    2d7a:	46c0      	nop			; (mov r8, r8)
    2d7c:	00002ccd 	.word	0x00002ccd

00002d80 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    2d80:	b530      	push	{r4, r5, lr}
    2d82:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2d84:	a901      	add	r1, sp, #4
    2d86:	4b0c      	ldr	r3, [pc, #48]	; (2db8 <_tc_get_inst_index+0x38>)
    2d88:	000a      	movs	r2, r1
    2d8a:	cb32      	ldmia	r3!, {r1, r4, r5}
    2d8c:	c232      	stmia	r2!, {r1, r4, r5}
    2d8e:	cb12      	ldmia	r3!, {r1, r4}
    2d90:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    2d92:	9b01      	ldr	r3, [sp, #4]
    2d94:	4298      	cmp	r0, r3
    2d96:	d00b      	beq.n	2db0 <_tc_get_inst_index+0x30>
    2d98:	2301      	movs	r3, #1
    2d9a:	a901      	add	r1, sp, #4
    2d9c:	009a      	lsls	r2, r3, #2
    2d9e:	5852      	ldr	r2, [r2, r1]
    2da0:	4282      	cmp	r2, r0
    2da2:	d006      	beq.n	2db2 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2da4:	3301      	adds	r3, #1
    2da6:	2b05      	cmp	r3, #5
    2da8:	d1f8      	bne.n	2d9c <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    2daa:	2000      	movs	r0, #0
}
    2dac:	b007      	add	sp, #28
    2dae:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2db0:	2300      	movs	r3, #0
			return i;
    2db2:	b2d8      	uxtb	r0, r3
    2db4:	e7fa      	b.n	2dac <_tc_get_inst_index+0x2c>
    2db6:	46c0      	nop			; (mov r8, r8)
    2db8:	0000b6dc 	.word	0x0000b6dc

00002dbc <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    2dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dbe:	b089      	sub	sp, #36	; 0x24
    2dc0:	0004      	movs	r4, r0
    2dc2:	000d      	movs	r5, r1
    2dc4:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    2dc6:	0008      	movs	r0, r1
    2dc8:	4b85      	ldr	r3, [pc, #532]	; (2fe0 <tc_init+0x224>)
    2dca:	4798      	blx	r3
    2dcc:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    2dce:	ab06      	add	r3, sp, #24
    2dd0:	221b      	movs	r2, #27
    2dd2:	701a      	strb	r2, [r3, #0]
    2dd4:	3201      	adds	r2, #1
    2dd6:	705a      	strb	r2, [r3, #1]
    2dd8:	709a      	strb	r2, [r3, #2]
    2dda:	3201      	adds	r2, #1
    2ddc:	70da      	strb	r2, [r3, #3]
    2dde:	711a      	strb	r2, [r3, #4]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    2de0:	aa03      	add	r2, sp, #12
    2de2:	4b80      	ldr	r3, [pc, #512]	; (2fe4 <tc_init+0x228>)
    2de4:	3314      	adds	r3, #20
    2de6:	cb03      	ldmia	r3!, {r0, r1}
    2de8:	c203      	stmia	r2!, {r0, r1}
    2dea:	881b      	ldrh	r3, [r3, #0]
    2dec:	8013      	strh	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    2dee:	2300      	movs	r3, #0
    2df0:	60a3      	str	r3, [r4, #8]
    2df2:	60e3      	str	r3, [r4, #12]
    2df4:	6123      	str	r3, [r4, #16]
    2df6:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    2df8:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    2dfa:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    2dfc:	00ba      	lsls	r2, r7, #2
    2dfe:	4b7a      	ldr	r3, [pc, #488]	; (2fe8 <tc_init+0x22c>)
    2e00:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    2e02:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2e04:	78b3      	ldrb	r3, [r6, #2]
    2e06:	2b08      	cmp	r3, #8
    2e08:	d006      	beq.n	2e18 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    2e0a:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2e0c:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2e0e:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2e10:	07db      	lsls	r3, r3, #31
    2e12:	d505      	bpl.n	2e20 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    2e14:	b009      	add	sp, #36	; 0x24
    2e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    2e18:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2e1a:	07fa      	lsls	r2, r7, #31
    2e1c:	d5fa      	bpl.n	2e14 <tc_init+0x58>
    2e1e:	e7f4      	b.n	2e0a <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2e20:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    2e22:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2e24:	06db      	lsls	r3, r3, #27
    2e26:	d4f5      	bmi.n	2e14 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    2e28:	882b      	ldrh	r3, [r5, #0]
    2e2a:	079b      	lsls	r3, r3, #30
    2e2c:	d4f2      	bmi.n	2e14 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    2e2e:	7c33      	ldrb	r3, [r6, #16]
    2e30:	2b00      	cmp	r3, #0
    2e32:	d179      	bne.n	2f28 <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    2e34:	7f33      	ldrb	r3, [r6, #28]
    2e36:	2b00      	cmp	r3, #0
    2e38:	d000      	beq.n	2e3c <tc_init+0x80>
    2e3a:	e081      	b.n	2f40 <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    2e3c:	496b      	ldr	r1, [pc, #428]	; (2fec <tc_init+0x230>)
    2e3e:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    2e40:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2e42:	ab03      	add	r3, sp, #12
    2e44:	5ad3      	ldrh	r3, [r2, r3]
    2e46:	4303      	orrs	r3, r0
    2e48:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    2e4a:	78b3      	ldrb	r3, [r6, #2]
    2e4c:	2b08      	cmp	r3, #8
    2e4e:	d100      	bne.n	2e52 <tc_init+0x96>
    2e50:	e086      	b.n	2f60 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    2e52:	a901      	add	r1, sp, #4
    2e54:	7833      	ldrb	r3, [r6, #0]
    2e56:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    2e58:	ab06      	add	r3, sp, #24
    2e5a:	5ddf      	ldrb	r7, [r3, r7]
    2e5c:	0038      	movs	r0, r7
    2e5e:	4b64      	ldr	r3, [pc, #400]	; (2ff0 <tc_init+0x234>)
    2e60:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    2e62:	0038      	movs	r0, r7
    2e64:	4b63      	ldr	r3, [pc, #396]	; (2ff4 <tc_init+0x238>)
    2e66:	4798      	blx	r3
	ctrla_tmp =
    2e68:	8931      	ldrh	r1, [r6, #8]
    2e6a:	88b3      	ldrh	r3, [r6, #4]
    2e6c:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    2e6e:	78b1      	ldrb	r1, [r6, #2]
    2e70:	79b2      	ldrb	r2, [r6, #6]
    2e72:	4311      	orrs	r1, r2
	ctrla_tmp =
    2e74:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    2e76:	7873      	ldrb	r3, [r6, #1]
    2e78:	2b00      	cmp	r3, #0
    2e7a:	d002      	beq.n	2e82 <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    2e7c:	2380      	movs	r3, #128	; 0x80
    2e7e:	011b      	lsls	r3, r3, #4
    2e80:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2e82:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2e84:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2e86:	b25b      	sxtb	r3, r3
    2e88:	2b00      	cmp	r3, #0
    2e8a:	dbfb      	blt.n	2e84 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    2e8c:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    2e8e:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    2e90:	1e4b      	subs	r3, r1, #1
    2e92:	4199      	sbcs	r1, r3
    2e94:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    2e96:	7bb3      	ldrb	r3, [r6, #14]
    2e98:	2b00      	cmp	r3, #0
    2e9a:	d001      	beq.n	2ea0 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    2e9c:	2301      	movs	r3, #1
    2e9e:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2ea0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2ea2:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2ea4:	b25b      	sxtb	r3, r3
    2ea6:	2b00      	cmp	r3, #0
    2ea8:	dbfb      	blt.n	2ea2 <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    2eaa:	23ff      	movs	r3, #255	; 0xff
    2eac:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    2eae:	2900      	cmp	r1, #0
    2eb0:	d005      	beq.n	2ebe <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2eb2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2eb4:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    2eb6:	b25b      	sxtb	r3, r3
    2eb8:	2b00      	cmp	r3, #0
    2eba:	dbfb      	blt.n	2eb4 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    2ebc:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    2ebe:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    2ec0:	7af3      	ldrb	r3, [r6, #11]
    2ec2:	2b00      	cmp	r3, #0
    2ec4:	d001      	beq.n	2eca <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2ec6:	2310      	movs	r3, #16
    2ec8:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    2eca:	7b33      	ldrb	r3, [r6, #12]
    2ecc:	2b00      	cmp	r3, #0
    2ece:	d001      	beq.n	2ed4 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2ed0:	2320      	movs	r3, #32
    2ed2:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2ed4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2ed6:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2ed8:	b25b      	sxtb	r3, r3
    2eda:	2b00      	cmp	r3, #0
    2edc:	dbfb      	blt.n	2ed6 <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    2ede:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2ee0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2ee2:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2ee4:	b25b      	sxtb	r3, r3
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	dbfb      	blt.n	2ee2 <tc_init+0x126>
	switch (module_inst->counter_size) {
    2eea:	7923      	ldrb	r3, [r4, #4]
    2eec:	2b04      	cmp	r3, #4
    2eee:	d03f      	beq.n	2f70 <tc_init+0x1b4>
    2ef0:	2b08      	cmp	r3, #8
    2ef2:	d05e      	beq.n	2fb2 <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    2ef4:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2ef6:	2b00      	cmp	r3, #0
    2ef8:	d000      	beq.n	2efc <tc_init+0x140>
    2efa:	e78b      	b.n	2e14 <tc_init+0x58>
    2efc:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2efe:	b25b      	sxtb	r3, r3
    2f00:	2b00      	cmp	r3, #0
    2f02:	dbfb      	blt.n	2efc <tc_init+0x140>
				= config->counter_16_bit.value;
    2f04:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    2f06:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2f08:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2f0a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2f0c:	b25b      	sxtb	r3, r3
    2f0e:	2b00      	cmp	r3, #0
    2f10:	dbfb      	blt.n	2f0a <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    2f12:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    2f14:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2f16:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2f18:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2f1a:	b25b      	sxtb	r3, r3
    2f1c:	2b00      	cmp	r3, #0
    2f1e:	dbfb      	blt.n	2f18 <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    2f20:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    2f22:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    2f24:	2000      	movs	r0, #0
    2f26:	e775      	b.n	2e14 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2f28:	a902      	add	r1, sp, #8
    2f2a:	2301      	movs	r3, #1
    2f2c:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2f2e:	2200      	movs	r2, #0
    2f30:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    2f32:	7e32      	ldrb	r2, [r6, #24]
    2f34:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2f36:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2f38:	7d30      	ldrb	r0, [r6, #20]
    2f3a:	4b2f      	ldr	r3, [pc, #188]	; (2ff8 <tc_init+0x23c>)
    2f3c:	4798      	blx	r3
    2f3e:	e779      	b.n	2e34 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2f40:	a902      	add	r1, sp, #8
    2f42:	2301      	movs	r3, #1
    2f44:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2f46:	2200      	movs	r2, #0
    2f48:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    2f4a:	3224      	adds	r2, #36	; 0x24
    2f4c:	18b2      	adds	r2, r6, r2
    2f4e:	7812      	ldrb	r2, [r2, #0]
    2f50:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2f52:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2f54:	331f      	adds	r3, #31
    2f56:	18f3      	adds	r3, r6, r3
    2f58:	7818      	ldrb	r0, [r3, #0]
    2f5a:	4b27      	ldr	r3, [pc, #156]	; (2ff8 <tc_init+0x23c>)
    2f5c:	4798      	blx	r3
    2f5e:	e76d      	b.n	2e3c <tc_init+0x80>
    2f60:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    2f62:	1c7a      	adds	r2, r7, #1
    2f64:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2f66:	ab03      	add	r3, sp, #12
    2f68:	5ad3      	ldrh	r3, [r2, r3]
    2f6a:	4303      	orrs	r3, r0
    2f6c:	620b      	str	r3, [r1, #32]
    2f6e:	e770      	b.n	2e52 <tc_init+0x96>
    2f70:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2f72:	b25b      	sxtb	r3, r3
    2f74:	2b00      	cmp	r3, #0
    2f76:	dbfb      	blt.n	2f70 <tc_init+0x1b4>
					config->counter_8_bit.value;
    2f78:	2328      	movs	r3, #40	; 0x28
    2f7a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    2f7c:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2f7e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2f80:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2f82:	b25b      	sxtb	r3, r3
    2f84:	2b00      	cmp	r3, #0
    2f86:	dbfb      	blt.n	2f80 <tc_init+0x1c4>
					config->counter_8_bit.period;
    2f88:	2329      	movs	r3, #41	; 0x29
    2f8a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    2f8c:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2f8e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2f90:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2f92:	b25b      	sxtb	r3, r3
    2f94:	2b00      	cmp	r3, #0
    2f96:	dbfb      	blt.n	2f90 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    2f98:	232a      	movs	r3, #42	; 0x2a
    2f9a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    2f9c:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2f9e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2fa0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2fa2:	b25b      	sxtb	r3, r3
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	dbfb      	blt.n	2fa0 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    2fa8:	232b      	movs	r3, #43	; 0x2b
    2faa:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    2fac:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    2fae:	2000      	movs	r0, #0
    2fb0:	e730      	b.n	2e14 <tc_init+0x58>
    2fb2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2fb4:	b25b      	sxtb	r3, r3
    2fb6:	2b00      	cmp	r3, #0
    2fb8:	dbfb      	blt.n	2fb2 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    2fba:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2fbc:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2fbe:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2fc0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2fc2:	b25b      	sxtb	r3, r3
    2fc4:	2b00      	cmp	r3, #0
    2fc6:	dbfb      	blt.n	2fc0 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    2fc8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2fca:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2fcc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2fce:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2fd0:	b25b      	sxtb	r3, r3
    2fd2:	2b00      	cmp	r3, #0
    2fd4:	dbfb      	blt.n	2fce <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    2fd6:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    2fd8:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    2fda:	2000      	movs	r0, #0
    2fdc:	e71a      	b.n	2e14 <tc_init+0x58>
    2fde:	46c0      	nop			; (mov r8, r8)
    2fe0:	00002d81 	.word	0x00002d81
    2fe4:	0000b6dc 	.word	0x0000b6dc
    2fe8:	20002504 	.word	0x20002504
    2fec:	40000400 	.word	0x40000400
    2ff0:	00002b41 	.word	0x00002b41
    2ff4:	00002ab5 	.word	0x00002ab5
    2ff8:	00002c39 	.word	0x00002c39

00002ffc <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    2ffc:	6802      	ldr	r2, [r0, #0]
    2ffe:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    3000:	b25b      	sxtb	r3, r3
    3002:	2b00      	cmp	r3, #0
    3004:	dbfb      	blt.n	2ffe <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    3006:	7903      	ldrb	r3, [r0, #4]
    3008:	2b04      	cmp	r3, #4
    300a:	d005      	beq.n	3018 <tc_set_count_value+0x1c>
    300c:	2b08      	cmp	r3, #8
    300e:	d00b      	beq.n	3028 <tc_set_count_value+0x2c>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
    3010:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    3012:	2b00      	cmp	r3, #0
    3014:	d004      	beq.n	3020 <tc_set_count_value+0x24>
	}
}
    3016:	4770      	bx	lr
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    3018:	b2c9      	uxtb	r1, r1
    301a:	7411      	strb	r1, [r2, #16]
			return STATUS_OK;
    301c:	2000      	movs	r0, #0
    301e:	e7fa      	b.n	3016 <tc_set_count_value+0x1a>
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    3020:	b289      	uxth	r1, r1
    3022:	8211      	strh	r1, [r2, #16]
			return STATUS_OK;
    3024:	2000      	movs	r0, #0
    3026:	e7f6      	b.n	3016 <tc_set_count_value+0x1a>
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    3028:	6111      	str	r1, [r2, #16]
			return STATUS_OK;
    302a:	2000      	movs	r0, #0
    302c:	e7f3      	b.n	3016 <tc_set_count_value+0x1a>

0000302e <tc_reset>:
	/* Sanity check arguments  */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    302e:	6802      	ldr	r2, [r0, #0]

	if (tc_module->STATUS.reg & TC_STATUS_SLAVE) {
    3030:	7bd1      	ldrb	r1, [r2, #15]
		return STATUS_ERR_UNSUPPORTED_DEV;
    3032:	2315      	movs	r3, #21
	if (tc_module->STATUS.reg & TC_STATUS_SLAVE) {
    3034:	06c9      	lsls	r1, r1, #27
    3036:	d501      	bpl.n	303c <tc_reset+0xe>

	/* Reset this TC module */
	tc_module->CTRLA.reg  |= TC_CTRLA_SWRST;

	return STATUS_OK;
}
    3038:	0018      	movs	r0, r3
    303a:	4770      	bx	lr
	if (tc_module->CTRLA.reg & TC_CTRLA_ENABLE) {
    303c:	8813      	ldrh	r3, [r2, #0]
    303e:	079b      	lsls	r3, r3, #30
    3040:	d50f      	bpl.n	3062 <tc_reset+0x34>
    3042:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3044:	b25b      	sxtb	r3, r3
    3046:	2b00      	cmp	r3, #0
    3048:	dbfb      	blt.n	3042 <tc_reset+0x14>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    304a:	233b      	movs	r3, #59	; 0x3b
    304c:	7313      	strb	r3, [r2, #12]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    304e:	7393      	strb	r3, [r2, #14]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    3050:	8813      	ldrh	r3, [r2, #0]
    3052:	2102      	movs	r1, #2
    3054:	438b      	bics	r3, r1
    3056:	8013      	strh	r3, [r2, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3058:	6801      	ldr	r1, [r0, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    305a:	7bcb      	ldrb	r3, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    305c:	b25b      	sxtb	r3, r3
    305e:	2b00      	cmp	r3, #0
    3060:	dbfb      	blt.n	305a <tc_reset+0x2c>
	tc_module->CTRLA.reg  |= TC_CTRLA_SWRST;
    3062:	8813      	ldrh	r3, [r2, #0]
    3064:	2101      	movs	r1, #1
    3066:	430b      	orrs	r3, r1
    3068:	8013      	strh	r3, [r2, #0]
	return STATUS_OK;
    306a:	2300      	movs	r3, #0
    306c:	e7e4      	b.n	3038 <tc_reset+0xa>

0000306e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    306e:	e7fe      	b.n	306e <Dummy_Handler>

00003070 <Reset_Handler>:
{
    3070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    3072:	4a2a      	ldr	r2, [pc, #168]	; (311c <Reset_Handler+0xac>)
    3074:	4b2a      	ldr	r3, [pc, #168]	; (3120 <Reset_Handler+0xb0>)
    3076:	429a      	cmp	r2, r3
    3078:	d011      	beq.n	309e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    307a:	001a      	movs	r2, r3
    307c:	4b29      	ldr	r3, [pc, #164]	; (3124 <Reset_Handler+0xb4>)
    307e:	429a      	cmp	r2, r3
    3080:	d20d      	bcs.n	309e <Reset_Handler+0x2e>
    3082:	4a29      	ldr	r2, [pc, #164]	; (3128 <Reset_Handler+0xb8>)
    3084:	3303      	adds	r3, #3
    3086:	1a9b      	subs	r3, r3, r2
    3088:	089b      	lsrs	r3, r3, #2
    308a:	3301      	adds	r3, #1
    308c:	009b      	lsls	r3, r3, #2
    308e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3090:	4823      	ldr	r0, [pc, #140]	; (3120 <Reset_Handler+0xb0>)
    3092:	4922      	ldr	r1, [pc, #136]	; (311c <Reset_Handler+0xac>)
    3094:	588c      	ldr	r4, [r1, r2]
    3096:	5084      	str	r4, [r0, r2]
    3098:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    309a:	429a      	cmp	r2, r3
    309c:	d1fa      	bne.n	3094 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    309e:	4a23      	ldr	r2, [pc, #140]	; (312c <Reset_Handler+0xbc>)
    30a0:	4b23      	ldr	r3, [pc, #140]	; (3130 <Reset_Handler+0xc0>)
    30a2:	429a      	cmp	r2, r3
    30a4:	d20a      	bcs.n	30bc <Reset_Handler+0x4c>
    30a6:	43d3      	mvns	r3, r2
    30a8:	4921      	ldr	r1, [pc, #132]	; (3130 <Reset_Handler+0xc0>)
    30aa:	185b      	adds	r3, r3, r1
    30ac:	2103      	movs	r1, #3
    30ae:	438b      	bics	r3, r1
    30b0:	3304      	adds	r3, #4
    30b2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    30b4:	2100      	movs	r1, #0
    30b6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    30b8:	4293      	cmp	r3, r2
    30ba:	d1fc      	bne.n	30b6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    30bc:	4a1d      	ldr	r2, [pc, #116]	; (3134 <Reset_Handler+0xc4>)
    30be:	21ff      	movs	r1, #255	; 0xff
    30c0:	4b1d      	ldr	r3, [pc, #116]	; (3138 <Reset_Handler+0xc8>)
    30c2:	438b      	bics	r3, r1
    30c4:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    30c6:	39fd      	subs	r1, #253	; 0xfd
    30c8:	2390      	movs	r3, #144	; 0x90
    30ca:	005b      	lsls	r3, r3, #1
    30cc:	4a1b      	ldr	r2, [pc, #108]	; (313c <Reset_Handler+0xcc>)
    30ce:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    30d0:	4a1b      	ldr	r2, [pc, #108]	; (3140 <Reset_Handler+0xd0>)
    30d2:	78d3      	ldrb	r3, [r2, #3]
    30d4:	2503      	movs	r5, #3
    30d6:	43ab      	bics	r3, r5
    30d8:	2402      	movs	r4, #2
    30da:	4323      	orrs	r3, r4
    30dc:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    30de:	78d3      	ldrb	r3, [r2, #3]
    30e0:	270c      	movs	r7, #12
    30e2:	43bb      	bics	r3, r7
    30e4:	2608      	movs	r6, #8
    30e6:	4333      	orrs	r3, r6
    30e8:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    30ea:	4b16      	ldr	r3, [pc, #88]	; (3144 <Reset_Handler+0xd4>)
    30ec:	7b98      	ldrb	r0, [r3, #14]
    30ee:	2230      	movs	r2, #48	; 0x30
    30f0:	4390      	bics	r0, r2
    30f2:	2220      	movs	r2, #32
    30f4:	4310      	orrs	r0, r2
    30f6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    30f8:	7b99      	ldrb	r1, [r3, #14]
    30fa:	43b9      	bics	r1, r7
    30fc:	4331      	orrs	r1, r6
    30fe:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3100:	7b9a      	ldrb	r2, [r3, #14]
    3102:	43aa      	bics	r2, r5
    3104:	4322      	orrs	r2, r4
    3106:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3108:	4a0f      	ldr	r2, [pc, #60]	; (3148 <Reset_Handler+0xd8>)
    310a:	6853      	ldr	r3, [r2, #4]
    310c:	2180      	movs	r1, #128	; 0x80
    310e:	430b      	orrs	r3, r1
    3110:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3112:	4b0e      	ldr	r3, [pc, #56]	; (314c <Reset_Handler+0xdc>)
    3114:	4798      	blx	r3
        main();
    3116:	4b0e      	ldr	r3, [pc, #56]	; (3150 <Reset_Handler+0xe0>)
    3118:	4798      	blx	r3
    311a:	e7fe      	b.n	311a <Reset_Handler+0xaa>
    311c:	0000f960 	.word	0x0000f960
    3120:	20000000 	.word	0x20000000
    3124:	20000134 	.word	0x20000134
    3128:	20000004 	.word	0x20000004
    312c:	20000134 	.word	0x20000134
    3130:	20003bc0 	.word	0x20003bc0
    3134:	e000ed00 	.word	0xe000ed00
    3138:	00000000 	.word	0x00000000
    313c:	41007000 	.word	0x41007000
    3140:	41005000 	.word	0x41005000
    3144:	41004800 	.word	0x41004800
    3148:	41004000 	.word	0x41004000
    314c:	0000a291 	.word	0x0000a291
    3150:	00005c35 	.word	0x00005c35

00003154 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3154:	b5f0      	push	{r4, r5, r6, r7, lr}
    3156:	46c6      	mov	lr, r8
    3158:	b500      	push	{lr}
    315a:	000c      	movs	r4, r1
    315c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    315e:	2800      	cmp	r0, #0
    3160:	d10f      	bne.n	3182 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    3162:	2a00      	cmp	r2, #0
    3164:	dd11      	ble.n	318a <_read+0x36>
    3166:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3168:	4e09      	ldr	r6, [pc, #36]	; (3190 <_read+0x3c>)
    316a:	4d0a      	ldr	r5, [pc, #40]	; (3194 <_read+0x40>)
    316c:	6830      	ldr	r0, [r6, #0]
    316e:	0021      	movs	r1, r4
    3170:	682b      	ldr	r3, [r5, #0]
    3172:	4798      	blx	r3
		ptr++;
    3174:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    3176:	42bc      	cmp	r4, r7
    3178:	d1f8      	bne.n	316c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    317a:	4640      	mov	r0, r8
    317c:	bc04      	pop	{r2}
    317e:	4690      	mov	r8, r2
    3180:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    3182:	2301      	movs	r3, #1
    3184:	425b      	negs	r3, r3
    3186:	4698      	mov	r8, r3
    3188:	e7f7      	b.n	317a <_read+0x26>
	for (; len > 0; --len) {
    318a:	4680      	mov	r8, r0
    318c:	e7f5      	b.n	317a <_read+0x26>
    318e:	46c0      	nop			; (mov r8, r8)
    3190:	20002520 	.word	0x20002520
    3194:	20002518 	.word	0x20002518

00003198 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3198:	b5f0      	push	{r4, r5, r6, r7, lr}
    319a:	46c6      	mov	lr, r8
    319c:	b500      	push	{lr}
    319e:	000e      	movs	r6, r1
    31a0:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    31a2:	3801      	subs	r0, #1
    31a4:	2802      	cmp	r0, #2
    31a6:	d810      	bhi.n	31ca <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    31a8:	2a00      	cmp	r2, #0
    31aa:	d011      	beq.n	31d0 <_write+0x38>
    31ac:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    31ae:	4b0c      	ldr	r3, [pc, #48]	; (31e0 <_write+0x48>)
    31b0:	4698      	mov	r8, r3
    31b2:	4f0c      	ldr	r7, [pc, #48]	; (31e4 <_write+0x4c>)
    31b4:	4643      	mov	r3, r8
    31b6:	6818      	ldr	r0, [r3, #0]
    31b8:	5d31      	ldrb	r1, [r6, r4]
    31ba:	683b      	ldr	r3, [r7, #0]
    31bc:	4798      	blx	r3
    31be:	2800      	cmp	r0, #0
    31c0:	db08      	blt.n	31d4 <_write+0x3c>
			return -1;
		}
		++nChars;
    31c2:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    31c4:	42a5      	cmp	r5, r4
    31c6:	d1f5      	bne.n	31b4 <_write+0x1c>
    31c8:	e006      	b.n	31d8 <_write+0x40>
		return -1;
    31ca:	2401      	movs	r4, #1
    31cc:	4264      	negs	r4, r4
    31ce:	e003      	b.n	31d8 <_write+0x40>
	for (; len != 0; --len) {
    31d0:	0014      	movs	r4, r2
    31d2:	e001      	b.n	31d8 <_write+0x40>
			return -1;
    31d4:	2401      	movs	r4, #1
    31d6:	4264      	negs	r4, r4
	}
	return nChars;
}
    31d8:	0020      	movs	r0, r4
    31da:	bc04      	pop	{r2}
    31dc:	4690      	mov	r8, r2
    31de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31e0:	20002520 	.word	0x20002520
    31e4:	2000251c 	.word	0x2000251c

000031e8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    31e8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    31ea:	4a06      	ldr	r2, [pc, #24]	; (3204 <_sbrk+0x1c>)
    31ec:	6812      	ldr	r2, [r2, #0]
    31ee:	2a00      	cmp	r2, #0
    31f0:	d004      	beq.n	31fc <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    31f2:	4a04      	ldr	r2, [pc, #16]	; (3204 <_sbrk+0x1c>)
    31f4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    31f6:	18c3      	adds	r3, r0, r3
    31f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    31fa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    31fc:	4902      	ldr	r1, [pc, #8]	; (3208 <_sbrk+0x20>)
    31fe:	4a01      	ldr	r2, [pc, #4]	; (3204 <_sbrk+0x1c>)
    3200:	6011      	str	r1, [r2, #0]
    3202:	e7f6      	b.n	31f2 <_sbrk+0xa>
    3204:	2000018c 	.word	0x2000018c
    3208:	20005bc0 	.word	0x20005bc0

0000320c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    320c:	2001      	movs	r0, #1
    320e:	4240      	negs	r0, r0
    3210:	4770      	bx	lr

00003212 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    3212:	2380      	movs	r3, #128	; 0x80
    3214:	019b      	lsls	r3, r3, #6
    3216:	604b      	str	r3, [r1, #4]

	return 0;
}
    3218:	2000      	movs	r0, #0
    321a:	4770      	bx	lr

0000321c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    321c:	2001      	movs	r0, #1
    321e:	4770      	bx	lr

00003220 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3220:	2000      	movs	r0, #0
    3222:	4770      	bx	lr

00003224 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
    3224:	2000      	movs	r0, #0
    3226:	4770      	bx	lr

00003228 <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
    3228:	2000      	movs	r0, #0
    322a:	4770      	bx	lr

0000322c <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
    322c:	78c0      	ldrb	r0, [r0, #3]
    322e:	2800      	cmp	r0, #0
    3230:	d000      	beq.n	3234 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
    3232:	20e2      	movs	r0, #226	; 0xe2
}
    3234:	4770      	bx	lr

00003236 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
    3236:	2000      	movs	r0, #0
    3238:	4770      	bx	lr
	...

0000323c <ble_scan_report_handler>:
{
    323c:	b510      	push	{r4, lr}
	ble_device_current_state = BLE_DEVICE_IDLE_STATE;
    323e:	2200      	movs	r2, #0
    3240:	4b06      	ldr	r3, [pc, #24]	; (325c <ble_scan_report_handler+0x20>)
    3242:	701a      	strb	r2, [r3, #0]
	if (scan_report->status == AT_BLE_SUCCESS)
    3244:	7800      	ldrb	r0, [r0, #0]
    3246:	2800      	cmp	r0, #0
    3248:	d100      	bne.n	324c <ble_scan_report_handler+0x10>
}
    324a:	bd10      	pop	{r4, pc}
		DBG_LOG("Scanning  failed");
    324c:	4804      	ldr	r0, [pc, #16]	; (3260 <ble_scan_report_handler+0x24>)
    324e:	4b05      	ldr	r3, [pc, #20]	; (3264 <ble_scan_report_handler+0x28>)
    3250:	4798      	blx	r3
    3252:	4805      	ldr	r0, [pc, #20]	; (3268 <ble_scan_report_handler+0x2c>)
    3254:	4b05      	ldr	r3, [pc, #20]	; (326c <ble_scan_report_handler+0x30>)
    3256:	4798      	blx	r3
	return AT_BLE_FAILURE;
    3258:	20e2      	movs	r0, #226	; 0xe2
    325a:	e7f6      	b.n	324a <ble_scan_report_handler+0xe>
    325c:	20000990 	.word	0x20000990
    3260:	0000bf48 	.word	0x0000bf48
    3264:	0000a435 	.word	0x0000a435
    3268:	0000bf4c 	.word	0x0000bf4c
    326c:	0000a319 	.word	0x0000a319

00003270 <ble_mtu_changed_cmd_complete_handler>:
{
    3270:	b510      	push	{r4, lr}
    3272:	0004      	movs	r4, r0
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
    3274:	78c0      	ldrb	r0, [r0, #3]
    3276:	2800      	cmp	r0, #0
    3278:	d100      	bne.n	327c <ble_mtu_changed_cmd_complete_handler+0xc>
}
    327a:	bd10      	pop	{r4, pc}
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
    327c:	4804      	ldr	r0, [pc, #16]	; (3290 <ble_mtu_changed_cmd_complete_handler+0x20>)
    327e:	4b05      	ldr	r3, [pc, #20]	; (3294 <ble_mtu_changed_cmd_complete_handler+0x24>)
    3280:	4798      	blx	r3
    3282:	78a2      	ldrb	r2, [r4, #2]
    3284:	8821      	ldrh	r1, [r4, #0]
    3286:	4804      	ldr	r0, [pc, #16]	; (3298 <ble_mtu_changed_cmd_complete_handler+0x28>)
    3288:	4b04      	ldr	r3, [pc, #16]	; (329c <ble_mtu_changed_cmd_complete_handler+0x2c>)
    328a:	4798      	blx	r3
	return AT_BLE_FAILURE;
    328c:	20e2      	movs	r0, #226	; 0xe2
    328e:	e7f4      	b.n	327a <ble_mtu_changed_cmd_complete_handler+0xa>
    3290:	0000bf48 	.word	0x0000bf48
    3294:	0000a435 	.word	0x0000a435
    3298:	0000bd28 	.word	0x0000bd28
    329c:	0000a319 	.word	0x0000a319

000032a0 <ble_encryption_status_change_handler>:

#endif /* defined PDS_SERVICE */

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
    32a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32a2:	0005      	movs	r5, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTION; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
    32a4:	8801      	ldrh	r1, [r0, #0]
    32a6:	4b28      	ldr	r3, [pc, #160]	; (3348 <ble_encryption_status_change_handler+0xa8>)
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTION; idx++)
    32a8:	2400      	movs	r4, #0
    32aa:	e004      	b.n	32b6 <ble_encryption_status_change_handler+0x16>
    32ac:	3401      	adds	r4, #1
    32ae:	b2e4      	uxtb	r4, r4
    32b0:	337c      	adds	r3, #124	; 0x7c
    32b2:	2c08      	cmp	r4, #8
    32b4:	d031      	beq.n	331a <ble_encryption_status_change_handler+0x7a>
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
    32b6:	891a      	ldrh	r2, [r3, #8]
    32b8:	428a      	cmp	r2, r1
    32ba:	d1f7      	bne.n	32ac <ble_encryption_status_change_handler+0xc>
    32bc:	001a      	movs	r2, r3
    32be:	325e      	adds	r2, #94	; 0x5e
    32c0:	7812      	ldrb	r2, [r2, #0]
    32c2:	2a06      	cmp	r2, #6
    32c4:	d1f2      	bne.n	32ac <ble_encryption_status_change_handler+0xc>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
    32c6:	78ae      	ldrb	r6, [r5, #2]
    32c8:	2e00      	cmp	r6, #0
    32ca:	d132      	bne.n	3332 <ble_encryption_status_change_handler+0x92>
	{
		
		DBG_LOG("Encryption completed successfully");
    32cc:	481f      	ldr	r0, [pc, #124]	; (334c <ble_encryption_status_change_handler+0xac>)
    32ce:	4b20      	ldr	r3, [pc, #128]	; (3350 <ble_encryption_status_change_handler+0xb0>)
    32d0:	4798      	blx	r3
    32d2:	4820      	ldr	r0, [pc, #128]	; (3354 <ble_encryption_status_change_handler+0xb4>)
    32d4:	4b20      	ldr	r3, [pc, #128]	; (3358 <ble_encryption_status_change_handler+0xb8>)
    32d6:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
    32d8:	491b      	ldr	r1, [pc, #108]	; (3348 <ble_encryption_status_change_handler+0xa8>)
    32da:	0163      	lsls	r3, r4, #5
    32dc:	1b1a      	subs	r2, r3, r4
    32de:	0092      	lsls	r2, r2, #2
    32e0:	188a      	adds	r2, r1, r2
    32e2:	0010      	movs	r0, r2
    32e4:	305e      	adds	r0, #94	; 0x5e
    32e6:	2708      	movs	r7, #8
    32e8:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
    32ea:	78e8      	ldrb	r0, [r5, #3]
    32ec:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
    32ee:	78aa      	ldrb	r2, [r5, #2]
    32f0:	1b1c      	subs	r4, r3, r4
    32f2:	00a4      	lsls	r4, r4, #2
    32f4:	190c      	adds	r4, r1, r4
    32f6:	7622      	strb	r2, [r4, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		}				
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	send_slave_security_flag = true;
    32f8:	2201      	movs	r2, #1
    32fa:	4b18      	ldr	r3, [pc, #96]	; (335c <ble_encryption_status_change_handler+0xbc>)
    32fc:	701a      	strb	r2, [r3, #0]
	return AT_BLE_SUCCESS;
    32fe:	e016      	b.n	332e <ble_encryption_status_change_handler+0x8e>
		DBG_LOG("Encryption completed successfully");
    3300:	4e12      	ldr	r6, [pc, #72]	; (334c <ble_encryption_status_change_handler+0xac>)
    3302:	0030      	movs	r0, r6
    3304:	4d12      	ldr	r5, [pc, #72]	; (3350 <ble_encryption_status_change_handler+0xb0>)
    3306:	47a8      	blx	r5
    3308:	4812      	ldr	r0, [pc, #72]	; (3354 <ble_encryption_status_change_handler+0xb4>)
    330a:	4c13      	ldr	r4, [pc, #76]	; (3358 <ble_encryption_status_change_handler+0xb8>)
    330c:	47a0      	blx	r4
			DBG_LOG("BLE Device not found encryption info");
    330e:	0030      	movs	r0, r6
    3310:	47a8      	blx	r5
    3312:	4813      	ldr	r0, [pc, #76]	; (3360 <ble_encryption_status_change_handler+0xc0>)
    3314:	47a0      	blx	r4
			return AT_BLE_FAILURE;
    3316:	26e2      	movs	r6, #226	; 0xe2
    3318:	e009      	b.n	332e <ble_encryption_status_change_handler+0x8e>
	if(enc_status->status == AT_BLE_SUCCESS)
    331a:	78ab      	ldrb	r3, [r5, #2]
    331c:	2b00      	cmp	r3, #0
    331e:	d0ef      	beq.n	3300 <ble_encryption_status_change_handler+0x60>
		DBG_LOG("Encryption failed");
    3320:	480a      	ldr	r0, [pc, #40]	; (334c <ble_encryption_status_change_handler+0xac>)
    3322:	4b0b      	ldr	r3, [pc, #44]	; (3350 <ble_encryption_status_change_handler+0xb0>)
    3324:	4798      	blx	r3
    3326:	480f      	ldr	r0, [pc, #60]	; (3364 <ble_encryption_status_change_handler+0xc4>)
    3328:	4b0b      	ldr	r3, [pc, #44]	; (3358 <ble_encryption_status_change_handler+0xb8>)
    332a:	4798      	blx	r3
		return AT_BLE_FAILURE;
    332c:	26e2      	movs	r6, #226	; 0xe2
}
    332e:	0030      	movs	r0, r6
    3330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ble_dev_info[idx].bond_info.status = enc_status->status;
    3332:	4b05      	ldr	r3, [pc, #20]	; (3348 <ble_encryption_status_change_handler+0xa8>)
    3334:	0162      	lsls	r2, r4, #5
    3336:	1b11      	subs	r1, r2, r4
    3338:	0089      	lsls	r1, r1, #2
    333a:	1859      	adds	r1, r3, r1
    333c:	760e      	strb	r6, [r1, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
    333e:	000b      	movs	r3, r1
    3340:	335e      	adds	r3, #94	; 0x5e
    3342:	2207      	movs	r2, #7
    3344:	701a      	strb	r2, [r3, #0]
    3346:	e7eb      	b.n	3320 <ble_encryption_status_change_handler+0x80>
    3348:	20002524 	.word	0x20002524
    334c:	0000bf48 	.word	0x0000bf48
    3350:	0000a435 	.word	0x0000a435
    3354:	0000bc30 	.word	0x0000bc30
    3358:	0000a319 	.word	0x0000a319
    335c:	20000070 	.word	0x20000070
    3360:	0000bc54 	.word	0x0000bc54
    3364:	0000bc1c 	.word	0x0000bc1c

00003368 <ble_device_dead_handler>:
	}
	return AT_BLE_SUCCESS;
}

 at_ble_status_t ble_device_dead_handler(void *params)
 {
    3368:	b510      	push	{r4, lr}
	 DBG_LOG("Device dead event received");
    336a:	4804      	ldr	r0, [pc, #16]	; (337c <ble_device_dead_handler+0x14>)
    336c:	4b04      	ldr	r3, [pc, #16]	; (3380 <ble_device_dead_handler+0x18>)
    336e:	4798      	blx	r3
    3370:	4804      	ldr	r0, [pc, #16]	; (3384 <ble_device_dead_handler+0x1c>)
    3372:	4b05      	ldr	r3, [pc, #20]	; (3388 <ble_device_dead_handler+0x20>)
    3374:	4798      	blx	r3
	 ALL_UNUSED(params);
	 return AT_BLE_SUCCESS;
 }
    3376:	2000      	movs	r0, #0
    3378:	bd10      	pop	{r4, pc}
    337a:	46c0      	nop			; (mov r8, r8)
    337c:	0000bf48 	.word	0x0000bf48
    3380:	0000a435 	.word	0x0000a435
    3384:	0000b930 	.word	0x0000b930
    3388:	0000a319 	.word	0x0000a319

0000338c <ble_device_out_of_sync_handler>:
 
  at_ble_status_t ble_device_out_of_sync_handler(void *params)
  {
    338c:	b510      	push	{r4, lr}
	  DBG_LOG("Device out of sync event received");
    338e:	4804      	ldr	r0, [pc, #16]	; (33a0 <ble_device_out_of_sync_handler+0x14>)
    3390:	4b04      	ldr	r3, [pc, #16]	; (33a4 <ble_device_out_of_sync_handler+0x18>)
    3392:	4798      	blx	r3
    3394:	4804      	ldr	r0, [pc, #16]	; (33a8 <ble_device_out_of_sync_handler+0x1c>)
    3396:	4b05      	ldr	r3, [pc, #20]	; (33ac <ble_device_out_of_sync_handler+0x20>)
    3398:	4798      	blx	r3
	  ALL_UNUSED(params);
	  return AT_BLE_SUCCESS;
  } 
    339a:	2000      	movs	r0, #0
    339c:	bd10      	pop	{r4, pc}
    339e:	46c0      	nop			; (mov r8, r8)
    33a0:	0000bf48 	.word	0x0000bf48
    33a4:	0000a435 	.word	0x0000a435
    33a8:	0000bb18 	.word	0x0000bb18
    33ac:	0000a319 	.word	0x0000a319

000033b0 <ble_disconnected_state_handler>:
{
    33b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    33b2:	46de      	mov	lr, fp
    33b4:	4657      	mov	r7, sl
    33b6:	464e      	mov	r6, r9
    33b8:	b5c0      	push	{r6, r7, lr}
    33ba:	b082      	sub	sp, #8
    33bc:	0007      	movs	r7, r0
    33be:	4c36      	ldr	r4, [pc, #216]	; (3498 <ble_disconnected_state_handler+0xe8>)
    33c0:	0026      	movs	r6, r4
    33c2:	3614      	adds	r6, #20
    33c4:	0025      	movs	r5, r4
    33c6:	355e      	adds	r5, #94	; 0x5e
    33c8:	23f8      	movs	r3, #248	; 0xf8
    33ca:	009b      	lsls	r3, r3, #2
    33cc:	4699      	mov	r9, r3
    33ce:	44a1      	add	r9, r4
    33d0:	e00b      	b.n	33ea <ble_disconnected_state_handler+0x3a>
			if(ble_dev_info[idx].bond_info.auth == AT_BLE_AUTH_NO_MITM_NO_BOND)
    33d2:	9b01      	ldr	r3, [sp, #4]
    33d4:	7d1b      	ldrb	r3, [r3, #20]
    33d6:	2b00      	cmp	r3, #0
    33d8:	d018      	beq.n	340c <ble_disconnected_state_handler+0x5c>
				ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
    33da:	2301      	movs	r3, #1
    33dc:	4652      	mov	r2, sl
    33de:	7013      	strb	r3, [r2, #0]
    33e0:	347c      	adds	r4, #124	; 0x7c
    33e2:	367c      	adds	r6, #124	; 0x7c
    33e4:	357c      	adds	r5, #124	; 0x7c
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTION; idx++)
    33e6:	454c      	cmp	r4, r9
    33e8:	d043      	beq.n	3472 <ble_disconnected_state_handler+0xc2>
    33ea:	9401      	str	r4, [sp, #4]
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
    33ec:	8922      	ldrh	r2, [r4, #8]
    33ee:	883b      	ldrh	r3, [r7, #0]
    33f0:	429a      	cmp	r2, r3
    33f2:	d1f5      	bne.n	33e0 <ble_disconnected_state_handler+0x30>
    33f4:	46aa      	mov	sl, r5
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
    33f6:	782b      	ldrb	r3, [r5, #0]
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
    33f8:	2b05      	cmp	r3, #5
    33fa:	d0ea      	beq.n	33d2 <ble_disconnected_state_handler+0x22>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
    33fc:	2b08      	cmp	r3, #8
    33fe:	d0e8      	beq.n	33d2 <ble_disconnected_state_handler+0x22>
			switch (ble_dev_info[idx].conn_state)
    3400:	2b07      	cmp	r3, #7
    3402:	d832      	bhi.n	346a <ble_disconnected_state_handler+0xba>
    3404:	009a      	lsls	r2, r3, #2
    3406:	4925      	ldr	r1, [pc, #148]	; (349c <ble_disconnected_state_handler+0xec>)
    3408:	588a      	ldr	r2, [r1, r2]
    340a:	4697      	mov	pc, r2
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
    340c:	469b      	mov	fp, r3
    340e:	4653      	mov	r3, sl
    3410:	465a      	mov	r2, fp
    3412:	701a      	strb	r2, [r3, #0]
				memset((uint8_t *)&(ble_dev_info[idx].bond_info), 0, sizeof(at_ble_pair_done_t));
    3414:	224a      	movs	r2, #74	; 0x4a
    3416:	2100      	movs	r1, #0
    3418:	0030      	movs	r0, r6
    341a:	4b21      	ldr	r3, [pc, #132]	; (34a0 <ble_disconnected_state_handler+0xf0>)
    341c:	4798      	blx	r3
				memset((uint8_t *)&(ble_dev_info[idx].conn_info), 0, sizeof(at_ble_connected_t));
    341e:	2212      	movs	r2, #18
    3420:	2100      	movs	r1, #0
    3422:	9801      	ldr	r0, [sp, #4]
    3424:	4b1e      	ldr	r3, [pc, #120]	; (34a0 <ble_disconnected_state_handler+0xf0>)
    3426:	4798      	blx	r3
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_NONE;
    3428:	9a01      	ldr	r2, [sp, #4]
    342a:	4659      	mov	r1, fp
    342c:	7491      	strb	r1, [r2, #18]
				ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    342e:	2340      	movs	r3, #64	; 0x40
    3430:	7613      	strb	r3, [r2, #24]
    3432:	e7d5      	b.n	33e0 <ble_disconnected_state_handler+0x30>
					if ((disconnect->reason == AT_BLE_ATT_INSUFF_AUTHEN) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_FAILED))
    3434:	78fa      	ldrb	r2, [r7, #3]
    3436:	2a05      	cmp	r2, #5
    3438:	d00e      	beq.n	3458 <ble_disconnected_state_handler+0xa8>
    343a:	2b07      	cmp	r3, #7
    343c:	d00c      	beq.n	3458 <ble_disconnected_state_handler+0xa8>
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
    343e:	2300      	movs	r3, #0
    3440:	4652      	mov	r2, sl
    3442:	7013      	strb	r3, [r2, #0]
					if (ble_device_count > 0)
    3444:	4b17      	ldr	r3, [pc, #92]	; (34a4 <ble_disconnected_state_handler+0xf4>)
    3446:	781b      	ldrb	r3, [r3, #0]
    3448:	2b00      	cmp	r3, #0
    344a:	d0c9      	beq.n	33e0 <ble_disconnected_state_handler+0x30>
						ble_device_count--;
    344c:	4a15      	ldr	r2, [pc, #84]	; (34a4 <ble_disconnected_state_handler+0xf4>)
    344e:	7813      	ldrb	r3, [r2, #0]
    3450:	3b01      	subs	r3, #1
    3452:	b2db      	uxtb	r3, r3
    3454:	7013      	strb	r3, [r2, #0]
    3456:	e7c3      	b.n	33e0 <ble_disconnected_state_handler+0x30>
						memset((uint8_t *)&(ble_dev_info[idx].bond_info), 0, sizeof(at_ble_pair_done_t));
    3458:	224a      	movs	r2, #74	; 0x4a
    345a:	2100      	movs	r1, #0
    345c:	0030      	movs	r0, r6
    345e:	4b10      	ldr	r3, [pc, #64]	; (34a0 <ble_disconnected_state_handler+0xf0>)
    3460:	4798      	blx	r3
						ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    3462:	2340      	movs	r3, #64	; 0x40
    3464:	9a01      	ldr	r2, [sp, #4]
    3466:	7613      	strb	r3, [r2, #24]
    3468:	e7e9      	b.n	343e <ble_disconnected_state_handler+0x8e>
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
    346a:	2300      	movs	r3, #0
    346c:	4652      	mov	r2, sl
    346e:	7013      	strb	r3, [r2, #0]
				break;				
    3470:	e7b6      	b.n	33e0 <ble_disconnected_state_handler+0x30>
	send_slave_security_flag = true;
    3472:	2201      	movs	r2, #1
    3474:	4b0c      	ldr	r3, [pc, #48]	; (34a8 <ble_disconnected_state_handler+0xf8>)
    3476:	701a      	strb	r2, [r3, #0]
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
    3478:	480c      	ldr	r0, [pc, #48]	; (34ac <ble_disconnected_state_handler+0xfc>)
    347a:	4b0d      	ldr	r3, [pc, #52]	; (34b0 <ble_disconnected_state_handler+0x100>)
    347c:	4798      	blx	r3
    347e:	883a      	ldrh	r2, [r7, #0]
    3480:	78f9      	ldrb	r1, [r7, #3]
    3482:	480c      	ldr	r0, [pc, #48]	; (34b4 <ble_disconnected_state_handler+0x104>)
    3484:	4b0c      	ldr	r3, [pc, #48]	; (34b8 <ble_disconnected_state_handler+0x108>)
    3486:	4798      	blx	r3
}
    3488:	2000      	movs	r0, #0
    348a:	b002      	add	sp, #8
    348c:	bc1c      	pop	{r2, r3, r4}
    348e:	4691      	mov	r9, r2
    3490:	469a      	mov	sl, r3
    3492:	46a3      	mov	fp, r4
    3494:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3496:	46c0      	nop			; (mov r8, r8)
    3498:	20002524 	.word	0x20002524
    349c:	0000b6fc 	.word	0x0000b6fc
    34a0:	0000a309 	.word	0x0000a309
    34a4:	20002904 	.word	0x20002904
    34a8:	20000070 	.word	0x20000070
    34ac:	0000bf48 	.word	0x0000bf48
    34b0:	0000a435 	.word	0x0000a435
    34b4:	0000bb3c 	.word	0x0000bb3c
    34b8:	0000a319 	.word	0x0000a319

000034bc <ble_scan_info_handler>:
{
    34bc:	b510      	push	{r4, lr}
		if(scan_response_count < MAX_SCAN_DEVICE)
    34be:	4b16      	ldr	r3, [pc, #88]	; (3518 <ble_scan_info_handler+0x5c>)
    34c0:	681b      	ldr	r3, [r3, #0]
    34c2:	2b13      	cmp	r3, #19
    34c4:	d90c      	bls.n	34e0 <ble_scan_info_handler+0x24>
			DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
    34c6:	4815      	ldr	r0, [pc, #84]	; (351c <ble_scan_info_handler+0x60>)
    34c8:	4b15      	ldr	r3, [pc, #84]	; (3520 <ble_scan_info_handler+0x64>)
    34ca:	4798      	blx	r3
    34cc:	4815      	ldr	r0, [pc, #84]	; (3524 <ble_scan_info_handler+0x68>)
    34ce:	4b16      	ldr	r3, [pc, #88]	; (3528 <ble_scan_info_handler+0x6c>)
    34d0:	4798      	blx	r3
			if(at_ble_scan_stop() != AT_BLE_SUCCESS)
    34d2:	4b16      	ldr	r3, [pc, #88]	; (352c <ble_scan_info_handler+0x70>)
    34d4:	4798      	blx	r3
			return AT_BLE_FAILURE;
    34d6:	23e2      	movs	r3, #226	; 0xe2
			if(at_ble_scan_stop() != AT_BLE_SUCCESS)
    34d8:	2800      	cmp	r0, #0
    34da:	d114      	bne.n	3506 <ble_scan_info_handler+0x4a>
}
    34dc:	0018      	movs	r0, r3
    34de:	bd10      	pop	{r4, pc}
			memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
    34e0:	4c0d      	ldr	r4, [pc, #52]	; (3518 <ble_scan_info_handler+0x5c>)
    34e2:	6822      	ldr	r2, [r4, #0]
    34e4:	0093      	lsls	r3, r2, #2
    34e6:	189b      	adds	r3, r3, r2
    34e8:	00db      	lsls	r3, r3, #3
    34ea:	189b      	adds	r3, r3, r2
    34ec:	4a10      	ldr	r2, [pc, #64]	; (3530 <ble_scan_info_handler+0x74>)
    34ee:	189b      	adds	r3, r3, r2
    34f0:	2229      	movs	r2, #41	; 0x29
    34f2:	0001      	movs	r1, r0
    34f4:	0018      	movs	r0, r3
    34f6:	4b0f      	ldr	r3, [pc, #60]	; (3534 <ble_scan_info_handler+0x78>)
    34f8:	4798      	blx	r3
			DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
    34fa:	6823      	ldr	r3, [r4, #0]
			scan_response_count++;
    34fc:	6823      	ldr	r3, [r4, #0]
    34fe:	3301      	adds	r3, #1
    3500:	6023      	str	r3, [r4, #0]
			return AT_BLE_SUCCESS;
    3502:	2300      	movs	r3, #0
    3504:	e7ea      	b.n	34dc <ble_scan_info_handler+0x20>
				DBG_LOG("Failed to stop scanning");
    3506:	4805      	ldr	r0, [pc, #20]	; (351c <ble_scan_info_handler+0x60>)
    3508:	4b05      	ldr	r3, [pc, #20]	; (3520 <ble_scan_info_handler+0x64>)
    350a:	4798      	blx	r3
    350c:	480a      	ldr	r0, [pc, #40]	; (3538 <ble_scan_info_handler+0x7c>)
    350e:	4b06      	ldr	r3, [pc, #24]	; (3528 <ble_scan_info_handler+0x6c>)
    3510:	4798      	blx	r3
			return AT_BLE_FAILURE;
    3512:	23e2      	movs	r3, #226	; 0xe2
    3514:	e7e2      	b.n	34dc <ble_scan_info_handler+0x20>
    3516:	46c0      	nop			; (mov r8, r8)
    3518:	20002200 	.word	0x20002200
    351c:	0000bf48 	.word	0x0000bf48
    3520:	0000a435 	.word	0x0000a435
    3524:	0000bef8 	.word	0x0000bef8
    3528:	0000a319 	.word	0x0000a319
    352c:	00006b79 	.word	0x00006b79
    3530:	200029ac 	.word	0x200029ac
    3534:	0000a2f7 	.word	0x0000a2f7
    3538:	0000bf30 	.word	0x0000bf30

0000353c <ble_conn_param_update_req>:
{
    353c:	b510      	push	{r4, lr}
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
    353e:	8800      	ldrh	r0, [r0, #0]
    3540:	2378      	movs	r3, #120	; 0x78
    3542:	2201      	movs	r2, #1
    3544:	2101      	movs	r1, #1
    3546:	4c02      	ldr	r4, [pc, #8]	; (3550 <ble_conn_param_update_req+0x14>)
    3548:	47a0      	blx	r4
}
    354a:	2000      	movs	r0, #0
    354c:	bd10      	pop	{r4, pc}
    354e:	46c0      	nop			; (mov r8, r8)
    3550:	00006bb9 	.word	0x00006bb9

00003554 <ble_slave_security_request_handler>:
{
    3554:	b5f0      	push	{r4, r5, r6, r7, lr}
    3556:	46d6      	mov	lr, sl
    3558:	464f      	mov	r7, r9
    355a:	4646      	mov	r6, r8
    355c:	b5c0      	push	{r6, r7, lr}
    355e:	b084      	sub	sp, #16
    3560:	0005      	movs	r5, r0
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
    3562:	8806      	ldrh	r6, [r0, #0]
    3564:	496a      	ldr	r1, [pc, #424]	; (3710 <ble_slave_security_request_handler+0x1bc>)
    3566:	000a      	movs	r2, r1
    3568:	2300      	movs	r3, #0
    356a:	e003      	b.n	3574 <ble_slave_security_request_handler+0x20>
    356c:	3301      	adds	r3, #1
    356e:	327c      	adds	r2, #124	; 0x7c
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTION; idx++)
    3570:	2b08      	cmp	r3, #8
    3572:	d020      	beq.n	35b6 <ble_slave_security_request_handler+0x62>
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
    3574:	8910      	ldrh	r0, [r2, #8]
    3576:	42b0      	cmp	r0, r6
    3578:	d1f8      	bne.n	356c <ble_slave_security_request_handler+0x18>
    357a:	0010      	movs	r0, r2
    357c:	305e      	adds	r0, #94	; 0x5e
    357e:	7800      	ldrb	r0, [r0, #0]
    3580:	2802      	cmp	r0, #2
    3582:	d1f3      	bne.n	356c <ble_slave_security_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
    3584:	4862      	ldr	r0, [pc, #392]	; (3710 <ble_slave_security_request_handler+0x1bc>)
    3586:	015a      	lsls	r2, r3, #5
    3588:	1ad4      	subs	r4, r2, r3
    358a:	00a4      	lsls	r4, r4, #2
    358c:	1904      	adds	r4, r0, r4
    358e:	345e      	adds	r4, #94	; 0x5e
    3590:	2206      	movs	r2, #6
    3592:	7022      	strb	r2, [r4, #0]
    3594:	32f9      	adds	r2, #249	; 0xf9
    3596:	4013      	ands	r3, r2
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
    3598:	015a      	lsls	r2, r3, #5
    359a:	1ad2      	subs	r2, r2, r3
    359c:	0092      	lsls	r2, r2, #2
    359e:	1882      	adds	r2, r0, r2
    35a0:	7d12      	ldrb	r2, [r2, #20]
    35a2:	07d0      	lsls	r0, r2, #31
    35a4:	d40a      	bmi.n	35bc <ble_slave_security_request_handler+0x68>
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
    35a6:	015a      	lsls	r2, r3, #5
    35a8:	1ad2      	subs	r2, r2, r3
    35aa:	0092      	lsls	r2, r2, #2
    35ac:	4b58      	ldr	r3, [pc, #352]	; (3710 <ble_slave_security_request_handler+0x1bc>)
    35ae:	189b      	adds	r3, r3, r2
    35b0:	335e      	adds	r3, #94	; 0x5e
    35b2:	2202      	movs	r2, #2
    35b4:	701a      	strb	r2, [r3, #0]
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
    35b6:	8828      	ldrh	r0, [r5, #0]
    35b8:	2300      	movs	r3, #0
    35ba:	e019      	b.n	35f0 <ble_slave_security_request_handler+0x9c>
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
    35bc:	78e8      	ldrb	r0, [r5, #3]
    35be:	2800      	cmp	r0, #0
    35c0:	d0f1      	beq.n	35a6 <ble_slave_security_request_handler+0x52>
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
    35c2:	0159      	lsls	r1, r3, #5
    35c4:	1ac9      	subs	r1, r1, r3
    35c6:	0089      	lsls	r1, r1, #2
    35c8:	311a      	adds	r1, #26
    35ca:	4b51      	ldr	r3, [pc, #324]	; (3710 <ble_slave_security_request_handler+0x1bc>)
    35cc:	18c9      	adds	r1, r1, r3
    35ce:	8828      	ldrh	r0, [r5, #0]
    35d0:	4b50      	ldr	r3, [pc, #320]	; (3714 <ble_slave_security_request_handler+0x1c0>)
    35d2:	4798      	blx	r3
    35d4:	2800      	cmp	r0, #0
    35d6:	d059      	beq.n	368c <ble_slave_security_request_handler+0x138>
				DBG_LOG("Encryption Not started");
    35d8:	484f      	ldr	r0, [pc, #316]	; (3718 <ble_slave_security_request_handler+0x1c4>)
    35da:	4b50      	ldr	r3, [pc, #320]	; (371c <ble_slave_security_request_handler+0x1c8>)
    35dc:	4798      	blx	r3
    35de:	4850      	ldr	r0, [pc, #320]	; (3720 <ble_slave_security_request_handler+0x1cc>)
    35e0:	4b50      	ldr	r3, [pc, #320]	; (3724 <ble_slave_security_request_handler+0x1d0>)
    35e2:	4798      	blx	r3
				return AT_BLE_FAILURE;
    35e4:	20e2      	movs	r0, #226	; 0xe2
    35e6:	e051      	b.n	368c <ble_slave_security_request_handler+0x138>
    35e8:	3301      	adds	r3, #1
    35ea:	317c      	adds	r1, #124	; 0x7c
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTION; idx++)
    35ec:	2b08      	cmp	r3, #8
    35ee:	d04c      	beq.n	368a <ble_slave_security_request_handler+0x136>
    35f0:	b2de      	uxtb	r6, r3
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
    35f2:	890a      	ldrh	r2, [r1, #8]
    35f4:	4282      	cmp	r2, r0
    35f6:	d1f7      	bne.n	35e8 <ble_slave_security_request_handler+0x94>
    35f8:	000a      	movs	r2, r1
    35fa:	325e      	adds	r2, #94	; 0x5e
    35fc:	7812      	ldrb	r2, [r2, #0]
    35fe:	2a02      	cmp	r2, #2
    3600:	d1f2      	bne.n	35e8 <ble_slave_security_request_handler+0x94>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
    3602:	015a      	lsls	r2, r3, #5
    3604:	1ad2      	subs	r2, r2, r3
    3606:	0092      	lsls	r2, r2, #2
    3608:	4c41      	ldr	r4, [pc, #260]	; (3710 <ble_slave_security_request_handler+0x1bc>)
    360a:	18a4      	adds	r4, r4, r2
    360c:	345e      	adds	r4, #94	; 0x5e
    360e:	2203      	movs	r2, #3
    3610:	7022      	strb	r2, [r4, #0]
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
    3612:	aa01      	add	r2, sp, #4
    3614:	2102      	movs	r1, #2
    3616:	7211      	strb	r1, [r2, #8]
	features.bond = slave_sec_req->bond;
    3618:	78e9      	ldrb	r1, [r5, #3]
    361a:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
    361c:	2101      	movs	r1, #1
    361e:	7051      	strb	r1, [r2, #1]
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
    3620:	2004      	movs	r0, #4
    3622:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = false;
    3624:	2000      	movs	r0, #0
    3626:	70d0      	strb	r0, [r2, #3]
	features.initiator_keys =   AT_BLE_KEY_DIST_ENC; //Default
    3628:	7191      	strb	r1, [r2, #6]
	features.responder_keys =   AT_BLE_KEY_DIST_ENC; //Default
    362a:	71d1      	strb	r1, [r2, #7]
	features.max_key_size = 16; //Default
    362c:	310f      	adds	r1, #15
    362e:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16; //Default
    3630:	7111      	strb	r1, [r2, #4]
	if(idx < BLE_MAX_DEVICE_CONNECTION)
    3632:	2e07      	cmp	r6, #7
    3634:	d82a      	bhi.n	368c <ble_slave_security_request_handler+0x138>
    3636:	26ff      	movs	r6, #255	; 0xff
    3638:	401e      	ands	r6, r3
		if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
    363a:	0173      	lsls	r3, r6, #5
    363c:	1b9b      	subs	r3, r3, r6
    363e:	009b      	lsls	r3, r3, #2
    3640:	4a33      	ldr	r2, [pc, #204]	; (3710 <ble_slave_security_request_handler+0x1bc>)
    3642:	5c9b      	ldrb	r3, [r3, r2]
    3644:	2b02      	cmp	r3, #2
    3646:	d027      	beq.n	3698 <ble_slave_security_request_handler+0x144>
		if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
    3648:	0173      	lsls	r3, r6, #5
    364a:	1b9b      	subs	r3, r3, r6
    364c:	009b      	lsls	r3, r3, #2
    364e:	4a30      	ldr	r2, [pc, #192]	; (3710 <ble_slave_security_request_handler+0x1bc>)
    3650:	18d3      	adds	r3, r2, r3
    3652:	7e1b      	ldrb	r3, [r3, #24]
    3654:	2b40      	cmp	r3, #64	; 0x40
    3656:	d024      	beq.n	36a2 <ble_slave_security_request_handler+0x14e>
		if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
    3658:	0172      	lsls	r2, r6, #5
    365a:	1b92      	subs	r2, r2, r6
    365c:	0092      	lsls	r2, r2, #2
    365e:	3260      	adds	r2, #96	; 0x60
    3660:	4e2b      	ldr	r6, [pc, #172]	; (3710 <ble_slave_security_request_handler+0x1bc>)
    3662:	1992      	adds	r2, r2, r6
    3664:	8828      	ldrh	r0, [r5, #0]
    3666:	2300      	movs	r3, #0
    3668:	a901      	add	r1, sp, #4
    366a:	4c2f      	ldr	r4, [pc, #188]	; (3728 <ble_slave_security_request_handler+0x1d4>)
    366c:	47a0      	blx	r4
    366e:	2800      	cmp	r0, #0
    3670:	d00c      	beq.n	368c <ble_slave_security_request_handler+0x138>
			features.bond = false;
    3672:	ab01      	add	r3, sp, #4
    3674:	2200      	movs	r2, #0
    3676:	709a      	strb	r2, [r3, #2]
			features.mitm_protection = false;
    3678:	705a      	strb	r2, [r3, #1]
			DBG_LOG("Slave Security Req - Authentication Failed");
    367a:	4827      	ldr	r0, [pc, #156]	; (3718 <ble_slave_security_request_handler+0x1c4>)
    367c:	4b27      	ldr	r3, [pc, #156]	; (371c <ble_slave_security_request_handler+0x1c8>)
    367e:	4798      	blx	r3
    3680:	482a      	ldr	r0, [pc, #168]	; (372c <ble_slave_security_request_handler+0x1d8>)
    3682:	4b28      	ldr	r3, [pc, #160]	; (3724 <ble_slave_security_request_handler+0x1d0>)
    3684:	4798      	blx	r3
			return AT_BLE_FAILURE;
    3686:	20e2      	movs	r0, #226	; 0xe2
    3688:	e000      	b.n	368c <ble_slave_security_request_handler+0x138>
	return AT_BLE_SUCCESS;
    368a:	2000      	movs	r0, #0
}
    368c:	b004      	add	sp, #16
    368e:	bc1c      	pop	{r2, r3, r4}
    3690:	4690      	mov	r8, r2
    3692:	4699      	mov	r9, r3
    3694:	46a2      	mov	sl, r4
    3696:	bdf0      	pop	{r4, r5, r6, r7, pc}
			features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
    3698:	ab01      	add	r3, sp, #4
    369a:	2203      	movs	r2, #3
    369c:	719a      	strb	r2, [r3, #6]
			features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
    369e:	71da      	strb	r2, [r3, #7]
    36a0:	e7d2      	b.n	3648 <ble_slave_security_request_handler+0xf4>
    36a2:	0177      	lsls	r7, r6, #5
    36a4:	1bbf      	subs	r7, r7, r6
    36a6:	00bb      	lsls	r3, r7, #2
    36a8:	4698      	mov	r8, r3
    36aa:	001c      	movs	r4, r3
    36ac:	3460      	adds	r4, #96	; 0x60
    36ae:	0013      	movs	r3, r2
    36b0:	18a4      	adds	r4, r4, r2
    36b2:	4642      	mov	r2, r8
    36b4:	3268      	adds	r2, #104	; 0x68
    36b6:	4692      	mov	sl, r2
    36b8:	449a      	add	sl, r3
				ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
    36ba:	4b1d      	ldr	r3, [pc, #116]	; (3730 <ble_slave_security_request_handler+0x1dc>)
    36bc:	4699      	mov	r9, r3
    36be:	270f      	movs	r7, #15
    36c0:	47c8      	blx	r9
    36c2:	4038      	ands	r0, r7
    36c4:	7020      	strb	r0, [r4, #0]
				ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
    36c6:	47c8      	blx	r9
    36c8:	4038      	ands	r0, r7
    36ca:	74a0      	strb	r0, [r4, #18]
    36cc:	3401      	adds	r4, #1
			for(i=0; i<8; i++)
    36ce:	4554      	cmp	r4, sl
    36d0:	d1f6      	bne.n	36c0 <ble_slave_security_request_handler+0x16c>
    36d2:	4647      	mov	r7, r8
    36d4:	3770      	adds	r7, #112	; 0x70
    36d6:	4b0e      	ldr	r3, [pc, #56]	; (3710 <ble_slave_security_request_handler+0x1bc>)
    36d8:	18ff      	adds	r7, r7, r3
				ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
    36da:	4b15      	ldr	r3, [pc, #84]	; (3730 <ble_slave_security_request_handler+0x1dc>)
    36dc:	4699      	mov	r9, r3
    36de:	230f      	movs	r3, #15
    36e0:	4698      	mov	r8, r3
    36e2:	47c8      	blx	r9
    36e4:	4643      	mov	r3, r8
    36e6:	4018      	ands	r0, r3
    36e8:	7020      	strb	r0, [r4, #0]
    36ea:	3401      	adds	r4, #1
			for(i=8 ; i<16 ;i++)
    36ec:	42a7      	cmp	r7, r4
    36ee:	d1f8      	bne.n	36e2 <ble_slave_security_request_handler+0x18e>
			ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
    36f0:	4b0f      	ldr	r3, [pc, #60]	; (3730 <ble_slave_security_request_handler+0x1dc>)
    36f2:	4798      	blx	r3
    36f4:	4a06      	ldr	r2, [pc, #24]	; (3710 <ble_slave_security_request_handler+0x1bc>)
    36f6:	0171      	lsls	r1, r6, #5
    36f8:	1b8b      	subs	r3, r1, r6
    36fa:	009b      	lsls	r3, r3, #2
    36fc:	18d3      	adds	r3, r2, r3
    36fe:	3370      	adds	r3, #112	; 0x70
    3700:	8018      	strh	r0, [r3, #0]
			ble_dev_info[idx].host_ltk.key_size = 16;
    3702:	1b89      	subs	r1, r1, r6
    3704:	0089      	lsls	r1, r1, #2
    3706:	1852      	adds	r2, r2, r1
    3708:	327a      	adds	r2, #122	; 0x7a
    370a:	2310      	movs	r3, #16
    370c:	7013      	strb	r3, [r2, #0]
    370e:	e7a3      	b.n	3658 <ble_slave_security_request_handler+0x104>
    3710:	20002524 	.word	0x20002524
    3714:	0000811d 	.word	0x0000811d
    3718:	0000bf48 	.word	0x0000bf48
    371c:	0000a435 	.word	0x0000a435
    3720:	0000c030 	.word	0x0000c030
    3724:	0000a319 	.word	0x0000a319
    3728:	00007f31 	.word	0x00007f31
    372c:	0000c048 	.word	0x0000c048
    3730:	0000a449 	.word	0x0000a449

00003734 <ble_pair_request_handler>:
{
    3734:	b5f0      	push	{r4, r5, r6, r7, lr}
    3736:	46d6      	mov	lr, sl
    3738:	464f      	mov	r7, r9
    373a:	4646      	mov	r6, r8
    373c:	b5c0      	push	{r6, r7, lr}
    373e:	b084      	sub	sp, #16
    3740:	0006      	movs	r6, r0
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
    3742:	8800      	ldrh	r0, [r0, #0]
    3744:	4a49      	ldr	r2, [pc, #292]	; (386c <ble_pair_request_handler+0x138>)
    3746:	2300      	movs	r3, #0
    3748:	e003      	b.n	3752 <ble_pair_request_handler+0x1e>
    374a:	3301      	adds	r3, #1
    374c:	327c      	adds	r2, #124	; 0x7c
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTION; idx++)
    374e:	2b08      	cmp	r3, #8
    3750:	d049      	beq.n	37e6 <ble_pair_request_handler+0xb2>
    3752:	b2dd      	uxtb	r5, r3
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
    3754:	8911      	ldrh	r1, [r2, #8]
    3756:	4281      	cmp	r1, r0
    3758:	d1f7      	bne.n	374a <ble_pair_request_handler+0x16>
    375a:	0011      	movs	r1, r2
    375c:	315e      	adds	r1, #94	; 0x5e
    375e:	7809      	ldrb	r1, [r1, #0]
    3760:	2902      	cmp	r1, #2
    3762:	d1f2      	bne.n	374a <ble_pair_request_handler+0x16>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
    3764:	015a      	lsls	r2, r3, #5
    3766:	1ad2      	subs	r2, r2, r3
    3768:	0092      	lsls	r2, r2, #2
    376a:	4c40      	ldr	r4, [pc, #256]	; (386c <ble_pair_request_handler+0x138>)
    376c:	18a4      	adds	r4, r4, r2
    376e:	345e      	adds	r4, #94	; 0x5e
    3770:	2203      	movs	r2, #3
    3772:	7022      	strb	r2, [r4, #0]
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
    3774:	aa01      	add	r2, sp, #4
    3776:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
    3778:	3901      	subs	r1, #1
    377a:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
    377c:	7051      	strb	r1, [r2, #1]
	features.io_cababilities = BLE_IO_CAPABALITIES;
    377e:	2000      	movs	r0, #0
    3780:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
    3782:	70d0      	strb	r0, [r2, #3]
	features.initiator_keys =   AT_BLE_KEY_DIST_ENC; //Default
    3784:	7191      	strb	r1, [r2, #6]
	features.responder_keys =   AT_BLE_KEY_DIST_ENC; //Default
    3786:	71d1      	strb	r1, [r2, #7]
	features.max_key_size = 16; //Default
    3788:	310f      	adds	r1, #15
    378a:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16; //Default
    378c:	7111      	strb	r1, [r2, #4]
	if (idx < BLE_MAX_DEVICE_CONNECTION)
    378e:	2d07      	cmp	r5, #7
    3790:	d82a      	bhi.n	37e8 <ble_pair_request_handler+0xb4>
    3792:	25ff      	movs	r5, #255	; 0xff
    3794:	401d      	ands	r5, r3
		if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
    3796:	016b      	lsls	r3, r5, #5
    3798:	1b5b      	subs	r3, r3, r5
    379a:	009b      	lsls	r3, r3, #2
    379c:	4a33      	ldr	r2, [pc, #204]	; (386c <ble_pair_request_handler+0x138>)
    379e:	5c9b      	ldrb	r3, [r3, r2]
    37a0:	2b02      	cmp	r3, #2
    37a2:	d027      	beq.n	37f4 <ble_pair_request_handler+0xc0>
		if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
    37a4:	016b      	lsls	r3, r5, #5
    37a6:	1b5b      	subs	r3, r3, r5
    37a8:	009b      	lsls	r3, r3, #2
    37aa:	4a30      	ldr	r2, [pc, #192]	; (386c <ble_pair_request_handler+0x138>)
    37ac:	18d3      	adds	r3, r2, r3
    37ae:	7e1b      	ldrb	r3, [r3, #24]
    37b0:	2b40      	cmp	r3, #64	; 0x40
    37b2:	d024      	beq.n	37fe <ble_pair_request_handler+0xca>
		if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
    37b4:	016a      	lsls	r2, r5, #5
    37b6:	1b52      	subs	r2, r2, r5
    37b8:	0092      	lsls	r2, r2, #2
    37ba:	3260      	adds	r2, #96	; 0x60
    37bc:	4d2b      	ldr	r5, [pc, #172]	; (386c <ble_pair_request_handler+0x138>)
    37be:	1952      	adds	r2, r2, r5
    37c0:	8830      	ldrh	r0, [r6, #0]
    37c2:	2300      	movs	r3, #0
    37c4:	a901      	add	r1, sp, #4
    37c6:	4c2a      	ldr	r4, [pc, #168]	; (3870 <ble_pair_request_handler+0x13c>)
    37c8:	47a0      	blx	r4
    37ca:	2800      	cmp	r0, #0
    37cc:	d00c      	beq.n	37e8 <ble_pair_request_handler+0xb4>
			features.bond = false;
    37ce:	ab01      	add	r3, sp, #4
    37d0:	2200      	movs	r2, #0
    37d2:	709a      	strb	r2, [r3, #2]
			features.mitm_protection = false;
    37d4:	705a      	strb	r2, [r3, #1]
			DBG_LOG("Pair Request - Authentication Failed");
    37d6:	4827      	ldr	r0, [pc, #156]	; (3874 <ble_pair_request_handler+0x140>)
    37d8:	4b27      	ldr	r3, [pc, #156]	; (3878 <ble_pair_request_handler+0x144>)
    37da:	4798      	blx	r3
    37dc:	4827      	ldr	r0, [pc, #156]	; (387c <ble_pair_request_handler+0x148>)
    37de:	4b28      	ldr	r3, [pc, #160]	; (3880 <ble_pair_request_handler+0x14c>)
    37e0:	4798      	blx	r3
			return AT_BLE_FAILURE;
    37e2:	20e2      	movs	r0, #226	; 0xe2
    37e4:	e000      	b.n	37e8 <ble_pair_request_handler+0xb4>
	return AT_BLE_SUCCESS;
    37e6:	2000      	movs	r0, #0
}
    37e8:	b004      	add	sp, #16
    37ea:	bc1c      	pop	{r2, r3, r4}
    37ec:	4690      	mov	r8, r2
    37ee:	4699      	mov	r9, r3
    37f0:	46a2      	mov	sl, r4
    37f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
    37f4:	ab01      	add	r3, sp, #4
    37f6:	2203      	movs	r2, #3
    37f8:	719a      	strb	r2, [r3, #6]
			features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
    37fa:	71da      	strb	r2, [r3, #7]
    37fc:	e7d2      	b.n	37a4 <ble_pair_request_handler+0x70>
    37fe:	016f      	lsls	r7, r5, #5
    3800:	1b7f      	subs	r7, r7, r5
    3802:	00bb      	lsls	r3, r7, #2
    3804:	4698      	mov	r8, r3
    3806:	001c      	movs	r4, r3
    3808:	3460      	adds	r4, #96	; 0x60
    380a:	0013      	movs	r3, r2
    380c:	18a4      	adds	r4, r4, r2
    380e:	4642      	mov	r2, r8
    3810:	3268      	adds	r2, #104	; 0x68
    3812:	4692      	mov	sl, r2
    3814:	449a      	add	sl, r3
				ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
    3816:	4b1b      	ldr	r3, [pc, #108]	; (3884 <ble_pair_request_handler+0x150>)
    3818:	4699      	mov	r9, r3
    381a:	270f      	movs	r7, #15
    381c:	47c8      	blx	r9
    381e:	4038      	ands	r0, r7
    3820:	7020      	strb	r0, [r4, #0]
				ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
    3822:	47c8      	blx	r9
    3824:	4038      	ands	r0, r7
    3826:	74a0      	strb	r0, [r4, #18]
    3828:	3401      	adds	r4, #1
			for(i=0; i<8; i++)
    382a:	45a2      	cmp	sl, r4
    382c:	d1f6      	bne.n	381c <ble_pair_request_handler+0xe8>
    382e:	4647      	mov	r7, r8
    3830:	3770      	adds	r7, #112	; 0x70
    3832:	4b0e      	ldr	r3, [pc, #56]	; (386c <ble_pair_request_handler+0x138>)
    3834:	18ff      	adds	r7, r7, r3
				ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
    3836:	4b13      	ldr	r3, [pc, #76]	; (3884 <ble_pair_request_handler+0x150>)
    3838:	4699      	mov	r9, r3
    383a:	230f      	movs	r3, #15
    383c:	4698      	mov	r8, r3
    383e:	47c8      	blx	r9
    3840:	4643      	mov	r3, r8
    3842:	4018      	ands	r0, r3
    3844:	7020      	strb	r0, [r4, #0]
    3846:	3401      	adds	r4, #1
			for(i=8 ; i<16 ;i++)
    3848:	42bc      	cmp	r4, r7
    384a:	d1f8      	bne.n	383e <ble_pair_request_handler+0x10a>
			ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
    384c:	4b0d      	ldr	r3, [pc, #52]	; (3884 <ble_pair_request_handler+0x150>)
    384e:	4798      	blx	r3
    3850:	4a06      	ldr	r2, [pc, #24]	; (386c <ble_pair_request_handler+0x138>)
    3852:	0169      	lsls	r1, r5, #5
    3854:	1b4b      	subs	r3, r1, r5
    3856:	009b      	lsls	r3, r3, #2
    3858:	18d3      	adds	r3, r2, r3
    385a:	3370      	adds	r3, #112	; 0x70
    385c:	8018      	strh	r0, [r3, #0]
			ble_dev_info[idx].host_ltk.key_size = 16;
    385e:	1b49      	subs	r1, r1, r5
    3860:	0089      	lsls	r1, r1, #2
    3862:	1852      	adds	r2, r2, r1
    3864:	327a      	adds	r2, #122	; 0x7a
    3866:	2310      	movs	r3, #16
    3868:	7013      	strb	r3, [r2, #0]
    386a:	e7a3      	b.n	37b4 <ble_pair_request_handler+0x80>
    386c:	20002524 	.word	0x20002524
    3870:	00007f31 	.word	0x00007f31
    3874:	0000bf48 	.word	0x0000bf48
    3878:	0000a435 	.word	0x0000a435
    387c:	0000bed0 	.word	0x0000bed0
    3880:	0000a319 	.word	0x0000a319
    3884:	0000a449 	.word	0x0000a449

00003888 <ble_pair_key_request_handler>:
{
    3888:	b5f0      	push	{r4, r5, r6, r7, lr}
    388a:	b085      	sub	sp, #20
    388c:	0005      	movs	r5, r0
	uint8_t passkey[6]={'1','2','3','4','5','6'};
    388e:	4b41      	ldr	r3, [pc, #260]	; (3994 <ble_pair_key_request_handler+0x10c>)
    3890:	681a      	ldr	r2, [r3, #0]
    3892:	9202      	str	r2, [sp, #8]
    3894:	889a      	ldrh	r2, [r3, #4]
    3896:	ab02      	add	r3, sp, #8
    3898:	809a      	strh	r2, [r3, #4]
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
    389a:	ac01      	add	r4, sp, #4
    389c:	2204      	movs	r2, #4
    389e:	0001      	movs	r1, r0
    38a0:	0020      	movs	r0, r4
    38a2:	4b3d      	ldr	r3, [pc, #244]	; (3998 <ble_pair_key_request_handler+0x110>)
    38a4:	4798      	blx	r3
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
    38a6:	78e3      	ldrb	r3, [r4, #3]
    38a8:	2b00      	cmp	r3, #0
    38aa:	d00b      	beq.n	38c4 <ble_pair_key_request_handler+0x3c>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
    38ac:	2380      	movs	r3, #128	; 0x80
    38ae:	005b      	lsls	r3, r3, #1
    38b0:	aa01      	add	r2, sp, #4
    38b2:	8852      	ldrh	r2, [r2, #2]
    38b4:	429a      	cmp	r2, r3
    38b6:	d044      	beq.n	3942 <ble_pair_key_request_handler+0xba>
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
    38b8:	ab01      	add	r3, sp, #4
    38ba:	789b      	ldrb	r3, [r3, #2]
    38bc:	2b01      	cmp	r3, #1
    38be:	d060      	beq.n	3982 <ble_pair_key_request_handler+0xfa>
	return AT_BLE_SUCCESS;	
    38c0:	2000      	movs	r0, #0
    38c2:	e054      	b.n	396e <ble_pair_key_request_handler+0xe6>
	  DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
    38c4:	4835      	ldr	r0, [pc, #212]	; (399c <ble_pair_key_request_handler+0x114>)
    38c6:	4b36      	ldr	r3, [pc, #216]	; (39a0 <ble_pair_key_request_handler+0x118>)
    38c8:	4798      	blx	r3
    38ca:	4836      	ldr	r0, [pc, #216]	; (39a4 <ble_pair_key_request_handler+0x11c>)
    38cc:	4b36      	ldr	r3, [pc, #216]	; (39a8 <ble_pair_key_request_handler+0x120>)
    38ce:	4798      	blx	r3
    38d0:	2400      	movs	r4, #0
		pin = getchar_timeout(PIN_TIMEOUT);
    38d2:	4e36      	ldr	r6, [pc, #216]	; (39ac <ble_pair_key_request_handler+0x124>)
	  for (idx = 0; idx < 6;) {          
    38d4:	b2e7      	uxtb	r7, r4
		pin = getchar_timeout(PIN_TIMEOUT);
    38d6:	4836      	ldr	r0, [pc, #216]	; (39b0 <ble_pair_key_request_handler+0x128>)
    38d8:	47b0      	blx	r6
    38da:	0002      	movs	r2, r0
		if (pin == 0xFF) {
    38dc:	28ff      	cmp	r0, #255	; 0xff
    38de:	d00c      	beq.n	38fa <ble_pair_key_request_handler+0x72>
		if ((pin >= '0') && ( pin <= '9')) {
    38e0:	3830      	subs	r0, #48	; 0x30
    38e2:	b2c0      	uxtb	r0, r0
    38e4:	2809      	cmp	r0, #9
    38e6:	d923      	bls.n	3930 <ble_pair_key_request_handler+0xa8>
	  for (idx = 0; idx < 6;) {          
    38e8:	2f05      	cmp	r7, #5
    38ea:	d9f4      	bls.n	38d6 <ble_pair_key_request_handler+0x4e>
            DBG_LOG("Entered Pass-code:");
    38ec:	482b      	ldr	r0, [pc, #172]	; (399c <ble_pair_key_request_handler+0x114>)
    38ee:	4b2c      	ldr	r3, [pc, #176]	; (39a0 <ble_pair_key_request_handler+0x118>)
    38f0:	4798      	blx	r3
    38f2:	4830      	ldr	r0, [pc, #192]	; (39b4 <ble_pair_key_request_handler+0x12c>)
    38f4:	4b2c      	ldr	r3, [pc, #176]	; (39a8 <ble_pair_key_request_handler+0x120>)
    38f6:	4798      	blx	r3
    38f8:	e029      	b.n	394e <ble_pair_key_request_handler+0xc6>
			DBG_LOG("Pin Timeout");
    38fa:	4f28      	ldr	r7, [pc, #160]	; (399c <ble_pair_key_request_handler+0x114>)
    38fc:	0038      	movs	r0, r7
    38fe:	4e28      	ldr	r6, [pc, #160]	; (39a0 <ble_pair_key_request_handler+0x118>)
    3900:	47b0      	blx	r6
    3902:	482d      	ldr	r0, [pc, #180]	; (39b8 <ble_pair_key_request_handler+0x130>)
    3904:	4c28      	ldr	r4, [pc, #160]	; (39a8 <ble_pair_key_request_handler+0x120>)
    3906:	47a0      	blx	r4
			DBG_LOG("Disconnecting ...");
    3908:	0038      	movs	r0, r7
    390a:	47b0      	blx	r6
    390c:	482b      	ldr	r0, [pc, #172]	; (39bc <ble_pair_key_request_handler+0x134>)
    390e:	47a0      	blx	r4
			if (!(at_ble_disconnect(pair_key->handle,
    3910:	8828      	ldrh	r0, [r5, #0]
    3912:	2113      	movs	r1, #19
    3914:	4b2a      	ldr	r3, [pc, #168]	; (39c0 <ble_pair_key_request_handler+0x138>)
    3916:	4798      	blx	r3
    3918:	0003      	movs	r3, r0
			return AT_BLE_FAILURE;
    391a:	20e2      	movs	r0, #226	; 0xe2
			if (!(at_ble_disconnect(pair_key->handle,
    391c:	2b00      	cmp	r3, #0
    391e:	d026      	beq.n	396e <ble_pair_key_request_handler+0xe6>
				DBG_LOG("Disconnect Request Failed");
    3920:	481e      	ldr	r0, [pc, #120]	; (399c <ble_pair_key_request_handler+0x114>)
    3922:	4b1f      	ldr	r3, [pc, #124]	; (39a0 <ble_pair_key_request_handler+0x118>)
    3924:	4798      	blx	r3
    3926:	4827      	ldr	r0, [pc, #156]	; (39c4 <ble_pair_key_request_handler+0x13c>)
    3928:	4b1f      	ldr	r3, [pc, #124]	; (39a8 <ble_pair_key_request_handler+0x120>)
    392a:	4798      	blx	r3
			return AT_BLE_FAILURE;
    392c:	20e2      	movs	r0, #226	; 0xe2
    392e:	e01e      	b.n	396e <ble_pair_key_request_handler+0xe6>
		  passkey[idx++] = pin;
    3930:	ab02      	add	r3, sp, #8
    3932:	54e2      	strb	r2, [r4, r3]
		  DBG_LOG_CONT("%c", pin);
    3934:	0010      	movs	r0, r2
    3936:	4b24      	ldr	r3, [pc, #144]	; (39c8 <ble_pair_key_request_handler+0x140>)
    3938:	4798      	blx	r3
    393a:	3401      	adds	r4, #1
	  for (idx = 0; idx < 6;) {          
    393c:	2c06      	cmp	r4, #6
    393e:	d0d5      	beq.n	38ec <ble_pair_key_request_handler+0x64>
    3940:	e7c8      	b.n	38d4 <ble_pair_key_request_handler+0x4c>
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
    3942:	4816      	ldr	r0, [pc, #88]	; (399c <ble_pair_key_request_handler+0x114>)
    3944:	4b16      	ldr	r3, [pc, #88]	; (39a0 <ble_pair_key_request_handler+0x118>)
    3946:	4798      	blx	r3
    3948:	4820      	ldr	r0, [pc, #128]	; (39cc <ble_pair_key_request_handler+0x144>)
    394a:	4b17      	ldr	r3, [pc, #92]	; (39a8 <ble_pair_key_request_handler+0x120>)
    394c:	4798      	blx	r3
	  DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
    394e:	2400      	movs	r4, #0
                  passkey[idx] = (passkey[idx]);
    3950:	ae02      	add	r6, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
    3952:	4f1d      	ldr	r7, [pc, #116]	; (39c8 <ble_pair_key_request_handler+0x140>)
    3954:	5da0      	ldrb	r0, [r4, r6]
    3956:	47b8      	blx	r7
    3958:	3401      	adds	r4, #1
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
    395a:	2c06      	cmp	r4, #6
    395c:	d1fa      	bne.n	3954 <ble_pair_key_request_handler+0xcc>
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
    395e:	ab01      	add	r3, sp, #4
    3960:	7899      	ldrb	r1, [r3, #2]
    3962:	8828      	ldrh	r0, [r5, #0]
    3964:	aa02      	add	r2, sp, #8
    3966:	4b1a      	ldr	r3, [pc, #104]	; (39d0 <ble_pair_key_request_handler+0x148>)
    3968:	4798      	blx	r3
    396a:	2800      	cmp	r0, #0
    396c:	d101      	bne.n	3972 <ble_pair_key_request_handler+0xea>
}
    396e:	b005      	add	sp, #20
    3970:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  DBG_LOG("Pair-key reply failed");
    3972:	480a      	ldr	r0, [pc, #40]	; (399c <ble_pair_key_request_handler+0x114>)
    3974:	4b0a      	ldr	r3, [pc, #40]	; (39a0 <ble_pair_key_request_handler+0x118>)
    3976:	4798      	blx	r3
    3978:	4816      	ldr	r0, [pc, #88]	; (39d4 <ble_pair_key_request_handler+0x14c>)
    397a:	4b0b      	ldr	r3, [pc, #44]	; (39a8 <ble_pair_key_request_handler+0x120>)
    397c:	4798      	blx	r3
	return AT_BLE_SUCCESS;	
    397e:	2000      	movs	r0, #0
    3980:	e7f5      	b.n	396e <ble_pair_key_request_handler+0xe6>
			DBG_LOG("OOB Feature Not supported");
    3982:	4806      	ldr	r0, [pc, #24]	; (399c <ble_pair_key_request_handler+0x114>)
    3984:	4b06      	ldr	r3, [pc, #24]	; (39a0 <ble_pair_key_request_handler+0x118>)
    3986:	4798      	blx	r3
    3988:	4813      	ldr	r0, [pc, #76]	; (39d8 <ble_pair_key_request_handler+0x150>)
    398a:	4b07      	ldr	r3, [pc, #28]	; (39a8 <ble_pair_key_request_handler+0x120>)
    398c:	4798      	blx	r3
	return AT_BLE_SUCCESS;	
    398e:	2000      	movs	r0, #0
    3990:	e7ed      	b.n	396e <ble_pair_key_request_handler+0xe6>
    3992:	46c0      	nop			; (mov r8, r8)
    3994:	0000b830 	.word	0x0000b830
    3998:	0000a2f7 	.word	0x0000a2f7
    399c:	0000bf48 	.word	0x0000bf48
    39a0:	0000a435 	.word	0x0000a435
    39a4:	0000bdec 	.word	0x0000bdec
    39a8:	0000a319 	.word	0x0000a319
    39ac:	00004885 	.word	0x00004885
    39b0:	00007530 	.word	0x00007530
    39b4:	0000bebc 	.word	0x0000bebc
    39b8:	0000be14 	.word	0x0000be14
    39bc:	0000be20 	.word	0x0000be20
    39c0:	00006b99 	.word	0x00006b99
    39c4:	0000be34 	.word	0x0000be34
    39c8:	0000a34d 	.word	0x0000a34d
    39cc:	0000be50 	.word	0x0000be50
    39d0:	00008061 	.word	0x00008061
    39d4:	0000be88 	.word	0x0000be88
    39d8:	0000bea0 	.word	0x0000bea0

000039dc <ble_encryption_request_handler>:
{
    39dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39de:	0006      	movs	r6, r0
	if(resolve_addr_flag)
    39e0:	4b36      	ldr	r3, [pc, #216]	; (3abc <ble_encryption_request_handler+0xe0>)
    39e2:	781b      	ldrb	r3, [r3, #0]
    39e4:	2b00      	cmp	r3, #0
    39e6:	d104      	bne.n	39f2 <ble_encryption_request_handler+0x16>
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
    39e8:	8800      	ldrh	r0, [r0, #0]
    39ea:	4b35      	ldr	r3, [pc, #212]	; (3ac0 <ble_encryption_request_handler+0xe4>)
    39ec:	2200      	movs	r2, #0
    39ee:	2400      	movs	r4, #0
    39f0:	e00f      	b.n	3a12 <ble_encryption_request_handler+0x36>
		memcpy(temp_param,params,sizeof(at_ble_encryption_request_t));
    39f2:	220c      	movs	r2, #12
    39f4:	0001      	movs	r1, r0
    39f6:	4833      	ldr	r0, [pc, #204]	; (3ac4 <ble_encryption_request_handler+0xe8>)
    39f8:	4b33      	ldr	r3, [pc, #204]	; (3ac8 <ble_encryption_request_handler+0xec>)
    39fa:	4798      	blx	r3
		resolve_addr_flag = false;
    39fc:	2200      	movs	r2, #0
    39fe:	4b2f      	ldr	r3, [pc, #188]	; (3abc <ble_encryption_request_handler+0xe0>)
    3a00:	701a      	strb	r2, [r3, #0]
		return AT_BLE_SUCCESS;		
    3a02:	2000      	movs	r0, #0
    3a04:	e034      	b.n	3a70 <ble_encryption_request_handler+0x94>
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTION; idx++)
    3a06:	3401      	adds	r4, #1
    3a08:	b2e4      	uxtb	r4, r4
    3a0a:	3201      	adds	r2, #1
    3a0c:	337c      	adds	r3, #124	; 0x7c
    3a0e:	2c08      	cmp	r4, #8
    3a10:	d019      	beq.n	3a46 <ble_encryption_request_handler+0x6a>
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
    3a12:	0015      	movs	r5, r2
    3a14:	8919      	ldrh	r1, [r3, #8]
    3a16:	4281      	cmp	r1, r0
    3a18:	d1f5      	bne.n	3a06 <ble_encryption_request_handler+0x2a>
    3a1a:	0019      	movs	r1, r3
    3a1c:	315e      	adds	r1, #94	; 0x5e
    3a1e:	7809      	ldrb	r1, [r1, #0]
    3a20:	2901      	cmp	r1, #1
    3a22:	d9f0      	bls.n	3a06 <ble_encryption_request_handler+0x2a>
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
    3a24:	4a26      	ldr	r2, [pc, #152]	; (3ac0 <ble_encryption_request_handler+0xe4>)
    3a26:	016b      	lsls	r3, r5, #5
    3a28:	1b5d      	subs	r5, r3, r5
    3a2a:	00ad      	lsls	r5, r5, #2
    3a2c:	1955      	adds	r5, r2, r5
    3a2e:	355e      	adds	r5, #94	; 0x5e
    3a30:	2306      	movs	r3, #6
    3a32:	702b      	strb	r3, [r5, #0]
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
    3a34:	0163      	lsls	r3, r4, #5
    3a36:	1b1b      	subs	r3, r3, r4
    3a38:	009b      	lsls	r3, r3, #2
    3a3a:	18d2      	adds	r2, r2, r3
    3a3c:	3270      	adds	r2, #112	; 0x70
    3a3e:	8812      	ldrh	r2, [r2, #0]
    3a40:	8873      	ldrh	r3, [r6, #2]
    3a42:	429a      	cmp	r2, r3
    3a44:	d015      	beq.n	3a72 <ble_encryption_request_handler+0x96>
	    DBG_LOG("Pairing information of peer device is not available.");
    3a46:	4f21      	ldr	r7, [pc, #132]	; (3acc <ble_encryption_request_handler+0xf0>)
    3a48:	0038      	movs	r0, r7
    3a4a:	4e21      	ldr	r6, [pc, #132]	; (3ad0 <ble_encryption_request_handler+0xf4>)
    3a4c:	47b0      	blx	r6
    3a4e:	4821      	ldr	r0, [pc, #132]	; (3ad4 <ble_encryption_request_handler+0xf8>)
    3a50:	4d21      	ldr	r5, [pc, #132]	; (3ad8 <ble_encryption_request_handler+0xfc>)
    3a52:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
    3a54:	0038      	movs	r0, r7
    3a56:	47b0      	blx	r6
    3a58:	4820      	ldr	r0, [pc, #128]	; (3adc <ble_encryption_request_handler+0x100>)
    3a5a:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
    3a5c:	0163      	lsls	r3, r4, #5
    3a5e:	1b1c      	subs	r4, r3, r4
    3a60:	00a4      	lsls	r4, r4, #2
    3a62:	4b17      	ldr	r3, [pc, #92]	; (3ac0 <ble_encryption_request_handler+0xe4>)
    3a64:	191c      	adds	r4, r3, r4
    3a66:	8920      	ldrh	r0, [r4, #8]
    3a68:	2105      	movs	r1, #5
    3a6a:	4b1d      	ldr	r3, [pc, #116]	; (3ae0 <ble_encryption_request_handler+0x104>)
    3a6c:	4798      	blx	r3
		return AT_BLE_FAILURE;
    3a6e:	20e2      	movs	r0, #226	; 0xe2
}
    3a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
    3a72:	0161      	lsls	r1, r4, #5
    3a74:	1b09      	subs	r1, r1, r4
    3a76:	0089      	lsls	r1, r1, #2
    3a78:	3172      	adds	r1, #114	; 0x72
    3a7a:	4b11      	ldr	r3, [pc, #68]	; (3ac0 <ble_encryption_request_handler+0xe4>)
    3a7c:	18c9      	adds	r1, r1, r3
    3a7e:	1d30      	adds	r0, r6, #4
    3a80:	2208      	movs	r2, #8
    3a82:	4b18      	ldr	r3, [pc, #96]	; (3ae4 <ble_encryption_request_handler+0x108>)
    3a84:	4798      	blx	r3
    if(key_found == false)
    3a86:	2800      	cmp	r0, #0
    3a88:	d1dd      	bne.n	3a46 <ble_encryption_request_handler+0x6a>
	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
    3a8a:	0162      	lsls	r2, r4, #5
    3a8c:	1b13      	subs	r3, r2, r4
    3a8e:	009b      	lsls	r3, r3, #2
    3a90:	3360      	adds	r3, #96	; 0x60
    3a92:	490b      	ldr	r1, [pc, #44]	; (3ac0 <ble_encryption_request_handler+0xe4>)
    3a94:	185b      	adds	r3, r3, r1
    3a96:	1b14      	subs	r4, r2, r4
    3a98:	00a4      	lsls	r4, r4, #2
    3a9a:	190c      	adds	r4, r1, r4
    3a9c:	7d21      	ldrb	r1, [r4, #20]
    3a9e:	8830      	ldrh	r0, [r6, #0]
    3aa0:	2201      	movs	r2, #1
    3aa2:	4c11      	ldr	r4, [pc, #68]	; (3ae8 <ble_encryption_request_handler+0x10c>)
    3aa4:	47a0      	blx	r4
    3aa6:	2800      	cmp	r0, #0
    3aa8:	d0e2      	beq.n	3a70 <ble_encryption_request_handler+0x94>
		DBG_LOG("Encryption Request Reply Failed");
    3aaa:	4808      	ldr	r0, [pc, #32]	; (3acc <ble_encryption_request_handler+0xf0>)
    3aac:	4b08      	ldr	r3, [pc, #32]	; (3ad0 <ble_encryption_request_handler+0xf4>)
    3aae:	4798      	blx	r3
    3ab0:	480e      	ldr	r0, [pc, #56]	; (3aec <ble_encryption_request_handler+0x110>)
    3ab2:	4b09      	ldr	r3, [pc, #36]	; (3ad8 <ble_encryption_request_handler+0xfc>)
    3ab4:	4798      	blx	r3
	return AT_BLE_SUCCESS;
    3ab6:	2000      	movs	r0, #0
    3ab8:	e7da      	b.n	3a70 <ble_encryption_request_handler+0x94>
    3aba:	46c0      	nop			; (mov r8, r8)
    3abc:	20001dfc 	.word	0x20001dfc
    3ac0:	20002524 	.word	0x20002524
    3ac4:	20002908 	.word	0x20002908
    3ac8:	0000a2f7 	.word	0x0000a2f7
    3acc:	0000bf48 	.word	0x0000bf48
    3ad0:	0000a435 	.word	0x0000a435
    3ad4:	0000bb6c 	.word	0x0000bb6c
    3ad8:	0000a319 	.word	0x0000a319
    3adc:	0000bba4 	.word	0x0000bba4
    3ae0:	00006b99 	.word	0x00006b99
    3ae4:	0000a2d9 	.word	0x0000a2d9
    3ae8:	00008199 	.word	0x00008199
    3aec:	0000bbfc 	.word	0x0000bbfc

00003af0 <ble_sdk_version>:
{
    3af0:	b510      	push	{r4, lr}
    3af2:	b082      	sub	sp, #8
	if(at_ble_firmware_version_get(&fw_ver) == AT_BLE_SUCCESS)
    3af4:	a801      	add	r0, sp, #4
    3af6:	4b19      	ldr	r3, [pc, #100]	; (3b5c <ble_sdk_version+0x6c>)
    3af8:	4798      	blx	r3
    3afa:	2800      	cmp	r0, #0
    3afc:	d125      	bne.n	3b4a <ble_sdk_version+0x5a>
		if ( (BLE_SDK_MAJOR_NO(fw_ver) == BLE_SDK_MAJOR_NO(BLE_SDK_VERSION)) && \
    3afe:	9b01      	ldr	r3, [sp, #4]
    3b00:	0f1a      	lsrs	r2, r3, #28
    3b02:	2a06      	cmp	r2, #6
    3b04:	d00f      	beq.n	3b26 <ble_sdk_version+0x36>
			DBG_LOG("Error:Library version doesn't match with SDK version. Please use %X.%X version of library", \
    3b06:	4816      	ldr	r0, [pc, #88]	; (3b60 <ble_sdk_version+0x70>)
    3b08:	4b16      	ldr	r3, [pc, #88]	; (3b64 <ble_sdk_version+0x74>)
    3b0a:	4798      	blx	r3
    3b0c:	2201      	movs	r2, #1
    3b0e:	2106      	movs	r1, #6
    3b10:	4815      	ldr	r0, [pc, #84]	; (3b68 <ble_sdk_version+0x78>)
    3b12:	4b16      	ldr	r3, [pc, #88]	; (3b6c <ble_sdk_version+0x7c>)
    3b14:	4798      	blx	r3
			fw_ver = 0;
    3b16:	2300      	movs	r3, #0
    3b18:	9301      	str	r3, [sp, #4]
		if(at_ble_rf_version_get(&rf_ver) == AT_BLE_SUCCESS)
    3b1a:	4668      	mov	r0, sp
    3b1c:	4b14      	ldr	r3, [pc, #80]	; (3b70 <ble_sdk_version+0x80>)
    3b1e:	4798      	blx	r3
}
    3b20:	9801      	ldr	r0, [sp, #4]
    3b22:	b002      	add	sp, #8
    3b24:	bd10      	pop	{r4, pc}
			 (BLE_SDK_MINOR_NO(fw_ver) == BLE_SDK_MINOR_NO(BLE_SDK_VERSION)) )
    3b26:	011b      	lsls	r3, r3, #4
    3b28:	0f1b      	lsrs	r3, r3, #28
		if ( (BLE_SDK_MAJOR_NO(fw_ver) == BLE_SDK_MAJOR_NO(BLE_SDK_VERSION)) && \
    3b2a:	2b01      	cmp	r3, #1
    3b2c:	d1eb      	bne.n	3b06 <ble_sdk_version+0x16>
			DBG_LOG("BluSDK Firmware Version:%X.%X.%X", (uint8_t)BLE_SDK_MAJOR_NO(fw_ver), \
    3b2e:	480c      	ldr	r0, [pc, #48]	; (3b60 <ble_sdk_version+0x70>)
    3b30:	4b0c      	ldr	r3, [pc, #48]	; (3b64 <ble_sdk_version+0x74>)
    3b32:	4798      	blx	r3
    3b34:	9901      	ldr	r1, [sp, #4]
    3b36:	040b      	lsls	r3, r1, #16
    3b38:	0c1b      	lsrs	r3, r3, #16
										((uint8_t)BLE_SDK_MINOR_NO(fw_ver) + BLE_SDK_MINOR_NO_INC), (uint16_t)BLE_SDK_BUILD_NO(fw_ver));
    3b3a:	010a      	lsls	r2, r1, #4
    3b3c:	0f12      	lsrs	r2, r2, #28
			DBG_LOG("BluSDK Firmware Version:%X.%X.%X", (uint8_t)BLE_SDK_MAJOR_NO(fw_ver), \
    3b3e:	3201      	adds	r2, #1
    3b40:	0f09      	lsrs	r1, r1, #28
    3b42:	480c      	ldr	r0, [pc, #48]	; (3b74 <ble_sdk_version+0x84>)
    3b44:	4c09      	ldr	r4, [pc, #36]	; (3b6c <ble_sdk_version+0x7c>)
    3b46:	47a0      	blx	r4
    3b48:	e7e7      	b.n	3b1a <ble_sdk_version+0x2a>
		DBG_LOG("Error: Failed to get BluSDK Firmware Version");
    3b4a:	4805      	ldr	r0, [pc, #20]	; (3b60 <ble_sdk_version+0x70>)
    3b4c:	4b05      	ldr	r3, [pc, #20]	; (3b64 <ble_sdk_version+0x74>)
    3b4e:	4798      	blx	r3
    3b50:	4809      	ldr	r0, [pc, #36]	; (3b78 <ble_sdk_version+0x88>)
    3b52:	4b06      	ldr	r3, [pc, #24]	; (3b6c <ble_sdk_version+0x7c>)
    3b54:	4798      	blx	r3
		fw_ver = 0;
    3b56:	2300      	movs	r3, #0
    3b58:	9301      	str	r3, [sp, #4]
    3b5a:	e7e1      	b.n	3b20 <ble_sdk_version+0x30>
    3b5c:	00006c05 	.word	0x00006c05
    3b60:	0000bf48 	.word	0x0000bf48
    3b64:	0000a435 	.word	0x0000a435
    3b68:	0000bf84 	.word	0x0000bf84
    3b6c:	0000a319 	.word	0x0000a319
    3b70:	00006c21 	.word	0x00006c21
    3b74:	0000bf60 	.word	0x0000bf60
    3b78:	0000bfe0 	.word	0x0000bfe0

00003b7c <ble_mgr_events_callback_handler>:
{
    3b7c:	b510      	push	{r4, lr}
	if (ble_event_handler != NULL)
    3b7e:	2a00      	cmp	r2, #0
    3b80:	d100      	bne.n	3b84 <ble_mgr_events_callback_handler+0x8>
    3b82:	e0d3      	b.n	3d2c <ble_mgr_events_callback_handler+0x1b0>
		switch(event_type)
    3b84:	2906      	cmp	r1, #6
    3b86:	d900      	bls.n	3b8a <ble_mgr_events_callback_handler+0xe>
    3b88:	e0d2      	b.n	3d30 <ble_mgr_events_callback_handler+0x1b4>
    3b8a:	0089      	lsls	r1, r1, #2
    3b8c:	4b70      	ldr	r3, [pc, #448]	; (3d50 <ble_mgr_events_callback_handler+0x1d4>)
    3b8e:	585b      	ldr	r3, [r3, r1]
    3b90:	469f      	mov	pc, r3
    3b92:	2300      	movs	r3, #0
					if (ble_mgr_gap_event_cb[idx] == ble_gap_event_cb)
    3b94:	4c6f      	ldr	r4, [pc, #444]	; (3d54 <ble_mgr_events_callback_handler+0x1d8>)
    3b96:	e007      	b.n	3ba8 <ble_mgr_events_callback_handler+0x2c>
						if (event_cb_type == REGISTER_CALL_BACK)
    3b98:	2800      	cmp	r0, #0
    3b9a:	d100      	bne.n	3b9e <ble_mgr_events_callback_handler+0x22>
    3b9c:	e0ca      	b.n	3d34 <ble_mgr_events_callback_handler+0x1b8>
						else if (event_cb_type == UNREGISTER_CALL_BACK)
    3b9e:	2801      	cmp	r0, #1
    3ba0:	d00f      	beq.n	3bc2 <ble_mgr_events_callback_handler+0x46>
				for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
    3ba2:	3301      	adds	r3, #1
    3ba4:	2b05      	cmp	r3, #5
    3ba6:	d012      	beq.n	3bce <ble_mgr_events_callback_handler+0x52>
					if (ble_mgr_gap_event_cb[idx] == ble_gap_event_cb)
    3ba8:	0099      	lsls	r1, r3, #2
    3baa:	5909      	ldr	r1, [r1, r4]
    3bac:	428a      	cmp	r2, r1
    3bae:	d0f3      	beq.n	3b98 <ble_mgr_events_callback_handler+0x1c>
					else if((ble_mgr_gap_event_cb[idx] == NULL) && (event_cb_type == REGISTER_CALL_BACK))
    3bb0:	2900      	cmp	r1, #0
    3bb2:	d1f6      	bne.n	3ba2 <ble_mgr_events_callback_handler+0x26>
    3bb4:	2800      	cmp	r0, #0
    3bb6:	d1f4      	bne.n	3ba2 <ble_mgr_events_callback_handler+0x26>
						ble_mgr_gap_event_cb[idx] = ble_gap_event_cb;
    3bb8:	009b      	lsls	r3, r3, #2
    3bba:	4966      	ldr	r1, [pc, #408]	; (3d54 <ble_mgr_events_callback_handler+0x1d8>)
    3bbc:	505a      	str	r2, [r3, r1]
						status = true;
    3bbe:	2101      	movs	r1, #1
						break;
    3bc0:	e04e      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
							ble_mgr_gap_event_cb[idx] = NULL;
    3bc2:	009b      	lsls	r3, r3, #2
    3bc4:	2100      	movs	r1, #0
    3bc6:	4a63      	ldr	r2, [pc, #396]	; (3d54 <ble_mgr_events_callback_handler+0x1d8>)
    3bc8:	5099      	str	r1, [r3, r2]
							status = true;
    3bca:	3101      	adds	r1, #1
							break;
    3bcc:	e048      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
	bool status = false;
    3bce:	2100      	movs	r1, #0
    3bd0:	e046      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
		switch(event_type)
    3bd2:	2300      	movs	r3, #0
					if (ble_mgr_gatt_client_event_cb[idx] == ble_gatt_client_event_cb)
    3bd4:	4c60      	ldr	r4, [pc, #384]	; (3d58 <ble_mgr_events_callback_handler+0x1dc>)
    3bd6:	e007      	b.n	3be8 <ble_mgr_events_callback_handler+0x6c>
						if (event_cb_type == REGISTER_CALL_BACK)
    3bd8:	2800      	cmp	r0, #0
    3bda:	d100      	bne.n	3bde <ble_mgr_events_callback_handler+0x62>
    3bdc:	e0ac      	b.n	3d38 <ble_mgr_events_callback_handler+0x1bc>
						else if (event_cb_type == UNREGISTER_CALL_BACK)
    3bde:	2801      	cmp	r0, #1
    3be0:	d00f      	beq.n	3c02 <ble_mgr_events_callback_handler+0x86>
				for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
    3be2:	3301      	adds	r3, #1
    3be4:	2b05      	cmp	r3, #5
    3be6:	d012      	beq.n	3c0e <ble_mgr_events_callback_handler+0x92>
					if (ble_mgr_gatt_client_event_cb[idx] == ble_gatt_client_event_cb)
    3be8:	0099      	lsls	r1, r3, #2
    3bea:	5909      	ldr	r1, [r1, r4]
    3bec:	428a      	cmp	r2, r1
    3bee:	d0f3      	beq.n	3bd8 <ble_mgr_events_callback_handler+0x5c>
					else if((ble_mgr_gatt_client_event_cb[idx] == NULL) && (event_cb_type == REGISTER_CALL_BACK))
    3bf0:	2900      	cmp	r1, #0
    3bf2:	d1f6      	bne.n	3be2 <ble_mgr_events_callback_handler+0x66>
    3bf4:	2800      	cmp	r0, #0
    3bf6:	d1f4      	bne.n	3be2 <ble_mgr_events_callback_handler+0x66>
						ble_mgr_gatt_client_event_cb[idx] = ble_gatt_client_event_cb;
    3bf8:	009b      	lsls	r3, r3, #2
    3bfa:	4957      	ldr	r1, [pc, #348]	; (3d58 <ble_mgr_events_callback_handler+0x1dc>)
    3bfc:	505a      	str	r2, [r3, r1]
						status = true;
    3bfe:	2101      	movs	r1, #1
						break;
    3c00:	e02e      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
							ble_mgr_gatt_client_event_cb[idx] = NULL;
    3c02:	009b      	lsls	r3, r3, #2
    3c04:	2100      	movs	r1, #0
    3c06:	4a54      	ldr	r2, [pc, #336]	; (3d58 <ble_mgr_events_callback_handler+0x1dc>)
    3c08:	5099      	str	r1, [r3, r2]
							status = true;
    3c0a:	3101      	adds	r1, #1
							break;
    3c0c:	e028      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
	bool status = false;
    3c0e:	2100      	movs	r1, #0
    3c10:	e026      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
		switch(event_type)
    3c12:	2300      	movs	r3, #0
					if (ble_mgr_gatt_server_event_cb[idx] == ble_gatt_server_event_cb)
    3c14:	4c51      	ldr	r4, [pc, #324]	; (3d5c <ble_mgr_events_callback_handler+0x1e0>)
    3c16:	e007      	b.n	3c28 <ble_mgr_events_callback_handler+0xac>
						if (event_cb_type == REGISTER_CALL_BACK)
    3c18:	2800      	cmp	r0, #0
    3c1a:	d100      	bne.n	3c1e <ble_mgr_events_callback_handler+0xa2>
    3c1c:	e08e      	b.n	3d3c <ble_mgr_events_callback_handler+0x1c0>
						else if (event_cb_type == UNREGISTER_CALL_BACK)
    3c1e:	2801      	cmp	r0, #1
    3c20:	d00f      	beq.n	3c42 <ble_mgr_events_callback_handler+0xc6>
				for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
    3c22:	3301      	adds	r3, #1
    3c24:	2b05      	cmp	r3, #5
    3c26:	d012      	beq.n	3c4e <ble_mgr_events_callback_handler+0xd2>
					if (ble_mgr_gatt_server_event_cb[idx] == ble_gatt_server_event_cb)
    3c28:	0099      	lsls	r1, r3, #2
    3c2a:	5909      	ldr	r1, [r1, r4]
    3c2c:	428a      	cmp	r2, r1
    3c2e:	d0f3      	beq.n	3c18 <ble_mgr_events_callback_handler+0x9c>
					else if((ble_mgr_gatt_server_event_cb[idx] == NULL) && (event_cb_type == REGISTER_CALL_BACK))
    3c30:	2900      	cmp	r1, #0
    3c32:	d1f6      	bne.n	3c22 <ble_mgr_events_callback_handler+0xa6>
    3c34:	2800      	cmp	r0, #0
    3c36:	d1f4      	bne.n	3c22 <ble_mgr_events_callback_handler+0xa6>
						ble_mgr_gatt_server_event_cb[idx] = ble_gatt_server_event_cb;
    3c38:	009b      	lsls	r3, r3, #2
    3c3a:	4948      	ldr	r1, [pc, #288]	; (3d5c <ble_mgr_events_callback_handler+0x1e0>)
    3c3c:	505a      	str	r2, [r3, r1]
						status = true;
    3c3e:	2101      	movs	r1, #1
						break;
    3c40:	e00e      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
							ble_mgr_gatt_server_event_cb[idx] = NULL;
    3c42:	009b      	lsls	r3, r3, #2
    3c44:	2100      	movs	r1, #0
    3c46:	4a45      	ldr	r2, [pc, #276]	; (3d5c <ble_mgr_events_callback_handler+0x1e0>)
    3c48:	5099      	str	r1, [r3, r2]
							status = true;
    3c4a:	3101      	adds	r1, #1
							break;
    3c4c:	e008      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
	bool status = false;
    3c4e:	2100      	movs	r1, #0
    3c50:	e006      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
					if (ble_mgr_l2cap_event_cb[idx] == ble_l2cap_event_cb)
    3c52:	4b43      	ldr	r3, [pc, #268]	; (3d60 <ble_mgr_events_callback_handler+0x1e4>)
    3c54:	681b      	ldr	r3, [r3, #0]
    3c56:	429a      	cmp	r2, r3
    3c58:	d004      	beq.n	3c64 <ble_mgr_events_callback_handler+0xe8>
	bool status = false;
    3c5a:	2100      	movs	r1, #0
					else if((ble_mgr_l2cap_event_cb[idx] == NULL) && (event_cb_type == REGISTER_CALL_BACK))
    3c5c:	2b00      	cmp	r3, #0
    3c5e:	d00b      	beq.n	3c78 <ble_mgr_events_callback_handler+0xfc>
}
    3c60:	0008      	movs	r0, r1
    3c62:	bd10      	pop	{r4, pc}
						if (event_cb_type == REGISTER_CALL_BACK)
    3c64:	2800      	cmp	r0, #0
    3c66:	d06b      	beq.n	3d40 <ble_mgr_events_callback_handler+0x1c4>
	bool status = false;
    3c68:	2100      	movs	r1, #0
						else if (event_cb_type == UNREGISTER_CALL_BACK)
    3c6a:	2801      	cmp	r0, #1
    3c6c:	d1f8      	bne.n	3c60 <ble_mgr_events_callback_handler+0xe4>
							ble_mgr_l2cap_event_cb[idx] = NULL;
    3c6e:	2200      	movs	r2, #0
    3c70:	4b3b      	ldr	r3, [pc, #236]	; (3d60 <ble_mgr_events_callback_handler+0x1e4>)
    3c72:	601a      	str	r2, [r3, #0]
							status = true;
    3c74:	3101      	adds	r1, #1
							break;
    3c76:	e7f3      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
					else if((ble_mgr_l2cap_event_cb[idx] == NULL) && (event_cb_type == REGISTER_CALL_BACK))
    3c78:	2800      	cmp	r0, #0
    3c7a:	d1f1      	bne.n	3c60 <ble_mgr_events_callback_handler+0xe4>
						ble_mgr_l2cap_event_cb[idx] = ble_l2cap_event_cb;
    3c7c:	4b38      	ldr	r3, [pc, #224]	; (3d60 <ble_mgr_events_callback_handler+0x1e4>)
    3c7e:	601a      	str	r2, [r3, #0]
						status = true;
    3c80:	3101      	adds	r1, #1
						break;
    3c82:	e7ed      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
					if (ble_mgr_htpt_event_cb[idx] == ble_htpt_event_cb)
    3c84:	4b37      	ldr	r3, [pc, #220]	; (3d64 <ble_mgr_events_callback_handler+0x1e8>)
    3c86:	681b      	ldr	r3, [r3, #0]
    3c88:	429a      	cmp	r2, r3
    3c8a:	d008      	beq.n	3c9e <ble_mgr_events_callback_handler+0x122>
	bool status = false;
    3c8c:	2100      	movs	r1, #0
					else if((ble_mgr_htpt_event_cb[idx] == NULL) && (event_cb_type == REGISTER_CALL_BACK))
    3c8e:	2b00      	cmp	r3, #0
    3c90:	d1e6      	bne.n	3c60 <ble_mgr_events_callback_handler+0xe4>
    3c92:	2800      	cmp	r0, #0
    3c94:	d1e4      	bne.n	3c60 <ble_mgr_events_callback_handler+0xe4>
						ble_mgr_htpt_event_cb[idx] = ble_htpt_event_cb;
    3c96:	4b33      	ldr	r3, [pc, #204]	; (3d64 <ble_mgr_events_callback_handler+0x1e8>)
    3c98:	601a      	str	r2, [r3, #0]
						status = true; 
    3c9a:	3101      	adds	r1, #1
						break;
    3c9c:	e7e0      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
						if (event_cb_type == REGISTER_CALL_BACK)
    3c9e:	2800      	cmp	r0, #0
    3ca0:	d050      	beq.n	3d44 <ble_mgr_events_callback_handler+0x1c8>
	bool status = false;
    3ca2:	2100      	movs	r1, #0
						else if (event_cb_type == UNREGISTER_CALL_BACK)
    3ca4:	2801      	cmp	r0, #1
    3ca6:	d1db      	bne.n	3c60 <ble_mgr_events_callback_handler+0xe4>
							ble_mgr_htpt_event_cb[idx] = NULL;
    3ca8:	2200      	movs	r2, #0
    3caa:	4b2e      	ldr	r3, [pc, #184]	; (3d64 <ble_mgr_events_callback_handler+0x1e8>)
    3cac:	601a      	str	r2, [r3, #0]
							status = true;
    3cae:	3101      	adds	r1, #1
							break;
    3cb0:	e7d6      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
		switch(event_type)
    3cb2:	2300      	movs	r3, #0
					if (ble_mgr_dtm_event_cb[idx] == ble_dtm_event_cb)
    3cb4:	4c2c      	ldr	r4, [pc, #176]	; (3d68 <ble_mgr_events_callback_handler+0x1ec>)
    3cb6:	e006      	b.n	3cc6 <ble_mgr_events_callback_handler+0x14a>
						if (event_cb_type == REGISTER_CALL_BACK)
    3cb8:	2800      	cmp	r0, #0
    3cba:	d045      	beq.n	3d48 <ble_mgr_events_callback_handler+0x1cc>
						else if (event_cb_type == UNREGISTER_CALL_BACK)
    3cbc:	2801      	cmp	r0, #1
    3cbe:	d00f      	beq.n	3ce0 <ble_mgr_events_callback_handler+0x164>
				for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
    3cc0:	3301      	adds	r3, #1
    3cc2:	2b05      	cmp	r3, #5
    3cc4:	d012      	beq.n	3cec <ble_mgr_events_callback_handler+0x170>
					if (ble_mgr_dtm_event_cb[idx] == ble_dtm_event_cb)
    3cc6:	0099      	lsls	r1, r3, #2
    3cc8:	5909      	ldr	r1, [r1, r4]
    3cca:	428a      	cmp	r2, r1
    3ccc:	d0f4      	beq.n	3cb8 <ble_mgr_events_callback_handler+0x13c>
					else if((ble_mgr_dtm_event_cb[idx] == NULL) && (event_cb_type == REGISTER_CALL_BACK))
    3cce:	2900      	cmp	r1, #0
    3cd0:	d1f6      	bne.n	3cc0 <ble_mgr_events_callback_handler+0x144>
    3cd2:	2800      	cmp	r0, #0
    3cd4:	d1f4      	bne.n	3cc0 <ble_mgr_events_callback_handler+0x144>
						ble_mgr_dtm_event_cb[idx] = ble_dtm_event_cb;
    3cd6:	009b      	lsls	r3, r3, #2
    3cd8:	4923      	ldr	r1, [pc, #140]	; (3d68 <ble_mgr_events_callback_handler+0x1ec>)
    3cda:	505a      	str	r2, [r3, r1]
						status = true;
    3cdc:	2101      	movs	r1, #1
						break;
    3cde:	e7bf      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
							ble_mgr_dtm_event_cb[idx] = NULL;
    3ce0:	009b      	lsls	r3, r3, #2
    3ce2:	2100      	movs	r1, #0
    3ce4:	4a20      	ldr	r2, [pc, #128]	; (3d68 <ble_mgr_events_callback_handler+0x1ec>)
    3ce6:	5099      	str	r1, [r3, r2]
							status = true;
    3ce8:	3101      	adds	r1, #1
							break;
    3cea:	e7b9      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
	bool status = false;
    3cec:	2100      	movs	r1, #0
    3cee:	e7b7      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
		switch(event_type)
    3cf0:	2300      	movs	r3, #0
					if (ble_mgr_custom_event_cb[idx] == ble_custom_event_cb)
    3cf2:	4c1e      	ldr	r4, [pc, #120]	; (3d6c <ble_mgr_events_callback_handler+0x1f0>)
    3cf4:	0099      	lsls	r1, r3, #2
    3cf6:	5909      	ldr	r1, [r1, r4]
    3cf8:	428a      	cmp	r2, r1
    3cfa:	d006      	beq.n	3d0a <ble_mgr_events_callback_handler+0x18e>
					else if((ble_mgr_custom_event_cb[idx] == NULL) && (event_cb_type == REGISTER_CALL_BACK))
    3cfc:	2900      	cmp	r1, #0
    3cfe:	d00e      	beq.n	3d1e <ble_mgr_events_callback_handler+0x1a2>
				for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
    3d00:	3301      	adds	r3, #1
    3d02:	2b02      	cmp	r3, #2
    3d04:	d1f6      	bne.n	3cf4 <ble_mgr_events_callback_handler+0x178>
	bool status = false;
    3d06:	2100      	movs	r1, #0
    3d08:	e7aa      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
						if (event_cb_type == REGISTER_CALL_BACK)
    3d0a:	2800      	cmp	r0, #0
    3d0c:	d01e      	beq.n	3d4c <ble_mgr_events_callback_handler+0x1d0>
						else if (event_cb_type == UNREGISTER_CALL_BACK)
    3d0e:	2801      	cmp	r0, #1
    3d10:	d1f6      	bne.n	3d00 <ble_mgr_events_callback_handler+0x184>
							ble_mgr_custom_event_cb[idx] = NULL;
    3d12:	009b      	lsls	r3, r3, #2
    3d14:	2100      	movs	r1, #0
    3d16:	4a15      	ldr	r2, [pc, #84]	; (3d6c <ble_mgr_events_callback_handler+0x1f0>)
    3d18:	5099      	str	r1, [r3, r2]
							status = true;
    3d1a:	3101      	adds	r1, #1
							break;
    3d1c:	e7a0      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
					else if((ble_mgr_custom_event_cb[idx] == NULL) && (event_cb_type == REGISTER_CALL_BACK))
    3d1e:	2800      	cmp	r0, #0
    3d20:	d1ee      	bne.n	3d00 <ble_mgr_events_callback_handler+0x184>
						ble_mgr_custom_event_cb[idx] = ble_custom_event_cb;
    3d22:	009b      	lsls	r3, r3, #2
    3d24:	4911      	ldr	r1, [pc, #68]	; (3d6c <ble_mgr_events_callback_handler+0x1f0>)
    3d26:	505a      	str	r2, [r3, r1]
						status = true;
    3d28:	2101      	movs	r1, #1
						break;
    3d2a:	e799      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
	bool status = false;
    3d2c:	2100      	movs	r1, #0
    3d2e:	e797      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
    3d30:	2100      	movs	r1, #0
    3d32:	e795      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
							status = true;
    3d34:	2101      	movs	r1, #1
    3d36:	e793      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
							status = true;
    3d38:	2101      	movs	r1, #1
    3d3a:	e791      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
							status = true;
    3d3c:	2101      	movs	r1, #1
    3d3e:	e78f      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
							status = true;
    3d40:	2101      	movs	r1, #1
    3d42:	e78d      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
							status = true;
    3d44:	2101      	movs	r1, #1
    3d46:	e78b      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
							status = true;
    3d48:	2101      	movs	r1, #1
    3d4a:	e789      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
							status = true;
    3d4c:	2101      	movs	r1, #1
    3d4e:	e787      	b.n	3c60 <ble_mgr_events_callback_handler+0xe4>
    3d50:	0000b71c 	.word	0x0000b71c
    3d54:	200009b0 	.word	0x200009b0
    3d58:	200009c4 	.word	0x200009c4
    3d5c:	200009d8 	.word	0x200009d8
    3d60:	200009f0 	.word	0x200009f0
    3d64:	200009ec 	.word	0x200009ec
    3d68:	2000099c 	.word	0x2000099c
    3d6c:	20000994 	.word	0x20000994

00003d70 <ble_device_init>:
{
    3d70:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d72:	46de      	mov	lr, fp
    3d74:	4657      	mov	r7, sl
    3d76:	464e      	mov	r6, r9
    3d78:	4645      	mov	r5, r8
    3d7a:	b5e0      	push	{r5, r6, r7, lr}
    3d7c:	b091      	sub	sp, #68	; 0x44
    3d7e:	0005      	movs	r5, r0
    3d80:	4c7d      	ldr	r4, [pc, #500]	; (3f78 <ble_device_init+0x208>)
    3d82:	23f8      	movs	r3, #248	; 0xf8
    3d84:	009b      	lsls	r3, r3, #2
    3d86:	4699      	mov	r9, r3
    3d88:	44a1      	add	r9, r4
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
    3d8a:	4b7c      	ldr	r3, [pc, #496]	; (3f7c <ble_device_init+0x20c>)
    3d8c:	4698      	mov	r8, r3
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    3d8e:	2740      	movs	r7, #64	; 0x40
		ble_dev_info[idx].conn_info.handle = BLE_INVALID_CONNECTION_HANDLE;
    3d90:	26ff      	movs	r6, #255	; 0xff
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
    3d92:	227c      	movs	r2, #124	; 0x7c
    3d94:	2100      	movs	r1, #0
    3d96:	0020      	movs	r0, r4
    3d98:	47c0      	blx	r8
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
    3d9a:	0022      	movs	r2, r4
    3d9c:	325e      	adds	r2, #94	; 0x5e
    3d9e:	2300      	movs	r3, #0
    3da0:	7013      	strb	r3, [r2, #0]
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    3da2:	7627      	strb	r7, [r4, #24]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_NONE;
    3da4:	74a3      	strb	r3, [r4, #18]
		ble_dev_info[idx].conn_info.handle = BLE_INVALID_CONNECTION_HANDLE;
    3da6:	8126      	strh	r6, [r4, #8]
    3da8:	347c      	adds	r4, #124	; 0x7c
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTION; idx++)
    3daa:	454c      	cmp	r4, r9
    3dac:	d1f1      	bne.n	3d92 <ble_device_init+0x22>
	ble_device_count = 0;
    3dae:	469a      	mov	sl, r3
    3db0:	4b73      	ldr	r3, [pc, #460]	; (3f80 <ble_device_init+0x210>)
    3db2:	4652      	mov	r2, sl
    3db4:	701a      	strb	r2, [r3, #0]
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
    3db6:	4c73      	ldr	r4, [pc, #460]	; (3f84 <ble_device_init+0x214>)
    3db8:	2380      	movs	r3, #128	; 0x80
    3dba:	011b      	lsls	r3, r3, #4
    3dbc:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)&att_db_data;
    3dbe:	4b72      	ldr	r3, [pc, #456]	; (3f88 <ble_device_init+0x218>)
    3dc0:	6023      	str	r3, [r4, #0]
    pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
    3dc2:	4b72      	ldr	r3, [pc, #456]	; (3f8c <ble_device_init+0x21c>)
    3dc4:	60a3      	str	r3, [r4, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
    3dc6:	2380      	movs	r3, #128	; 0x80
    3dc8:	00db      	lsls	r3, r3, #3
    3dca:	60e3      	str	r3, [r4, #12]
    pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
    3dcc:	4a70      	ldr	r2, [pc, #448]	; (3f90 <ble_device_init+0x220>)
    3dce:	6122      	str	r2, [r4, #16]
    pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
    3dd0:	2280      	movs	r2, #128	; 0x80
    3dd2:	0152      	lsls	r2, r2, #5
    3dd4:	6162      	str	r2, [r4, #20]
	pf_cfg.rx_fifo_mem_pool.memStartAdd      = (uint8_t *)rx_fifo_memory;
    3dd6:	4a6f      	ldr	r2, [pc, #444]	; (3f94 <ble_device_init+0x224>)
    3dd8:	61a2      	str	r2, [r4, #24]
	pf_cfg.rx_fifo_mem_pool.memSize          = sizeof(rx_fifo_memory);
    3dda:	61e3      	str	r3, [r4, #28]
	pf_cfg.btlc1000_module_version			 = AT_BTLC1000_ZR;
    3ddc:	2301      	movs	r3, #1
    3dde:	469b      	mov	fp, r3
    3de0:	3357      	adds	r3, #87	; 0x57
    3de2:	465a      	mov	r2, fp
    3de4:	54e2      	strb	r2, [r4, r3]
	DBG_LOG("BTLC1000 XPro Module: BTLC1000-ZR");
    3de6:	486c      	ldr	r0, [pc, #432]	; (3f98 <ble_device_init+0x228>)
    3de8:	4f6c      	ldr	r7, [pc, #432]	; (3f9c <ble_device_init+0x22c>)
    3dea:	47b8      	blx	r7
    3dec:	486c      	ldr	r0, [pc, #432]	; (3fa0 <ble_device_init+0x230>)
    3dee:	4e6d      	ldr	r6, [pc, #436]	; (3fa4 <ble_device_init+0x234>)
    3df0:	47b0      	blx	r6
		DBG_LOG("BTLC1000 Host Interface UART Mode:4-Wire, Baudrate:%d", (unsigned int)HOST_UART_BAUDRATE_CONFIG_VALUE);
    3df2:	4869      	ldr	r0, [pc, #420]	; (3f98 <ble_device_init+0x228>)
    3df4:	47b8      	blx	r7
    3df6:	23e1      	movs	r3, #225	; 0xe1
    3df8:	031b      	lsls	r3, r3, #12
    3dfa:	4699      	mov	r9, r3
    3dfc:	0019      	movs	r1, r3
    3dfe:	486a      	ldr	r0, [pc, #424]	; (3fa8 <ble_device_init+0x238>)
    3e00:	47b0      	blx	r6
	pf_cfg.bus_info.bus_type = AT_BLE_UART;
    3e02:	235c      	movs	r3, #92	; 0x5c
    3e04:	465a      	mov	r2, fp
    3e06:	54e2      	strb	r2, [r4, r3]
	pf_cfg.bus_info.host_external_wakeup_gpio = BTLC1000_EXT_PIN9;
    3e08:	222f      	movs	r2, #47	; 0x2f
    3e0a:	3302      	adds	r3, #2
    3e0c:	54e2      	strb	r2, [r4, r3]
   pf_cfg.bus_info.btlc1000_uart_pinout_switch = false;
    3e0e:	3b01      	subs	r3, #1
    3e10:	4652      	mov	r2, sl
    3e12:	54e2      	strb	r2, [r4, r3]
	pf_cfg.bus_info.bus_baudrate = HOST_UART_BAUDRATE_CONFIG_VALUE;
    3e14:	464b      	mov	r3, r9
    3e16:	6623      	str	r3, [r4, #96]	; 0x60
	pf_cfg.platform_api_list.at_ble_reconfigure_usart = pf_cfg.bus_info.btlc1000_uart_pinout_switch ? platform_configure_hw_fc_uart : platform_configure_primary_uart;
    3e18:	4b64      	ldr	r3, [pc, #400]	; (3fac <ble_device_init+0x23c>)
    3e1a:	6423      	str	r3, [r4, #64]	; 0x40
	platform_init(pf_cfg.bus_info.bus_type, pf_cfg.bus_info.btlc1000_uart_pinout_switch);
    3e1c:	2100      	movs	r1, #0
    3e1e:	2001      	movs	r0, #1
    3e20:	4b63      	ldr	r3, [pc, #396]	; (3fb0 <ble_device_init+0x240>)
    3e22:	4798      	blx	r3
	trace_set_level(TRACE_LVL_DISABLE);
    3e24:	2000      	movs	r0, #0
    3e26:	4b63      	ldr	r3, [pc, #396]	; (3fb4 <ble_device_init+0x244>)
    3e28:	4798      	blx	r3
	DBG_LOG("Initializing BTLC1000");
    3e2a:	485b      	ldr	r0, [pc, #364]	; (3f98 <ble_device_init+0x228>)
    3e2c:	47b8      	blx	r7
    3e2e:	4862      	ldr	r0, [pc, #392]	; (3fb8 <ble_device_init+0x248>)
    3e30:	47b0      	blx	r6
	if(at_ble_init(args) != AT_BLE_SUCCESS)
    3e32:	0020      	movs	r0, r4
    3e34:	4b61      	ldr	r3, [pc, #388]	; (3fbc <ble_device_init+0x24c>)
    3e36:	4798      	blx	r3
    3e38:	2800      	cmp	r0, #0
    3e3a:	d00b      	beq.n	3e54 <ble_device_init+0xe4>
		DBG_LOG("BTLC1000 Initialization failed");
    3e3c:	4e56      	ldr	r6, [pc, #344]	; (3f98 <ble_device_init+0x228>)
    3e3e:	0030      	movs	r0, r6
    3e40:	4d56      	ldr	r5, [pc, #344]	; (3f9c <ble_device_init+0x22c>)
    3e42:	47a8      	blx	r5
    3e44:	485e      	ldr	r0, [pc, #376]	; (3fc0 <ble_device_init+0x250>)
    3e46:	4c57      	ldr	r4, [pc, #348]	; (3fa4 <ble_device_init+0x234>)
    3e48:	47a0      	blx	r4
		DBG_LOG("Please check the configuration and connection / hardware connector");	
    3e4a:	0030      	movs	r0, r6
    3e4c:	47a8      	blx	r5
    3e4e:	485d      	ldr	r0, [pc, #372]	; (3fc4 <ble_device_init+0x254>)
    3e50:	47a0      	blx	r4
    3e52:	e7fe      	b.n	3e52 <ble_device_init+0xe2>
		uint32_t chip_id = 0xFFFFFFFF;
    3e54:	2301      	movs	r3, #1
    3e56:	425b      	negs	r3, r3
    3e58:	9306      	str	r3, [sp, #24]
		if (at_ble_chip_id_get(&chip_id) == AT_BLE_SUCCESS)
    3e5a:	a806      	add	r0, sp, #24
    3e5c:	4b5a      	ldr	r3, [pc, #360]	; (3fc8 <ble_device_init+0x258>)
    3e5e:	4798      	blx	r3
    3e60:	2800      	cmp	r0, #0
    3e62:	d000      	beq.n	3e66 <ble_device_init+0xf6>
    3e64:	e080      	b.n	3f68 <ble_device_init+0x1f8>
			DBG_LOG("BTLC1000 Chip ID: 0x%6X", (unsigned int)chip_id);
    3e66:	484c      	ldr	r0, [pc, #304]	; (3f98 <ble_device_init+0x228>)
    3e68:	4b4c      	ldr	r3, [pc, #304]	; (3f9c <ble_device_init+0x22c>)
    3e6a:	4798      	blx	r3
    3e6c:	9906      	ldr	r1, [sp, #24]
    3e6e:	4857      	ldr	r0, [pc, #348]	; (3fcc <ble_device_init+0x25c>)
    3e70:	4b4c      	ldr	r3, [pc, #304]	; (3fa4 <ble_device_init+0x234>)
    3e72:	4798      	blx	r3
	platform_host_set_sleep(HOST_SLEEP_ENABLE);
    3e74:	2001      	movs	r0, #1
    3e76:	4b56      	ldr	r3, [pc, #344]	; (3fd0 <ble_device_init+0x260>)
    3e78:	4798      	blx	r3
		ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
    3e7a:	4a56      	ldr	r2, [pc, #344]	; (3fd4 <ble_device_init+0x264>)
    3e7c:	2100      	movs	r1, #0
    3e7e:	2000      	movs	r0, #0
    3e80:	4c55      	ldr	r4, [pc, #340]	; (3fd8 <ble_device_init+0x268>)
    3e82:	47a0      	blx	r4
		ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
    3e84:	4a55      	ldr	r2, [pc, #340]	; (3fdc <ble_device_init+0x26c>)
    3e86:	2102      	movs	r1, #2
    3e88:	2000      	movs	r0, #0
    3e8a:	47a0      	blx	r4
		ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
    3e8c:	4a54      	ldr	r2, [pc, #336]	; (3fe0 <ble_device_init+0x270>)
    3e8e:	2106      	movs	r1, #6
    3e90:	2000      	movs	r0, #0
    3e92:	47a0      	blx	r4
	return at_ble_device_name_set(name, name_len);
    3e94:	2109      	movs	r1, #9
    3e96:	4853      	ldr	r0, [pc, #332]	; (3fe4 <ble_device_init+0x274>)
    3e98:	4b53      	ldr	r3, [pc, #332]	; (3fe8 <ble_device_init+0x278>)
    3e9a:	4798      	blx	r3
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
    3e9c:	2800      	cmp	r0, #0
    3e9e:	d005      	beq.n	3eac <ble_device_init+0x13c>
		DBG_LOG("Device name set failed");
    3ea0:	483d      	ldr	r0, [pc, #244]	; (3f98 <ble_device_init+0x228>)
    3ea2:	4b3e      	ldr	r3, [pc, #248]	; (3f9c <ble_device_init+0x22c>)
    3ea4:	4798      	blx	r3
    3ea6:	4851      	ldr	r0, [pc, #324]	; (3fec <ble_device_init+0x27c>)
    3ea8:	4b3e      	ldr	r3, [pc, #248]	; (3fa4 <ble_device_init+0x234>)
    3eaa:	4798      	blx	r3
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
    3eac:	ab04      	add	r3, sp, #16
    3eae:	4950      	ldr	r1, [pc, #320]	; (3ff0 <ble_device_init+0x280>)
    3eb0:	000a      	movs	r2, r1
    3eb2:	6889      	ldr	r1, [r1, #8]
    3eb4:	9104      	str	r1, [sp, #16]
    3eb6:	8991      	ldrh	r1, [r2, #12]
    3eb8:	3208      	adds	r2, #8
    3eba:	8099      	strh	r1, [r3, #4]
    3ebc:	7992      	ldrb	r2, [r2, #6]
    3ebe:	719a      	strb	r2, [r3, #6]
	if (addr == NULL)
    3ec0:	2d00      	cmp	r5, #0
    3ec2:	d10c      	bne.n	3ede <ble_device_init+0x16e>
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
    3ec4:	0018      	movs	r0, r3
    3ec6:	4b4b      	ldr	r3, [pc, #300]	; (3ff4 <ble_device_init+0x284>)
    3ec8:	4798      	blx	r3
		addr = &address;
    3eca:	ad04      	add	r5, sp, #16
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
    3ecc:	2800      	cmp	r0, #0
    3ece:	d006      	beq.n	3ede <ble_device_init+0x16e>
			DBG_LOG("BD address get failed");
    3ed0:	4831      	ldr	r0, [pc, #196]	; (3f98 <ble_device_init+0x228>)
    3ed2:	4b32      	ldr	r3, [pc, #200]	; (3f9c <ble_device_init+0x22c>)
    3ed4:	4798      	blx	r3
    3ed6:	4848      	ldr	r0, [pc, #288]	; (3ff8 <ble_device_init+0x288>)
    3ed8:	4b32      	ldr	r3, [pc, #200]	; (3fa4 <ble_device_init+0x234>)
    3eda:	4798      	blx	r3
		addr = &address;
    3edc:	ad04      	add	r5, sp, #16
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
    3ede:	482e      	ldr	r0, [pc, #184]	; (3f98 <ble_device_init+0x228>)
    3ee0:	4b2e      	ldr	r3, [pc, #184]	; (3f9c <ble_device_init+0x22c>)
    3ee2:	4798      	blx	r3
    3ee4:	792b      	ldrb	r3, [r5, #4]
    3ee6:	796a      	ldrb	r2, [r5, #5]
    3ee8:	79a9      	ldrb	r1, [r5, #6]
    3eea:	7828      	ldrb	r0, [r5, #0]
    3eec:	9003      	str	r0, [sp, #12]
    3eee:	7868      	ldrb	r0, [r5, #1]
    3ef0:	9002      	str	r0, [sp, #8]
    3ef2:	78a8      	ldrb	r0, [r5, #2]
    3ef4:	9001      	str	r0, [sp, #4]
    3ef6:	78e8      	ldrb	r0, [r5, #3]
    3ef8:	9000      	str	r0, [sp, #0]
    3efa:	4840      	ldr	r0, [pc, #256]	; (3ffc <ble_device_init+0x28c>)
    3efc:	4c29      	ldr	r4, [pc, #164]	; (3fa4 <ble_device_init+0x234>)
    3efe:	47a0      	blx	r4
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
    3f00:	ac06      	add	r4, sp, #24
    3f02:	230f      	movs	r3, #15
    3f04:	7023      	strb	r3, [r4, #0]
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
    3f06:	4b3e      	ldr	r3, [pc, #248]	; (4000 <ble_device_init+0x290>)
    3f08:	8063      	strh	r3, [r4, #2]
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
    3f0a:	2207      	movs	r2, #7
    3f0c:	0029      	movs	r1, r5
    3f0e:	a807      	add	r0, sp, #28
    3f10:	4b3c      	ldr	r3, [pc, #240]	; (4004 <ble_device_init+0x294>)
    3f12:	4798      	blx	r3
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
    3f14:	2300      	movs	r3, #0
    3f16:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
    3f18:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
    3f1a:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
    3f1c:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
    3f1e:	77e3      	strb	r3, [r4, #31]
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
    3f20:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
    3f22:	8463      	strh	r3, [r4, #34]	; 0x22
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
    3f24:	2380      	movs	r3, #128	; 0x80
    3f26:	009b      	lsls	r3, r3, #2
    3f28:	84a3      	strh	r3, [r4, #36]	; 0x24
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
    3f2a:	0020      	movs	r0, r4
    3f2c:	4b36      	ldr	r3, [pc, #216]	; (4008 <ble_device_init+0x298>)
    3f2e:	4798      	blx	r3
    3f30:	2800      	cmp	r0, #0
    3f32:	d005      	beq.n	3f40 <ble_device_init+0x1d0>
		DBG_LOG("Set BLE Device configuration failed");
    3f34:	4818      	ldr	r0, [pc, #96]	; (3f98 <ble_device_init+0x228>)
    3f36:	4b19      	ldr	r3, [pc, #100]	; (3f9c <ble_device_init+0x22c>)
    3f38:	4798      	blx	r3
    3f3a:	4834      	ldr	r0, [pc, #208]	; (400c <ble_device_init+0x29c>)
    3f3c:	4b19      	ldr	r3, [pc, #100]	; (3fa4 <ble_device_init+0x234>)
    3f3e:	4798      	blx	r3
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
    3f40:	0028      	movs	r0, r5
    3f42:	4b33      	ldr	r3, [pc, #204]	; (4010 <ble_device_init+0x2a0>)
    3f44:	4798      	blx	r3
    3f46:	2800      	cmp	r0, #0
    3f48:	d005      	beq.n	3f56 <ble_device_init+0x1e6>
		DBG_LOG("Set BLE Device Address failed");
    3f4a:	4813      	ldr	r0, [pc, #76]	; (3f98 <ble_device_init+0x228>)
    3f4c:	4b13      	ldr	r3, [pc, #76]	; (3f9c <ble_device_init+0x22c>)
    3f4e:	4798      	blx	r3
    3f50:	4830      	ldr	r0, [pc, #192]	; (4014 <ble_device_init+0x2a4>)
    3f52:	4b14      	ldr	r3, [pc, #80]	; (3fa4 <ble_device_init+0x234>)
    3f54:	4798      	blx	r3
	ble_sdk_version();						
    3f56:	4b30      	ldr	r3, [pc, #192]	; (4018 <ble_device_init+0x2a8>)
    3f58:	4798      	blx	r3
}
    3f5a:	b011      	add	sp, #68	; 0x44
    3f5c:	bc3c      	pop	{r2, r3, r4, r5}
    3f5e:	4690      	mov	r8, r2
    3f60:	4699      	mov	r9, r3
    3f62:	46a2      	mov	sl, r4
    3f64:	46ab      	mov	fp, r5
    3f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DBG_LOG("BTLC1000 Chip identification failed");
    3f68:	480b      	ldr	r0, [pc, #44]	; (3f98 <ble_device_init+0x228>)
    3f6a:	4b0c      	ldr	r3, [pc, #48]	; (3f9c <ble_device_init+0x22c>)
    3f6c:	4798      	blx	r3
    3f6e:	482b      	ldr	r0, [pc, #172]	; (401c <ble_device_init+0x2ac>)
    3f70:	4b0c      	ldr	r3, [pc, #48]	; (3fa4 <ble_device_init+0x234>)
    3f72:	4798      	blx	r3
    3f74:	e7fe      	b.n	3f74 <ble_device_init+0x204>
    3f76:	46c0      	nop			; (mov r8, r8)
    3f78:	20002524 	.word	0x20002524
    3f7c:	0000a309 	.word	0x0000a309
    3f80:	20002904 	.word	0x20002904
    3f84:	2000000c 	.word	0x2000000c
    3f88:	20000190 	.word	0x20000190
    3f8c:	200019fc 	.word	0x200019fc
    3f90:	200009fc 	.word	0x200009fc
    3f94:	20001e00 	.word	0x20001e00
    3f98:	0000bf48 	.word	0x0000bf48
    3f9c:	0000a435 	.word	0x0000a435
    3fa0:	0000b94c 	.word	0x0000b94c
    3fa4:	0000a319 	.word	0x0000a319
    3fa8:	0000b970 	.word	0x0000b970
    3fac:	00004ded 	.word	0x00004ded
    3fb0:	00004cbd 	.word	0x00004cbd
    3fb4:	00005f11 	.word	0x00005f11
    3fb8:	0000b9a8 	.word	0x0000b9a8
    3fbc:	000068bd 	.word	0x000068bd
    3fc0:	0000b9c0 	.word	0x0000b9c0
    3fc4:	0000b9e0 	.word	0x0000b9e0
    3fc8:	00006bed 	.word	0x00006bed
    3fcc:	0000ba24 	.word	0x0000ba24
    3fd0:	00004e05 	.word	0x00004e05
    3fd4:	0000bcb0 	.word	0x0000bcb0
    3fd8:	00003b7d 	.word	0x00003b7d
    3fdc:	0000bd00 	.word	0x0000bd00
    3fe0:	0000bc9c 	.word	0x0000bc9c
    3fe4:	0000ba3c 	.word	0x0000ba3c
    3fe8:	000067d9 	.word	0x000067d9
    3fec:	0000ba6c 	.word	0x0000ba6c
    3ff0:	0000b830 	.word	0x0000b830
    3ff4:	0000680d 	.word	0x0000680d
    3ff8:	0000ba84 	.word	0x0000ba84
    3ffc:	0000ba9c 	.word	0x0000ba9c
    4000:	00003a98 	.word	0x00003a98
    4004:	0000a2f7 	.word	0x0000a2f7
    4008:	00006831 	.word	0x00006831
    400c:	0000bad4 	.word	0x0000bad4
    4010:	000069b9 	.word	0x000069b9
    4014:	0000baf8 	.word	0x0000baf8
    4018:	00003af1 	.word	0x00003af1
    401c:	0000ba48 	.word	0x0000ba48

00004020 <ble_send_slave_sec_request>:
{
    4020:	b510      	push	{r4, lr}
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
    4022:	2201      	movs	r2, #1
    4024:	2101      	movs	r1, #1
    4026:	4b06      	ldr	r3, [pc, #24]	; (4040 <ble_send_slave_sec_request+0x20>)
    4028:	4798      	blx	r3
    402a:	2800      	cmp	r0, #0
    402c:	d100      	bne.n	4030 <ble_send_slave_sec_request+0x10>
}
    402e:	bd10      	pop	{r4, pc}
			DBG_LOG("Slave security request failed");
    4030:	4804      	ldr	r0, [pc, #16]	; (4044 <ble_send_slave_sec_request+0x24>)
    4032:	4b05      	ldr	r3, [pc, #20]	; (4048 <ble_send_slave_sec_request+0x28>)
    4034:	4798      	blx	r3
    4036:	4805      	ldr	r0, [pc, #20]	; (404c <ble_send_slave_sec_request+0x2c>)
    4038:	4b05      	ldr	r3, [pc, #20]	; (4050 <ble_send_slave_sec_request+0x30>)
    403a:	4798      	blx	r3
	return AT_BLE_FAILURE;
    403c:	20e2      	movs	r0, #226	; 0xe2
    403e:	e7f6      	b.n	402e <ble_send_slave_sec_request+0xe>
    4040:	000080dd 	.word	0x000080dd
    4044:	0000bf48 	.word	0x0000bf48
    4048:	0000a435 	.word	0x0000a435
    404c:	0000c010 	.word	0x0000c010
    4050:	0000a319 	.word	0x0000a319

00004054 <ble_connected_state_handler>:
{
    4054:	b5f0      	push	{r4, r5, r6, r7, lr}
    4056:	46de      	mov	lr, fp
    4058:	464f      	mov	r7, r9
    405a:	4646      	mov	r6, r8
    405c:	b5c0      	push	{r6, r7, lr}
    405e:	b0a6      	sub	sp, #152	; 0x98
    4060:	0004      	movs	r4, r0
	if (conn_params->conn_status == AT_BLE_SUCCESS)
    4062:	7a86      	ldrb	r6, [r0, #10]
    4064:	2e00      	cmp	r6, #0
    4066:	d000      	beq.n	406a <ble_connected_state_handler+0x16>
    4068:	e0e1      	b.n	422e <ble_connected_state_handler+0x1da>
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
    406a:	4878      	ldr	r0, [pc, #480]	; (424c <ble_connected_state_handler+0x1f8>)
    406c:	4f78      	ldr	r7, [pc, #480]	; (4250 <ble_connected_state_handler+0x1fc>)
    406e:	47b8      	blx	r7
    4070:	7923      	ldrb	r3, [r4, #4]
    4072:	7962      	ldrb	r2, [r4, #5]
    4074:	79a1      	ldrb	r1, [r4, #6]
    4076:	7860      	ldrb	r0, [r4, #1]
    4078:	9002      	str	r0, [sp, #8]
    407a:	78a0      	ldrb	r0, [r4, #2]
    407c:	9001      	str	r0, [sp, #4]
    407e:	78e0      	ldrb	r0, [r4, #3]
    4080:	9000      	str	r0, [sp, #0]
    4082:	4874      	ldr	r0, [pc, #464]	; (4254 <ble_connected_state_handler+0x200>)
    4084:	4d74      	ldr	r5, [pc, #464]	; (4258 <ble_connected_state_handler+0x204>)
    4086:	47a8      	blx	r5
		DBG_LOG("Connection Handle %d", conn_params->handle);
    4088:	4870      	ldr	r0, [pc, #448]	; (424c <ble_connected_state_handler+0x1f8>)
    408a:	47b8      	blx	r7
    408c:	8921      	ldrh	r1, [r4, #8]
    408e:	4873      	ldr	r0, [pc, #460]	; (425c <ble_connected_state_handler+0x208>)
    4090:	47a8      	blx	r5
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
    4092:	2212      	movs	r2, #18
    4094:	0021      	movs	r1, r4
    4096:	4872      	ldr	r0, [pc, #456]	; (4260 <ble_connected_state_handler+0x20c>)
    4098:	4b72      	ldr	r3, [pc, #456]	; (4264 <ble_connected_state_handler+0x210>)
    409a:	4798      	blx	r3
		if (conn_params->peer_addr.type == AT_BLE_ADDRESS_PUBLIC)
    409c:	7823      	ldrb	r3, [r4, #0]
    409e:	2b00      	cmp	r3, #0
    40a0:	d000      	beq.n	40a4 <ble_connected_state_handler+0x50>
    40a2:	e087      	b.n	41b4 <ble_connected_state_handler+0x160>
    40a4:	4b70      	ldr	r3, [pc, #448]	; (4268 <ble_connected_state_handler+0x214>)
    40a6:	4698      	mov	r8, r3
    40a8:	2500      	movs	r5, #0
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
    40aa:	9404      	str	r4, [sp, #16]
    40ac:	4b6f      	ldr	r3, [pc, #444]	; (426c <ble_connected_state_handler+0x218>)
    40ae:	469b      	mov	fp, r3
    40b0:	b2ef      	uxtb	r7, r5
    40b2:	9505      	str	r5, [sp, #20]
    40b4:	2207      	movs	r2, #7
    40b6:	9904      	ldr	r1, [sp, #16]
    40b8:	4640      	mov	r0, r8
    40ba:	47d8      	blx	fp
    40bc:	2800      	cmp	r0, #0
    40be:	d01c      	beq.n	40fa <ble_connected_state_handler+0xa6>
    40c0:	3501      	adds	r5, #1
    40c2:	237c      	movs	r3, #124	; 0x7c
    40c4:	469c      	mov	ip, r3
    40c6:	44e0      	add	r8, ip
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTION; idx++)
    40c8:	2d08      	cmp	r5, #8
    40ca:	d1f1      	bne.n	40b0 <ble_connected_state_handler+0x5c>
				if (ble_device_count == BLE_MAX_DEVICE_CONNECTION)
    40cc:	4b68      	ldr	r3, [pc, #416]	; (4270 <ble_connected_state_handler+0x21c>)
    40ce:	781b      	ldrb	r3, [r3, #0]
    40d0:	2b08      	cmp	r3, #8
    40d2:	d031      	beq.n	4138 <ble_connected_state_handler+0xe4>
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
    40d4:	235e      	movs	r3, #94	; 0x5e
    40d6:	4a64      	ldr	r2, [pc, #400]	; (4268 <ble_connected_state_handler+0x214>)
    40d8:	5cd3      	ldrb	r3, [r2, r3]
    40da:	2b00      	cmp	r3, #0
    40dc:	d03b      	beq.n	4156 <ble_connected_state_handler+0x102>
    40de:	4a65      	ldr	r2, [pc, #404]	; (4274 <ble_connected_state_handler+0x220>)
    40e0:	2301      	movs	r3, #1
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTION; idx++)
    40e2:	2701      	movs	r7, #1
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
    40e4:	001d      	movs	r5, r3
    40e6:	7811      	ldrb	r1, [r2, #0]
    40e8:	2900      	cmp	r1, #0
    40ea:	d036      	beq.n	415a <ble_connected_state_handler+0x106>
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTION; idx++)
    40ec:	3701      	adds	r7, #1
    40ee:	b2ff      	uxtb	r7, r7
    40f0:	3301      	adds	r3, #1
    40f2:	327c      	adds	r2, #124	; 0x7c
    40f4:	2f08      	cmp	r7, #8
    40f6:	d1f5      	bne.n	40e4 <ble_connected_state_handler+0x90>
    40f8:	e00f      	b.n	411a <ble_connected_state_handler+0xc6>
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
    40fa:	485b      	ldr	r0, [pc, #364]	; (4268 <ble_connected_state_handler+0x214>)
    40fc:	9d05      	ldr	r5, [sp, #20]
    40fe:	016a      	lsls	r2, r5, #5
    4100:	1b53      	subs	r3, r2, r5
    4102:	009b      	lsls	r3, r3, #2
    4104:	18c3      	adds	r3, r0, r3
    4106:	335e      	adds	r3, #94	; 0x5e
    4108:	2102      	movs	r1, #2
    410a:	7019      	strb	r1, [r3, #0]
					memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
    410c:	1b53      	subs	r3, r2, r5
    410e:	009b      	lsls	r3, r3, #2
    4110:	18c0      	adds	r0, r0, r3
    4112:	2212      	movs	r2, #18
    4114:	4952      	ldr	r1, [pc, #328]	; (4260 <ble_connected_state_handler+0x20c>)
    4116:	4b53      	ldr	r3, [pc, #332]	; (4264 <ble_connected_state_handler+0x210>)
    4118:	4798      	blx	r3
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
    411a:	2207      	movs	r2, #7
    411c:	9904      	ldr	r1, [sp, #16]
    411e:	4856      	ldr	r0, [pc, #344]	; (4278 <ble_connected_state_handler+0x224>)
    4120:	4b52      	ldr	r3, [pc, #328]	; (426c <ble_connected_state_handler+0x218>)
    4122:	4798      	blx	r3
    4124:	2800      	cmp	r0, #0
    4126:	d132      	bne.n	418e <ble_connected_state_handler+0x13a>
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
    4128:	017b      	lsls	r3, r7, #5
    412a:	1bdb      	subs	r3, r3, r7
    412c:	009b      	lsls	r3, r3, #2
    412e:	4a4e      	ldr	r2, [pc, #312]	; (4268 <ble_connected_state_handler+0x214>)
    4130:	18d3      	adds	r3, r2, r3
    4132:	2205      	movs	r2, #5
    4134:	749a      	strb	r2, [r3, #18]
    4136:	e03f      	b.n	41b8 <ble_connected_state_handler+0x164>
					DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
    4138:	4844      	ldr	r0, [pc, #272]	; (424c <ble_connected_state_handler+0x1f8>)
    413a:	4b45      	ldr	r3, [pc, #276]	; (4250 <ble_connected_state_handler+0x1fc>)
    413c:	4798      	blx	r3
    413e:	4b4c      	ldr	r3, [pc, #304]	; (4270 <ble_connected_state_handler+0x21c>)
    4140:	7819      	ldrb	r1, [r3, #0]
    4142:	b2c9      	uxtb	r1, r1
    4144:	484d      	ldr	r0, [pc, #308]	; (427c <ble_connected_state_handler+0x228>)
    4146:	4b44      	ldr	r3, [pc, #272]	; (4258 <ble_connected_state_handler+0x204>)
    4148:	4798      	blx	r3
					at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
    414a:	8920      	ldrh	r0, [r4, #8]
    414c:	2113      	movs	r1, #19
    414e:	4b4c      	ldr	r3, [pc, #304]	; (4280 <ble_connected_state_handler+0x22c>)
    4150:	4798      	blx	r3
					return AT_BLE_FAILURE;
    4152:	26e2      	movs	r6, #226	; 0xe2
    4154:	e073      	b.n	423e <ble_connected_state_handler+0x1ea>
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
    4156:	2500      	movs	r5, #0
    4158:	2700      	movs	r7, #0
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
    415a:	016b      	lsls	r3, r5, #5
    415c:	4698      	mov	r8, r3
    415e:	1b58      	subs	r0, r3, r5
    4160:	0080      	lsls	r0, r0, #2
    4162:	4b41      	ldr	r3, [pc, #260]	; (4268 <ble_connected_state_handler+0x214>)
    4164:	4699      	mov	r9, r3
    4166:	4448      	add	r0, r9
    4168:	2212      	movs	r2, #18
    416a:	0021      	movs	r1, r4
    416c:	4b3d      	ldr	r3, [pc, #244]	; (4264 <ble_connected_state_handler+0x210>)
    416e:	4798      	blx	r3
						ble_device_count++;
    4170:	4a3f      	ldr	r2, [pc, #252]	; (4270 <ble_connected_state_handler+0x21c>)
    4172:	7813      	ldrb	r3, [r2, #0]
    4174:	3301      	adds	r3, #1
    4176:	b2db      	uxtb	r3, r3
    4178:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
    417a:	4643      	mov	r3, r8
    417c:	1b5d      	subs	r5, r3, r5
    417e:	00ad      	lsls	r5, r5, #2
    4180:	002b      	movs	r3, r5
    4182:	444b      	add	r3, r9
    4184:	335e      	adds	r3, #94	; 0x5e
    4186:	001a      	movs	r2, r3
    4188:	2302      	movs	r3, #2
    418a:	7013      	strb	r3, [r2, #0]
						break;
    418c:	e7c5      	b.n	411a <ble_connected_state_handler+0xc6>
				ble_device_current_state = PERIPHERAL_CONNECTED_STATE;
    418e:	2203      	movs	r2, #3
    4190:	4b3c      	ldr	r3, [pc, #240]	; (4284 <ble_connected_state_handler+0x230>)
    4192:	701a      	strb	r2, [r3, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
    4194:	017b      	lsls	r3, r7, #5
    4196:	1bdb      	subs	r3, r3, r7
    4198:	009b      	lsls	r3, r3, #2
    419a:	4a33      	ldr	r2, [pc, #204]	; (4268 <ble_connected_state_handler+0x214>)
    419c:	18d3      	adds	r3, r2, r3
    419e:	220a      	movs	r2, #10
    41a0:	749a      	strb	r2, [r3, #18]
		memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
    41a2:	3a03      	subs	r2, #3
    41a4:	2100      	movs	r1, #0
    41a6:	4834      	ldr	r0, [pc, #208]	; (4278 <ble_connected_state_handler+0x224>)
    41a8:	4b37      	ldr	r3, [pc, #220]	; (4288 <ble_connected_state_handler+0x234>)
    41aa:	4798      	blx	r3
	 		ble_send_slave_sec_request(conn_params->handle);
    41ac:	8920      	ldrh	r0, [r4, #8]
    41ae:	4b37      	ldr	r3, [pc, #220]	; (428c <ble_connected_state_handler+0x238>)
    41b0:	4798      	blx	r3
    41b2:	e044      	b.n	423e <ble_connected_state_handler+0x1ea>
		else if((conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) && 
    41b4:	2b02      	cmp	r3, #2
    41b6:	d005      	beq.n	41c4 <ble_connected_state_handler+0x170>
		memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
    41b8:	2207      	movs	r2, #7
    41ba:	2100      	movs	r1, #0
    41bc:	482e      	ldr	r0, [pc, #184]	; (4278 <ble_connected_state_handler+0x224>)
    41be:	4b32      	ldr	r3, [pc, #200]	; (4288 <ble_connected_state_handler+0x234>)
    41c0:	4798      	blx	r3
    41c2:	e03c      	b.n	423e <ble_connected_state_handler+0x1ea>
				(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t))))
    41c4:	2207      	movs	r2, #7
    41c6:	0021      	movs	r1, r4
    41c8:	482b      	ldr	r0, [pc, #172]	; (4278 <ble_connected_state_handler+0x224>)
    41ca:	4b28      	ldr	r3, [pc, #160]	; (426c <ble_connected_state_handler+0x218>)
    41cc:	4798      	blx	r3
		else if((conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) && 
    41ce:	2800      	cmp	r0, #0
    41d0:	d0f2      	beq.n	41b8 <ble_connected_state_handler+0x164>
			uint8_t irk_key[BLE_MAX_DEVICE_CONNECTION * AT_BLE_MAX_KEY_LEN] = {0, };
    41d2:	2280      	movs	r2, #128	; 0x80
    41d4:	2100      	movs	r1, #0
    41d6:	a806      	add	r0, sp, #24
    41d8:	4b2b      	ldr	r3, [pc, #172]	; (4288 <ble_connected_state_handler+0x234>)
    41da:	4798      	blx	r3
    41dc:	4f2c      	ldr	r7, [pc, #176]	; (4290 <ble_connected_state_handler+0x23c>)
			uint16_t key_len = 0;
    41de:	2300      	movs	r3, #0
					irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
    41e0:	ae06      	add	r6, sp, #24
    41e2:	001d      	movs	r5, r3
    41e4:	3510      	adds	r5, #16
    41e6:	b2ad      	uxth	r5, r5
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
    41e8:	0039      	movs	r1, r7
    41ea:	001a      	movs	r2, r3
					irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
    41ec:	1c53      	adds	r3, r2, #1
    41ee:	b29b      	uxth	r3, r3
    41f0:	7808      	ldrb	r0, [r1, #0]
    41f2:	54b0      	strb	r0, [r6, r2]
    41f4:	3101      	adds	r1, #1
    41f6:	001a      	movs	r2, r3
				for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
    41f8:	42ab      	cmp	r3, r5
    41fa:	d1f7      	bne.n	41ec <ble_connected_state_handler+0x198>
    41fc:	377c      	adds	r7, #124	; 0x7c
			for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTION; idx1++)
    41fe:	2b80      	cmp	r3, #128	; 0x80
    4200:	d1ef      	bne.n	41e2 <ble_connected_state_handler+0x18e>
			if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTION, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
    4202:	aa06      	add	r2, sp, #24
    4204:	0021      	movs	r1, r4
    4206:	2008      	movs	r0, #8
    4208:	4b22      	ldr	r3, [pc, #136]	; (4294 <ble_connected_state_handler+0x240>)
    420a:	4798      	blx	r3
    420c:	1e06      	subs	r6, r0, #0
    420e:	d103      	bne.n	4218 <ble_connected_state_handler+0x1c4>
				resolve_addr_flag = true;
    4210:	2201      	movs	r2, #1
    4212:	4b21      	ldr	r3, [pc, #132]	; (4298 <ble_connected_state_handler+0x244>)
    4214:	701a      	strb	r2, [r3, #0]
				return AT_BLE_SUCCESS;
    4216:	e012      	b.n	423e <ble_connected_state_handler+0x1ea>
				DBG_LOG("Resolving Random address failed**");
    4218:	480c      	ldr	r0, [pc, #48]	; (424c <ble_connected_state_handler+0x1f8>)
    421a:	4b0d      	ldr	r3, [pc, #52]	; (4250 <ble_connected_state_handler+0x1fc>)
    421c:	4798      	blx	r3
    421e:	481f      	ldr	r0, [pc, #124]	; (429c <ble_connected_state_handler+0x248>)
    4220:	4b0d      	ldr	r3, [pc, #52]	; (4258 <ble_connected_state_handler+0x204>)
    4222:	4798      	blx	r3
				resolve_addr_flag = false;
    4224:	2200      	movs	r2, #0
    4226:	4b1c      	ldr	r3, [pc, #112]	; (4298 <ble_connected_state_handler+0x244>)
    4228:	701a      	strb	r2, [r3, #0]
				return AT_BLE_FAILURE;
    422a:	26e2      	movs	r6, #226	; 0xe2
    422c:	e007      	b.n	423e <ble_connected_state_handler+0x1ea>
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
    422e:	4807      	ldr	r0, [pc, #28]	; (424c <ble_connected_state_handler+0x1f8>)
    4230:	4b07      	ldr	r3, [pc, #28]	; (4250 <ble_connected_state_handler+0x1fc>)
    4232:	4798      	blx	r3
    4234:	7aa1      	ldrb	r1, [r4, #10]
    4236:	481a      	ldr	r0, [pc, #104]	; (42a0 <ble_connected_state_handler+0x24c>)
    4238:	4b07      	ldr	r3, [pc, #28]	; (4258 <ble_connected_state_handler+0x204>)
    423a:	4798      	blx	r3
	return AT_BLE_SUCCESS;
    423c:	2600      	movs	r6, #0
}
    423e:	0030      	movs	r0, r6
    4240:	b026      	add	sp, #152	; 0x98
    4242:	bc1c      	pop	{r2, r3, r4}
    4244:	4690      	mov	r8, r2
    4246:	4699      	mov	r9, r3
    4248:	46a3      	mov	fp, r4
    424a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    424c:	0000bf48 	.word	0x0000bf48
    4250:	0000a435 	.word	0x0000a435
    4254:	0000b84c 	.word	0x0000b84c
    4258:	0000a319 	.word	0x0000a319
    425c:	0000b890 	.word	0x0000b890
    4260:	20002998 	.word	0x20002998
    4264:	0000a2f7 	.word	0x0000a2f7
    4268:	20002524 	.word	0x20002524
    426c:	0000a2d9 	.word	0x0000a2d9
    4270:	20002904 	.word	0x20002904
    4274:	200025fe 	.word	0x200025fe
    4278:	200009f4 	.word	0x200009f4
    427c:	0000b8a8 	.word	0x0000b8a8
    4280:	00006b99 	.word	0x00006b99
    4284:	20000990 	.word	0x20000990
    4288:	0000a309 	.word	0x0000a309
    428c:	00004021 	.word	0x00004021
    4290:	2000256a 	.word	0x2000256a
    4294:	00006bc5 	.word	0x00006bc5
    4298:	20001dfc 	.word	0x20001dfc
    429c:	0000b8e4 	.word	0x0000b8e4
    42a0:	0000b908 	.word	0x0000b908

000042a4 <ble_resolv_rand_addr_handler>:
{
    42a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42a6:	46c6      	mov	lr, r8
    42a8:	b500      	push	{lr}
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
    42aa:	7803      	ldrb	r3, [r0, #0]
    42ac:	2b00      	cmp	r3, #0
    42ae:	d10e      	bne.n	42ce <ble_resolv_rand_addr_handler+0x2a>
    42b0:	4d4c      	ldr	r5, [pc, #304]	; (43e4 <ble_resolv_rand_addr_handler+0x140>)
    42b2:	2400      	movs	r4, #0
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
    42b4:	1c46      	adds	r6, r0, #1
    42b6:	4f4c      	ldr	r7, [pc, #304]	; (43e8 <ble_resolv_rand_addr_handler+0x144>)
    42b8:	2210      	movs	r2, #16
    42ba:	0029      	movs	r1, r5
    42bc:	0030      	movs	r0, r6
    42be:	47b8      	blx	r7
    42c0:	2800      	cmp	r0, #0
    42c2:	d05e      	beq.n	4382 <ble_resolv_rand_addr_handler+0xde>
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTION; idx++)
    42c4:	3401      	adds	r4, #1
    42c6:	b2e4      	uxtb	r4, r4
    42c8:	357c      	adds	r5, #124	; 0x7c
    42ca:	2c08      	cmp	r4, #8
    42cc:	d1f4      	bne.n	42b8 <ble_resolv_rand_addr_handler+0x14>
		if (ble_device_count == BLE_MAX_DEVICE_CONNECTION)
    42ce:	4b47      	ldr	r3, [pc, #284]	; (43ec <ble_resolv_rand_addr_handler+0x148>)
    42d0:	781b      	ldrb	r3, [r3, #0]
    42d2:	2b08      	cmp	r3, #8
    42d4:	d01c      	beq.n	4310 <ble_resolv_rand_addr_handler+0x6c>
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
    42d6:	235e      	movs	r3, #94	; 0x5e
    42d8:	4a45      	ldr	r2, [pc, #276]	; (43f0 <ble_resolv_rand_addr_handler+0x14c>)
    42da:	5cd3      	ldrb	r3, [r2, r3]
    42dc:	2b00      	cmp	r3, #0
    42de:	d027      	beq.n	4330 <ble_resolv_rand_addr_handler+0x8c>
    42e0:	4a44      	ldr	r2, [pc, #272]	; (43f4 <ble_resolv_rand_addr_handler+0x150>)
    42e2:	2301      	movs	r3, #1
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTION; idx++)
    42e4:	2401      	movs	r4, #1
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
    42e6:	001d      	movs	r5, r3
    42e8:	7811      	ldrb	r1, [r2, #0]
    42ea:	2900      	cmp	r1, #0
    42ec:	d022      	beq.n	4334 <ble_resolv_rand_addr_handler+0x90>
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTION; idx++)
    42ee:	3401      	adds	r4, #1
    42f0:	b2e4      	uxtb	r4, r4
    42f2:	3301      	adds	r3, #1
    42f4:	327c      	adds	r2, #124	; 0x7c
    42f6:	2c08      	cmp	r4, #8
    42f8:	d1f5      	bne.n	42e6 <ble_resolv_rand_addr_handler+0x42>
	bool peripheral_device_added = false;
    42fa:	2500      	movs	r5, #0
    42fc:	e058      	b.n	43b0 <ble_resolv_rand_addr_handler+0x10c>
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;	
    42fe:	0162      	lsls	r2, r4, #5
    4300:	1b12      	subs	r2, r2, r4
    4302:	0092      	lsls	r2, r2, #2
    4304:	4b3a      	ldr	r3, [pc, #232]	; (43f0 <ble_resolv_rand_addr_handler+0x14c>)
    4306:	189b      	adds	r3, r3, r2
    4308:	335e      	adds	r3, #94	; 0x5e
    430a:	2202      	movs	r2, #2
    430c:	701a      	strb	r2, [r3, #0]
    430e:	e042      	b.n	4396 <ble_resolv_rand_addr_handler+0xf2>
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
    4310:	4839      	ldr	r0, [pc, #228]	; (43f8 <ble_resolv_rand_addr_handler+0x154>)
    4312:	4b3a      	ldr	r3, [pc, #232]	; (43fc <ble_resolv_rand_addr_handler+0x158>)
    4314:	4798      	blx	r3
    4316:	4b35      	ldr	r3, [pc, #212]	; (43ec <ble_resolv_rand_addr_handler+0x148>)
    4318:	7819      	ldrb	r1, [r3, #0]
    431a:	b2c9      	uxtb	r1, r1
    431c:	4838      	ldr	r0, [pc, #224]	; (4400 <ble_resolv_rand_addr_handler+0x15c>)
    431e:	4b39      	ldr	r3, [pc, #228]	; (4404 <ble_resolv_rand_addr_handler+0x160>)
    4320:	4798      	blx	r3
			at_ble_disconnect(connected_state_info.handle, AT_BLE_TERMINATED_BY_USER);
    4322:	4b39      	ldr	r3, [pc, #228]	; (4408 <ble_resolv_rand_addr_handler+0x164>)
    4324:	8918      	ldrh	r0, [r3, #8]
    4326:	2113      	movs	r1, #19
    4328:	4b38      	ldr	r3, [pc, #224]	; (440c <ble_resolv_rand_addr_handler+0x168>)
    432a:	4798      	blx	r3
			return AT_BLE_FAILURE;
    432c:	20e2      	movs	r0, #226	; 0xe2
    432e:	e055      	b.n	43dc <ble_resolv_rand_addr_handler+0x138>
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
    4330:	2500      	movs	r5, #0
    4332:	2400      	movs	r4, #0
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
    4334:	4b2e      	ldr	r3, [pc, #184]	; (43f0 <ble_resolv_rand_addr_handler+0x14c>)
    4336:	4698      	mov	r8, r3
    4338:	016f      	lsls	r7, r5, #5
    433a:	1b7e      	subs	r6, r7, r5
    433c:	00b6      	lsls	r6, r6, #2
    433e:	4446      	add	r6, r8
    4340:	2212      	movs	r2, #18
    4342:	4931      	ldr	r1, [pc, #196]	; (4408 <ble_resolv_rand_addr_handler+0x164>)
    4344:	0030      	movs	r0, r6
    4346:	4b32      	ldr	r3, [pc, #200]	; (4410 <ble_resolv_rand_addr_handler+0x16c>)
    4348:	4798      	blx	r3
				ble_device_count++;
    434a:	4a28      	ldr	r2, [pc, #160]	; (43ec <ble_resolv_rand_addr_handler+0x148>)
    434c:	7813      	ldrb	r3, [r2, #0]
    434e:	3301      	adds	r3, #1
    4350:	b2db      	uxtb	r3, r3
    4352:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
    4354:	365e      	adds	r6, #94	; 0x5e
    4356:	2302      	movs	r3, #2
    4358:	7033      	strb	r3, [r6, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
    435a:	1b7d      	subs	r5, r7, r5
    435c:	00ad      	lsls	r5, r5, #2
    435e:	4445      	add	r5, r8
    4360:	3308      	adds	r3, #8
    4362:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
    4364:	2501      	movs	r5, #1
				break;
    4366:	e023      	b.n	43b0 <ble_resolv_rand_addr_handler+0x10c>
		send_slave_security_flag = false;
    4368:	2200      	movs	r2, #0
    436a:	4b2a      	ldr	r3, [pc, #168]	; (4414 <ble_resolv_rand_addr_handler+0x170>)
    436c:	701a      	strb	r2, [r3, #0]
		ble_encryption_request_handler((void *)temp_param);
    436e:	482a      	ldr	r0, [pc, #168]	; (4418 <ble_resolv_rand_addr_handler+0x174>)
    4370:	4b2a      	ldr	r3, [pc, #168]	; (441c <ble_resolv_rand_addr_handler+0x178>)
    4372:	4798      	blx	r3
    4374:	e023      	b.n	43be <ble_resolv_rand_addr_handler+0x11a>
			ble_send_slave_sec_request(connected_state_info.handle);
    4376:	4b24      	ldr	r3, [pc, #144]	; (4408 <ble_resolv_rand_addr_handler+0x164>)
    4378:	8918      	ldrh	r0, [r3, #8]
    437a:	4b29      	ldr	r3, [pc, #164]	; (4420 <ble_resolv_rand_addr_handler+0x17c>)
    437c:	4798      	blx	r3
	return AT_BLE_SUCCESS;
    437e:	2000      	movs	r0, #0
    4380:	e02c      	b.n	43dc <ble_resolv_rand_addr_handler+0x138>
		if((ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE) || (ble_dev_info[idx].conn_state == BLE_DEVICE_DISCONNECTED))
    4382:	0025      	movs	r5, r4
    4384:	0161      	lsls	r1, r4, #5
    4386:	1b09      	subs	r1, r1, r4
    4388:	0089      	lsls	r1, r1, #2
    438a:	4a19      	ldr	r2, [pc, #100]	; (43f0 <ble_resolv_rand_addr_handler+0x14c>)
    438c:	1852      	adds	r2, r2, r1
    438e:	325e      	adds	r2, #94	; 0x5e
    4390:	7813      	ldrb	r3, [r2, #0]
    4392:	2b01      	cmp	r3, #1
    4394:	d9b3      	bls.n	42fe <ble_resolv_rand_addr_handler+0x5a>
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
    4396:	4816      	ldr	r0, [pc, #88]	; (43f0 <ble_resolv_rand_addr_handler+0x14c>)
    4398:	016b      	lsls	r3, r5, #5
    439a:	1b5a      	subs	r2, r3, r5
    439c:	0092      	lsls	r2, r2, #2
    439e:	1882      	adds	r2, r0, r2
    43a0:	210a      	movs	r1, #10
    43a2:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
    43a4:	0010      	movs	r0, r2
    43a6:	2212      	movs	r2, #18
    43a8:	4917      	ldr	r1, [pc, #92]	; (4408 <ble_resolv_rand_addr_handler+0x164>)
    43aa:	4b19      	ldr	r3, [pc, #100]	; (4410 <ble_resolv_rand_addr_handler+0x16c>)
    43ac:	4798      	blx	r3
		peripheral_device_added = true;		
    43ae:	2501      	movs	r5, #1
	if(!resolve_addr_flag)
    43b0:	4b1c      	ldr	r3, [pc, #112]	; (4424 <ble_resolv_rand_addr_handler+0x180>)
    43b2:	781b      	ldrb	r3, [r3, #0]
    43b4:	2b00      	cmp	r3, #0
    43b6:	d0d7      	beq.n	4368 <ble_resolv_rand_addr_handler+0xc4>
		resolve_addr_flag = false;
    43b8:	2200      	movs	r2, #0
    43ba:	4b1a      	ldr	r3, [pc, #104]	; (4424 <ble_resolv_rand_addr_handler+0x180>)
    43bc:	701a      	strb	r2, [r3, #0]
	return AT_BLE_SUCCESS;
    43be:	2000      	movs	r0, #0
	if(peripheral_device_added)
    43c0:	2d00      	cmp	r5, #0
    43c2:	d00b      	beq.n	43dc <ble_resolv_rand_addr_handler+0x138>
		if((send_slave_security_flag) && (ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL))
    43c4:	4b13      	ldr	r3, [pc, #76]	; (4414 <ble_resolv_rand_addr_handler+0x170>)
    43c6:	781b      	ldrb	r3, [r3, #0]
    43c8:	2b00      	cmp	r3, #0
    43ca:	d007      	beq.n	43dc <ble_resolv_rand_addr_handler+0x138>
    43cc:	0163      	lsls	r3, r4, #5
    43ce:	1b1c      	subs	r4, r3, r4
    43d0:	00a4      	lsls	r4, r4, #2
    43d2:	4b07      	ldr	r3, [pc, #28]	; (43f0 <ble_resolv_rand_addr_handler+0x14c>)
    43d4:	191c      	adds	r4, r3, r4
    43d6:	7ca3      	ldrb	r3, [r4, #18]
    43d8:	2b0a      	cmp	r3, #10
    43da:	d0cc      	beq.n	4376 <ble_resolv_rand_addr_handler+0xd2>
}
    43dc:	bc04      	pop	{r2}
    43de:	4690      	mov	r8, r2
    43e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43e2:	46c0      	nop			; (mov r8, r8)
    43e4:	2000256a 	.word	0x2000256a
    43e8:	0000a2d9 	.word	0x0000a2d9
    43ec:	20002904 	.word	0x20002904
    43f0:	20002524 	.word	0x20002524
    43f4:	200025fe 	.word	0x200025fe
    43f8:	0000bf48 	.word	0x0000bf48
    43fc:	0000a435 	.word	0x0000a435
    4400:	0000b8a8 	.word	0x0000b8a8
    4404:	0000a319 	.word	0x0000a319
    4408:	20002998 	.word	0x20002998
    440c:	00006b99 	.word	0x00006b99
    4410:	0000a2f7 	.word	0x0000a2f7
    4414:	20000070 	.word	0x20000070
    4418:	20002908 	.word	0x20002908
    441c:	000039dd 	.word	0x000039dd
    4420:	00004021 	.word	0x00004021
    4424:	20001dfc 	.word	0x20001dfc

00004428 <ble_connected_device_role>:
{
    4428:	b530      	push	{r4, r5, lr}
    442a:	4a0d      	ldr	r2, [pc, #52]	; (4460 <ble_connected_device_role+0x38>)
    442c:	2300      	movs	r3, #0
    442e:	e003      	b.n	4438 <ble_connected_device_role+0x10>
    4430:	3301      	adds	r3, #1
    4432:	327c      	adds	r2, #124	; 0x7c
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTION; idx++)
    4434:	2b08      	cmp	r3, #8
    4436:	d011      	beq.n	445c <ble_connected_device_role+0x34>
		if((ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE) && 
    4438:	001d      	movs	r5, r3
    443a:	0014      	movs	r4, r2
    443c:	345e      	adds	r4, #94	; 0x5e
    443e:	7824      	ldrb	r4, [r4, #0]
    4440:	2c01      	cmp	r4, #1
    4442:	d9f5      	bls.n	4430 <ble_connected_device_role+0x8>
		  (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
    4444:	8914      	ldrh	r4, [r2, #8]
    4446:	4284      	cmp	r4, r0
    4448:	d1f2      	bne.n	4430 <ble_connected_device_role+0x8>
			*dev_role = ble_dev_info[idx].dev_role;
    444a:	015b      	lsls	r3, r3, #5
    444c:	1b5d      	subs	r5, r3, r5
    444e:	00ad      	lsls	r5, r5, #2
    4450:	4b03      	ldr	r3, [pc, #12]	; (4460 <ble_connected_device_role+0x38>)
    4452:	195d      	adds	r5, r3, r5
    4454:	7cab      	ldrb	r3, [r5, #18]
    4456:	700b      	strb	r3, [r1, #0]
			status = AT_BLE_SUCCESS;
    4458:	2000      	movs	r0, #0
			break;
    445a:	e000      	b.n	445e <ble_connected_device_role+0x36>
	at_ble_status_t status = AT_BLE_FAILURE;
    445c:	20e2      	movs	r0, #226	; 0xe2
}
    445e:	bd30      	pop	{r4, r5, pc}
    4460:	20002524 	.word	0x20002524

00004464 <ble_check_ispheripheral>:
{
    4464:	b500      	push	{lr}
    4466:	b083      	sub	sp, #12
	if(ble_connected_device_role(handle, &dev_role) == AT_BLE_SUCCESS)
    4468:	466b      	mov	r3, sp
    446a:	1dd9      	adds	r1, r3, #7
    446c:	4b07      	ldr	r3, [pc, #28]	; (448c <ble_check_ispheripheral+0x28>)
    446e:	4798      	blx	r3
	return false;
    4470:	2300      	movs	r3, #0
	if(ble_connected_device_role(handle, &dev_role) == AT_BLE_SUCCESS)
    4472:	2800      	cmp	r0, #0
    4474:	d106      	bne.n	4484 <ble_check_ispheripheral+0x20>
		if (dev_role == AT_BLE_ROLE_PERIPHERAL)
    4476:	466b      	mov	r3, sp
    4478:	3307      	adds	r3, #7
    447a:	781b      	ldrb	r3, [r3, #0]
    447c:	3b0a      	subs	r3, #10
    447e:	4258      	negs	r0, r3
    4480:	4143      	adcs	r3, r0
    4482:	b2db      	uxtb	r3, r3
}
    4484:	0018      	movs	r0, r3
    4486:	b003      	add	sp, #12
    4488:	bd00      	pop	{pc}
    448a:	46c0      	nop			; (mov r8, r8)
    448c:	00004429 	.word	0x00004429

00004490 <ble_pair_done_handler>:
{
    4490:	b5f0      	push	{r4, r5, r6, r7, lr}
    4492:	46c6      	mov	lr, r8
    4494:	b500      	push	{lr}
    4496:	0007      	movs	r7, r0
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
    4498:	8845      	ldrh	r5, [r0, #2]
    449a:	4b43      	ldr	r3, [pc, #268]	; (45a8 <ble_pair_done_handler+0x118>)
    449c:	2200      	movs	r2, #0
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTION; idx++)
    449e:	2400      	movs	r4, #0
    44a0:	e005      	b.n	44ae <ble_pair_done_handler+0x1e>
    44a2:	3401      	adds	r4, #1
    44a4:	b2e4      	uxtb	r4, r4
    44a6:	3201      	adds	r2, #1
    44a8:	337c      	adds	r3, #124	; 0x7c
    44aa:	2c08      	cmp	r4, #8
    44ac:	d04f      	beq.n	454e <ble_pair_done_handler+0xbe>
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
    44ae:	8918      	ldrh	r0, [r3, #8]
    44b0:	42a8      	cmp	r0, r5
    44b2:	d1f6      	bne.n	44a2 <ble_pair_done_handler+0x12>
    44b4:	0019      	movs	r1, r3
    44b6:	315e      	adds	r1, #94	; 0x5e
    44b8:	7809      	ldrb	r1, [r1, #0]
    44ba:	2903      	cmp	r1, #3
    44bc:	d1f1      	bne.n	44a2 <ble_pair_done_handler+0x12>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
    44be:	0153      	lsls	r3, r2, #5
    44c0:	1a9e      	subs	r6, r3, r2
    44c2:	00b6      	lsls	r6, r6, #2
    44c4:	4b38      	ldr	r3, [pc, #224]	; (45a8 <ble_pair_done_handler+0x118>)
    44c6:	199b      	adds	r3, r3, r6
    44c8:	335e      	adds	r3, #94	; 0x5e
    44ca:	2205      	movs	r2, #5
    44cc:	701a      	strb	r2, [r3, #0]
	if(pairing_params->status == AT_BLE_SUCCESS)
    44ce:	793d      	ldrb	r5, [r7, #4]
    44d0:	2d00      	cmp	r5, #0
    44d2:	d13f      	bne.n	4554 <ble_pair_done_handler+0xc4>
		DBG_LOG("Pairing procedure completed successfully");
    44d4:	4835      	ldr	r0, [pc, #212]	; (45ac <ble_pair_done_handler+0x11c>)
    44d6:	4b36      	ldr	r3, [pc, #216]	; (45b0 <ble_pair_done_handler+0x120>)
    44d8:	4798      	blx	r3
    44da:	4836      	ldr	r0, [pc, #216]	; (45b4 <ble_pair_done_handler+0x124>)
    44dc:	4b36      	ldr	r3, [pc, #216]	; (45b8 <ble_pair_done_handler+0x128>)
    44de:	4798      	blx	r3
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
    44e0:	7839      	ldrb	r1, [r7, #0]
    44e2:	4e31      	ldr	r6, [pc, #196]	; (45a8 <ble_pair_done_handler+0x118>)
    44e4:	0163      	lsls	r3, r4, #5
    44e6:	1b1a      	subs	r2, r3, r4
    44e8:	0092      	lsls	r2, r2, #2
    44ea:	18b2      	adds	r2, r6, r2
    44ec:	7511      	strb	r1, [r2, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
    44ee:	7939      	ldrb	r1, [r7, #4]
    44f0:	1b1a      	subs	r2, r3, r4
    44f2:	0092      	lsls	r2, r2, #2
    44f4:	18b2      	adds	r2, r6, r2
    44f6:	7611      	strb	r1, [r2, #24]
    44f8:	1b1c      	subs	r4, r3, r4
    44fa:	00a4      	lsls	r4, r4, #2
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
    44fc:	0020      	movs	r0, r4
    44fe:	3036      	adds	r0, #54	; 0x36
    4500:	1980      	adds	r0, r0, r6
    4502:	0039      	movs	r1, r7
    4504:	3122      	adds	r1, #34	; 0x22
    4506:	2210      	movs	r2, #16
    4508:	4b2c      	ldr	r3, [pc, #176]	; (45bc <ble_pair_done_handler+0x12c>)
    450a:	4698      	mov	r8, r3
    450c:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
    450e:	0020      	movs	r0, r4
    4510:	3046      	adds	r0, #70	; 0x46
    4512:	1980      	adds	r0, r0, r6
    4514:	0039      	movs	r1, r7
    4516:	3132      	adds	r1, #50	; 0x32
    4518:	2217      	movs	r2, #23
    451a:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
    451c:	341a      	adds	r4, #26
    451e:	19a0      	adds	r0, r4, r6
    4520:	1db9      	adds	r1, r7, #6
    4522:	221c      	movs	r2, #28
    4524:	47c0      	blx	r8
			ble_dev_info->conn_state = BLE_DEVICE_PAIRED;
    4526:	2205      	movs	r2, #5
    4528:	235e      	movs	r3, #94	; 0x5e
    452a:	54f2      	strb	r2, [r6, r3]
    452c:	e00b      	b.n	4546 <ble_pair_done_handler+0xb6>
		DBG_LOG("Pairing procedure completed successfully");
    452e:	4e1f      	ldr	r6, [pc, #124]	; (45ac <ble_pair_done_handler+0x11c>)
    4530:	0030      	movs	r0, r6
    4532:	4d1f      	ldr	r5, [pc, #124]	; (45b0 <ble_pair_done_handler+0x120>)
    4534:	47a8      	blx	r5
    4536:	481f      	ldr	r0, [pc, #124]	; (45b4 <ble_pair_done_handler+0x124>)
    4538:	4c1f      	ldr	r4, [pc, #124]	; (45b8 <ble_pair_done_handler+0x128>)
    453a:	47a0      	blx	r4
			DBG_LOG("BLE Device not found to store the pairing info");
    453c:	0030      	movs	r0, r6
    453e:	47a8      	blx	r5
    4540:	481f      	ldr	r0, [pc, #124]	; (45c0 <ble_pair_done_handler+0x130>)
    4542:	47a0      	blx	r4
			return AT_BLE_FAILURE;
    4544:	25e2      	movs	r5, #226	; 0xe2
}
    4546:	0028      	movs	r0, r5
    4548:	bc04      	pop	{r2}
    454a:	4690      	mov	r8, r2
    454c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(pairing_params->status == AT_BLE_SUCCESS)
    454e:	793b      	ldrb	r3, [r7, #4]
    4550:	2b00      	cmp	r3, #0
    4552:	d0ec      	beq.n	452e <ble_pair_done_handler+0x9e>
		ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING_FAILED;
    4554:	0163      	lsls	r3, r4, #5
    4556:	1b1b      	subs	r3, r3, r4
    4558:	009b      	lsls	r3, r3, #2
    455a:	4c13      	ldr	r4, [pc, #76]	; (45a8 <ble_pair_done_handler+0x118>)
    455c:	18e4      	adds	r4, r4, r3
    455e:	345e      	adds	r4, #94	; 0x5e
    4560:	2304      	movs	r3, #4
    4562:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Pairing failed...status %d",pairing_params->status);
    4564:	4811      	ldr	r0, [pc, #68]	; (45ac <ble_pair_done_handler+0x11c>)
    4566:	4b12      	ldr	r3, [pc, #72]	; (45b0 <ble_pair_done_handler+0x120>)
    4568:	4798      	blx	r3
    456a:	7939      	ldrb	r1, [r7, #4]
    456c:	4815      	ldr	r0, [pc, #84]	; (45c4 <ble_pair_done_handler+0x134>)
    456e:	4b12      	ldr	r3, [pc, #72]	; (45b8 <ble_pair_done_handler+0x128>)
    4570:	4798      	blx	r3
		if (ble_check_ispheripheral(pairing_params->handle)) {
    4572:	8878      	ldrh	r0, [r7, #2]
    4574:	4b14      	ldr	r3, [pc, #80]	; (45c8 <ble_pair_done_handler+0x138>)
    4576:	4798      	blx	r3
	return AT_BLE_SUCCESS;
    4578:	2500      	movs	r5, #0
		if (ble_check_ispheripheral(pairing_params->handle)) {
    457a:	2800      	cmp	r0, #0
    457c:	d0e3      	beq.n	4546 <ble_pair_done_handler+0xb6>
			DBG_LOG("Disconnecting ....");
    457e:	480b      	ldr	r0, [pc, #44]	; (45ac <ble_pair_done_handler+0x11c>)
    4580:	4b0b      	ldr	r3, [pc, #44]	; (45b0 <ble_pair_done_handler+0x120>)
    4582:	4798      	blx	r3
    4584:	4811      	ldr	r0, [pc, #68]	; (45cc <ble_pair_done_handler+0x13c>)
    4586:	4b0c      	ldr	r3, [pc, #48]	; (45b8 <ble_pair_done_handler+0x128>)
    4588:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
    458a:	8878      	ldrh	r0, [r7, #2]
    458c:	2113      	movs	r1, #19
    458e:	4b10      	ldr	r3, [pc, #64]	; (45d0 <ble_pair_done_handler+0x140>)
    4590:	4798      	blx	r3
    4592:	1e05      	subs	r5, r0, #0
    4594:	d0d7      	beq.n	4546 <ble_pair_done_handler+0xb6>
			DBG_LOG("Disconnect Request Failed");
    4596:	4805      	ldr	r0, [pc, #20]	; (45ac <ble_pair_done_handler+0x11c>)
    4598:	4b05      	ldr	r3, [pc, #20]	; (45b0 <ble_pair_done_handler+0x120>)
    459a:	4798      	blx	r3
    459c:	480d      	ldr	r0, [pc, #52]	; (45d4 <ble_pair_done_handler+0x144>)
    459e:	4b06      	ldr	r3, [pc, #24]	; (45b8 <ble_pair_done_handler+0x128>)
    45a0:	4798      	blx	r3
			return AT_BLE_FAILURE;
    45a2:	25e2      	movs	r5, #226	; 0xe2
    45a4:	e7cf      	b.n	4546 <ble_pair_done_handler+0xb6>
    45a6:	46c0      	nop			; (mov r8, r8)
    45a8:	20002524 	.word	0x20002524
    45ac:	0000bf48 	.word	0x0000bf48
    45b0:	0000a435 	.word	0x0000a435
    45b4:	0000bd90 	.word	0x0000bd90
    45b8:	0000a319 	.word	0x0000a319
    45bc:	0000a2f7 	.word	0x0000a2f7
    45c0:	0000bdbc 	.word	0x0000bdbc
    45c4:	0000bd60 	.word	0x0000bd60
    45c8:	00004465 	.word	0x00004465
    45cc:	0000bd7c 	.word	0x0000bd7c
    45d0:	00006b99 	.word	0x00006b99
    45d4:	0000be34 	.word	0x0000be34

000045d8 <ble_event_manager>:

void ble_event_manager(at_ble_events_t events, void *event_params)
{
    45d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45da:	0004      	movs	r4, r0
    45dc:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
    45de:	283d      	cmp	r0, #61	; 0x3d
    45e0:	d875      	bhi.n	46ce <ble_event_manager+0xf6>
    45e2:	0083      	lsls	r3, r0, #2
    45e4:	4a40      	ldr	r2, [pc, #256]	; (46e8 <ble_event_manager+0x110>)
    45e6:	58d3      	ldr	r3, [r2, r3]
    45e8:	469f      	mov	pc, r3
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = (ble_event_callback_t *)ble_mgr_gap_event_cb[idx];
				
				if(event_cb_fn[events] != NULL)
    45ea:	0084      	lsls	r4, r0, #2
    45ec:	2600      	movs	r6, #0
			if (ble_mgr_gap_event_cb[idx] != NULL)
    45ee:	4f3f      	ldr	r7, [pc, #252]	; (46ec <ble_event_manager+0x114>)
    45f0:	e002      	b.n	45f8 <ble_event_manager+0x20>
    45f2:	3604      	adds	r6, #4
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
    45f4:	2e14      	cmp	r6, #20
    45f6:	d076      	beq.n	46e6 <ble_event_manager+0x10e>
			if (ble_mgr_gap_event_cb[idx] != NULL)
    45f8:	59f3      	ldr	r3, [r6, r7]
    45fa:	2b00      	cmp	r3, #0
    45fc:	d0f9      	beq.n	45f2 <ble_event_manager+0x1a>
				if(event_cb_fn[events] != NULL)
    45fe:	591b      	ldr	r3, [r3, r4]
    4600:	2b00      	cmp	r3, #0
    4602:	d0f6      	beq.n	45f2 <ble_event_manager+0x1a>
				{
					event_cb_fn[events](event_params);
    4604:	0028      	movs	r0, r5
    4606:	4798      	blx	r3
    4608:	e7f3      	b.n	45f2 <ble_event_manager+0x1a>
	case AT_BLE_CHARACTERISTIC_WRITE_RESPONSE:
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
    460a:	3c14      	subs	r4, #20
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = (ble_event_callback_t *)ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    460c:	b2e4      	uxtb	r4, r4
    460e:	00a4      	lsls	r4, r4, #2
    4610:	2600      	movs	r6, #0
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
    4612:	4f37      	ldr	r7, [pc, #220]	; (46f0 <ble_event_manager+0x118>)
    4614:	e002      	b.n	461c <ble_event_manager+0x44>
    4616:	3604      	adds	r6, #4
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
    4618:	2e14      	cmp	r6, #20
    461a:	d064      	beq.n	46e6 <ble_event_manager+0x10e>
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
    461c:	59f3      	ldr	r3, [r6, r7]
    461e:	2b00      	cmp	r3, #0
    4620:	d0f9      	beq.n	4616 <ble_event_manager+0x3e>
				if(event_cb_fn[events] != NULL)
    4622:	591b      	ldr	r3, [r3, r4]
    4624:	2b00      	cmp	r3, #0
    4626:	d0f6      	beq.n	4616 <ble_event_manager+0x3e>
				{
					event_cb_fn[events](event_params);
    4628:	0028      	movs	r0, r5
    462a:	4798      	blx	r3
    462c:	e7f3      	b.n	4616 <ble_event_manager+0x3e>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
    462e:	3c1e      	subs	r4, #30
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = (ble_event_callback_t *)ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    4630:	b2e4      	uxtb	r4, r4
    4632:	00a4      	lsls	r4, r4, #2
    4634:	2600      	movs	r6, #0
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
    4636:	4f2f      	ldr	r7, [pc, #188]	; (46f4 <ble_event_manager+0x11c>)
    4638:	e002      	b.n	4640 <ble_event_manager+0x68>
    463a:	3604      	adds	r6, #4
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
    463c:	2e14      	cmp	r6, #20
    463e:	d052      	beq.n	46e6 <ble_event_manager+0x10e>
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
    4640:	59f3      	ldr	r3, [r6, r7]
    4642:	2b00      	cmp	r3, #0
    4644:	d0f9      	beq.n	463a <ble_event_manager+0x62>
				if(event_cb_fn[events] != NULL)
    4646:	591b      	ldr	r3, [r3, r4]
    4648:	2b00      	cmp	r3, #0
    464a:	d0f6      	beq.n	463a <ble_event_manager+0x62>
				{
					event_cb_fn[events](event_params);
    464c:	0028      	movs	r0, r5
    464e:	4798      	blx	r3
    4650:	e7f3      	b.n	463a <ble_event_manager+0x62>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
    4652:	3c28      	subs	r4, #40	; 0x28
    4654:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
    4656:	4b28      	ldr	r3, [pc, #160]	; (46f8 <ble_event_manager+0x120>)
    4658:	681b      	ldr	r3, [r3, #0]
    465a:	2b00      	cmp	r3, #0
    465c:	d043      	beq.n	46e6 <ble_event_manager+0x10e>
			{
				const ble_event_callback_t *event_cb_fn = (ble_event_callback_t *)ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    465e:	00a4      	lsls	r4, r4, #2
    4660:	58e3      	ldr	r3, [r4, r3]
    4662:	2b00      	cmp	r3, #0
    4664:	d03f      	beq.n	46e6 <ble_event_manager+0x10e>
				{
					event_cb_fn[events](event_params);
    4666:	0008      	movs	r0, r1
    4668:	4798      	blx	r3
    466a:	e03c      	b.n	46e6 <ble_event_manager+0x10e>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
    466c:	3c2e      	subs	r4, #46	; 0x2e
    466e:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
    4670:	4b22      	ldr	r3, [pc, #136]	; (46fc <ble_event_manager+0x124>)
    4672:	681b      	ldr	r3, [r3, #0]
    4674:	2b00      	cmp	r3, #0
    4676:	d036      	beq.n	46e6 <ble_event_manager+0x10e>
			{
				const ble_event_callback_t *event_cb_fn = (ble_event_callback_t *)ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    4678:	00a4      	lsls	r4, r4, #2
    467a:	58e3      	ldr	r3, [r4, r3]
    467c:	2b00      	cmp	r3, #0
    467e:	d032      	beq.n	46e6 <ble_event_manager+0x10e>
				{
					event_cb_fn[events](event_params);
    4680:	0008      	movs	r0, r1
    4682:	4798      	blx	r3
    4684:	e02f      	b.n	46e6 <ble_event_manager+0x10e>
	/* BLE DTM Events */
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
    4686:	3c37      	subs	r4, #55	; 0x37
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = (ble_event_callback_t *)ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    4688:	b2e4      	uxtb	r4, r4
    468a:	00a4      	lsls	r4, r4, #2
    468c:	2600      	movs	r6, #0
			if (ble_mgr_dtm_event_cb[idx] != NULL)
    468e:	4f1c      	ldr	r7, [pc, #112]	; (4700 <ble_event_manager+0x128>)
    4690:	e002      	b.n	4698 <ble_event_manager+0xc0>
    4692:	3604      	adds	r6, #4
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
    4694:	2e14      	cmp	r6, #20
    4696:	d026      	beq.n	46e6 <ble_event_manager+0x10e>
			if (ble_mgr_dtm_event_cb[idx] != NULL)
    4698:	59f3      	ldr	r3, [r6, r7]
    469a:	2b00      	cmp	r3, #0
    469c:	d0f9      	beq.n	4692 <ble_event_manager+0xba>
				if(event_cb_fn[events] != NULL)
    469e:	591b      	ldr	r3, [r3, r4]
    46a0:	2b00      	cmp	r3, #0
    46a2:	d0f6      	beq.n	4692 <ble_event_manager+0xba>
				{
					event_cb_fn[events](event_params);
    46a4:	0028      	movs	r0, r5
    46a6:	4798      	blx	r3
    46a8:	e7f3      	b.n	4692 <ble_event_manager+0xba>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
    46aa:	3c39      	subs	r4, #57	; 0x39
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = (ble_event_callback_t *)ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    46ac:	b2e4      	uxtb	r4, r4
    46ae:	00a4      	lsls	r4, r4, #2
    46b0:	2600      	movs	r6, #0
			if (ble_mgr_custom_event_cb[idx] != NULL)
    46b2:	4f14      	ldr	r7, [pc, #80]	; (4704 <ble_event_manager+0x12c>)
    46b4:	e002      	b.n	46bc <ble_event_manager+0xe4>
    46b6:	3604      	adds	r6, #4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
    46b8:	2e08      	cmp	r6, #8
    46ba:	d014      	beq.n	46e6 <ble_event_manager+0x10e>
			if (ble_mgr_custom_event_cb[idx] != NULL)
    46bc:	59f3      	ldr	r3, [r6, r7]
    46be:	2b00      	cmp	r3, #0
    46c0:	d0f9      	beq.n	46b6 <ble_event_manager+0xde>
				if(event_cb_fn[events] != NULL)
    46c2:	591b      	ldr	r3, [r3, r4]
    46c4:	2b00      	cmp	r3, #0
    46c6:	d0f6      	beq.n	46b6 <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
    46c8:	0028      	movs	r0, r5
    46ca:	4798      	blx	r3
    46cc:	e7f3      	b.n	46b6 <ble_event_manager+0xde>
	}
	break;
	/* Unknown BLE event */
	default:
	{
		DBG_LOG("BLE-Manager:Unknown Event=0x%X", events);
    46ce:	4e0e      	ldr	r6, [pc, #56]	; (4708 <ble_event_manager+0x130>)
    46d0:	0030      	movs	r0, r6
    46d2:	4d0e      	ldr	r5, [pc, #56]	; (470c <ble_event_manager+0x134>)
    46d4:	47a8      	blx	r5
    46d6:	0021      	movs	r1, r4
    46d8:	480d      	ldr	r0, [pc, #52]	; (4710 <ble_event_manager+0x138>)
    46da:	4b0e      	ldr	r3, [pc, #56]	; (4714 <ble_event_manager+0x13c>)
    46dc:	4798      	blx	r3
		DBG_LOG("\r\n");
    46de:	0030      	movs	r0, r6
    46e0:	47a8      	blx	r5
    46e2:	0030      	movs	r0, r6
    46e4:	47a8      	blx	r5
	}
	break;		
  }
}
    46e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46e8:	0000b738 	.word	0x0000b738
    46ec:	200009b0 	.word	0x200009b0
    46f0:	200009c4 	.word	0x200009c4
    46f4:	200009d8 	.word	0x200009d8
    46f8:	200009f0 	.word	0x200009f0
    46fc:	200009ec 	.word	0x200009ec
    4700:	2000099c 	.word	0x2000099c
    4704:	20000994 	.word	0x20000994
    4708:	0000bf48 	.word	0x0000bf48
    470c:	0000a435 	.word	0x0000a435
    4710:	0000bc7c 	.word	0x0000bc7c
    4714:	0000a319 	.word	0x0000a319

00004718 <ble_event_task>:
{
    4718:	b510      	push	{r4, lr}
    if (at_ble_event_get(&event, ble_event_params, BLE_EVENT_TIMEOUT) == AT_BLE_SUCCESS) 
    471a:	2214      	movs	r2, #20
    471c:	4907      	ldr	r1, [pc, #28]	; (473c <ble_event_task+0x24>)
    471e:	4808      	ldr	r0, [pc, #32]	; (4740 <ble_event_task+0x28>)
    4720:	4b08      	ldr	r3, [pc, #32]	; (4744 <ble_event_task+0x2c>)
    4722:	4798      	blx	r3
    4724:	1e04      	subs	r4, r0, #0
    4726:	d002      	beq.n	472e <ble_event_task+0x16>
    return AT_BLE_FAILURE;
    4728:	24e2      	movs	r4, #226	; 0xe2
}
    472a:	0020      	movs	r0, r4
    472c:	bd10      	pop	{r4, pc}
            ble_event_manager(event, ble_event_params);
    472e:	4b04      	ldr	r3, [pc, #16]	; (4740 <ble_event_task+0x28>)
    4730:	7818      	ldrb	r0, [r3, #0]
    4732:	4902      	ldr	r1, [pc, #8]	; (473c <ble_event_task+0x24>)
    4734:	4b04      	ldr	r3, [pc, #16]	; (4748 <ble_event_task+0x30>)
    4736:	4798      	blx	r3
            return AT_BLE_SUCCESS;
    4738:	e7f7      	b.n	472a <ble_event_task+0x12>
    473a:	46c0      	nop			; (mov r8, r8)
    473c:	20002ce0 	.word	0x20002ce0
    4740:	200029aa 	.word	0x200029aa
    4744:	00006069 	.word	0x00006069
    4748:	000045d9 	.word	0x000045d9

0000474c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    474c:	b570      	push	{r4, r5, r6, lr}
    474e:	b082      	sub	sp, #8
    4750:	0005      	movs	r5, r0
    4752:	000e      	movs	r6, r1
	uint16_t temp = 0;
    4754:	2200      	movs	r2, #0
    4756:	466b      	mov	r3, sp
    4758:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    475a:	4c06      	ldr	r4, [pc, #24]	; (4774 <usart_serial_getchar+0x28>)
    475c:	466b      	mov	r3, sp
    475e:	1d99      	adds	r1, r3, #6
    4760:	0028      	movs	r0, r5
    4762:	47a0      	blx	r4
    4764:	2800      	cmp	r0, #0
    4766:	d1f9      	bne.n	475c <usart_serial_getchar+0x10>

	*c = temp;
    4768:	466b      	mov	r3, sp
    476a:	3306      	adds	r3, #6
    476c:	881b      	ldrh	r3, [r3, #0]
    476e:	7033      	strb	r3, [r6, #0]
}
    4770:	b002      	add	sp, #8
    4772:	bd70      	pop	{r4, r5, r6, pc}
    4774:	000021dd 	.word	0x000021dd

00004778 <usart_serial_putchar>:
{
    4778:	b570      	push	{r4, r5, r6, lr}
    477a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    477c:	b28c      	uxth	r4, r1
    477e:	4e03      	ldr	r6, [pc, #12]	; (478c <usart_serial_putchar+0x14>)
    4780:	0021      	movs	r1, r4
    4782:	0028      	movs	r0, r5
    4784:	47b0      	blx	r6
    4786:	2800      	cmp	r0, #0
    4788:	d1fa      	bne.n	4780 <usart_serial_putchar+0x8>
}
    478a:	bd70      	pop	{r4, r5, r6, pc}
    478c:	000021b1 	.word	0x000021b1

00004790 <serial_console_init>:

/**
 *  Configure console.
 */
void serial_console_init(void)
{
    4790:	b5f0      	push	{r4, r5, r6, r7, lr}
    4792:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    4794:	2380      	movs	r3, #128	; 0x80
    4796:	05db      	lsls	r3, r3, #23
    4798:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    479a:	2300      	movs	r3, #0
    479c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    479e:	22ff      	movs	r2, #255	; 0xff
    47a0:	4669      	mov	r1, sp
    47a2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    47a4:	2200      	movs	r2, #0
    47a6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    47a8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    47aa:	2401      	movs	r4, #1
    47ac:	2124      	movs	r1, #36	; 0x24
    47ae:	4668      	mov	r0, sp
    47b0:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    47b2:	3101      	adds	r1, #1
    47b4:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    47b6:	3101      	adds	r1, #1
    47b8:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    47ba:	3101      	adds	r1, #1
    47bc:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    47be:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    47c0:	3105      	adds	r1, #5
    47c2:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    47c4:	3101      	adds	r1, #1
    47c6:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    47c8:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    47ca:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    47cc:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    47ce:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    47d0:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    47d2:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    47d4:	2313      	movs	r3, #19
    47d6:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    47d8:	7742      	strb	r2, [r0, #29]
 	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    47da:	2380      	movs	r3, #128	; 0x80
    47dc:	035b      	lsls	r3, r3, #13
    47de:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    47e0:	4b1a      	ldr	r3, [pc, #104]	; (484c <serial_console_init+0xbc>)
    47e2:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    47e4:	4b1a      	ldr	r3, [pc, #104]	; (4850 <serial_console_init+0xc0>)
    47e6:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    47e8:	2301      	movs	r3, #1
    47ea:	425b      	negs	r3, r3
    47ec:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    47ee:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    47f0:	23e1      	movs	r3, #225	; 0xe1
    47f2:	025b      	lsls	r3, r3, #9
    47f4:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    47f6:	4d17      	ldr	r5, [pc, #92]	; (4854 <serial_console_init+0xc4>)
    47f8:	4b17      	ldr	r3, [pc, #92]	; (4858 <serial_console_init+0xc8>)
    47fa:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    47fc:	4a17      	ldr	r2, [pc, #92]	; (485c <serial_console_init+0xcc>)
    47fe:	4b18      	ldr	r3, [pc, #96]	; (4860 <serial_console_init+0xd0>)
    4800:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    4802:	4a18      	ldr	r2, [pc, #96]	; (4864 <serial_console_init+0xd4>)
    4804:	4b18      	ldr	r3, [pc, #96]	; (4868 <serial_console_init+0xd8>)
    4806:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    4808:	466a      	mov	r2, sp
    480a:	4918      	ldr	r1, [pc, #96]	; (486c <serial_console_init+0xdc>)
    480c:	0028      	movs	r0, r5
    480e:	4b18      	ldr	r3, [pc, #96]	; (4870 <serial_console_init+0xe0>)
    4810:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    4812:	4f18      	ldr	r7, [pc, #96]	; (4874 <serial_console_init+0xe4>)
    4814:	683b      	ldr	r3, [r7, #0]
    4816:	6898      	ldr	r0, [r3, #8]
    4818:	2100      	movs	r1, #0
    481a:	4e17      	ldr	r6, [pc, #92]	; (4878 <serial_console_init+0xe8>)
    481c:	47b0      	blx	r6
	setbuf(stdin, NULL);
    481e:	683b      	ldr	r3, [r7, #0]
    4820:	6858      	ldr	r0, [r3, #4]
    4822:	2100      	movs	r1, #0
    4824:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4826:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4828:	0030      	movs	r0, r6
    482a:	4b14      	ldr	r3, [pc, #80]	; (487c <serial_console_init+0xec>)
    482c:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    482e:	231f      	movs	r3, #31
    4830:	4018      	ands	r0, r3
    4832:	4084      	lsls	r4, r0
    4834:	4b12      	ldr	r3, [pc, #72]	; (4880 <serial_console_init+0xf0>)
    4836:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4838:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    483a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    483c:	2b00      	cmp	r3, #0
    483e:	d1fc      	bne.n	483a <serial_console_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4840:	6833      	ldr	r3, [r6, #0]
    4842:	2202      	movs	r2, #2
    4844:	4313      	orrs	r3, r2
    4846:	6033      	str	r3, [r6, #0]

	stdio_serial_init(&cdc_uart_module, CONF_STDIO_USART_MODULE, &usart_conf);
	usart_enable(&cdc_uart_module);
}
    4848:	b011      	add	sp, #68	; 0x44
    484a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    484c:	00160002 	.word	0x00160002
    4850:	00170002 	.word	0x00170002
    4854:	20002204 	.word	0x20002204
    4858:	20002520 	.word	0x20002520
    485c:	00004779 	.word	0x00004779
    4860:	2000251c 	.word	0x2000251c
    4864:	0000474d 	.word	0x0000474d
    4868:	20002518 	.word	0x20002518
    486c:	42001400 	.word	0x42001400
    4870:	00001e6d 	.word	0x00001e6d
    4874:	200000d0 	.word	0x200000d0
    4878:	0000a4c1 	.word	0x0000a4c1
    487c:	00001ddd 	.word	0x00001ddd
    4880:	e000e100 	.word	0xe000e100

00004884 <getchar_timeout>:

uint8_t getchar_timeout(uint32_t timeout)
{
    4884:	b5f0      	push	{r4, r5, r6, r7, lr}
    4886:	b083      	sub	sp, #12
    4888:	0004      	movs	r4, r0
	uint16_t temp = 0xFF;
    488a:	22ff      	movs	r2, #255	; 0xff
    488c:	466b      	mov	r3, sp
    488e:	80da      	strh	r2, [r3, #6]

	while((STATUS_OK != usart_read_wait(&cdc_uart_module, &temp)) && timeout){
    4890:	4e09      	ldr	r6, [pc, #36]	; (48b8 <getchar_timeout+0x34>)
    4892:	4d0a      	ldr	r5, [pc, #40]	; (48bc <getchar_timeout+0x38>)
		timeout--;
		delay_ms(1);
    4894:	4f0a      	ldr	r7, [pc, #40]	; (48c0 <getchar_timeout+0x3c>)
	while((STATUS_OK != usart_read_wait(&cdc_uart_module, &temp)) && timeout){
    4896:	e002      	b.n	489e <getchar_timeout+0x1a>
		timeout--;
    4898:	3c01      	subs	r4, #1
		delay_ms(1);
    489a:	2001      	movs	r0, #1
    489c:	47b8      	blx	r7
	while((STATUS_OK != usart_read_wait(&cdc_uart_module, &temp)) && timeout){
    489e:	466b      	mov	r3, sp
    48a0:	1d99      	adds	r1, r3, #6
    48a2:	0030      	movs	r0, r6
    48a4:	47a8      	blx	r5
    48a6:	2800      	cmp	r0, #0
    48a8:	d001      	beq.n	48ae <getchar_timeout+0x2a>
    48aa:	2c00      	cmp	r4, #0
    48ac:	d1f4      	bne.n	4898 <getchar_timeout+0x14>
	}

	return ((uint8_t)temp);	
    48ae:	466b      	mov	r3, sp
    48b0:	7998      	ldrb	r0, [r3, #6]
}
    48b2:	b003      	add	sp, #12
    48b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48b6:	46c0      	nop			; (mov r8, r8)
    48b8:	20002204 	.word	0x20002204
    48bc:	000021dd 	.word	0x000021dd
    48c0:	00001781 	.word	0x00001781

000048c4 <serial_drv_write_cb>:
}

static void serial_drv_write_cb(struct usart_module *const usart_module)
{
	/* USART Tx callback */	
}
    48c4:	4770      	bx	lr
	...

000048c8 <serial_drv_read_cb>:
{	 
    48c8:	b510      	push	{r4, lr}
	platform_process_rxdata((uint8_t)rx_data);
    48ca:	4b02      	ldr	r3, [pc, #8]	; (48d4 <serial_drv_read_cb+0xc>)
    48cc:	7818      	ldrb	r0, [r3, #0]
    48ce:	4b02      	ldr	r3, [pc, #8]	; (48d8 <serial_drv_read_cb+0x10>)
    48d0:	4798      	blx	r3
}
    48d2:	bd10      	pop	{r4, pc}
    48d4:	20002238 	.word	0x20002238
    48d8:	00004ddd 	.word	0x00004ddd

000048dc <configure_usart_after_patch>:
}
    48dc:	4770      	bx	lr
	...

000048e0 <serial_drv_send>:
{  
    48e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48e2:	0006      	movs	r6, r0
    48e4:	000d      	movs	r5, r1
	while (STATUS_OK != usart_write_buffer_job(&usart_instance, data, len));
    48e6:	4c08      	ldr	r4, [pc, #32]	; (4908 <serial_drv_send+0x28>)
    48e8:	4f08      	ldr	r7, [pc, #32]	; (490c <serial_drv_send+0x2c>)
    48ea:	002a      	movs	r2, r5
    48ec:	0031      	movs	r1, r6
    48ee:	0020      	movs	r0, r4
    48f0:	47b8      	blx	r7
    48f2:	2800      	cmp	r0, #0
    48f4:	d1f9      	bne.n	48ea <serial_drv_send+0xa>
	while (STATUS_OK != usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX));
    48f6:	4d04      	ldr	r5, [pc, #16]	; (4908 <serial_drv_send+0x28>)
    48f8:	4c05      	ldr	r4, [pc, #20]	; (4910 <serial_drv_send+0x30>)
    48fa:	2101      	movs	r1, #1
    48fc:	0028      	movs	r0, r5
    48fe:	47a0      	blx	r4
    4900:	2800      	cmp	r0, #0
    4902:	d1fa      	bne.n	48fa <serial_drv_send+0x1a>
}
    4904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4906:	46c0      	nop			; (mov r8, r8)
    4908:	20002eec 	.word	0x20002eec
    490c:	00002301 	.word	0x00002301
    4910:	00002321 	.word	0x00002321

00004914 <serial_read_byte>:
{
    4914:	b510      	push	{r4, lr}
    4916:	0001      	movs	r1, r0
	return usart_read_job(&usart_instance, data);
    4918:	4801      	ldr	r0, [pc, #4]	; (4920 <serial_read_byte+0xc>)
    491a:	4b02      	ldr	r3, [pc, #8]	; (4924 <serial_read_byte+0x10>)
    491c:	4798      	blx	r3
}
    491e:	bd10      	pop	{r4, pc}
    4920:	20002eec 	.word	0x20002eec
    4924:	000022f1 	.word	0x000022f1

00004928 <configure_serial_drv>:
{
    4928:	b530      	push	{r4, r5, lr}
    492a:	b091      	sub	sp, #68	; 0x44
    492c:	0005      	movs	r5, r0
    if(usart_instance.hw)
    492e:	4b3e      	ldr	r3, [pc, #248]	; (4a28 <configure_serial_drv+0x100>)
    4930:	681c      	ldr	r4, [r3, #0]
    4932:	2c00      	cmp	r4, #0
    4934:	d019      	beq.n	496a <configure_serial_drv+0x42>
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    4936:	0020      	movs	r0, r4
    4938:	4b3c      	ldr	r3, [pc, #240]	; (4a2c <configure_serial_drv+0x104>)
    493a:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    493c:	231f      	movs	r3, #31
    493e:	4018      	ands	r0, r3
    4940:	3b1e      	subs	r3, #30
    4942:	4083      	lsls	r3, r0
    4944:	2280      	movs	r2, #128	; 0x80
    4946:	493a      	ldr	r1, [pc, #232]	; (4a30 <configure_serial_drv+0x108>)
    4948:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    494a:	4b37      	ldr	r3, [pc, #220]	; (4a28 <configure_serial_drv+0x100>)
    494c:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    494e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4950:	2b00      	cmp	r3, #0
    4952:	d1fc      	bne.n	494e <configure_serial_drv+0x26>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    4954:	6823      	ldr	r3, [r4, #0]
    4956:	2202      	movs	r2, #2
    4958:	4393      	bics	r3, r2
    495a:	6023      	str	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    495c:	4b32      	ldr	r3, [pc, #200]	; (4a28 <configure_serial_drv+0x100>)
    495e:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    4960:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4962:	2b00      	cmp	r3, #0
    4964:	d1fc      	bne.n	4960 <configure_serial_drv+0x38>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Reset module */
	usart_hw->CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
    4966:	3301      	adds	r3, #1
    4968:	6023      	str	r3, [r4, #0]
	config->data_order       = USART_DATAORDER_LSB;
    496a:	2380      	movs	r3, #128	; 0x80
    496c:	05db      	lsls	r3, r3, #23
    496e:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4970:	2300      	movs	r3, #0
    4972:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    4974:	22ff      	movs	r2, #255	; 0xff
    4976:	4669      	mov	r1, sp
    4978:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    497a:	2200      	movs	r2, #0
    497c:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    497e:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
    4980:	2101      	movs	r1, #1
    4982:	2024      	movs	r0, #36	; 0x24
    4984:	466c      	mov	r4, sp
    4986:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    4988:	3001      	adds	r0, #1
    498a:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    498c:	3125      	adds	r1, #37	; 0x25
    498e:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    4990:	3101      	adds	r1, #1
    4992:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    4994:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    4996:	3105      	adds	r1, #5
    4998:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    499a:	3101      	adds	r1, #1
    499c:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    499e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    49a0:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    49a2:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    49a4:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    49a6:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    49a8:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    49aa:	2313      	movs	r3, #19
    49ac:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    49ae:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate = baudrate;//CONF_FLCR_BLE_BAUDRATE;
    49b0:	9508      	str	r5, [sp, #32]
	config_usart.mux_setting = CONF_FLCR_BLE_MUX_SETTING;
    49b2:	2390      	movs	r3, #144	; 0x90
    49b4:	035b      	lsls	r3, r3, #13
    49b6:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = CONF_FLCR_BLE_PINMUX_PAD0;
    49b8:	4b1e      	ldr	r3, [pc, #120]	; (4a34 <configure_serial_drv+0x10c>)
    49ba:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = CONF_FLCR_BLE_PINMUX_PAD1;
    49bc:	4b1e      	ldr	r3, [pc, #120]	; (4a38 <configure_serial_drv+0x110>)
    49be:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = CONF_FLCR_BLE_PINMUX_PAD2;
    49c0:	4b1e      	ldr	r3, [pc, #120]	; (4a3c <configure_serial_drv+0x114>)
    49c2:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = CONF_FLCR_BLE_PINMUX_PAD3;
    49c4:	4b1e      	ldr	r3, [pc, #120]	; (4a40 <configure_serial_drv+0x118>)
    49c6:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance, CONF_FLCR_BLE_USART_MODULE, &config_usart) != STATUS_OK);
    49c8:	4d17      	ldr	r5, [pc, #92]	; (4a28 <configure_serial_drv+0x100>)
    49ca:	4c1e      	ldr	r4, [pc, #120]	; (4a44 <configure_serial_drv+0x11c>)
    49cc:	466a      	mov	r2, sp
    49ce:	491e      	ldr	r1, [pc, #120]	; (4a48 <configure_serial_drv+0x120>)
    49d0:	0028      	movs	r0, r5
    49d2:	47a0      	blx	r4
    49d4:	2800      	cmp	r0, #0
    49d6:	d1f9      	bne.n	49cc <configure_serial_drv+0xa4>
	SercomUsart *const usart_hw = &(module->hw->USART);
    49d8:	4d13      	ldr	r5, [pc, #76]	; (4a28 <configure_serial_drv+0x100>)
    49da:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    49dc:	0020      	movs	r0, r4
    49de:	4b13      	ldr	r3, [pc, #76]	; (4a2c <configure_serial_drv+0x104>)
    49e0:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    49e2:	231f      	movs	r3, #31
    49e4:	4018      	ands	r0, r3
    49e6:	3b1e      	subs	r3, #30
    49e8:	4083      	lsls	r3, r0
    49ea:	4a11      	ldr	r2, [pc, #68]	; (4a30 <configure_serial_drv+0x108>)
    49ec:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    49ee:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    49f0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    49f2:	2b00      	cmp	r3, #0
    49f4:	d1fc      	bne.n	49f0 <configure_serial_drv+0xc8>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    49f6:	6823      	ldr	r3, [r4, #0]
    49f8:	2202      	movs	r2, #2
    49fa:	4313      	orrs	r3, r2
    49fc:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
    49fe:	4c0a      	ldr	r4, [pc, #40]	; (4a28 <configure_serial_drv+0x100>)
    4a00:	3a01      	subs	r2, #1
    4a02:	4912      	ldr	r1, [pc, #72]	; (4a4c <configure_serial_drv+0x124>)
    4a04:	0020      	movs	r0, r4
    4a06:	4d12      	ldr	r5, [pc, #72]	; (4a50 <configure_serial_drv+0x128>)
    4a08:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
    4a0a:	2200      	movs	r2, #0
    4a0c:	4911      	ldr	r1, [pc, #68]	; (4a54 <configure_serial_drv+0x12c>)
    4a0e:	0020      	movs	r0, r4
    4a10:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    4a12:	2231      	movs	r2, #49	; 0x31
    4a14:	5ca3      	ldrb	r3, [r4, r2]
    4a16:	2103      	movs	r1, #3
    4a18:	430b      	orrs	r3, r1
    4a1a:	54a3      	strb	r3, [r4, r2]
	serial_read_byte(&rx_data);
    4a1c:	480e      	ldr	r0, [pc, #56]	; (4a58 <configure_serial_drv+0x130>)
    4a1e:	4b0f      	ldr	r3, [pc, #60]	; (4a5c <configure_serial_drv+0x134>)
    4a20:	4798      	blx	r3
}
    4a22:	2000      	movs	r0, #0
    4a24:	b011      	add	sp, #68	; 0x44
    4a26:	bd30      	pop	{r4, r5, pc}
    4a28:	20002eec 	.word	0x20002eec
    4a2c:	00001ddd 	.word	0x00001ddd
    4a30:	e000e100 	.word	0xe000e100
    4a34:	00040003 	.word	0x00040003
    4a38:	00050003 	.word	0x00050003
    4a3c:	00060003 	.word	0x00060003
    4a40:	00070003 	.word	0x00070003
    4a44:	00001e6d 	.word	0x00001e6d
    4a48:	42000800 	.word	0x42000800
    4a4c:	000048c9 	.word	0x000048c9
    4a50:	000022d9 	.word	0x000022d9
    4a54:	000048c5 	.word	0x000048c5
    4a58:	20002238 	.word	0x20002238
    4a5c:	00004915 	.word	0x00004915

00004a60 <platform_start_rx>:
{
    4a60:	b510      	push	{r4, lr}
	serial_read_byte(&rx_data);
    4a62:	4802      	ldr	r0, [pc, #8]	; (4a6c <platform_start_rx+0xc>)
    4a64:	4b02      	ldr	r3, [pc, #8]	; (4a70 <platform_start_rx+0x10>)
    4a66:	4798      	blx	r3
}
    4a68:	bd10      	pop	{r4, pc}
    4a6a:	46c0      	nop			; (mov r8, r8)
    4a6c:	20002238 	.word	0x20002238
    4a70:	00004915 	.word	0x00004915

00004a74 <platform_enter_critical_section>:
{
	return(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX));
}

void platform_enter_critical_section(void)
{
    4a74:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    4a76:	4b01      	ldr	r3, [pc, #4]	; (4a7c <platform_enter_critical_section+0x8>)
    4a78:	4798      	blx	r3
	system_interrupt_enter_critical_section();
}
    4a7a:	bd10      	pop	{r4, pc}
    4a7c:	000017ad 	.word	0x000017ad

00004a80 <platform_leave_critical_section>:

void platform_leave_critical_section(void)
{
    4a80:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    4a82:	4b01      	ldr	r3, [pc, #4]	; (4a88 <platform_leave_critical_section+0x8>)
    4a84:	4798      	blx	r3
	system_interrupt_leave_critical_section();
}
    4a86:	bd10      	pop	{r4, pc}
    4a88:	000017ed 	.word	0x000017ed

00004a8c <platform_configure_sleep_manager>:

/* Initialize the sleep manager */
void platform_configure_sleep_manager(void)
{
	/* No need to initialize the sleep manager priorly in SAMD21/L21*/
}
    4a8c:	4770      	bx	lr

00004a8e <platform_restore_from_sleep>:

/* Restore the Host from sleep */
void platform_restore_from_sleep(void)
{
	
}
    4a8e:	4770      	bx	lr

00004a90 <platform_set_hostsleep>:
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    4a90:	4b0b      	ldr	r3, [pc, #44]	; (4ac0 <platform_set_hostsleep+0x30>)
    4a92:	699b      	ldr	r3, [r3, #24]

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
    4a94:	051b      	lsls	r3, r3, #20
    4a96:	0f1b      	lsrs	r3, r3, #28
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    4a98:	2b02      	cmp	r3, #2
    4a9a:	d805      	bhi.n	4aa8 <platform_set_hostsleep+0x18>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    4a9c:	4a09      	ldr	r2, [pc, #36]	; (4ac4 <platform_set_hostsleep+0x34>)
    4a9e:	6851      	ldr	r1, [r2, #4]
    4aa0:	23c0      	movs	r3, #192	; 0xc0
    4aa2:	009b      	lsls	r3, r3, #2
    4aa4:	430b      	orrs	r3, r1
    4aa6:	6053      	str	r3, [r2, #4]

	switch (sleep_mode) {
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    4aa8:	4a07      	ldr	r2, [pc, #28]	; (4ac8 <platform_set_hostsleep+0x38>)
    4aaa:	6913      	ldr	r3, [r2, #16]
    4aac:	2104      	movs	r1, #4
    4aae:	438b      	bics	r3, r1
    4ab0:	6113      	str	r3, [r2, #16]
			PM->SLEEP.reg = sleep_mode;
    4ab2:	2202      	movs	r2, #2
    4ab4:	4b05      	ldr	r3, [pc, #20]	; (4acc <platform_set_hostsleep+0x3c>)
    4ab6:	705a      	strb	r2, [r3, #1]
  __ASM volatile ("dsb");
    4ab8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    4abc:	bf30      	wfi
void platform_set_hostsleep(void)
{		
	system_set_sleepmode(HOST_SYSTEM_SLEEP_MODE);

	system_sleep();
}
    4abe:	4770      	bx	lr
    4ac0:	41002000 	.word	0x41002000
    4ac4:	41004000 	.word	0x41004000
    4ac8:	e000ed00 	.word	0xe000ed00
    4acc:	40000400 	.word	0x40000400

00004ad0 <serial_drive_rx_data_count>:
	/*
	This strategy is used in SAMG55/4S since pdc is used.
	Since SAMD21/L21 returing zero
	*/
	return 0;
}
    4ad0:	2000      	movs	r0, #0
    4ad2:	4770      	bx	lr

00004ad4 <platform_create_hw_timer>:
	platform_cc1_cb(module_inst);
}


void *platform_create_hw_timer(platform_hw_timer_callback_t bus_tc_cb_ptr)
{
    4ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ad6:	46d6      	mov	lr, sl
    4ad8:	464f      	mov	r7, r9
    4ada:	4646      	mov	r6, r8
    4adc:	b5c0      	push	{r6, r7, lr}
    4ade:	b090      	sub	sp, #64	; 0x40
    4ae0:	9001      	str	r0, [sp, #4]
	 struct tc_config timer_config;
	 uint32_t prescaler;
	 uint32_t i;
	 for (i = 0; i < sizeof(hw_timers) / sizeof(struct hw_timer_struct); i++)
	 {
		 if (hw_timers[i].timer_usage == 0)
    4ae2:	4b4d      	ldr	r3, [pc, #308]	; (4c18 <platform_create_hw_timer+0x144>)
    4ae4:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    4ae6:	2e00      	cmp	r6, #0
    4ae8:	d00a      	beq.n	4b00 <platform_create_hw_timer+0x2c>
    4aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
			 tc_set_count_value(&hw_timers[i].timer_instance, (hw_timers[i].timer_frequency / 1000));
			 tc_start_counter(&hw_timers[i].timer_instance);
			 return &hw_timers[i];
		 }
	 }
	 return NULL;
    4aec:	2000      	movs	r0, #0
		 if (hw_timers[i].timer_usage == 0)
    4aee:	2b00      	cmp	r3, #0
    4af0:	d005      	beq.n	4afe <platform_create_hw_timer+0x2a>
}
    4af2:	b010      	add	sp, #64	; 0x40
    4af4:	bc1c      	pop	{r2, r3, r4}
    4af6:	4690      	mov	r8, r2
    4af8:	4699      	mov	r9, r3
    4afa:	46a2      	mov	sl, r4
    4afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4afe:	2601      	movs	r6, #1
			 hw_timers[i].timer_usage = 1;
    4b00:	4b45      	ldr	r3, [pc, #276]	; (4c18 <platform_create_hw_timer+0x144>)
    4b02:	469a      	mov	sl, r3
    4b04:	00b3      	lsls	r3, r6, #2
    4b06:	4698      	mov	r8, r3
    4b08:	199c      	adds	r4, r3, r6
    4b0a:	00e4      	lsls	r4, r4, #3
    4b0c:	4454      	add	r4, sl
    4b0e:	2501      	movs	r5, #1
    4b10:	6265      	str	r5, [r4, #36]	; 0x24
	config->clock_source               = GCLK_GENERATOR_0;
    4b12:	af03      	add	r7, sp, #12
    4b14:	2300      	movs	r3, #0
    4b16:	703b      	strb	r3, [r7, #0]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    4b18:	2200      	movs	r2, #0
    4b1a:	80bb      	strh	r3, [r7, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    4b1c:	71ba      	strb	r2, [r7, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    4b1e:	813b      	strh	r3, [r7, #8]
	config->run_in_standby             = false;
    4b20:	707a      	strb	r2, [r7, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    4b22:	72ba      	strb	r2, [r7, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    4b24:	72fa      	strb	r2, [r7, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    4b26:	733a      	strb	r2, [r7, #12]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    4b28:	743a      	strb	r2, [r7, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    4b2a:	617b      	str	r3, [r7, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    4b2c:	61bb      	str	r3, [r7, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    4b2e:	773a      	strb	r2, [r7, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    4b30:	623b      	str	r3, [r7, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    4b32:	627b      	str	r3, [r7, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    4b34:	853b      	strh	r3, [r7, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    4b36:	857b      	strh	r3, [r7, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    4b38:	85bb      	strh	r3, [r7, #44]	; 0x2c
			 timer_config.oneshot                = true;
    4b3a:	737d      	strb	r5, [r7, #13]
			 timer_config.counter_size           = TC_COUNTER_SIZE_32BIT;
    4b3c:	3308      	adds	r3, #8
    4b3e:	70bb      	strb	r3, [r7, #2]
			 timer_config.count_direction        = TC_COUNT_DIRECTION_DOWN;
    4b40:	73bd      	strb	r5, [r7, #14]
			 tc_init(&hw_timers[i].timer_instance, (Tc *)hw_timers[i].timer_id, &timer_config);
    4b42:	003a      	movs	r2, r7
    4b44:	69e1      	ldr	r1, [r4, #28]
    4b46:	0020      	movs	r0, r4
    4b48:	4b34      	ldr	r3, [pc, #208]	; (4c1c <platform_create_hw_timer+0x148>)
    4b4a:	4798      	blx	r3
			 prescaler = 1 << (timer_config.clock_prescaler >> TC_CTRLA_PRESCALER_Pos);
    4b4c:	88bb      	ldrh	r3, [r7, #4]
    4b4e:	0a1b      	lsrs	r3, r3, #8
    4b50:	409d      	lsls	r5, r3
			 hw_timers[i].timer_frequency = (system_gclk_gen_get_hz(timer_config.clock_source) / prescaler);
    4b52:	7838      	ldrb	r0, [r7, #0]
    4b54:	4b32      	ldr	r3, [pc, #200]	; (4c20 <platform_create_hw_timer+0x14c>)
    4b56:	4798      	blx	r3
    4b58:	0029      	movs	r1, r5
    4b5a:	4b32      	ldr	r3, [pc, #200]	; (4c24 <platform_create_hw_timer+0x150>)
    4b5c:	4798      	blx	r3
    4b5e:	6220      	str	r0, [r4, #32]
			 tc_set_count_value(&hw_timers[i].timer_instance, 0xFFFFFFFF);
    4b60:	2101      	movs	r1, #1
    4b62:	4249      	negs	r1, r1
    4b64:	0020      	movs	r0, r4
    4b66:	4b30      	ldr	r3, [pc, #192]	; (4c28 <platform_create_hw_timer+0x154>)
    4b68:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4b6a:	4643      	mov	r3, r8
    4b6c:	199b      	adds	r3, r3, r6
    4b6e:	00db      	lsls	r3, r3, #3
    4b70:	4652      	mov	r2, sl
    4b72:	589a      	ldr	r2, [r3, r2]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4b74:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    4b76:	b25b      	sxtb	r3, r3
    4b78:	2b00      	cmp	r3, #0
    4b7a:	dbfb      	blt.n	4b74 <platform_create_hw_timer+0xa0>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    4b7c:	8813      	ldrh	r3, [r2, #0]
    4b7e:	2102      	movs	r1, #2
    4b80:	430b      	orrs	r3, r1
    4b82:	8013      	strh	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4b84:	00b3      	lsls	r3, r6, #2
    4b86:	199b      	adds	r3, r3, r6
    4b88:	00db      	lsls	r3, r3, #3
    4b8a:	4a23      	ldr	r2, [pc, #140]	; (4c18 <platform_create_hw_timer+0x144>)
    4b8c:	589a      	ldr	r2, [r3, r2]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4b8e:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    4b90:	b25b      	sxtb	r3, r3
    4b92:	2b00      	cmp	r3, #0
    4b94:	dbfb      	blt.n	4b8e <platform_create_hw_timer+0xba>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    4b96:	2380      	movs	r3, #128	; 0x80
    4b98:	7153      	strb	r3, [r2, #5]
			 tc_register_callback(&hw_timers[i].timer_instance, (tc_callback_t) bus_tc_cb_ptr, TC_CALLBACK_OVERFLOW);
    4b9a:	2200      	movs	r2, #0
    4b9c:	9901      	ldr	r1, [sp, #4]
    4b9e:	0020      	movs	r0, r4
    4ba0:	4b22      	ldr	r3, [pc, #136]	; (4c2c <platform_create_hw_timer+0x158>)
    4ba2:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    4ba4:	4f1c      	ldr	r7, [pc, #112]	; (4c18 <platform_create_hw_timer+0x144>)
    4ba6:	00b5      	lsls	r5, r6, #2
    4ba8:	19ab      	adds	r3, r5, r6
    4baa:	00db      	lsls	r3, r3, #3
    4bac:	59d8      	ldr	r0, [r3, r7]
    4bae:	4b20      	ldr	r3, [pc, #128]	; (4c30 <platform_create_hw_timer+0x15c>)
    4bb0:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    4bb2:	4b20      	ldr	r3, [pc, #128]	; (4c34 <platform_create_hw_timer+0x160>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4bb4:	5c1a      	ldrb	r2, [r3, r0]
    4bb6:	231f      	movs	r3, #31
    4bb8:	4013      	ands	r3, r2
    4bba:	2101      	movs	r1, #1
    4bbc:	000a      	movs	r2, r1
    4bbe:	409a      	lsls	r2, r3
    4bc0:	4b1d      	ldr	r3, [pc, #116]	; (4c38 <platform_create_hw_timer+0x164>)
    4bc2:	601a      	str	r2, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    4bc4:	19ab      	adds	r3, r5, r6
    4bc6:	00db      	lsls	r3, r3, #3
    4bc8:	18fb      	adds	r3, r7, r3
    4bca:	7e5a      	ldrb	r2, [r3, #25]
    4bcc:	2001      	movs	r0, #1
    4bce:	4302      	orrs	r2, r0
    4bd0:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    4bd2:	19aa      	adds	r2, r5, r6
    4bd4:	00d2      	lsls	r2, r2, #3
    4bd6:	59d2      	ldr	r2, [r2, r7]
    4bd8:	7351      	strb	r1, [r2, #13]
			 tc_set_count_value(&hw_timers[i].timer_instance, (hw_timers[i].timer_frequency / 1000));
    4bda:	6a18      	ldr	r0, [r3, #32]
    4bdc:	21fa      	movs	r1, #250	; 0xfa
    4bde:	0089      	lsls	r1, r1, #2
    4be0:	4b10      	ldr	r3, [pc, #64]	; (4c24 <platform_create_hw_timer+0x150>)
    4be2:	4798      	blx	r3
    4be4:	0001      	movs	r1, r0
    4be6:	0020      	movs	r0, r4
    4be8:	4b0f      	ldr	r3, [pc, #60]	; (4c28 <platform_create_hw_timer+0x154>)
    4bea:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4bec:	19ad      	adds	r5, r5, r6
    4bee:	00ed      	lsls	r5, r5, #3
    4bf0:	59ea      	ldr	r2, [r5, r7]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4bf2:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    4bf4:	b25b      	sxtb	r3, r3
    4bf6:	2b00      	cmp	r3, #0
    4bf8:	dbfb      	blt.n	4bf2 <platform_create_hw_timer+0x11e>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    4bfa:	2300      	movs	r3, #0
    4bfc:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4bfe:	00b3      	lsls	r3, r6, #2
    4c00:	199e      	adds	r6, r3, r6
    4c02:	00f6      	lsls	r6, r6, #3
    4c04:	4b04      	ldr	r3, [pc, #16]	; (4c18 <platform_create_hw_timer+0x144>)
    4c06:	58f1      	ldr	r1, [r6, r3]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4c08:	7bcb      	ldrb	r3, [r1, #15]

	while (tc_is_syncing(module_inst)) {
    4c0a:	b25b      	sxtb	r3, r3
    4c0c:	2b00      	cmp	r3, #0
    4c0e:	dbfb      	blt.n	4c08 <platform_create_hw_timer+0x134>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    4c10:	2340      	movs	r3, #64	; 0x40
    4c12:	7153      	strb	r3, [r2, #5]
			 return &hw_timers[i];
    4c14:	0020      	movs	r0, r4
    4c16:	e76c      	b.n	4af2 <platform_create_hw_timer+0x1e>
    4c18:	20000074 	.word	0x20000074
    4c1c:	00002dbd 	.word	0x00002dbd
    4c20:	00002a29 	.word	0x00002a29
    4c24:	00009f51 	.word	0x00009f51
    4c28:	00002ffd 	.word	0x00002ffd
    4c2c:	00002c99 	.word	0x00002c99
    4c30:	00002d81 	.word	0x00002d81
    4c34:	0000c074 	.word	0x0000c074
    4c38:	e000e100 	.word	0xe000e100

00004c3c <platform_start_bus_timer>:


void platform_start_bus_timer(void *timer_handle, uint32_t ms)
{
    4c3c:	b570      	push	{r4, r5, r6, lr}
    4c3e:	0004      	movs	r4, r0
    4c40:	000d      	movs	r5, r1
    struct hw_timer_struct *hw_timer_instance = (struct hw_timer_struct *)timer_handle;
    uint32_t top_value;
    top_value = (hw_timer_instance->timer_frequency / 1000) * ms;
    4c42:	21fa      	movs	r1, #250	; 0xfa
    4c44:	0089      	lsls	r1, r1, #2
    4c46:	6a00      	ldr	r0, [r0, #32]
    4c48:	4b0a      	ldr	r3, [pc, #40]	; (4c74 <platform_start_bus_timer+0x38>)
    4c4a:	4798      	blx	r3
    4c4c:	0029      	movs	r1, r5
    4c4e:	4341      	muls	r1, r0
    tc_set_count_value(&(hw_timer_instance->timer_instance), top_value);
    4c50:	0020      	movs	r0, r4
    4c52:	4b09      	ldr	r3, [pc, #36]	; (4c78 <platform_start_bus_timer+0x3c>)
    4c54:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4c56:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4c58:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    4c5a:	b25b      	sxtb	r3, r3
    4c5c:	2b00      	cmp	r3, #0
    4c5e:	dbfb      	blt.n	4c58 <platform_start_bus_timer+0x1c>
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    4c60:	2300      	movs	r3, #0
    4c62:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4c64:	6821      	ldr	r1, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4c66:	7bcb      	ldrb	r3, [r1, #15]
	while (tc_is_syncing(module_inst)) {
    4c68:	b25b      	sxtb	r3, r3
    4c6a:	2b00      	cmp	r3, #0
    4c6c:	dbfb      	blt.n	4c66 <platform_start_bus_timer+0x2a>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    4c6e:	2340      	movs	r3, #64	; 0x40
    4c70:	7153      	strb	r3, [r2, #5]
    tc_start_counter(&(hw_timer_instance->timer_instance));
}
    4c72:	bd70      	pop	{r4, r5, r6, pc}
    4c74:	00009f51 	.word	0x00009f51
    4c78:	00002ffd 	.word	0x00002ffd

00004c7c <platform_delete_bus_timer>:

void platform_delete_bus_timer(void *timer_handle)
{
    4c7c:	b510      	push	{r4, lr}
    4c7e:	0004      	movs	r4, r0
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4c80:	6802      	ldr	r2, [r0, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4c82:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    4c84:	b25b      	sxtb	r3, r3
    4c86:	2b00      	cmp	r3, #0
    4c88:	dbfb      	blt.n	4c82 <platform_delete_bus_timer+0x6>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    4c8a:	2380      	movs	r3, #128	; 0x80
    4c8c:	7153      	strb	r3, [r2, #5]
    struct hw_timer_struct *hw_timer_instance = (struct hw_timer_struct *)timer_handle;
    tc_stop_counter(&(hw_timer_instance->timer_instance));
    tc_reset(&(hw_timer_instance->timer_instance));
    4c8e:	0020      	movs	r0, r4
    4c90:	4b02      	ldr	r3, [pc, #8]	; (4c9c <platform_delete_bus_timer+0x20>)
    4c92:	4798      	blx	r3
    hw_timer_instance->timer_usage = 0;
    4c94:	2300      	movs	r3, #0
    4c96:	6263      	str	r3, [r4, #36]	; 0x24
}
    4c98:	bd10      	pop	{r4, pc}
    4c9a:	46c0      	nop			; (mov r8, r8)
    4c9c:	0000302f 	.word	0x0000302f

00004ca0 <platform_stop_bus_timer>:
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4ca0:	6802      	ldr	r2, [r0, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4ca2:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    4ca4:	b25b      	sxtb	r3, r3
    4ca6:	2b00      	cmp	r3, #0
    4ca8:	dbfb      	blt.n	4ca2 <platform_stop_bus_timer+0x2>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    4caa:	2380      	movs	r3, #128	; 0x80
    4cac:	7153      	strb	r3, [r2, #5]

void platform_stop_bus_timer(void *timer_handle)
{
    struct hw_timer_struct *hw_timer_instance = (struct hw_timer_struct *)timer_handle;
    tc_stop_counter(&(hw_timer_instance->timer_instance));
}
    4cae:	4770      	bx	lr

00004cb0 <btlc1000_host_wakeup_handler>:
    4cb0:	2201      	movs	r2, #1
    4cb2:	4b01      	ldr	r3, [pc, #4]	; (4cb8 <btlc1000_host_wakeup_handler+0x8>)
    4cb4:	619a      	str	r2, [r3, #24]
}

static inline void btlc1000_host_wakeup_handler(void)
{
	platform_host_wake_interrupt_handler();
}
    4cb6:	4770      	bx	lr
    4cb8:	41004480 	.word	0x41004480

00004cbc <platform_init>:

//#define BLE_DBG_ENABLE
#define DBG_LOG_BLE		DBG_LOG

at_ble_status_t platform_init(uint8_t bus_type, uint8_t btlc1000_module_version)
{	
    4cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cbe:	46ce      	mov	lr, r9
    4cc0:	4647      	mov	r7, r8
    4cc2:	b580      	push	{r7, lr}
    4cc4:	b085      	sub	sp, #20
    at_ble_status_t status = AT_BLE_INVALID_PARAM;
	
	if (bus_type == AT_BLE_UART)
    4cc6:	2801      	cmp	r0, #1
    4cc8:	d000      	beq.n	4ccc <platform_init+0x10>
    4cca:	e7fe      	b.n	4cca <platform_init+0xe>
static inline void ble_configure_control_pin(void)
{
	struct port_config pin_conf;
	
	/* initialize the delay before use */
	delay_init();
    4ccc:	4b1f      	ldr	r3, [pc, #124]	; (4d4c <platform_init+0x90>)
    4cce:	4798      	blx	r3
	config->powersave  = false;
    4cd0:	ac01      	add	r4, sp, #4
    4cd2:	2300      	movs	r3, #0
    4cd4:	4698      	mov	r8, r3
    4cd6:	70a3      	strb	r3, [r4, #2]
	
	/* get the default values for port pin configuration */
	port_get_config_defaults(&pin_conf);

	/* Configure control pins as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4cd8:	2501      	movs	r5, #1
    4cda:	7025      	strb	r5, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_DOWN;
    4cdc:	2702      	movs	r7, #2
    4cde:	7067      	strb	r7, [r4, #1]
	
	port_pin_set_config(BTLC1000_WAKEUP_PIN, &pin_conf);
    4ce0:	0021      	movs	r1, r4
    4ce2:	2020      	movs	r0, #32
    4ce4:	4b1a      	ldr	r3, [pc, #104]	; (4d50 <platform_init+0x94>)
    4ce6:	4699      	mov	r9, r3
    4ce8:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    4cea:	4e1a      	ldr	r6, [pc, #104]	; (4d54 <platform_init+0x98>)
    4cec:	61b5      	str	r5, [r6, #24]
	/* set wakeup pin to low */
	ble_wakeup_pin_set_high();
	
	port_pin_set_config(BTLC1000_CHIP_ENABLE_PIN, &pin_conf);
    4cee:	0021      	movs	r1, r4
    4cf0:	2022      	movs	r0, #34	; 0x22
    4cf2:	47c8      	blx	r9
		port_base->OUTCLR.reg = pin_mask;
    4cf4:	2304      	movs	r3, #4
    4cf6:	4699      	mov	r9, r3
    4cf8:	6173      	str	r3, [r6, #20]
	/* set chip enable to low */
	ble_enable_pin_set_low();
	
	/* Delay for 50ms */
	delay_ms(BTLC1000_RESET_MS);
    4cfa:	2032      	movs	r0, #50	; 0x32
    4cfc:	4b16      	ldr	r3, [pc, #88]	; (4d58 <platform_init+0x9c>)
    4cfe:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    4d00:	464b      	mov	r3, r9
    4d02:	61b3      	str	r3, [r6, #24]
		platform_reset_timer();
		#endif
				
		ble_configure_control_pin();
		
		configure_serial_drv(CONF_UART_BAUDRATE);
    4d04:	20e1      	movs	r0, #225	; 0xe1
    4d06:	0240      	lsls	r0, r0, #9
    4d08:	4b14      	ldr	r3, [pc, #80]	; (4d5c <platform_init+0xa0>)
    4d0a:	4798      	blx	r3
	extint_chan_get_config_defaults(&eint_chan_conf);
    4d0c:	0020      	movs	r0, r4
    4d0e:	4b14      	ldr	r3, [pc, #80]	; (4d60 <platform_init+0xa4>)
    4d10:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = BTLC1000_HOST_WAKEUP_EIC_PIN;
    4d12:	2324      	movs	r3, #36	; 0x24
    4d14:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_UP;
    4d16:	7225      	strb	r5, [r4, #8]
	eint_chan_conf.gpio_pin_mux       = BTLC1000_HOST_WAKEUP_EIC_MUX;
    4d18:	4643      	mov	r3, r8
    4d1a:	6063      	str	r3, [r4, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_FALLING;
    4d1c:	72e7      	strb	r7, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    4d1e:	72a5      	strb	r5, [r4, #10]
	eint_chan_conf.wake_if_sleeping = true;
    4d20:	7265      	strb	r5, [r4, #9]
	extint_chan_set_config(BTLC1000_HOST_WAKEUP_EIC_LINE, &eint_chan_conf);
    4d22:	0021      	movs	r1, r4
    4d24:	2004      	movs	r0, #4
    4d26:	4b0f      	ldr	r3, [pc, #60]	; (4d64 <platform_init+0xa8>)
    4d28:	4798      	blx	r3
	extint_register_callback(btlc1000_host_wakeup_handler,
    4d2a:	2200      	movs	r2, #0
    4d2c:	2104      	movs	r1, #4
    4d2e:	480e      	ldr	r0, [pc, #56]	; (4d68 <platform_init+0xac>)
    4d30:	4b0e      	ldr	r3, [pc, #56]	; (4d6c <platform_init+0xb0>)
    4d32:	4798      	blx	r3
	extint_chan_enable_callback(BTLC1000_HOST_WAKEUP_EIC_LINE,
    4d34:	2100      	movs	r1, #0
    4d36:	2004      	movs	r0, #4
    4d38:	4b0d      	ldr	r3, [pc, #52]	; (4d70 <platform_init+0xb4>)
    4d3a:	4798      	blx	r3
				
		btlc1000_host_wakeup_config();
	
		platform_configure_sleep_manager();
    4d3c:	4b0d      	ldr	r3, [pc, #52]	; (4d74 <platform_init+0xb8>)
    4d3e:	4798      	blx	r3
	}
	
	ALL_UNUSED(btlc1000_module_version);
	return status;             
       
}
    4d40:	2000      	movs	r0, #0
    4d42:	b005      	add	sp, #20
    4d44:	bc0c      	pop	{r2, r3}
    4d46:	4690      	mov	r8, r2
    4d48:	4699      	mov	r9, r3
    4d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d4c:	00001715 	.word	0x00001715
    4d50:	00001a05 	.word	0x00001a05
    4d54:	41004480 	.word	0x41004480
    4d58:	00001781 	.word	0x00001781
    4d5c:	00004929 	.word	0x00004929
    4d60:	00001979 	.word	0x00001979
    4d64:	0000198d 	.word	0x0000198d
    4d68:	00004cb1 	.word	0x00004cb1
    4d6c:	00001855 	.word	0x00001855
    4d70:	00001881 	.word	0x00001881
    4d74:	00004a8d 	.word	0x00004a8d

00004d78 <platform_gpio_set>:
	serial_drv_send(data, (uint16_t)len);

}

void platform_gpio_set(at_ble_gpio_pin_t pin, at_ble_gpio_status_t status)
{
    4d78:	b510      	push	{r4, lr}
	if (pin == AT_BLE_CHIP_ENABLE)
    4d7a:	2800      	cmp	r0, #0
    4d7c:	d109      	bne.n	4d92 <platform_gpio_set+0x1a>
	{
		if (status == AT_BLE_HIGH)
    4d7e:	2901      	cmp	r1, #1
    4d80:	d003      	beq.n	4d8a <platform_gpio_set+0x12>
		port_base->OUTCLR.reg = pin_mask;
    4d82:	2204      	movs	r2, #4
    4d84:	4b0e      	ldr	r3, [pc, #56]	; (4dc0 <platform_gpio_set+0x48>)
    4d86:	615a      	str	r2, [r3, #20]
	}
	else
	{
		ble_assert(false);
	}
}
    4d88:	bd10      	pop	{r4, pc}
		port_base->OUTSET.reg = pin_mask;
    4d8a:	2204      	movs	r2, #4
    4d8c:	4b0c      	ldr	r3, [pc, #48]	; (4dc0 <platform_gpio_set+0x48>)
    4d8e:	619a      	str	r2, [r3, #24]
    4d90:	e7fa      	b.n	4d88 <platform_gpio_set+0x10>
	else if (pin == AT_BLE_EXTERNAL_WAKEUP)
    4d92:	2801      	cmp	r0, #1
    4d94:	d000      	beq.n	4d98 <platform_gpio_set+0x20>
    4d96:	e7fe      	b.n	4d96 <platform_gpio_set+0x1e>
		if (status == AT_BLE_HIGH)
    4d98:	2901      	cmp	r1, #1
    4d9a:	d103      	bne.n	4da4 <platform_gpio_set+0x2c>
    4d9c:	2201      	movs	r2, #1
    4d9e:	4b08      	ldr	r3, [pc, #32]	; (4dc0 <platform_gpio_set+0x48>)
    4da0:	619a      	str	r2, [r3, #24]
    4da2:	e7f1      	b.n	4d88 <platform_gpio_set+0x10>
	return (port_base->IN.reg & pin_mask);
    4da4:	4b06      	ldr	r3, [pc, #24]	; (4dc0 <platform_gpio_set+0x48>)
    4da6:	6a1b      	ldr	r3, [r3, #32]
    4da8:	2410      	movs	r4, #16
    4daa:	401c      	ands	r4, r3
			if((!serial_drive_rx_data_count()) && (host_pin_status))
    4dac:	4b05      	ldr	r3, [pc, #20]	; (4dc4 <platform_gpio_set+0x4c>)
    4dae:	4798      	blx	r3
    4db0:	2800      	cmp	r0, #0
    4db2:	d1e9      	bne.n	4d88 <platform_gpio_set+0x10>
    4db4:	2c00      	cmp	r4, #0
    4db6:	d0e7      	beq.n	4d88 <platform_gpio_set+0x10>
		port_base->OUTCLR.reg = pin_mask;
    4db8:	2201      	movs	r2, #1
    4dba:	4b01      	ldr	r3, [pc, #4]	; (4dc0 <platform_gpio_set+0x48>)
    4dbc:	615a      	str	r2, [r3, #20]
    4dbe:	e7e3      	b.n	4d88 <platform_gpio_set+0x10>
    4dc0:	41004480 	.word	0x41004480
    4dc4:	00004ad1 	.word	0x00004ad1

00004dc8 <platform_recv_async>:

void platform_recv_async(void (*recv_async_callback)(uint8_t))
{
    4dc8:	b510      	push	{r4, lr}
	recv_async_cb = recv_async_callback;
    4dca:	4b02      	ldr	r3, [pc, #8]	; (4dd4 <platform_recv_async+0xc>)
    4dcc:	6018      	str	r0, [r3, #0]
	platform_start_rx();	
    4dce:	4b02      	ldr	r3, [pc, #8]	; (4dd8 <platform_recv_async+0x10>)
    4dd0:	4798      	blx	r3
}
    4dd2:	bd10      	pop	{r4, pc}
    4dd4:	20002254 	.word	0x20002254
    4dd8:	00004a61 	.word	0x00004a61

00004ddc <platform_process_rxdata>:

void platform_process_rxdata(uint8_t t_rx_data)
{
    4ddc:	b510      	push	{r4, lr}
	Assert((recv_async_cb != NULL));
	recv_async_cb(t_rx_data);
    4dde:	4b02      	ldr	r3, [pc, #8]	; (4de8 <platform_process_rxdata+0xc>)
    4de0:	681b      	ldr	r3, [r3, #0]
    4de2:	4798      	blx	r3
}
    4de4:	bd10      	pop	{r4, pc}
    4de6:	46c0      	nop			; (mov r8, r8)
    4de8:	20002254 	.word	0x20002254

00004dec <platform_configure_primary_uart>:
		recv_async_cb(buf[idx++]);
	}
}

void platform_configure_primary_uart(uint32_t baudrate)
{
    4dec:	b510      	push	{r4, lr}
	 configure_serial_drv(baudrate);
    4dee:	4b01      	ldr	r3, [pc, #4]	; (4df4 <platform_configure_primary_uart+0x8>)
    4df0:	4798      	blx	r3
}
    4df2:	bd10      	pop	{r4, pc}
    4df4:	00004929 	.word	0x00004929

00004df8 <platform_configure_hw_fc_uart>:

void platform_configure_hw_fc_uart(uint32_t baudrate)
{
    4df8:	b510      	push	{r4, lr}
	configure_usart_after_patch(baudrate);
    4dfa:	4b01      	ldr	r3, [pc, #4]	; (4e00 <platform_configure_hw_fc_uart+0x8>)
    4dfc:	4798      	blx	r3
}
    4dfe:	bd10      	pop	{r4, pc}
    4e00:	000048dd 	.word	0x000048dd

00004e04 <platform_host_set_sleep>:

void platform_host_set_sleep(bool sleep)
{
	host_sleep_flag = sleep;
    4e04:	4b01      	ldr	r3, [pc, #4]	; (4e0c <platform_host_set_sleep+0x8>)
    4e06:	7018      	strb	r0, [r3, #0]
}
    4e08:	4770      	bx	lr
    4e0a:	46c0      	nop			; (mov r8, r8)
    4e0c:	2000223a 	.word	0x2000223a

00004e10 <platform_enter_sleep>:


void platform_enter_sleep(void)
{
    4e10:	b510      	push	{r4, lr}
	if (!host_sleep_flag) {
    4e12:	4b09      	ldr	r3, [pc, #36]	; (4e38 <platform_enter_sleep+0x28>)
    4e14:	781b      	ldrb	r3, [r3, #0]
    4e16:	2b00      	cmp	r3, #0
    4e18:	d003      	beq.n	4e22 <platform_enter_sleep+0x12>
	return (port_base->OUT.reg & pin_mask);
    4e1a:	4b08      	ldr	r3, [pc, #32]	; (4e3c <platform_enter_sleep+0x2c>)
    4e1c:	691b      	ldr	r3, [r3, #16]
		/* Set Host RTS Low to receive the data */
		platform_set_ble_rts_low();
	}
	else
#endif
	if ((!ble_wakeup_pin_level())
    4e1e:	07db      	lsls	r3, r3, #31
    4e20:	d500      	bpl.n	4e24 <platform_enter_sleep+0x14>
	&& (!serial_drive_rx_data_count()))
	{
		platform_set_hostsleep();
		platform_restore_from_sleep();
	}
}
    4e22:	bd10      	pop	{r4, pc}
	&& (!serial_drive_rx_data_count()))
    4e24:	4b06      	ldr	r3, [pc, #24]	; (4e40 <platform_enter_sleep+0x30>)
    4e26:	4798      	blx	r3
    4e28:	2800      	cmp	r0, #0
    4e2a:	d1fa      	bne.n	4e22 <platform_enter_sleep+0x12>
		platform_set_hostsleep();
    4e2c:	4b05      	ldr	r3, [pc, #20]	; (4e44 <platform_enter_sleep+0x34>)
    4e2e:	4798      	blx	r3
		platform_restore_from_sleep();
    4e30:	4b05      	ldr	r3, [pc, #20]	; (4e48 <platform_enter_sleep+0x38>)
    4e32:	4798      	blx	r3
    4e34:	e7f5      	b.n	4e22 <platform_enter_sleep+0x12>
    4e36:	46c0      	nop			; (mov r8, r8)
    4e38:	2000223a 	.word	0x2000223a
    4e3c:	41004480 	.word	0x41004480
    4e40:	00004ad1 	.word	0x00004ad1
    4e44:	00004a91 	.word	0x00004a91
    4e48:	00004a8f 	.word	0x00004a8f

00004e4c <platform_create_timer>:
	/* Keep BTLC1000 Wakeup line high */
	ble_wakeup_pin_set_high();
}

void *platform_create_timer(void (*timer_cb)(void *))
{
    4e4c:	b510      	push	{r4, lr}
	return (platform_create_hw_timer(timer_cb));
    4e4e:	4b01      	ldr	r3, [pc, #4]	; (4e54 <platform_create_timer+0x8>)
    4e50:	4798      	blx	r3
}
    4e52:	bd10      	pop	{r4, pc}
    4e54:	00004ad5 	.word	0x00004ad5

00004e58 <platform_delete_timer>:

void platform_delete_timer(void *timer_handle)
{
    4e58:	b510      	push	{r4, lr}
  platform_delete_bus_timer(timer_handle);
    4e5a:	4b01      	ldr	r3, [pc, #4]	; (4e60 <platform_delete_timer+0x8>)
    4e5c:	4798      	blx	r3
}
    4e5e:	bd10      	pop	{r4, pc}
    4e60:	00004c7d 	.word	0x00004c7d

00004e64 <platform_start_timer>:

void platform_start_timer(void *timer_handle, uint32_t ms)
{
    4e64:	b570      	push	{r4, r5, r6, lr}
    4e66:	0004      	movs	r4, r0
    4e68:	000d      	movs	r5, r1
	platform_enter_critical_section();
    4e6a:	4b04      	ldr	r3, [pc, #16]	; (4e7c <platform_start_timer+0x18>)
    4e6c:	4798      	blx	r3
	platform_start_bus_timer(timer_handle, ms);
    4e6e:	0029      	movs	r1, r5
    4e70:	0020      	movs	r0, r4
    4e72:	4b03      	ldr	r3, [pc, #12]	; (4e80 <platform_start_timer+0x1c>)
    4e74:	4798      	blx	r3
	platform_leave_critical_section();
    4e76:	4b03      	ldr	r3, [pc, #12]	; (4e84 <platform_start_timer+0x20>)
    4e78:	4798      	blx	r3
}
    4e7a:	bd70      	pop	{r4, r5, r6, pc}
    4e7c:	00004a75 	.word	0x00004a75
    4e80:	00004c3d 	.word	0x00004c3d
    4e84:	00004a81 	.word	0x00004a81

00004e88 <platform_stop_timer>:

void platform_stop_timer(void *timer_handle)
{
    4e88:	b510      	push	{r4, lr}
    4e8a:	0004      	movs	r4, r0
	platform_enter_critical_section();
    4e8c:	4b03      	ldr	r3, [pc, #12]	; (4e9c <platform_stop_timer+0x14>)
    4e8e:	4798      	blx	r3
	platform_stop_bus_timer(timer_handle);
    4e90:	0020      	movs	r0, r4
    4e92:	4b03      	ldr	r3, [pc, #12]	; (4ea0 <platform_stop_timer+0x18>)
    4e94:	4798      	blx	r3
	platform_leave_critical_section();
    4e96:	4b03      	ldr	r3, [pc, #12]	; (4ea4 <platform_stop_timer+0x1c>)
    4e98:	4798      	blx	r3
}
    4e9a:	bd10      	pop	{r4, pc}
    4e9c:	00004a75 	.word	0x00004a75
    4ea0:	00004ca1 	.word	0x00004ca1
    4ea4:	00004a81 	.word	0x00004a81

00004ea8 <platform_sleep>:

void platform_sleep(uint32_t ms)
{
    4ea8:	b510      	push	{r4, lr}
	delay_ms(ms);
    4eaa:	2800      	cmp	r0, #0
    4eac:	d103      	bne.n	4eb6 <platform_sleep+0xe>
    4eae:	2001      	movs	r0, #1
    4eb0:	4b02      	ldr	r3, [pc, #8]	; (4ebc <platform_sleep+0x14>)
    4eb2:	4798      	blx	r3
}
    4eb4:	bd10      	pop	{r4, pc}
	delay_ms(ms);
    4eb6:	4b02      	ldr	r3, [pc, #8]	; (4ec0 <platform_sleep+0x18>)
    4eb8:	4798      	blx	r3
    4eba:	e7fb      	b.n	4eb4 <platform_sleep+0xc>
    4ebc:	00001755 	.word	0x00001755
    4ec0:	00001781 	.word	0x00001781

00004ec4 <platform_wakeup_pin_status>:
    4ec4:	4b02      	ldr	r3, [pc, #8]	; (4ed0 <platform_wakeup_pin_status+0xc>)
    4ec6:	691b      	ldr	r3, [r3, #16]

bool platform_wakeup_pin_status(void)
{
	return (ble_wakeup_pin_level());
    4ec8:	2001      	movs	r0, #1
    4eca:	4018      	ands	r0, r3
}
    4ecc:	4770      	bx	lr
    4ece:	46c0      	nop			; (mov r8, r8)
    4ed0:	41004480 	.word	0x41004480

00004ed4 <platform_send_sync>:
{
    4ed4:	b570      	push	{r4, r5, r6, lr}
    4ed6:	0005      	movs	r5, r0
    4ed8:	000c      	movs	r4, r1
	ble_assert(data != NULL);
    4eda:	2800      	cmp	r0, #0
    4edc:	d004      	beq.n	4ee8 <platform_send_sync+0x14>
	ble_assert(!((len == 0) || (len > 65535)));
    4ede:	1e4b      	subs	r3, r1, #1
    4ee0:	4a09      	ldr	r2, [pc, #36]	; (4f08 <platform_send_sync+0x34>)
    4ee2:	4293      	cmp	r3, r2
    4ee4:	d901      	bls.n	4eea <platform_send_sync+0x16>
    4ee6:	e7fe      	b.n	4ee6 <platform_send_sync+0x12>
    4ee8:	e7fe      	b.n	4ee8 <platform_send_sync+0x14>
	if(!platform_wakeup_pin_status())
    4eea:	4b08      	ldr	r3, [pc, #32]	; (4f0c <platform_send_sync+0x38>)
    4eec:	4798      	blx	r3
    4eee:	2800      	cmp	r0, #0
    4ef0:	d105      	bne.n	4efe <platform_send_sync+0x2a>
		port_base->OUTSET.reg = pin_mask;
    4ef2:	2201      	movs	r2, #1
    4ef4:	4b06      	ldr	r3, [pc, #24]	; (4f10 <platform_send_sync+0x3c>)
    4ef6:	619a      	str	r2, [r3, #24]
		delay_ms(5);
    4ef8:	3005      	adds	r0, #5
    4efa:	4b06      	ldr	r3, [pc, #24]	; (4f14 <platform_send_sync+0x40>)
    4efc:	4798      	blx	r3
	serial_drv_send(data, (uint16_t)len);
    4efe:	b2a1      	uxth	r1, r4
    4f00:	0028      	movs	r0, r5
    4f02:	4b05      	ldr	r3, [pc, #20]	; (4f18 <platform_send_sync+0x44>)
    4f04:	4798      	blx	r3
}
    4f06:	bd70      	pop	{r4, r5, r6, pc}
    4f08:	0000fffe 	.word	0x0000fffe
    4f0c:	00004ec5 	.word	0x00004ec5
    4f10:	41004480 	.word	0x41004480
    4f14:	00001781 	.word	0x00001781
    4f18:	000048e1 	.word	0x000048e1

00004f1c <platform_wait_for_signal>:
{
	ble_wakeup_pin_set_high();
}

void platform_wait_for_signal(uint32_t count, void **signal_handler_list)
{
    4f1c:	b570      	push	{r4, r5, r6, lr}
    4f1e:	0006      	movs	r6, r0
    4f20:	000c      	movs	r4, r1
	uint32_t idx;
	bool signal_presence = false;
	os_signal_t **os_signal_list = (os_signal_t **)signal_handler_list;
	if (count > 0 && NULL != os_signal_list)
    4f22:	2800      	cmp	r0, #0
    4f24:	d010      	beq.n	4f48 <platform_wait_for_signal+0x2c>
    4f26:	2900      	cmp	r1, #0
    4f28:	d00e      	beq.n	4f48 <platform_wait_for_signal+0x2c>
					and Host MCU never process until it wakes up some other Host MCU interrupt source)
				3. Host MCU should not go to deep sleep until Host Wakeup line goes high (to avoid latencies)
				4. Host MCU should not go to deep sleep until BTLC1000 wakeup line goes low (to avoid latencies)
				5. In RTOS Task can yield until signals are triggered, But Host MCU should meet the above condition 
					before putting Host MCU to sleep */
					platform_enter_sleep();
    4f2a:	4d0a      	ldr	r5, [pc, #40]	; (4f54 <platform_wait_for_signal+0x38>)
    4f2c:	e00e      	b.n	4f4c <platform_wait_for_signal+0x30>
			for (idx = 0; idx < count; idx++)
    4f2e:	3101      	adds	r1, #1
    4f30:	3204      	adds	r2, #4
    4f32:	428e      	cmp	r6, r1
    4f34:	d009      	beq.n	4f4a <platform_wait_for_signal+0x2e>
				if ((NULL != os_signal_list[idx]) &&
    4f36:	6813      	ldr	r3, [r2, #0]
    4f38:	2b00      	cmp	r3, #0
    4f3a:	d0f8      	beq.n	4f2e <platform_wait_for_signal+0x12>
    4f3c:	6858      	ldr	r0, [r3, #4]
    4f3e:	2801      	cmp	r0, #1
    4f40:	d1f5      	bne.n	4f2e <platform_wait_for_signal+0x12>
				(1 == os_signal_list[idx]->signal_value))
    4f42:	681b      	ldr	r3, [r3, #0]
				(1 == os_signal_list[idx]->signal_usage) &&
    4f44:	2b01      	cmp	r3, #1
    4f46:	d1f2      	bne.n	4f2e <platform_wait_for_signal+0x12>
			}
		} while (!signal_presence);
	}
}
    4f48:	bd70      	pop	{r4, r5, r6, pc}
					platform_enter_sleep();
    4f4a:	47a8      	blx	r5
    4f4c:	0022      	movs	r2, r4
{
    4f4e:	2100      	movs	r1, #0
    4f50:	e7f1      	b.n	4f36 <platform_wait_for_signal+0x1a>
    4f52:	46c0      	nop			; (mov r8, r8)
    4f54:	00004e11 	.word	0x00004e11

00004f58 <platform_create_signal>:
void *platform_create_signal(void)
{
	uint32_t idx;
	for (idx = 0; idx < sizeof(platform_os_signals) / sizeof(os_signal_t); idx++)
	{
		if (platform_os_signals[idx].signal_usage == 0)
    4f58:	4b0c      	ldr	r3, [pc, #48]	; (4f8c <platform_create_signal+0x34>)
    4f5a:	685b      	ldr	r3, [r3, #4]
    4f5c:	2b00      	cmp	r3, #0
    4f5e:	d00c      	beq.n	4f7a <platform_create_signal+0x22>
    4f60:	4b0a      	ldr	r3, [pc, #40]	; (4f8c <platform_create_signal+0x34>)
    4f62:	68db      	ldr	r3, [r3, #12]
    4f64:	2b00      	cmp	r3, #0
    4f66:	d007      	beq.n	4f78 <platform_create_signal+0x20>
    4f68:	4b08      	ldr	r3, [pc, #32]	; (4f8c <platform_create_signal+0x34>)
    4f6a:	695b      	ldr	r3, [r3, #20]
			platform_os_signals[idx].signal_usage = 1;
			platform_os_signals[idx].signal_value = 0;
			return &platform_os_signals[idx];
		}
	}
	return NULL;
    4f6c:	2000      	movs	r0, #0
		if (platform_os_signals[idx].signal_usage == 0)
    4f6e:	2b00      	cmp	r3, #0
    4f70:	d000      	beq.n	4f74 <platform_create_signal+0x1c>
}
    4f72:	4770      	bx	lr
	for (idx = 0; idx < sizeof(platform_os_signals) / sizeof(os_signal_t); idx++)
    4f74:	3302      	adds	r3, #2
    4f76:	e000      	b.n	4f7a <platform_create_signal+0x22>
    4f78:	2301      	movs	r3, #1
			platform_os_signals[idx].signal_usage = 1;
    4f7a:	4a04      	ldr	r2, [pc, #16]	; (4f8c <platform_create_signal+0x34>)
    4f7c:	00db      	lsls	r3, r3, #3
    4f7e:	18d0      	adds	r0, r2, r3
    4f80:	2101      	movs	r1, #1
    4f82:	6041      	str	r1, [r0, #4]
			platform_os_signals[idx].signal_value = 0;
    4f84:	2100      	movs	r1, #0
    4f86:	5099      	str	r1, [r3, r2]
			return &platform_os_signals[idx];
    4f88:	e7f3      	b.n	4f72 <platform_create_signal+0x1a>
    4f8a:	46c0      	nop			; (mov r8, r8)
    4f8c:	2000223c 	.word	0x2000223c

00004f90 <platform_delete_signal>:

void platform_delete_signal(void *signal_handler)
{
	os_signal_t *os_signal_instance = (os_signal_t *)signal_handler;
	if (NULL != os_signal_instance)
    4f90:	2800      	cmp	r0, #0
    4f92:	d002      	beq.n	4f9a <platform_delete_signal+0xa>
	{
		os_signal_instance->signal_usage = 0;
    4f94:	2300      	movs	r3, #0
    4f96:	6043      	str	r3, [r0, #4]
		os_signal_instance->signal_value = 0;
    4f98:	6003      	str	r3, [r0, #0]
	}
}
    4f9a:	4770      	bx	lr

00004f9c <platform_trigger_signal>:

void platform_trigger_signal(void *signal_handler)
{
	os_signal_t *os_signal_instance = (os_signal_t *)signal_handler;
	if ((NULL != os_signal_instance) &&
    4f9c:	2800      	cmp	r0, #0
    4f9e:	d002      	beq.n	4fa6 <platform_trigger_signal+0xa>
    4fa0:	6843      	ldr	r3, [r0, #4]
    4fa2:	2b01      	cmp	r3, #1
    4fa4:	d000      	beq.n	4fa8 <platform_trigger_signal+0xc>
	(1 == os_signal_instance->signal_usage))
	{
		os_signal_instance->signal_value = 1;
	}
}
    4fa6:	4770      	bx	lr
		os_signal_instance->signal_value = 1;
    4fa8:	6003      	str	r3, [r0, #0]
}
    4faa:	e7fc      	b.n	4fa6 <platform_trigger_signal+0xa>

00004fac <platform_reset_signal>:

void platform_reset_signal(void *signal_handler)
{
	os_signal_t *os_signal_instance = (os_signal_t *)signal_handler;
	if ((NULL != os_signal_instance) &&
    4fac:	2800      	cmp	r0, #0
    4fae:	d002      	beq.n	4fb6 <platform_reset_signal+0xa>
    4fb0:	6843      	ldr	r3, [r0, #4]
    4fb2:	2b01      	cmp	r3, #1
    4fb4:	d000      	beq.n	4fb8 <platform_reset_signal+0xc>
	(1 == os_signal_instance->signal_usage))
	{
		os_signal_instance->signal_value = 0;
	}
}
    4fb6:	4770      	bx	lr
		os_signal_instance->signal_value = 0;
    4fb8:	2300      	movs	r3, #0
    4fba:	6003      	str	r3, [r0, #0]
}
    4fbc:	e7fb      	b.n	4fb6 <platform_reset_signal+0xa>
	...

00004fc0 <ble_connected_cb>:
	}
}

/* Callback registered for AT_BLE_CONNECTED event*/
static at_ble_status_t ble_connected_cb (void *param)
{
    4fc0:	b510      	push	{r4, lr}
	at_ble_connected_t *connected = (at_ble_connected_t *)param;
	DBG_LOG("Application connected ");
    4fc2:	4805      	ldr	r0, [pc, #20]	; (4fd8 <ble_connected_cb+0x18>)
    4fc4:	4b05      	ldr	r3, [pc, #20]	; (4fdc <ble_connected_cb+0x1c>)
    4fc6:	4798      	blx	r3
    4fc8:	4805      	ldr	r0, [pc, #20]	; (4fe0 <ble_connected_cb+0x20>)
    4fca:	4b06      	ldr	r3, [pc, #24]	; (4fe4 <ble_connected_cb+0x24>)
    4fcc:	4798      	blx	r3
	connected_flag = true;
    4fce:	2201      	movs	r2, #1
    4fd0:	4b05      	ldr	r3, [pc, #20]	; (4fe8 <ble_connected_cb+0x28>)
    4fd2:	701a      	strb	r2, [r3, #0]
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;
}
    4fd4:	2000      	movs	r0, #0
    4fd6:	bd10      	pop	{r4, pc}
    4fd8:	0000bf48 	.word	0x0000bf48
    4fdc:	0000a435 	.word	0x0000a435
    4fe0:	0000c1a4 	.word	0x0000c1a4
    4fe4:	0000a319 	.word	0x0000a319
    4fe8:	20002258 	.word	0x20002258

00004fec <tc_callback_sensor>:
{
    4fec:	b530      	push	{r4, r5, lr}
    4fee:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    4ff0:	4b44      	ldr	r3, [pc, #272]	; (5104 <tc_callback_sensor+0x118>)
    4ff2:	6819      	ldr	r1, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    4ff4:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    4ff6:	b25b      	sxtb	r3, r3
    4ff8:	2b00      	cmp	r3, #0
    4ffa:	dbfb      	blt.n	4ff4 <tc_callback_sensor+0x8>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    4ffc:	690b      	ldr	r3, [r1, #16]
    4ffe:	221f      	movs	r2, #31
    5000:	4393      	bics	r3, r2
	adc_module->INPUTCTRL.reg =
    5002:	610b      	str	r3, [r1, #16]
    5004:	7e4b      	ldrb	r3, [r1, #25]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    5006:	b25b      	sxtb	r3, r3
    5008:	2b00      	cmp	r3, #0
    500a:	dbfb      	blt.n	5004 <tc_callback_sensor+0x18>
    500c:	7e4b      	ldrb	r3, [r1, #25]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    500e:	b25b      	sxtb	r3, r3
    5010:	2b00      	cmp	r3, #0
    5012:	dbfb      	blt.n	500c <tc_callback_sensor+0x20>
		/* Wait for synchronization */
	}

	/* Set new gain factor */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_GAIN_Msk) |
    5014:	690b      	ldr	r3, [r1, #16]
    5016:	4a3c      	ldr	r2, [pc, #240]	; (5108 <tc_callback_sensor+0x11c>)
    5018:	4013      	ands	r3, r2
	adc_module->INPUTCTRL.reg =
    501a:	610b      	str	r3, [r1, #16]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    501c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    501e:	b25b      	sxtb	r3, r3
    5020:	2b00      	cmp	r3, #0
    5022:	dbfb      	blt.n	501c <tc_callback_sensor+0x30>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_FLUSH;
    5024:	7b0b      	ldrb	r3, [r1, #12]
    5026:	2201      	movs	r2, #1
    5028:	4313      	orrs	r3, r2
    502a:	730b      	strb	r3, [r1, #12]
    502c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    502e:	b25b      	sxtb	r3, r3
    5030:	2b00      	cmp	r3, #0
    5032:	dbfb      	blt.n	502c <tc_callback_sensor+0x40>
    5034:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    5036:	b25b      	sxtb	r3, r3
    5038:	2b00      	cmp	r3, #0
    503a:	dbfb      	blt.n	5034 <tc_callback_sensor+0x48>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    503c:	7b0b      	ldrb	r3, [r1, #12]
    503e:	2202      	movs	r2, #2
    5040:	4313      	orrs	r3, r2
    5042:	730b      	strb	r3, [r1, #12]
    5044:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    5046:	b25b      	sxtb	r3, r3
    5048:	2b00      	cmp	r3, #0
    504a:	dbfb      	blt.n	5044 <tc_callback_sensor+0x58>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    504c:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    504e:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    5050:	2402      	movs	r4, #2
    5052:	e001      	b.n	5058 <tc_callback_sensor+0x6c>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    5054:	4210      	tst	r0, r2
    5056:	d10a      	bne.n	506e <tc_callback_sensor+0x82>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    5058:	7e0b      	ldrb	r3, [r1, #24]
    505a:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    505c:	0002      	movs	r2, r0
    505e:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    5060:	421d      	tst	r5, r3
    5062:	d000      	beq.n	5066 <tc_callback_sensor+0x7a>
		status_flags |= ADC_STATUS_WINDOW;
    5064:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    5066:	421c      	tst	r4, r3
    5068:	d0f4      	beq.n	5054 <tc_callback_sensor+0x68>
		status_flags |= ADC_STATUS_OVERRUN;
    506a:	432a      	orrs	r2, r5
    506c:	e7f2      	b.n	5054 <tc_callback_sensor+0x68>
    506e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    5070:	b25b      	sxtb	r3, r3
    5072:	2b00      	cmp	r3, #0
    5074:	dbfb      	blt.n	506e <tc_callback_sensor+0x82>
	*result = adc_module->RESULT.reg;
    5076:	8b4b      	ldrh	r3, [r1, #26]
    5078:	b29b      	uxth	r3, r3
    507a:	466a      	mov	r2, sp
    507c:	71d3      	strb	r3, [r2, #7]
    507e:	0a1b      	lsrs	r3, r3, #8
    5080:	7213      	strb	r3, [r2, #8]
	adc_module->INTFLAG.reg = int_flags;
    5082:	2301      	movs	r3, #1
    5084:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    5086:	7e0a      	ldrb	r2, [r1, #24]
    5088:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    508a:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    508c:	0750      	lsls	r0, r2, #29
    508e:	d501      	bpl.n	5094 <tc_callback_sensor+0xa8>
		status_flags |= ADC_STATUS_WINDOW;
    5090:	2002      	movs	r0, #2
    5092:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    5094:	0792      	lsls	r2, r2, #30
    5096:	d501      	bpl.n	509c <tc_callback_sensor+0xb0>
		status_flags |= ADC_STATUS_OVERRUN;
    5098:	2204      	movs	r2, #4
    509a:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    509c:	075b      	lsls	r3, r3, #29
    509e:	d501      	bpl.n	50a4 <tc_callback_sensor+0xb8>
	adc_module->INTFLAG.reg = int_flags;
    50a0:	2302      	movs	r3, #2
    50a2:	760b      	strb	r3, [r1, #24]
	write_buffer[write_buffer_counter] = result;
    50a4:	4d19      	ldr	r5, [pc, #100]	; (510c <tc_callback_sensor+0x120>)
    50a6:	4c1a      	ldr	r4, [pc, #104]	; (5110 <tc_callback_sensor+0x124>)
    50a8:	7823      	ldrb	r3, [r4, #0]
    50aa:	466a      	mov	r2, sp
    50ac:	3207      	adds	r2, #7
    50ae:	7812      	ldrb	r2, [r2, #0]
    50b0:	54ea      	strb	r2, [r5, r3]
	DBG_LOG("%d,%d",write_buffer[write_buffer_counter],write_buffer_counter);
    50b2:	4818      	ldr	r0, [pc, #96]	; (5114 <tc_callback_sensor+0x128>)
    50b4:	4b18      	ldr	r3, [pc, #96]	; (5118 <tc_callback_sensor+0x12c>)
    50b6:	4798      	blx	r3
    50b8:	7822      	ldrb	r2, [r4, #0]
    50ba:	5ca9      	ldrb	r1, [r5, r2]
    50bc:	4817      	ldr	r0, [pc, #92]	; (511c <tc_callback_sensor+0x130>)
    50be:	4b18      	ldr	r3, [pc, #96]	; (5120 <tc_callback_sensor+0x134>)
    50c0:	4798      	blx	r3
	write_buffer_counter += 1;
    50c2:	7823      	ldrb	r3, [r4, #0]
    50c4:	3301      	adds	r3, #1
    50c6:	b2db      	uxtb	r3, r3
    50c8:	7023      	strb	r3, [r4, #0]
	if (write_buffer_counter==AT25DFX_BUFFER_SIZE) {
    50ca:	2bb6      	cmp	r3, #182	; 0xb6
    50cc:	d001      	beq.n	50d2 <tc_callback_sensor+0xe6>
}
    50ce:	b003      	add	sp, #12
    50d0:	bd30      	pop	{r4, r5, pc}
		at25dfx_chip_write_buffer(&at25dfx_chip, memory_address, write_buffer, AT25DFX_BUFFER_SIZE);
    50d2:	4c14      	ldr	r4, [pc, #80]	; (5124 <tc_callback_sensor+0x138>)
    50d4:	23b6      	movs	r3, #182	; 0xb6
    50d6:	4a0d      	ldr	r2, [pc, #52]	; (510c <tc_callback_sensor+0x120>)
    50d8:	6821      	ldr	r1, [r4, #0]
    50da:	4813      	ldr	r0, [pc, #76]	; (5128 <tc_callback_sensor+0x13c>)
    50dc:	4d13      	ldr	r5, [pc, #76]	; (512c <tc_callback_sensor+0x140>)
    50de:	47a8      	blx	r5
		memory_address += AT25DFX_BUFFER_SIZE;
    50e0:	6823      	ldr	r3, [r4, #0]
    50e2:	33b6      	adds	r3, #182	; 0xb6
    50e4:	6023      	str	r3, [r4, #0]
		write_buffer_counter=0;
    50e6:	2200      	movs	r2, #0
    50e8:	4b09      	ldr	r3, [pc, #36]	; (5110 <tc_callback_sensor+0x124>)
    50ea:	701a      	strb	r2, [r3, #0]
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    50ec:	2280      	movs	r2, #128	; 0x80
    50ee:	05d2      	lsls	r2, r2, #23
    50f0:	4b0f      	ldr	r3, [pc, #60]	; (5130 <tc_callback_sensor+0x144>)
    50f2:	61da      	str	r2, [r3, #28]
		DBG_LOG("Page Saved!");
    50f4:	4807      	ldr	r0, [pc, #28]	; (5114 <tc_callback_sensor+0x128>)
    50f6:	4b08      	ldr	r3, [pc, #32]	; (5118 <tc_callback_sensor+0x12c>)
    50f8:	4798      	blx	r3
    50fa:	480e      	ldr	r0, [pc, #56]	; (5134 <tc_callback_sensor+0x148>)
    50fc:	4b08      	ldr	r3, [pc, #32]	; (5120 <tc_callback_sensor+0x134>)
    50fe:	4798      	blx	r3
}
    5100:	e7e5      	b.n	50ce <tc_callback_sensor+0xe2>
    5102:	46c0      	nop			; (mov r8, r8)
    5104:	200031fc 	.word	0x200031fc
    5108:	f0ffffff 	.word	0xf0ffffff
    510c:	2000231c 	.word	0x2000231c
    5110:	200023d2 	.word	0x200023d2
    5114:	0000bf48 	.word	0x0000bf48
    5118:	0000a435 	.word	0x0000a435
    511c:	0000c490 	.word	0x0000c490
    5120:	0000a319 	.word	0x0000a319
    5124:	20002260 	.word	0x20002260
    5128:	200031b0 	.word	0x200031b0
    512c:	00000319 	.word	0x00000319
    5130:	41004480 	.word	0x41004480
    5134:	0000c484 	.word	0x0000c484

00005138 <update_timestamp_char>:
		}
	}
}

/* Update the timestamp characteristic with the saved value */
static void update_timestamp_char(){
    5138:	b570      	push	{r4, r5, r6, lr}
	/* Write timestamp to timestamp characteristic */
	while(at25dfx_chip_read_buffer(&at25dfx_chip, 0, timestamp_buffer, TIMESTAMP_DATA_SIZE) != STATUS_OK);
    513a:	4e0a      	ldr	r6, [pc, #40]	; (5164 <update_timestamp_char+0x2c>)
    513c:	4d0a      	ldr	r5, [pc, #40]	; (5168 <update_timestamp_char+0x30>)
    513e:	4c0b      	ldr	r4, [pc, #44]	; (516c <update_timestamp_char+0x34>)
    5140:	2304      	movs	r3, #4
    5142:	0032      	movs	r2, r6
    5144:	2100      	movs	r1, #0
    5146:	0028      	movs	r0, r5
    5148:	47a0      	blx	r4
    514a:	2800      	cmp	r0, #0
    514c:	d1f8      	bne.n	5140 <update_timestamp_char+0x8>
	while(at_ble_characteristic_value_set(bruxa_service_characs[1].char_val_handle,
    514e:	4d05      	ldr	r5, [pc, #20]	; (5164 <update_timestamp_char+0x2c>)
    5150:	4e07      	ldr	r6, [pc, #28]	; (5170 <update_timestamp_char+0x38>)
    5152:	4c08      	ldr	r4, [pc, #32]	; (5174 <update_timestamp_char+0x3c>)
    5154:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    5156:	2204      	movs	r2, #4
    5158:	0029      	movs	r1, r5
    515a:	47a0      	blx	r4
    515c:	2800      	cmp	r0, #0
    515e:	d1f9      	bne.n	5154 <update_timestamp_char+0x1c>
	(uint32_t *)&timestamp_buffer[0], sizeof(uint32_t)) != AT_BLE_SUCCESS);
}
    5160:	bd70      	pop	{r4, r5, r6, pc}
    5162:	46c0      	nop			; (mov r8, r8)
    5164:	20002f50 	.word	0x20002f50
    5168:	200031b0 	.word	0x200031b0
    516c:	00000221 	.word	0x00000221
    5170:	20002f54 	.word	0x20002f54
    5174:	0000756d 	.word	0x0000756d

00005178 <send_battery_data>:
{
    5178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Adc *const adc_module = module_inst->hw;
    517a:	4b3a      	ldr	r3, [pc, #232]	; (5264 <send_battery_data+0xec>)
    517c:	6818      	ldr	r0, [r3, #0]
    517e:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    5180:	b25b      	sxtb	r3, r3
    5182:	2b00      	cmp	r3, #0
    5184:	dbfb      	blt.n	517e <send_battery_data+0x6>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    5186:	6903      	ldr	r3, [r0, #16]
    5188:	221f      	movs	r2, #31
    518a:	4393      	bics	r3, r2
    518c:	3a1c      	subs	r2, #28
    518e:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    5190:	6103      	str	r3, [r0, #16]
    5192:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    5194:	b25b      	sxtb	r3, r3
    5196:	2b00      	cmp	r3, #0
    5198:	dbfb      	blt.n	5192 <send_battery_data+0x1a>
    519a:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    519c:	b25b      	sxtb	r3, r3
    519e:	2b00      	cmp	r3, #0
    51a0:	dbfb      	blt.n	519a <send_battery_data+0x22>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_FLUSH;
    51a2:	7b03      	ldrb	r3, [r0, #12]
    51a4:	2201      	movs	r2, #1
    51a6:	4313      	orrs	r3, r2
    51a8:	7303      	strb	r3, [r0, #12]
    51aa:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    51ac:	b25b      	sxtb	r3, r3
    51ae:	2b00      	cmp	r3, #0
    51b0:	dbfb      	blt.n	51aa <send_battery_data+0x32>
    51b2:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    51b4:	b25b      	sxtb	r3, r3
    51b6:	2b00      	cmp	r3, #0
    51b8:	dbfb      	blt.n	51b2 <send_battery_data+0x3a>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    51ba:	7b03      	ldrb	r3, [r0, #12]
    51bc:	2202      	movs	r2, #2
    51be:	4313      	orrs	r3, r2
    51c0:	7303      	strb	r3, [r0, #12]
    51c2:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    51c4:	b25b      	sxtb	r3, r3
    51c6:	2b00      	cmp	r3, #0
    51c8:	dbfb      	blt.n	51c2 <send_battery_data+0x4a>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    51ca:	2101      	movs	r1, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    51cc:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    51ce:	2402      	movs	r4, #2
    51d0:	e001      	b.n	51d6 <send_battery_data+0x5e>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    51d2:	4211      	tst	r1, r2
    51d4:	d10a      	bne.n	51ec <send_battery_data+0x74>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    51d6:	7e03      	ldrb	r3, [r0, #24]
    51d8:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    51da:	000a      	movs	r2, r1
    51dc:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    51de:	421d      	tst	r5, r3
    51e0:	d000      	beq.n	51e4 <send_battery_data+0x6c>
		status_flags |= ADC_STATUS_WINDOW;
    51e2:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    51e4:	421c      	tst	r4, r3
    51e6:	d0f4      	beq.n	51d2 <send_battery_data+0x5a>
		status_flags |= ADC_STATUS_OVERRUN;
    51e8:	432a      	orrs	r2, r5
    51ea:	e7f2      	b.n	51d2 <send_battery_data+0x5a>
    51ec:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    51ee:	b25b      	sxtb	r3, r3
    51f0:	2b00      	cmp	r3, #0
    51f2:	dbfb      	blt.n	51ec <send_battery_data+0x74>
	*result = adc_module->RESULT.reg;
    51f4:	8b44      	ldrh	r4, [r0, #26]
    51f6:	b2a4      	uxth	r4, r4
	adc_module->INTFLAG.reg = int_flags;
    51f8:	2301      	movs	r3, #1
    51fa:	7603      	strb	r3, [r0, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    51fc:	7e02      	ldrb	r2, [r0, #24]
    51fe:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5200:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    5202:	0751      	lsls	r1, r2, #29
    5204:	d501      	bpl.n	520a <send_battery_data+0x92>
		status_flags |= ADC_STATUS_WINDOW;
    5206:	2102      	movs	r1, #2
    5208:	430b      	orrs	r3, r1
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    520a:	0792      	lsls	r2, r2, #30
    520c:	d501      	bpl.n	5212 <send_battery_data+0x9a>
		status_flags |= ADC_STATUS_OVERRUN;
    520e:	2204      	movs	r2, #4
    5210:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    5212:	075b      	lsls	r3, r3, #29
    5214:	d501      	bpl.n	521a <send_battery_data+0xa2>
	adc_module->INTFLAG.reg = int_flags;
    5216:	2302      	movs	r3, #2
    5218:	7603      	strb	r3, [r0, #24]
	battery_percent = (current_battery*220)/51-600; // Battery in percent where 127=3.7V=0 percent and 162 = 2.1/3.3=4.2V=100
    521a:	4d13      	ldr	r5, [pc, #76]	; (5268 <send_battery_data+0xf0>)
    521c:	20dc      	movs	r0, #220	; 0xdc
    521e:	4360      	muls	r0, r4
    5220:	2133      	movs	r1, #51	; 0x33
    5222:	4b12      	ldr	r3, [pc, #72]	; (526c <send_battery_data+0xf4>)
    5224:	4798      	blx	r3
    5226:	3858      	subs	r0, #88	; 0x58
    5228:	7028      	strb	r0, [r5, #0]
	DBG_LOG("Read Battery :: %d",current_battery);
    522a:	4e11      	ldr	r6, [pc, #68]	; (5270 <send_battery_data+0xf8>)
    522c:	0030      	movs	r0, r6
    522e:	4f11      	ldr	r7, [pc, #68]	; (5274 <send_battery_data+0xfc>)
    5230:	47b8      	blx	r7
    5232:	0021      	movs	r1, r4
    5234:	4810      	ldr	r0, [pc, #64]	; (5278 <send_battery_data+0x100>)
    5236:	4c11      	ldr	r4, [pc, #68]	; (527c <send_battery_data+0x104>)
    5238:	47a0      	blx	r4
	DBG_LOG("Changed Battery :: %d%%", battery_percent);
    523a:	0030      	movs	r0, r6
    523c:	47b8      	blx	r7
    523e:	7829      	ldrb	r1, [r5, #0]
    5240:	480f      	ldr	r0, [pc, #60]	; (5280 <send_battery_data+0x108>)
    5242:	47a0      	blx	r4
	ble_status = at_ble_characteristic_value_set(bruxa_service_characs[6].char_val_handle, &battery_percent, sizeof(uint8_t));
    5244:	4f0f      	ldr	r7, [pc, #60]	; (5284 <send_battery_data+0x10c>)
    5246:	26b4      	movs	r6, #180	; 0xb4
    5248:	0076      	lsls	r6, r6, #1
    524a:	5bb8      	ldrh	r0, [r7, r6]
    524c:	2201      	movs	r2, #1
    524e:	0029      	movs	r1, r5
    5250:	4b0d      	ldr	r3, [pc, #52]	; (5288 <send_battery_data+0x110>)
    5252:	4798      	blx	r3
    5254:	4c0d      	ldr	r4, [pc, #52]	; (528c <send_battery_data+0x114>)
    5256:	7020      	strb	r0, [r4, #0]
	ble_status = at_ble_notification_send(0,bruxa_service_characs[6].char_val_handle);
    5258:	5bb9      	ldrh	r1, [r7, r6]
    525a:	2000      	movs	r0, #0
    525c:	4b0c      	ldr	r3, [pc, #48]	; (5290 <send_battery_data+0x118>)
    525e:	4798      	blx	r3
    5260:	7020      	strb	r0, [r4, #0]
}
    5262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5264:	200031fc 	.word	0x200031fc
    5268:	200000cb 	.word	0x200000cb
    526c:	0000a065 	.word	0x0000a065
    5270:	0000bf48 	.word	0x0000bf48
    5274:	0000a435 	.word	0x0000a435
    5278:	0000c3ac 	.word	0x0000c3ac
    527c:	0000a319 	.word	0x0000a319
    5280:	0000c3c0 	.word	0x0000c3c0
    5284:	20002f54 	.word	0x20002f54
    5288:	0000756d 	.word	0x0000756d
    528c:	200031ac 	.word	0x200031ac
    5290:	0000773d 	.word	0x0000773d

00005294 <configure_tc_sensor>:
{
    5294:	b510      	push	{r4, lr}
    5296:	b08e      	sub	sp, #56	; 0x38

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    5298:	aa01      	add	r2, sp, #4
    529a:	2300      	movs	r3, #0
    529c:	2100      	movs	r1, #0
    529e:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    52a0:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    52a2:	2000      	movs	r0, #0
    52a4:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    52a6:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    52a8:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    52aa:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    52ac:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    52ae:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    52b0:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    52b2:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    52b4:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    52b6:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    52b8:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    52ba:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    52bc:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    52be:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    52c0:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
    52c2:	3304      	adds	r3, #4
    52c4:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source = GCLK_GENERATOR_3;
    52c6:	3b01      	subs	r3, #1
    52c8:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV64;
    52ca:	23a0      	movs	r3, #160	; 0xa0
    52cc:	00db      	lsls	r3, r3, #3
    52ce:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = 50; // 32000/64/10hz
    52d0:	2132      	movs	r1, #50	; 0x32
    52d2:	2329      	movs	r3, #41	; 0x29
    52d4:	54d1      	strb	r1, [r2, r3]
	tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
    52d6:	4c0c      	ldr	r4, [pc, #48]	; (5308 <configure_tc_sensor+0x74>)
    52d8:	490c      	ldr	r1, [pc, #48]	; (530c <configure_tc_sensor+0x78>)
    52da:	0020      	movs	r0, r4
    52dc:	4b0c      	ldr	r3, [pc, #48]	; (5310 <configure_tc_sensor+0x7c>)
    52de:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    52e0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    52e2:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    52e4:	b25b      	sxtb	r3, r3
    52e6:	2b00      	cmp	r3, #0
    52e8:	dbfb      	blt.n	52e2 <configure_tc_sensor+0x4e>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    52ea:	8813      	ldrh	r3, [r2, #0]
    52ec:	2102      	movs	r1, #2
    52ee:	430b      	orrs	r3, r1
    52f0:	8013      	strh	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    52f2:	4b05      	ldr	r3, [pc, #20]	; (5308 <configure_tc_sensor+0x74>)
    52f4:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    52f6:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    52f8:	b25b      	sxtb	r3, r3
    52fa:	2b00      	cmp	r3, #0
    52fc:	dbfb      	blt.n	52f6 <configure_tc_sensor+0x62>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    52fe:	2380      	movs	r3, #128	; 0x80
    5300:	7153      	strb	r3, [r2, #5]
}
    5302:	b00e      	add	sp, #56	; 0x38
    5304:	bd10      	pop	{r4, pc}
    5306:	46c0      	nop			; (mov r8, r8)
    5308:	20002f2c 	.word	0x20002f2c
    530c:	42002c00 	.word	0x42002c00
    5310:	00002dbd 	.word	0x00002dbd

00005314 <configure_tc_callbacks_sensor>:
{
    5314:	b510      	push	{r4, lr}
	tc_register_callback(&tc_instance, tc_callback_sensor,TC_CALLBACK_OVERFLOW);
    5316:	4c0c      	ldr	r4, [pc, #48]	; (5348 <configure_tc_callbacks_sensor+0x34>)
    5318:	2200      	movs	r2, #0
    531a:	490c      	ldr	r1, [pc, #48]	; (534c <configure_tc_callbacks_sensor+0x38>)
    531c:	0020      	movs	r0, r4
    531e:	4b0c      	ldr	r3, [pc, #48]	; (5350 <configure_tc_callbacks_sensor+0x3c>)
    5320:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    5322:	6820      	ldr	r0, [r4, #0]
    5324:	4b0b      	ldr	r3, [pc, #44]	; (5354 <configure_tc_callbacks_sensor+0x40>)
    5326:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    5328:	4b0b      	ldr	r3, [pc, #44]	; (5358 <configure_tc_callbacks_sensor+0x44>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    532a:	5c1a      	ldrb	r2, [r3, r0]
    532c:	231f      	movs	r3, #31
    532e:	4013      	ands	r3, r2
    5330:	2201      	movs	r2, #1
    5332:	0011      	movs	r1, r2
    5334:	4099      	lsls	r1, r3
    5336:	4b09      	ldr	r3, [pc, #36]	; (535c <configure_tc_callbacks_sensor+0x48>)
    5338:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    533a:	7e63      	ldrb	r3, [r4, #25]
    533c:	2101      	movs	r1, #1
    533e:	430b      	orrs	r3, r1
    5340:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    5342:	6823      	ldr	r3, [r4, #0]
    5344:	735a      	strb	r2, [r3, #13]
}
    5346:	bd10      	pop	{r4, pc}
    5348:	20002f2c 	.word	0x20002f2c
    534c:	00004fed 	.word	0x00004fed
    5350:	00002c99 	.word	0x00002c99
    5354:	00002d81 	.word	0x00002d81
    5358:	0000c498 	.word	0x0000c498
    535c:	e000e100 	.word	0xe000e100

00005360 <configure_adc>:
{
    5360:	b510      	push	{r4, lr}
    5362:	b08c      	sub	sp, #48	; 0x30
	adc_get_config_defaults(&config_adc);
    5364:	4668      	mov	r0, sp
    5366:	4b19      	ldr	r3, [pc, #100]	; (53cc <configure_adc+0x6c>)
    5368:	4798      	blx	r3
	config_adc.clock_source	   = GCLK_GENERATOR_1;
    536a:	2201      	movs	r2, #1
    536c:	466b      	mov	r3, sp
    536e:	701a      	strb	r2, [r3, #0]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV8;
    5370:	2380      	movs	r3, #128	; 0x80
    5372:	005b      	lsls	r3, r3, #1
    5374:	4669      	mov	r1, sp
    5376:	804b      	strh	r3, [r1, #2]
	config_adc.reference       = ADC_REFERENCE_INTVCC1;
    5378:	3bfe      	subs	r3, #254	; 0xfe
    537a:	704b      	strb	r3, [r1, #1]
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN0;
    537c:	2300      	movs	r3, #0
    537e:	730b      	strb	r3, [r1, #12]
	config_adc.gain_factor     = ADC_GAIN_FACTOR_1X;//ADC_GAIN_FACTOR_DIV2;
    5380:	9302      	str	r3, [sp, #8]
	config_adc.resolution      = ADC_RESOLUTION_8BIT;
    5382:	2130      	movs	r1, #48	; 0x30
    5384:	4668      	mov	r0, sp
    5386:	7101      	strb	r1, [r0, #4]
	config_adc.pin_scan.offset_start_scan = 0;
    5388:	3905      	subs	r1, #5
    538a:	5443      	strb	r3, [r0, r1]
	config_adc.pin_scan.inputs_to_scan = ADC_SAMPLES;
    538c:	332c      	adds	r3, #44	; 0x2c
    538e:	54c2      	strb	r2, [r0, r3]
	adc_init(&adc_instance, ADC, &config_adc);
    5390:	4c0f      	ldr	r4, [pc, #60]	; (53d0 <configure_adc+0x70>)
    5392:	466a      	mov	r2, sp
    5394:	490f      	ldr	r1, [pc, #60]	; (53d4 <configure_adc+0x74>)
    5396:	0020      	movs	r0, r4
    5398:	4b0f      	ldr	r3, [pc, #60]	; (53d8 <configure_adc+0x78>)
    539a:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    539c:	6822      	ldr	r2, [r4, #0]
    539e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    53a0:	b25b      	sxtb	r3, r3
    53a2:	2b00      	cmp	r3, #0
    53a4:	dbfb      	blt.n	539e <configure_adc+0x3e>
    53a6:	2180      	movs	r1, #128	; 0x80
    53a8:	0409      	lsls	r1, r1, #16
    53aa:	4b0c      	ldr	r3, [pc, #48]	; (53dc <configure_adc+0x7c>)
    53ac:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    53ae:	230f      	movs	r3, #15
    53b0:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    53b2:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    53b4:	7813      	ldrb	r3, [r2, #0]
    53b6:	2102      	movs	r1, #2
    53b8:	430b      	orrs	r3, r1
    53ba:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    53bc:	4b04      	ldr	r3, [pc, #16]	; (53d0 <configure_adc+0x70>)
    53be:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    53c0:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    53c2:	b25b      	sxtb	r3, r3
    53c4:	2b00      	cmp	r3, #0
    53c6:	dbfb      	blt.n	53c0 <configure_adc+0x60>
}
    53c8:	b00c      	add	sp, #48	; 0x30
    53ca:	bd10      	pop	{r4, pc}
    53cc:	00000a7d 	.word	0x00000a7d
    53d0:	200031fc 	.word	0x200031fc
    53d4:	42004000 	.word	0x42004000
    53d8:	00000ac5 	.word	0x00000ac5
    53dc:	e000e100 	.word	0xe000e100

000053e0 <start_advertisement>:
void start_advertisement (void){
    53e0:	b530      	push	{r4, r5, lr}
    53e2:	b085      	sub	sp, #20
	ble_status = at_ble_adv_data_set(adv_data,sizeof(adv_data),NULL,0);
    53e4:	2300      	movs	r3, #0
    53e6:	2200      	movs	r2, #0
    53e8:	2107      	movs	r1, #7
    53ea:	4812      	ldr	r0, [pc, #72]	; (5434 <start_advertisement+0x54>)
    53ec:	4c12      	ldr	r4, [pc, #72]	; (5438 <start_advertisement+0x58>)
    53ee:	47a0      	blx	r4
    53f0:	4c12      	ldr	r4, [pc, #72]	; (543c <start_advertisement+0x5c>)
    53f2:	7020      	strb	r0, [r4, #0]
	DBG_LOG("Start advertising");
    53f4:	4812      	ldr	r0, [pc, #72]	; (5440 <start_advertisement+0x60>)
    53f6:	4b13      	ldr	r3, [pc, #76]	; (5444 <start_advertisement+0x64>)
    53f8:	4798      	blx	r3
    53fa:	4813      	ldr	r0, [pc, #76]	; (5448 <start_advertisement+0x68>)
    53fc:	4b13      	ldr	r3, [pc, #76]	; (544c <start_advertisement+0x6c>)
    53fe:	4798      	blx	r3
	ble_status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED,\
    5400:	2300      	movs	r3, #0
    5402:	9302      	str	r3, [sp, #8]
    5404:	4b12      	ldr	r3, [pc, #72]	; (5450 <start_advertisement+0x70>)
    5406:	9301      	str	r3, [sp, #4]
    5408:	23c8      	movs	r3, #200	; 0xc8
    540a:	00db      	lsls	r3, r3, #3
    540c:	9300      	str	r3, [sp, #0]
    540e:	2300      	movs	r3, #0
    5410:	2200      	movs	r2, #0
    5412:	2101      	movs	r1, #1
    5414:	2000      	movs	r0, #0
    5416:	4d0f      	ldr	r5, [pc, #60]	; (5454 <start_advertisement+0x74>)
    5418:	47a8      	blx	r5
    541a:	7020      	strb	r0, [r4, #0]
	if(ble_status != AT_BLE_SUCCESS){
    541c:	7823      	ldrb	r3, [r4, #0]
    541e:	2b00      	cmp	r3, #0
    5420:	d101      	bne.n	5426 <start_advertisement+0x46>
}
    5422:	b005      	add	sp, #20
    5424:	bd30      	pop	{r4, r5, pc}
		DBG_LOG("*** Failed to start advertisement");
    5426:	4806      	ldr	r0, [pc, #24]	; (5440 <start_advertisement+0x60>)
    5428:	4b06      	ldr	r3, [pc, #24]	; (5444 <start_advertisement+0x64>)
    542a:	4798      	blx	r3
    542c:	480a      	ldr	r0, [pc, #40]	; (5458 <start_advertisement+0x78>)
    542e:	4b07      	ldr	r3, [pc, #28]	; (544c <start_advertisement+0x6c>)
    5430:	4798      	blx	r3
}
    5432:	e7f6      	b.n	5422 <start_advertisement+0x42>
    5434:	200000c4 	.word	0x200000c4
    5438:	00006a0d 	.word	0x00006a0d
    543c:	200031ac 	.word	0x200031ac
    5440:	0000bf48 	.word	0x0000bf48
    5444:	0000a435 	.word	0x0000a435
    5448:	0000c44c 	.word	0x0000c44c
    544c:	0000a319 	.word	0x0000a319
    5450:	0000028f 	.word	0x0000028f
    5454:	00006a31 	.word	0x00006a31
    5458:	0000c460 	.word	0x0000c460

0000545c <ble_disconnected_cb>:
{
    545c:	b510      	push	{r4, lr}
	DBG_LOG("Application disconnected ");
    545e:	4806      	ldr	r0, [pc, #24]	; (5478 <ble_disconnected_cb+0x1c>)
    5460:	4b06      	ldr	r3, [pc, #24]	; (547c <ble_disconnected_cb+0x20>)
    5462:	4798      	blx	r3
    5464:	4806      	ldr	r0, [pc, #24]	; (5480 <ble_disconnected_cb+0x24>)
    5466:	4b07      	ldr	r3, [pc, #28]	; (5484 <ble_disconnected_cb+0x28>)
    5468:	4798      	blx	r3
	connected_flag = false;
    546a:	2200      	movs	r2, #0
    546c:	4b06      	ldr	r3, [pc, #24]	; (5488 <ble_disconnected_cb+0x2c>)
    546e:	701a      	strb	r2, [r3, #0]
	start_advertisement();
    5470:	4b06      	ldr	r3, [pc, #24]	; (548c <ble_disconnected_cb+0x30>)
    5472:	4798      	blx	r3
}
    5474:	2000      	movs	r0, #0
    5476:	bd10      	pop	{r4, pc}
    5478:	0000bf48 	.word	0x0000bf48
    547c:	0000a435 	.word	0x0000a435
    5480:	0000c1bc 	.word	0x0000c1bc
    5484:	0000a319 	.word	0x0000a319
    5488:	20002258 	.word	0x20002258
    548c:	000053e1 	.word	0x000053e1

00005490 <register_btlc1000_callbacks>:
void register_btlc1000_callbacks(void){
    5490:	b510      	push	{r4, lr}
	ble_status = ble_mgr_events_callback_handler(REGISTER_CALL_BACK,\
    5492:	4a08      	ldr	r2, [pc, #32]	; (54b4 <register_btlc1000_callbacks+0x24>)
    5494:	2100      	movs	r1, #0
    5496:	2000      	movs	r0, #0
    5498:	4b07      	ldr	r3, [pc, #28]	; (54b8 <register_btlc1000_callbacks+0x28>)
    549a:	4798      	blx	r3
    549c:	4b07      	ldr	r3, [pc, #28]	; (54bc <register_btlc1000_callbacks+0x2c>)
    549e:	7018      	strb	r0, [r3, #0]
	if (ble_status != true){
    54a0:	781b      	ldrb	r3, [r3, #0]
    54a2:	2b01      	cmp	r3, #1
    54a4:	d005      	beq.n	54b2 <register_btlc1000_callbacks+0x22>
		DBG_LOG("##Error when Registering ATBTLC1000 callbacks");
    54a6:	4806      	ldr	r0, [pc, #24]	; (54c0 <register_btlc1000_callbacks+0x30>)
    54a8:	4b06      	ldr	r3, [pc, #24]	; (54c4 <register_btlc1000_callbacks+0x34>)
    54aa:	4798      	blx	r3
    54ac:	4806      	ldr	r0, [pc, #24]	; (54c8 <register_btlc1000_callbacks+0x38>)
    54ae:	4b07      	ldr	r3, [pc, #28]	; (54cc <register_btlc1000_callbacks+0x3c>)
    54b0:	4798      	blx	r3
}
    54b2:	bd10      	pop	{r4, pc}
    54b4:	0000c12c 	.word	0x0000c12c
    54b8:	00003b7d 	.word	0x00003b7d
    54bc:	200031ac 	.word	0x200031ac
    54c0:	0000bf48 	.word	0x0000bf48
    54c4:	0000a435 	.word	0x0000a435
    54c8:	0000c37c 	.word	0x0000c37c
    54cc:	0000a319 	.word	0x0000a319

000054d0 <bruxa_service_init>:
void bruxa_service_init(void) {
    54d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    54d2:	46de      	mov	lr, fp
    54d4:	4657      	mov	r7, sl
    54d6:	464e      	mov	r6, r9
    54d8:	4645      	mov	r5, r8
    54da:	b5e0      	push	{r5, r6, r7, lr}
    54dc:	b0b5      	sub	sp, #212	; 0xd4
	uint8_t serv_uuid[] = {BRUXA_SERVICE_UUID};
    54de:	a92b      	add	r1, sp, #172	; 0xac
    54e0:	4bb9      	ldr	r3, [pc, #740]	; (57c8 <bruxa_service_init+0x2f8>)
    54e2:	000a      	movs	r2, r1
    54e4:	0018      	movs	r0, r3
    54e6:	c870      	ldmia	r0!, {r4, r5, r6}
    54e8:	c270      	stmia	r2!, {r4, r5, r6}
    54ea:	6800      	ldr	r0, [r0, #0]
    54ec:	6010      	str	r0, [r2, #0]
	uint8_t charac0_uuid[] = {PRESSURE_CHAR_UUID};
    54ee:	aa27      	add	r2, sp, #156	; 0x9c
    54f0:	4690      	mov	r8, r2
    54f2:	001a      	movs	r2, r3
    54f4:	3210      	adds	r2, #16
    54f6:	4640      	mov	r0, r8
    54f8:	ca70      	ldmia	r2!, {r4, r5, r6}
    54fa:	c070      	stmia	r0!, {r4, r5, r6}
    54fc:	6812      	ldr	r2, [r2, #0]
    54fe:	6002      	str	r2, [r0, #0]
	uint8_t charac1_uuid[] = {TIMESTAMP_CHAR_UUID};
    5500:	aa23      	add	r2, sp, #140	; 0x8c
    5502:	4691      	mov	r9, r2
    5504:	001a      	movs	r2, r3
    5506:	3220      	adds	r2, #32
    5508:	4648      	mov	r0, r9
    550a:	ca70      	ldmia	r2!, {r4, r5, r6}
    550c:	c070      	stmia	r0!, {r4, r5, r6}
    550e:	6812      	ldr	r2, [r2, #0]
    5510:	6002      	str	r2, [r0, #0]
	uint8_t charac2_uuid[] = {RECORD_CHAR_UUID};
    5512:	001a      	movs	r2, r3
    5514:	3230      	adds	r2, #48	; 0x30
    5516:	a81f      	add	r0, sp, #124	; 0x7c
    5518:	ca70      	ldmia	r2!, {r4, r5, r6}
    551a:	c070      	stmia	r0!, {r4, r5, r6}
    551c:	6812      	ldr	r2, [r2, #0]
    551e:	6002      	str	r2, [r0, #0]
	uint8_t charac3_uuid[] = {SYNC_CHAR_UUID};
    5520:	001a      	movs	r2, r3
    5522:	3240      	adds	r2, #64	; 0x40
    5524:	a81b      	add	r0, sp, #108	; 0x6c
    5526:	ca70      	ldmia	r2!, {r4, r5, r6}
    5528:	c070      	stmia	r0!, {r4, r5, r6}
    552a:	6812      	ldr	r2, [r2, #0]
    552c:	6002      	str	r2, [r0, #0]
	uint8_t charac4_uuid[] = {STOP_SYNC_CHAR_UUID};
    552e:	001a      	movs	r2, r3
    5530:	3250      	adds	r2, #80	; 0x50
    5532:	a817      	add	r0, sp, #92	; 0x5c
    5534:	ca70      	ldmia	r2!, {r4, r5, r6}
    5536:	c070      	stmia	r0!, {r4, r5, r6}
    5538:	6812      	ldr	r2, [r2, #0]
    553a:	6002      	str	r2, [r0, #0]
	uint8_t charac5_uuid[] = {PRESSURE_READ_CHAR_UUID};
    553c:	001a      	movs	r2, r3
    553e:	3260      	adds	r2, #96	; 0x60
    5540:	a813      	add	r0, sp, #76	; 0x4c
    5542:	ca70      	ldmia	r2!, {r4, r5, r6}
    5544:	c070      	stmia	r0!, {r4, r5, r6}
    5546:	6812      	ldr	r2, [r2, #0]
    5548:	6002      	str	r2, [r0, #0]
	uint8_t charac6_uuid[] = {BATTERY_CHAR_UUID};
    554a:	3370      	adds	r3, #112	; 0x70
    554c:	aa0f      	add	r2, sp, #60	; 0x3c
    554e:	cb31      	ldmia	r3!, {r0, r4, r5}
    5550:	c231      	stmia	r2!, {r0, r4, r5}
    5552:	681b      	ldr	r3, [r3, #0]
    5554:	6013      	str	r3, [r2, #0]
	uint8_t charac7_uuid[] = {BATTERY_READ_CHAR_UUID};
    5556:	4b9d      	ldr	r3, [pc, #628]	; (57cc <bruxa_service_init+0x2fc>)
    5558:	aa0b      	add	r2, sp, #44	; 0x2c
    555a:	0018      	movs	r0, r3
    555c:	c870      	ldmia	r0!, {r4, r5, r6}
    555e:	c270      	stmia	r2!, {r4, r5, r6}
    5560:	6800      	ldr	r0, [r0, #0]
    5562:	6010      	str	r0, [r2, #0]
	uint8_t charac8_uuid[] = {STREAMING_CHAR_UUID};
    5564:	001a      	movs	r2, r3
    5566:	3210      	adds	r2, #16
    5568:	a807      	add	r0, sp, #28
    556a:	ca70      	ldmia	r2!, {r4, r5, r6}
    556c:	c070      	stmia	r0!, {r4, r5, r6}
    556e:	6812      	ldr	r2, [r2, #0]
    5570:	6002      	str	r2, [r0, #0]
	uint8_t charac9_uuid[] = {STREAM_DATA_CHAR_UUID};
    5572:	3320      	adds	r3, #32
    5574:	aa03      	add	r2, sp, #12
    5576:	cb31      	ldmia	r3!, {r0, r4, r5}
    5578:	c231      	stmia	r2!, {r0, r4, r5}
    557a:	681b      	ldr	r3, [r3, #0]
    557c:	6013      	str	r3, [r2, #0]
	bruxa_service_uuid.type = AT_BLE_UUID_128;
    557e:	2602      	movs	r6, #2
    5580:	466b      	mov	r3, sp
    5582:	22bc      	movs	r2, #188	; 0xbc
    5584:	189b      	adds	r3, r3, r2
    5586:	701e      	strb	r6, [r3, #0]
	memcpy(bruxa_service_uuid.uuid ,serv_uuid,16);
    5588:	2701      	movs	r7, #1
    558a:	3aac      	subs	r2, #172	; 0xac
    558c:	20bd      	movs	r0, #189	; 0xbd
    558e:	4468      	add	r0, sp
    5590:	4d8f      	ldr	r5, [pc, #572]	; (57d0 <bruxa_service_init+0x300>)
    5592:	47a8      	blx	r5
	bruxa_service_characs[0].user_desc = (uint8_t *)"Pressure";
    5594:	4c8f      	ldr	r4, [pc, #572]	; (57d4 <bruxa_service_init+0x304>)
    5596:	4b90      	ldr	r3, [pc, #576]	; (57d8 <bruxa_service_init+0x308>)
    5598:	6263      	str	r3, [r4, #36]	; 0x24
	bruxa_service_characs[0].user_desc_len = 8;
    559a:	2308      	movs	r3, #8
    559c:	8523      	strh	r3, [r4, #40]	; 0x28
	bruxa_service_characs[0].user_desc_max_len = 8;
    559e:	8563      	strh	r3, [r4, #42]	; 0x2a
	bruxa_service_characs[0].uuid.type = AT_BLE_UUID_128;
    55a0:	70a6      	strb	r6, [r4, #2]
	memcpy(bruxa_service_characs[0].uuid.uuid,charac0_uuid,16);
    55a2:	1ce0      	adds	r0, r4, #3
    55a4:	2210      	movs	r2, #16
    55a6:	4641      	mov	r1, r8
    55a8:	47a8      	blx	r5
	bruxa_service_characs[0].properties = AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY | AT_BLE_CHAR_WRITE;
    55aa:	231a      	movs	r3, #26
    55ac:	469b      	mov	fp, r3
    55ae:	82a3      	strh	r3, [r4, #20]
	bruxa_service_characs[0].value_max_len = AT25DFX_BUFFER_SIZE;
    55b0:	23b6      	movs	r3, #182	; 0xb6
    55b2:	83e3      	strh	r3, [r4, #30]
	bruxa_service_characs[0].value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);
    55b4:	2311      	movs	r3, #17
    55b6:	4698      	mov	r8, r3
    55b8:	330f      	adds	r3, #15
    55ba:	4642      	mov	r2, r8
    55bc:	54e2      	strb	r2, [r4, r3]
	bruxa_service_characs[1].user_desc = (uint8_t *)"Timestamp";
    55be:	4b87      	ldr	r3, [pc, #540]	; (57dc <bruxa_service_init+0x30c>)
    55c0:	6623      	str	r3, [r4, #96]	; 0x60
	bruxa_service_characs[1].user_desc_len = 9;
    55c2:	2309      	movs	r3, #9
    55c4:	469a      	mov	sl, r3
    55c6:	335b      	adds	r3, #91	; 0x5b
    55c8:	4652      	mov	r2, sl
    55ca:	52e2      	strh	r2, [r4, r3]
	bruxa_service_characs[1].user_desc_max_len = 9;
    55cc:	3302      	adds	r3, #2
    55ce:	52e2      	strh	r2, [r4, r3]
	bruxa_service_characs[1].uuid.type = AT_BLE_UUID_128;
    55d0:	3b28      	subs	r3, #40	; 0x28
    55d2:	54e6      	strb	r6, [r4, r3]
	memcpy(bruxa_service_characs[1].uuid.uuid,charac1_uuid,16);
    55d4:	0020      	movs	r0, r4
    55d6:	303f      	adds	r0, #63	; 0x3f
    55d8:	2210      	movs	r2, #16
    55da:	4649      	mov	r1, r9
    55dc:	47a8      	blx	r5
	bruxa_service_characs[1].properties = AT_BLE_CHAR_READ | AT_BLE_CHAR_WRITE;;
    55de:	230a      	movs	r3, #10
    55e0:	4699      	mov	r9, r3
    55e2:	3346      	adds	r3, #70	; 0x46
    55e4:	464a      	mov	r2, r9
    55e6:	52e2      	strh	r2, [r4, r3]
	bruxa_service_characs[1].value_max_len = sizeof(uint32_t);
    55e8:	330a      	adds	r3, #10
    55ea:	2204      	movs	r2, #4
    55ec:	52e2      	strh	r2, [r4, r3]
	bruxa_service_characs[1].value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);
    55ee:	3302      	adds	r3, #2
    55f0:	4642      	mov	r2, r8
    55f2:	54e2      	strb	r2, [r4, r3]
	bruxa_service_characs[2].user_desc = (uint8_t *)"Record";
    55f4:	4a7a      	ldr	r2, [pc, #488]	; (57e0 <bruxa_service_init+0x310>)
    55f6:	3340      	adds	r3, #64	; 0x40
    55f8:	50e2      	str	r2, [r4, r3]
	bruxa_service_characs[2].user_desc_len = 6;
    55fa:	3b96      	subs	r3, #150	; 0x96
    55fc:	22a0      	movs	r2, #160	; 0xa0
    55fe:	52a3      	strh	r3, [r4, r2]
	bruxa_service_characs[2].user_desc_max_len = 6;
    5600:	3202      	adds	r2, #2
    5602:	52a3      	strh	r3, [r4, r2]
	bruxa_service_characs[2].uuid.type = AT_BLE_UUID_128;
    5604:	3374      	adds	r3, #116	; 0x74
    5606:	54e6      	strb	r6, [r4, r3]
	memcpy(bruxa_service_characs[2].uuid.uuid,charac2_uuid,16);
    5608:	0020      	movs	r0, r4
    560a:	307b      	adds	r0, #123	; 0x7b
    560c:	3a92      	subs	r2, #146	; 0x92
    560e:	a91f      	add	r1, sp, #124	; 0x7c
    5610:	47a8      	blx	r5
	bruxa_service_characs[2].properties = AT_BLE_CHAR_READ | AT_BLE_CHAR_WRITE;
    5612:	238c      	movs	r3, #140	; 0x8c
    5614:	464a      	mov	r2, r9
    5616:	52e2      	strh	r2, [r4, r3]
	bruxa_service_characs[2].value_max_len = sizeof(uint8_t);
    5618:	330a      	adds	r3, #10
    561a:	52e7      	strh	r7, [r4, r3]
	bruxa_service_characs[2].value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);
    561c:	3302      	adds	r3, #2
    561e:	4642      	mov	r2, r8
    5620:	54e2      	strb	r2, [r4, r3]
	bruxa_service_characs[3].user_desc = (uint8_t *)"Sync";
    5622:	4a70      	ldr	r2, [pc, #448]	; (57e4 <bruxa_service_init+0x314>)
    5624:	3340      	adds	r3, #64	; 0x40
    5626:	50e2      	str	r2, [r4, r3]
	bruxa_service_characs[3].user_desc_len = 4;
    5628:	3304      	adds	r3, #4
    562a:	2204      	movs	r2, #4
    562c:	52e2      	strh	r2, [r4, r3]
	bruxa_service_characs[3].user_desc_max_len = 4;
    562e:	3302      	adds	r3, #2
    5630:	2204      	movs	r2, #4
    5632:	52e2      	strh	r2, [r4, r3]
	bruxa_service_characs[3].uuid.type = AT_BLE_UUID_128;
    5634:	3b28      	subs	r3, #40	; 0x28
    5636:	54e6      	strb	r6, [r4, r3]
	memcpy(bruxa_service_characs[3].uuid.uuid,charac3_uuid,16);
    5638:	0020      	movs	r0, r4
    563a:	30b7      	adds	r0, #183	; 0xb7
    563c:	2210      	movs	r2, #16
    563e:	a91b      	add	r1, sp, #108	; 0x6c
    5640:	47a8      	blx	r5
	bruxa_service_characs[3].properties = AT_BLE_CHAR_READ | AT_BLE_CHAR_WRITE;
    5642:	23c8      	movs	r3, #200	; 0xc8
    5644:	464a      	mov	r2, r9
    5646:	52e2      	strh	r2, [r4, r3]
	bruxa_service_characs[3].value_max_len = sizeof(uint8_t);
    5648:	330a      	adds	r3, #10
    564a:	52e7      	strh	r7, [r4, r3]
	bruxa_service_characs[3].value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);
    564c:	3302      	adds	r3, #2
    564e:	4642      	mov	r2, r8
    5650:	54e2      	strb	r2, [r4, r3]
	bruxa_service_characs[4].user_desc = (uint8_t *)"Stop Sync";
    5652:	4a65      	ldr	r2, [pc, #404]	; (57e8 <bruxa_service_init+0x318>)
    5654:	3340      	adds	r3, #64	; 0x40
    5656:	50e2      	str	r2, [r4, r3]
	bruxa_service_characs[4].user_desc_len = 9;
    5658:	3304      	adds	r3, #4
    565a:	4652      	mov	r2, sl
    565c:	52e2      	strh	r2, [r4, r3]
	bruxa_service_characs[4].user_desc_max_len = 9;
    565e:	3302      	adds	r3, #2
    5660:	52e2      	strh	r2, [r4, r3]
	bruxa_service_characs[4].uuid.type = AT_BLE_UUID_128;
    5662:	3b28      	subs	r3, #40	; 0x28
    5664:	54e6      	strb	r6, [r4, r3]
	memcpy(bruxa_service_characs[4].uuid.uuid,charac4_uuid,16);
    5666:	0020      	movs	r0, r4
    5668:	30f3      	adds	r0, #243	; 0xf3
    566a:	2210      	movs	r2, #16
    566c:	a917      	add	r1, sp, #92	; 0x5c
    566e:	47a8      	blx	r5
	bruxa_service_characs[4].properties = AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY | AT_BLE_CHAR_WRITE;
    5670:	2382      	movs	r3, #130	; 0x82
    5672:	005b      	lsls	r3, r3, #1
    5674:	465a      	mov	r2, fp
    5676:	52e2      	strh	r2, [r4, r3]
	bruxa_service_characs[4].value_max_len = sizeof(uint8_t);
    5678:	330a      	adds	r3, #10
    567a:	52e7      	strh	r7, [r4, r3]
	bruxa_service_characs[4].value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);
    567c:	3302      	adds	r3, #2
    567e:	4642      	mov	r2, r8
    5680:	54e2      	strb	r2, [r4, r3]
	bruxa_service_characs[5].user_desc = (uint8_t *)"Pressure Read";
    5682:	4a5a      	ldr	r2, [pc, #360]	; (57ec <bruxa_service_init+0x31c>)
    5684:	3340      	adds	r3, #64	; 0x40
    5686:	50e2      	str	r2, [r4, r3]
	bruxa_service_characs[5].user_desc_len = 13;
    5688:	3b44      	subs	r3, #68	; 0x44
    568a:	3bff      	subs	r3, #255	; 0xff
    568c:	22aa      	movs	r2, #170	; 0xaa
    568e:	0052      	lsls	r2, r2, #1
    5690:	52a3      	strh	r3, [r4, r2]
	bruxa_service_characs[5].user_desc_max_len = 13;
    5692:	3202      	adds	r2, #2
    5694:	52a3      	strh	r3, [r4, r2]
	bruxa_service_characs[5].uuid.type = AT_BLE_UUID_128;
    5696:	3322      	adds	r3, #34	; 0x22
    5698:	33ff      	adds	r3, #255	; 0xff
    569a:	54e6      	strb	r6, [r4, r3]
	memcpy(bruxa_service_characs[5].uuid.uuid,charac5_uuid,16);
    569c:	0020      	movs	r0, r4
    569e:	3030      	adds	r0, #48	; 0x30
    56a0:	30ff      	adds	r0, #255	; 0xff
    56a2:	3a47      	subs	r2, #71	; 0x47
    56a4:	3aff      	subs	r2, #255	; 0xff
    56a6:	a913      	add	r1, sp, #76	; 0x4c
    56a8:	47a8      	blx	r5
	bruxa_service_characs[5].properties = AT_BLE_CHAR_READ | AT_BLE_CHAR_WRITE;
    56aa:	23a0      	movs	r3, #160	; 0xa0
    56ac:	005b      	lsls	r3, r3, #1
    56ae:	464a      	mov	r2, r9
    56b0:	52e2      	strh	r2, [r4, r3]
	bruxa_service_characs[5].value_max_len = sizeof(uint8_t);
    56b2:	330a      	adds	r3, #10
    56b4:	52e7      	strh	r7, [r4, r3]
	bruxa_service_characs[5].value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);
    56b6:	3302      	adds	r3, #2
    56b8:	4642      	mov	r2, r8
    56ba:	54e2      	strb	r2, [r4, r3]
	bruxa_service_characs[6].user_desc = (uint8_t *)"Battery";
    56bc:	4a4c      	ldr	r2, [pc, #304]	; (57f0 <bruxa_service_init+0x320>)
    56be:	3340      	adds	r3, #64	; 0x40
    56c0:	50e2      	str	r2, [r4, r3]
	bruxa_service_characs[6].user_desc_len = 7;
    56c2:	3b86      	subs	r3, #134	; 0x86
    56c4:	3bff      	subs	r3, #255	; 0xff
    56c6:	22c8      	movs	r2, #200	; 0xc8
    56c8:	0052      	lsls	r2, r2, #1
    56ca:	52a3      	strh	r3, [r4, r2]
	bruxa_service_characs[6].user_desc_max_len = 7;
    56cc:	3202      	adds	r2, #2
    56ce:	52a3      	strh	r3, [r4, r2]
	bruxa_service_characs[6].uuid.type = AT_BLE_UUID_128;
    56d0:	3364      	adds	r3, #100	; 0x64
    56d2:	33ff      	adds	r3, #255	; 0xff
    56d4:	54e6      	strb	r6, [r4, r3]
	memcpy(bruxa_service_characs[6].uuid.uuid,charac6_uuid,16);
    56d6:	0020      	movs	r0, r4
    56d8:	306c      	adds	r0, #108	; 0x6c
    56da:	30ff      	adds	r0, #255	; 0xff
    56dc:	3a83      	subs	r2, #131	; 0x83
    56de:	3aff      	subs	r2, #255	; 0xff
    56e0:	a90f      	add	r1, sp, #60	; 0x3c
    56e2:	47a8      	blx	r5
	bruxa_service_characs[6].properties = AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY | AT_BLE_CHAR_WRITE;
    56e4:	23be      	movs	r3, #190	; 0xbe
    56e6:	005b      	lsls	r3, r3, #1
    56e8:	465a      	mov	r2, fp
    56ea:	52e2      	strh	r2, [r4, r3]
	bruxa_service_characs[6].value_max_len = sizeof(uint8_t);
    56ec:	330a      	adds	r3, #10
    56ee:	52e7      	strh	r7, [r4, r3]
	bruxa_service_characs[6].value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR);
    56f0:	3302      	adds	r3, #2
    56f2:	2201      	movs	r2, #1
    56f4:	54e2      	strb	r2, [r4, r3]
	bruxa_service_characs[7].user_desc = (uint8_t *)"Battery Read";
    56f6:	4a3f      	ldr	r2, [pc, #252]	; (57f4 <bruxa_service_init+0x324>)
    56f8:	3340      	adds	r3, #64	; 0x40
    56fa:	50e2      	str	r2, [r4, r3]
	bruxa_service_characs[7].user_desc_len = 12;
    56fc:	3bbd      	subs	r3, #189	; 0xbd
    56fe:	3bff      	subs	r3, #255	; 0xff
    5700:	22e6      	movs	r2, #230	; 0xe6
    5702:	0052      	lsls	r2, r2, #1
    5704:	52a3      	strh	r3, [r4, r2]
	bruxa_service_characs[7].user_desc_max_len = 12;
    5706:	3202      	adds	r2, #2
    5708:	52a3      	strh	r3, [r4, r2]
	bruxa_service_characs[7].uuid.type = AT_BLE_UUID_128;
    570a:	339b      	adds	r3, #155	; 0x9b
    570c:	33ff      	adds	r3, #255	; 0xff
    570e:	54e6      	strb	r6, [r4, r3]
	memcpy(bruxa_service_characs[7].uuid.uuid,charac7_uuid,16);
    5710:	0020      	movs	r0, r4
    5712:	30a8      	adds	r0, #168	; 0xa8
    5714:	30ff      	adds	r0, #255	; 0xff
    5716:	3abf      	subs	r2, #191	; 0xbf
    5718:	3aff      	subs	r2, #255	; 0xff
    571a:	a90b      	add	r1, sp, #44	; 0x2c
    571c:	47a8      	blx	r5
	bruxa_service_characs[7].properties = AT_BLE_CHAR_READ | AT_BLE_CHAR_WRITE;
    571e:	23dc      	movs	r3, #220	; 0xdc
    5720:	005b      	lsls	r3, r3, #1
    5722:	464a      	mov	r2, r9
    5724:	52e2      	strh	r2, [r4, r3]
	bruxa_service_characs[7].value_max_len = sizeof(uint8_t);
    5726:	330a      	adds	r3, #10
    5728:	52e7      	strh	r7, [r4, r3]
	bruxa_service_characs[7].value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);
    572a:	3302      	adds	r3, #2
    572c:	4642      	mov	r2, r8
    572e:	54e2      	strb	r2, [r4, r3]
	bruxa_service_characs[8].user_desc = (uint8_t *)"Streaming";
    5730:	4a31      	ldr	r2, [pc, #196]	; (57f8 <bruxa_service_init+0x328>)
    5732:	3340      	adds	r3, #64	; 0x40
    5734:	50e2      	str	r2, [r4, r3]
	bruxa_service_characs[8].user_desc_len = 9;
    5736:	3304      	adds	r3, #4
    5738:	4652      	mov	r2, sl
    573a:	52e2      	strh	r2, [r4, r3]
	bruxa_service_characs[8].user_desc_max_len = 9;
    573c:	4b2f      	ldr	r3, [pc, #188]	; (57fc <bruxa_service_init+0x32c>)
    573e:	52e2      	strh	r2, [r4, r3]
	bruxa_service_characs[8].uuid.type = AT_BLE_UUID_128;
    5740:	3b28      	subs	r3, #40	; 0x28
    5742:	54e6      	strb	r6, [r4, r3]
	memcpy(bruxa_service_characs[8].uuid.uuid,charac8_uuid,16);
    5744:	0020      	movs	r0, r4
    5746:	30e4      	adds	r0, #228	; 0xe4
    5748:	30ff      	adds	r0, #255	; 0xff
    574a:	2210      	movs	r2, #16
    574c:	a907      	add	r1, sp, #28
    574e:	47a8      	blx	r5
	bruxa_service_characs[8].properties = AT_BLE_CHAR_READ | AT_BLE_CHAR_WRITE;
    5750:	23fa      	movs	r3, #250	; 0xfa
    5752:	005b      	lsls	r3, r3, #1
    5754:	464a      	mov	r2, r9
    5756:	52e2      	strh	r2, [r4, r3]
	bruxa_service_characs[8].value_max_len = sizeof(uint8_t);
    5758:	330a      	adds	r3, #10
    575a:	52e7      	strh	r7, [r4, r3]
	bruxa_service_characs[8].value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);
    575c:	3302      	adds	r3, #2
    575e:	4642      	mov	r2, r8
    5760:	54e2      	strb	r2, [r4, r3]
	bruxa_service_characs[9].user_desc = (uint8_t *)"Stream Data";
    5762:	4a27      	ldr	r2, [pc, #156]	; (5800 <bruxa_service_init+0x330>)
    5764:	3340      	adds	r3, #64	; 0x40
    5766:	50e2      	str	r2, [r4, r3]
	bruxa_service_characs[9].user_desc_len = 11;
    5768:	230b      	movs	r3, #11
    576a:	2291      	movs	r2, #145	; 0x91
    576c:	0092      	lsls	r2, r2, #2
    576e:	52a3      	strh	r3, [r4, r2]
	bruxa_service_characs[9].user_desc_max_len = 11;
    5770:	4a24      	ldr	r2, [pc, #144]	; (5804 <bruxa_service_init+0x334>)
    5772:	52a3      	strh	r3, [r4, r2]
	bruxa_service_characs[9].uuid.type = AT_BLE_UUID_128;
    5774:	4b24      	ldr	r3, [pc, #144]	; (5808 <bruxa_service_init+0x338>)
    5776:	54e6      	strb	r6, [r4, r3]
	memcpy(bruxa_service_characs[9].uuid.uuid,charac9_uuid,16);
    5778:	4b24      	ldr	r3, [pc, #144]	; (580c <bruxa_service_init+0x33c>)
    577a:	18e0      	adds	r0, r4, r3
    577c:	2210      	movs	r2, #16
    577e:	a903      	add	r1, sp, #12
    5780:	47a8      	blx	r5
	bruxa_service_characs[9].properties = AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY | AT_BLE_CHAR_WRITE;
    5782:	238c      	movs	r3, #140	; 0x8c
    5784:	009b      	lsls	r3, r3, #2
    5786:	465a      	mov	r2, fp
    5788:	52e2      	strh	r2, [r4, r3]
	bruxa_service_characs[9].value_max_len = sizeof(uint8_t);
    578a:	4b21      	ldr	r3, [pc, #132]	; (5810 <bruxa_service_init+0x340>)
    578c:	52e7      	strh	r7, [r4, r3]
	bruxa_service_characs[9].value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR);
    578e:	3302      	adds	r3, #2
    5790:	2201      	movs	r2, #1
    5792:	54e2      	strb	r2, [r4, r3]
	if(at_ble_primary_service_define(&bruxa_service_uuid,\
    5794:	464b      	mov	r3, r9
    5796:	9301      	str	r3, [sp, #4]
    5798:	9400      	str	r4, [sp, #0]
    579a:	2300      	movs	r3, #0
    579c:	2200      	movs	r2, #0
    579e:	491d      	ldr	r1, [pc, #116]	; (5814 <bruxa_service_init+0x344>)
    57a0:	a82f      	add	r0, sp, #188	; 0xbc
    57a2:	4c1d      	ldr	r4, [pc, #116]	; (5818 <bruxa_service_init+0x348>)
    57a4:	47a0      	blx	r4
    57a6:	2800      	cmp	r0, #0
    57a8:	d106      	bne.n	57b8 <bruxa_service_init+0x2e8>
}
    57aa:	b035      	add	sp, #212	; 0xd4
    57ac:	bc3c      	pop	{r2, r3, r4, r5}
    57ae:	4690      	mov	r8, r2
    57b0:	4699      	mov	r9, r3
    57b2:	46a2      	mov	sl, r4
    57b4:	46ab      	mov	fp, r5
    57b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		DBG_LOG("Failed to Initialize custom environment service");
    57b8:	4818      	ldr	r0, [pc, #96]	; (581c <bruxa_service_init+0x34c>)
    57ba:	4b19      	ldr	r3, [pc, #100]	; (5820 <bruxa_service_init+0x350>)
    57bc:	4798      	blx	r3
    57be:	4819      	ldr	r0, [pc, #100]	; (5824 <bruxa_service_init+0x354>)
    57c0:	4b19      	ldr	r3, [pc, #100]	; (5828 <bruxa_service_init+0x358>)
    57c2:	4798      	blx	r3
}
    57c4:	e7f1      	b.n	57aa <bruxa_service_init+0x2da>
    57c6:	46c0      	nop			; (mov r8, r8)
    57c8:	0000c07c 	.word	0x0000c07c
    57cc:	0000c0fc 	.word	0x0000c0fc
    57d0:	0000a2f7 	.word	0x0000a2f7
    57d4:	20002f54 	.word	0x20002f54
    57d8:	0000c2b4 	.word	0x0000c2b4
    57dc:	0000c2c0 	.word	0x0000c2c0
    57e0:	0000c2cc 	.word	0x0000c2cc
    57e4:	0000c2d4 	.word	0x0000c2d4
    57e8:	0000c2dc 	.word	0x0000c2dc
    57ec:	0000c2e8 	.word	0x0000c2e8
    57f0:	0000c2f8 	.word	0x0000c2f8
    57f4:	0000c300 	.word	0x0000c300
    57f8:	0000c310 	.word	0x0000c310
    57fc:	0000020a 	.word	0x0000020a
    5800:	0000c31c 	.word	0x0000c31c
    5804:	00000246 	.word	0x00000246
    5808:	0000021e 	.word	0x0000021e
    580c:	0000021f 	.word	0x0000021f
    5810:	0000023a 	.word	0x0000023a
    5814:	20002f4a 	.word	0x20002f4a
    5818:	00007509 	.word	0x00007509
    581c:	0000bf48 	.word	0x0000bf48
    5820:	0000a435 	.word	0x0000a435
    5824:	0000c328 	.word	0x0000c328
    5828:	0000a319 	.word	0x0000a319

0000582c <check>:
	while(--n>0 && read_buffer[n]==255);
    582c:	20b5      	movs	r0, #181	; 0xb5
    582e:	4a05      	ldr	r2, [pc, #20]	; (5844 <check+0x18>)
    5830:	5c83      	ldrb	r3, [r0, r2]
    5832:	2bff      	cmp	r3, #255	; 0xff
    5834:	d102      	bne.n	583c <check+0x10>
    5836:	3801      	subs	r0, #1
    5838:	2800      	cmp	r0, #0
    583a:	d1f9      	bne.n	5830 <check+0x4>
	return n==0;
    583c:	4243      	negs	r3, r0
    583e:	4158      	adcs	r0, r3
    5840:	b2c0      	uxtb	r0, r0
}
    5842:	4770      	bx	lr
    5844:	20002264 	.word	0x20002264

00005848 <count_pages_saved>:
uint16_t count_pages_saved(){
    5848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    584a:	2504      	movs	r5, #4
	for (i=0; i<AT25DFX_SIZE/AT25DFX_BUFFER_SIZE; i++){
    584c:	2400      	movs	r4, #0
		at25dfx_chip_read_buffer(&at25dfx_chip, TIMESTAMP_DATA_SIZE+AT25DFX_BUFFER_SIZE*i,
    584e:	4e0f      	ldr	r6, [pc, #60]	; (588c <count_pages_saved+0x44>)
    5850:	4f0f      	ldr	r7, [pc, #60]	; (5890 <count_pages_saved+0x48>)
    5852:	23b6      	movs	r3, #182	; 0xb6
    5854:	0032      	movs	r2, r6
    5856:	0029      	movs	r1, r5
    5858:	480e      	ldr	r0, [pc, #56]	; (5894 <count_pages_saved+0x4c>)
    585a:	47b8      	blx	r7
		if (check(read_buffer, AT25DFX_BUFFER_SIZE)){
    585c:	21b6      	movs	r1, #182	; 0xb6
    585e:	0030      	movs	r0, r6
    5860:	4b0d      	ldr	r3, [pc, #52]	; (5898 <count_pages_saved+0x50>)
    5862:	4798      	blx	r3
    5864:	2800      	cmp	r0, #0
    5866:	d106      	bne.n	5876 <count_pages_saved+0x2e>
	for (i=0; i<AT25DFX_SIZE/AT25DFX_BUFFER_SIZE; i++){
    5868:	3401      	adds	r4, #1
    586a:	b2a4      	uxth	r4, r4
    586c:	35b6      	adds	r5, #182	; 0xb6
    586e:	4b0b      	ldr	r3, [pc, #44]	; (589c <count_pages_saved+0x54>)
    5870:	429c      	cmp	r4, r3
    5872:	d1ee      	bne.n	5852 <count_pages_saved+0xa>
    5874:	e009      	b.n	588a <count_pages_saved+0x42>
			last_page = i;
    5876:	4d0a      	ldr	r5, [pc, #40]	; (58a0 <count_pages_saved+0x58>)
    5878:	802c      	strh	r4, [r5, #0]
			DBG_LOG("Pages of data :: %d",last_page);
    587a:	480a      	ldr	r0, [pc, #40]	; (58a4 <count_pages_saved+0x5c>)
    587c:	4b0a      	ldr	r3, [pc, #40]	; (58a8 <count_pages_saved+0x60>)
    587e:	4798      	blx	r3
    5880:	8829      	ldrh	r1, [r5, #0]
    5882:	b289      	uxth	r1, r1
    5884:	4809      	ldr	r0, [pc, #36]	; (58ac <count_pages_saved+0x64>)
    5886:	4b0a      	ldr	r3, [pc, #40]	; (58b0 <count_pages_saved+0x68>)
    5888:	4798      	blx	r3
}
    588a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    588c:	20002264 	.word	0x20002264
    5890:	00000221 	.word	0x00000221
    5894:	200031b0 	.word	0x200031b0
    5898:	0000582d 	.word	0x0000582d
    589c:	00001576 	.word	0x00001576
    58a0:	2000225c 	.word	0x2000225c
    58a4:	0000bf48 	.word	0x0000bf48
    58a8:	0000a435 	.word	0x0000a435
    58ac:	0000c358 	.word	0x0000c358
    58b0:	0000a319 	.word	0x0000a319

000058b4 <send_pressure_data>:

/* Read next page of pressure write to pressure characteristic */
void send_pressure_data(void){
    58b4:	b570      	push	{r4, r5, r6, lr}
	
	if (current_page<last_page){
    58b6:	4b29      	ldr	r3, [pc, #164]	; (595c <send_pressure_data+0xa8>)
    58b8:	881b      	ldrh	r3, [r3, #0]
    58ba:	4a29      	ldr	r2, [pc, #164]	; (5960 <send_pressure_data+0xac>)
    58bc:	8812      	ldrh	r2, [r2, #0]
    58be:	b29b      	uxth	r3, r3
    58c0:	4293      	cmp	r3, r2
    58c2:	d22a      	bcs.n	591a <send_pressure_data+0x66>

		at25dfx_chip_read_buffer(&at25dfx_chip, TIMESTAMP_DATA_SIZE+AT25DFX_BUFFER_SIZE*(current_page), read_buffer, AT25DFX_BUFFER_SIZE);
    58c4:	4d25      	ldr	r5, [pc, #148]	; (595c <send_pressure_data+0xa8>)
    58c6:	8829      	ldrh	r1, [r5, #0]
    58c8:	4c26      	ldr	r4, [pc, #152]	; (5964 <send_pressure_data+0xb0>)
    58ca:	23b6      	movs	r3, #182	; 0xb6
    58cc:	4359      	muls	r1, r3
    58ce:	3104      	adds	r1, #4
    58d0:	0022      	movs	r2, r4
    58d2:	4825      	ldr	r0, [pc, #148]	; (5968 <send_pressure_data+0xb4>)
    58d4:	4e25      	ldr	r6, [pc, #148]	; (596c <send_pressure_data+0xb8>)
    58d6:	47b0      	blx	r6
		DBG_LOG("Reading data...");
    58d8:	4825      	ldr	r0, [pc, #148]	; (5970 <send_pressure_data+0xbc>)
    58da:	4b26      	ldr	r3, [pc, #152]	; (5974 <send_pressure_data+0xc0>)
    58dc:	4798      	blx	r3
    58de:	4826      	ldr	r0, [pc, #152]	; (5978 <send_pressure_data+0xc4>)
    58e0:	4b26      	ldr	r3, [pc, #152]	; (597c <send_pressure_data+0xc8>)
    58e2:	4798      	blx	r3
		/* Update attribute data base */
		ble_status = at_ble_characteristic_value_set(bruxa_service_characs[0].char_val_handle, (uint8_t *)&read_buffer[0], AT25DFX_BUFFER_SIZE);
    58e4:	4e26      	ldr	r6, [pc, #152]	; (5980 <send_pressure_data+0xcc>)
    58e6:	8830      	ldrh	r0, [r6, #0]
    58e8:	22b6      	movs	r2, #182	; 0xb6
    58ea:	0021      	movs	r1, r4
    58ec:	4b25      	ldr	r3, [pc, #148]	; (5984 <send_pressure_data+0xd0>)
    58ee:	4798      	blx	r3
    58f0:	4c25      	ldr	r4, [pc, #148]	; (5988 <send_pressure_data+0xd4>)
    58f2:	7020      	strb	r0, [r4, #0]
		ble_status = at_ble_notification_send(0,bruxa_service_characs[0].char_val_handle);
    58f4:	8831      	ldrh	r1, [r6, #0]
    58f6:	2000      	movs	r0, #0
    58f8:	4b24      	ldr	r3, [pc, #144]	; (598c <send_pressure_data+0xd8>)
    58fa:	4798      	blx	r3
    58fc:	7020      	strb	r0, [r4, #0]
		
		current_page++;
    58fe:	882b      	ldrh	r3, [r5, #0]
    5900:	3301      	adds	r3, #1
    5902:	b29b      	uxth	r3, r3
    5904:	802b      	strh	r3, [r5, #0]

		if(ble_status != AT_BLE_SUCCESS){
    5906:	7823      	ldrb	r3, [r4, #0]
    5908:	2b00      	cmp	r3, #0
    590a:	d01f      	beq.n	594c <send_pressure_data+0x98>
			DBG_LOG("fail to send update notification ");
    590c:	4818      	ldr	r0, [pc, #96]	; (5970 <send_pressure_data+0xbc>)
    590e:	4b19      	ldr	r3, [pc, #100]	; (5974 <send_pressure_data+0xc0>)
    5910:	4798      	blx	r3
    5912:	481f      	ldr	r0, [pc, #124]	; (5990 <send_pressure_data+0xdc>)
    5914:	4b19      	ldr	r3, [pc, #100]	; (597c <send_pressure_data+0xc8>)
    5916:	4798      	blx	r3
    5918:	e018      	b.n	594c <send_pressure_data+0x98>
		}
	}
	else{
		/* Change sync value to 0 to signify end of data on device */
		sync_stop_value[0] = 0;
    591a:	491e      	ldr	r1, [pc, #120]	; (5994 <send_pressure_data+0xe0>)
    591c:	2300      	movs	r3, #0
    591e:	700b      	strb	r3, [r1, #0]
		ble_status = at_ble_characteristic_value_set(bruxa_service_characs[4].char_val_handle, (uint8_t *)&sync_stop_value[0], sizeof(uint8_t));
    5920:	4e17      	ldr	r6, [pc, #92]	; (5980 <send_pressure_data+0xcc>)
    5922:	25f0      	movs	r5, #240	; 0xf0
    5924:	5b70      	ldrh	r0, [r6, r5]
    5926:	2201      	movs	r2, #1
    5928:	4b16      	ldr	r3, [pc, #88]	; (5984 <send_pressure_data+0xd0>)
    592a:	4798      	blx	r3
    592c:	4c16      	ldr	r4, [pc, #88]	; (5988 <send_pressure_data+0xd4>)
    592e:	7020      	strb	r0, [r4, #0]
		ble_status = at_ble_notification_send(0,bruxa_service_characs[4].char_val_handle);
    5930:	5b71      	ldrh	r1, [r6, r5]
    5932:	2000      	movs	r0, #0
    5934:	4b15      	ldr	r3, [pc, #84]	; (598c <send_pressure_data+0xd8>)
    5936:	4798      	blx	r3
    5938:	7020      	strb	r0, [r4, #0]
		if(ble_status != AT_BLE_SUCCESS){
    593a:	7823      	ldrb	r3, [r4, #0]
    593c:	2b00      	cmp	r3, #0
    593e:	d106      	bne.n	594e <send_pressure_data+0x9a>
			DBG_LOG("Fail to signify end of data on sync characteristic ");
		}
		DBG_LOG("End of data");
    5940:	480b      	ldr	r0, [pc, #44]	; (5970 <send_pressure_data+0xbc>)
    5942:	4b0c      	ldr	r3, [pc, #48]	; (5974 <send_pressure_data+0xc0>)
    5944:	4798      	blx	r3
    5946:	4814      	ldr	r0, [pc, #80]	; (5998 <send_pressure_data+0xe4>)
    5948:	4b0c      	ldr	r3, [pc, #48]	; (597c <send_pressure_data+0xc8>)
    594a:	4798      	blx	r3
	}
}
    594c:	bd70      	pop	{r4, r5, r6, pc}
			DBG_LOG("Fail to signify end of data on sync characteristic ");
    594e:	4808      	ldr	r0, [pc, #32]	; (5970 <send_pressure_data+0xbc>)
    5950:	4b08      	ldr	r3, [pc, #32]	; (5974 <send_pressure_data+0xc0>)
    5952:	4798      	blx	r3
    5954:	4811      	ldr	r0, [pc, #68]	; (599c <send_pressure_data+0xe8>)
    5956:	4b09      	ldr	r3, [pc, #36]	; (597c <send_pressure_data+0xc8>)
    5958:	4798      	blx	r3
    595a:	e7f1      	b.n	5940 <send_pressure_data+0x8c>
    595c:	2000225a 	.word	0x2000225a
    5960:	2000225c 	.word	0x2000225c
    5964:	20002264 	.word	0x20002264
    5968:	200031b0 	.word	0x200031b0
    596c:	00000221 	.word	0x00000221
    5970:	0000bf48 	.word	0x0000bf48
    5974:	0000a435 	.word	0x0000a435
    5978:	0000c3d8 	.word	0x0000c3d8
    597c:	0000a319 	.word	0x0000a319
    5980:	20002f54 	.word	0x20002f54
    5984:	0000756d 	.word	0x0000756d
    5988:	200031ac 	.word	0x200031ac
    598c:	0000773d 	.word	0x0000773d
    5990:	0000c3e8 	.word	0x0000c3e8
    5994:	20002f48 	.word	0x20002f48
    5998:	0000c440 	.word	0x0000c440
    599c:	0000c40c 	.word	0x0000c40c

000059a0 <bruxa_char_changed_event>:
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip,true);
}

/* Callback registered for char changed event*/
static at_ble_status_t bruxa_char_changed_event (void *param)
{
    59a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59a2:	46d6      	mov	lr, sl
    59a4:	464f      	mov	r7, r9
    59a6:	b580      	push	{r7, lr}
    59a8:	0004      	movs	r4, r0
	uint16_t length;
	at_ble_characteristic_changed_t *char_changed_param_handle = (at_ble_characteristic_changed_t *)param;
	
	/* Handle changes to record characteristic */
	if (bruxa_service_characs[2].char_val_handle == char_changed_param_handle->char_handle){
    59aa:	2378      	movs	r3, #120	; 0x78
    59ac:	4a70      	ldr	r2, [pc, #448]	; (5b70 <bruxa_char_changed_event+0x1d0>)
    59ae:	5ad0      	ldrh	r0, [r2, r3]
    59b0:	8863      	ldrh	r3, [r4, #2]
    59b2:	4283      	cmp	r3, r0
    59b4:	d023      	beq.n	59fe <bruxa_char_changed_event+0x5e>
			DBG_LOG("Fail to read recording value");
		}
	}
	
	/* Handle changes to sync characteristic */
	if (bruxa_service_characs[3].char_val_handle == char_changed_param_handle->char_handle){
    59b6:	23b4      	movs	r3, #180	; 0xb4
    59b8:	4a6d      	ldr	r2, [pc, #436]	; (5b70 <bruxa_char_changed_event+0x1d0>)
    59ba:	5ad0      	ldrh	r0, [r2, r3]
    59bc:	8863      	ldrh	r3, [r4, #2]
    59be:	4283      	cmp	r3, r0
    59c0:	d100      	bne.n	59c4 <bruxa_char_changed_event+0x24>
    59c2:	e092      	b.n	5aea <bruxa_char_changed_event+0x14a>
			DBG_LOG("Fail to read sync value");
		}
	}
	
	/* Handle changes to pressure read characteristic */
	if ((bruxa_service_characs[5].char_val_handle == char_changed_param_handle->char_handle)){
    59c4:	2396      	movs	r3, #150	; 0x96
    59c6:	005b      	lsls	r3, r3, #1
    59c8:	4a69      	ldr	r2, [pc, #420]	; (5b70 <bruxa_char_changed_event+0x1d0>)
    59ca:	5ad2      	ldrh	r2, [r2, r3]
    59cc:	8863      	ldrh	r3, [r4, #2]
    59ce:	429a      	cmp	r2, r3
    59d0:	d100      	bne.n	59d4 <bruxa_char_changed_event+0x34>
    59d2:	e0bb      	b.n	5b4c <bruxa_char_changed_event+0x1ac>
		send_pressure_data();
	}
	
	/* Handle changes to battery read characteristic */
	if ((bruxa_service_characs[7].char_val_handle == char_changed_param_handle->char_handle)){
    59d4:	23d2      	movs	r3, #210	; 0xd2
    59d6:	005b      	lsls	r3, r3, #1
    59d8:	4a65      	ldr	r2, [pc, #404]	; (5b70 <bruxa_char_changed_event+0x1d0>)
    59da:	5ad2      	ldrh	r2, [r2, r3]
    59dc:	8863      	ldrh	r3, [r4, #2]
    59de:	429a      	cmp	r2, r3
    59e0:	d100      	bne.n	59e4 <bruxa_char_changed_event+0x44>
    59e2:	e0b6      	b.n	5b52 <bruxa_char_changed_event+0x1b2>
		send_battery_data();
	}
	
	/* Handle changes to battery read characteristic */
	if ((bruxa_service_characs[8].char_val_handle == char_changed_param_handle->char_handle)){
    59e4:	23f0      	movs	r3, #240	; 0xf0
    59e6:	005b      	lsls	r3, r3, #1
    59e8:	4a61      	ldr	r2, [pc, #388]	; (5b70 <bruxa_char_changed_event+0x1d0>)
    59ea:	5ad2      	ldrh	r2, [r2, r3]
    59ec:	8863      	ldrh	r3, [r4, #2]
    59ee:	429a      	cmp	r2, r3
    59f0:	d100      	bne.n	59f4 <bruxa_char_changed_event+0x54>
    59f2:	e0b1      	b.n	5b58 <bruxa_char_changed_event+0x1b8>
			streaming = false;
		}
	}
	
	return AT_BLE_SUCCESS;
}
    59f4:	2000      	movs	r0, #0
    59f6:	bc0c      	pop	{r2, r3}
    59f8:	4691      	mov	r9, r2
    59fa:	469a      	mov	sl, r3
    59fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		at_ble_characteristic_value_get(bruxa_service_characs[2].char_val_handle, recording_value, length);
    59fe:	4d5d      	ldr	r5, [pc, #372]	; (5b74 <bruxa_char_changed_event+0x1d4>)
    5a00:	2200      	movs	r2, #0
    5a02:	0029      	movs	r1, r5
    5a04:	4b5c      	ldr	r3, [pc, #368]	; (5b78 <bruxa_char_changed_event+0x1d8>)
    5a06:	4798      	blx	r3
		DBG_LOG("Recording value :: %d",recording_value[0]);
    5a08:	485c      	ldr	r0, [pc, #368]	; (5b7c <bruxa_char_changed_event+0x1dc>)
    5a0a:	4b5d      	ldr	r3, [pc, #372]	; (5b80 <bruxa_char_changed_event+0x1e0>)
    5a0c:	4798      	blx	r3
    5a0e:	7829      	ldrb	r1, [r5, #0]
    5a10:	485c      	ldr	r0, [pc, #368]	; (5b84 <bruxa_char_changed_event+0x1e4>)
    5a12:	4b5d      	ldr	r3, [pc, #372]	; (5b88 <bruxa_char_changed_event+0x1e8>)
    5a14:	4798      	blx	r3
		if (recording_value[0]==49){
    5a16:	782b      	ldrb	r3, [r5, #0]
    5a18:	2b31      	cmp	r3, #49	; 0x31
    5a1a:	d01c      	beq.n	5a56 <bruxa_char_changed_event+0xb6>
	DBG_LOG("Stopping recording");
    5a1c:	4857      	ldr	r0, [pc, #348]	; (5b7c <bruxa_char_changed_event+0x1dc>)
    5a1e:	4b58      	ldr	r3, [pc, #352]	; (5b80 <bruxa_char_changed_event+0x1e0>)
    5a20:	4798      	blx	r3
    5a22:	485a      	ldr	r0, [pc, #360]	; (5b8c <bruxa_char_changed_event+0x1ec>)
    5a24:	4b58      	ldr	r3, [pc, #352]	; (5b88 <bruxa_char_changed_event+0x1e8>)
    5a26:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5a28:	4b59      	ldr	r3, [pc, #356]	; (5b90 <bruxa_char_changed_event+0x1f0>)
    5a2a:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5a2c:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    5a2e:	b25b      	sxtb	r3, r3
    5a30:	2b00      	cmp	r3, #0
    5a32:	dbfb      	blt.n	5a2c <bruxa_char_changed_event+0x8c>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    5a34:	2380      	movs	r3, #128	; 0x80
    5a36:	7153      	strb	r3, [r2, #5]
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip,true);
    5a38:	2101      	movs	r1, #1
    5a3a:	4856      	ldr	r0, [pc, #344]	; (5b94 <bruxa_char_changed_event+0x1f4>)
    5a3c:	4b56      	ldr	r3, [pc, #344]	; (5b98 <bruxa_char_changed_event+0x1f8>)
    5a3e:	4798      	blx	r3
		if (ble_status != AT_BLE_SUCCESS){
    5a40:	4b56      	ldr	r3, [pc, #344]	; (5b9c <bruxa_char_changed_event+0x1fc>)
    5a42:	781b      	ldrb	r3, [r3, #0]
    5a44:	2b00      	cmp	r3, #0
    5a46:	d0b6      	beq.n	59b6 <bruxa_char_changed_event+0x16>
			DBG_LOG("Fail to read recording value");
    5a48:	484c      	ldr	r0, [pc, #304]	; (5b7c <bruxa_char_changed_event+0x1dc>)
    5a4a:	4b4d      	ldr	r3, [pc, #308]	; (5b80 <bruxa_char_changed_event+0x1e0>)
    5a4c:	4798      	blx	r3
    5a4e:	4854      	ldr	r0, [pc, #336]	; (5ba0 <bruxa_char_changed_event+0x200>)
    5a50:	4b4d      	ldr	r3, [pc, #308]	; (5b88 <bruxa_char_changed_event+0x1e8>)
    5a52:	4798      	blx	r3
    5a54:	e7af      	b.n	59b6 <bruxa_char_changed_event+0x16>
	DBG_LOG("Starting to record");
    5a56:	4849      	ldr	r0, [pc, #292]	; (5b7c <bruxa_char_changed_event+0x1dc>)
    5a58:	4b49      	ldr	r3, [pc, #292]	; (5b80 <bruxa_char_changed_event+0x1e0>)
    5a5a:	4798      	blx	r3
    5a5c:	4851      	ldr	r0, [pc, #324]	; (5ba4 <bruxa_char_changed_event+0x204>)
    5a5e:	4b4a      	ldr	r3, [pc, #296]	; (5b88 <bruxa_char_changed_event+0x1e8>)
    5a60:	4798      	blx	r3
	while(at25dfx_chip_set_global_sector_protect(&at25dfx_chip,false)!=STATUS_OK);
    5a62:	4e4c      	ldr	r6, [pc, #304]	; (5b94 <bruxa_char_changed_event+0x1f4>)
    5a64:	4d4c      	ldr	r5, [pc, #304]	; (5b98 <bruxa_char_changed_event+0x1f8>)
    5a66:	2100      	movs	r1, #0
    5a68:	0030      	movs	r0, r6
    5a6a:	47a8      	blx	r5
    5a6c:	2800      	cmp	r0, #0
    5a6e:	d1fa      	bne.n	5a66 <bruxa_char_changed_event+0xc6>
	update_timestamp_char();
    5a70:	4b4d      	ldr	r3, [pc, #308]	; (5ba8 <bruxa_char_changed_event+0x208>)
    5a72:	4798      	blx	r3
	while(at25dfx_chip_erase(&at25dfx_chip)!=STATUS_OK);
    5a74:	4e47      	ldr	r6, [pc, #284]	; (5b94 <bruxa_char_changed_event+0x1f4>)
    5a76:	4d4d      	ldr	r5, [pc, #308]	; (5bac <bruxa_char_changed_event+0x20c>)
    5a78:	0030      	movs	r0, r6
    5a7a:	47a8      	blx	r5
    5a7c:	2800      	cmp	r0, #0
    5a7e:	d1fb      	bne.n	5a78 <bruxa_char_changed_event+0xd8>
	at_ble_characteristic_value_get(bruxa_service_characs[1].char_val_handle, timestamp_buffer, length);
    5a80:	4e4b      	ldr	r6, [pc, #300]	; (5bb0 <bruxa_char_changed_event+0x210>)
    5a82:	4b3b      	ldr	r3, [pc, #236]	; (5b70 <bruxa_char_changed_event+0x1d0>)
    5a84:	8f98      	ldrh	r0, [r3, #60]	; 0x3c
    5a86:	2200      	movs	r2, #0
    5a88:	0031      	movs	r1, r6
    5a8a:	4b3b      	ldr	r3, [pc, #236]	; (5b78 <bruxa_char_changed_event+0x1d8>)
    5a8c:	4798      	blx	r3
	DBG_LOG("Timestamp :: %d",timestamp_buffer[0]);
    5a8e:	483b      	ldr	r0, [pc, #236]	; (5b7c <bruxa_char_changed_event+0x1dc>)
    5a90:	4b3b      	ldr	r3, [pc, #236]	; (5b80 <bruxa_char_changed_event+0x1e0>)
    5a92:	469a      	mov	sl, r3
    5a94:	4798      	blx	r3
    5a96:	6831      	ldr	r1, [r6, #0]
    5a98:	4846      	ldr	r0, [pc, #280]	; (5bb4 <bruxa_char_changed_event+0x214>)
    5a9a:	4b3b      	ldr	r3, [pc, #236]	; (5b88 <bruxa_char_changed_event+0x1e8>)
    5a9c:	4699      	mov	r9, r3
    5a9e:	4798      	blx	r3
	memory_address = 0;
    5aa0:	4d45      	ldr	r5, [pc, #276]	; (5bb8 <bruxa_char_changed_event+0x218>)
    5aa2:	2700      	movs	r7, #0
    5aa4:	602f      	str	r7, [r5, #0]
	at25dfx_chip_write_buffer(&at25dfx_chip, memory_address, timestamp_buffer, TIMESTAMP_DATA_SIZE);
    5aa6:	2304      	movs	r3, #4
    5aa8:	0032      	movs	r2, r6
    5aaa:	2100      	movs	r1, #0
    5aac:	4839      	ldr	r0, [pc, #228]	; (5b94 <bruxa_char_changed_event+0x1f4>)
    5aae:	4e43      	ldr	r6, [pc, #268]	; (5bbc <bruxa_char_changed_event+0x21c>)
    5ab0:	47b0      	blx	r6
	DBG_LOG("Timestamp written to flash");
    5ab2:	4832      	ldr	r0, [pc, #200]	; (5b7c <bruxa_char_changed_event+0x1dc>)
    5ab4:	47d0      	blx	sl
    5ab6:	4842      	ldr	r0, [pc, #264]	; (5bc0 <bruxa_char_changed_event+0x220>)
    5ab8:	47c8      	blx	r9
	memory_address += TIMESTAMP_DATA_SIZE;
    5aba:	682b      	ldr	r3, [r5, #0]
    5abc:	3304      	adds	r3, #4
    5abe:	602b      	str	r3, [r5, #0]
	write_buffer_counter = 0;
    5ac0:	4b40      	ldr	r3, [pc, #256]	; (5bc4 <bruxa_char_changed_event+0x224>)
    5ac2:	701f      	strb	r7, [r3, #0]
	tc_set_count_value(&tc_instance,0);
    5ac4:	4d32      	ldr	r5, [pc, #200]	; (5b90 <bruxa_char_changed_event+0x1f0>)
    5ac6:	2100      	movs	r1, #0
    5ac8:	0028      	movs	r0, r5
    5aca:	4b3f      	ldr	r3, [pc, #252]	; (5bc8 <bruxa_char_changed_event+0x228>)
    5acc:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5ace:	682a      	ldr	r2, [r5, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5ad0:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    5ad2:	b25b      	sxtb	r3, r3
    5ad4:	2b00      	cmp	r3, #0
    5ad6:	dbfb      	blt.n	5ad0 <bruxa_char_changed_event+0x130>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    5ad8:	2300      	movs	r3, #0
    5ada:	7113      	strb	r3, [r2, #4]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5adc:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    5ade:	b25b      	sxtb	r3, r3
    5ae0:	2b00      	cmp	r3, #0
    5ae2:	dbfb      	blt.n	5adc <bruxa_char_changed_event+0x13c>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    5ae4:	2340      	movs	r3, #64	; 0x40
    5ae6:	7153      	strb	r3, [r2, #5]
    5ae8:	e7aa      	b.n	5a40 <bruxa_char_changed_event+0xa0>
		at_ble_characteristic_value_get(bruxa_service_characs[3].char_val_handle, sync_value, length);
    5aea:	4d38      	ldr	r5, [pc, #224]	; (5bcc <bruxa_char_changed_event+0x22c>)
    5aec:	2200      	movs	r2, #0
    5aee:	0029      	movs	r1, r5
    5af0:	4b21      	ldr	r3, [pc, #132]	; (5b78 <bruxa_char_changed_event+0x1d8>)
    5af2:	4798      	blx	r3
		DBG_LOG("Sync Value :: %d",sync_value[0]);
    5af4:	4821      	ldr	r0, [pc, #132]	; (5b7c <bruxa_char_changed_event+0x1dc>)
    5af6:	4b22      	ldr	r3, [pc, #136]	; (5b80 <bruxa_char_changed_event+0x1e0>)
    5af8:	4798      	blx	r3
    5afa:	7829      	ldrb	r1, [r5, #0]
    5afc:	4834      	ldr	r0, [pc, #208]	; (5bd0 <bruxa_char_changed_event+0x230>)
    5afe:	4b22      	ldr	r3, [pc, #136]	; (5b88 <bruxa_char_changed_event+0x1e8>)
    5b00:	4798      	blx	r3
		if (sync_value[0]==49){
    5b02:	782b      	ldrb	r3, [r5, #0]
    5b04:	2b31      	cmp	r3, #49	; 0x31
    5b06:	d011      	beq.n	5b2c <bruxa_char_changed_event+0x18c>
			DBG_LOG("Stopping sync");
    5b08:	481c      	ldr	r0, [pc, #112]	; (5b7c <bruxa_char_changed_event+0x1dc>)
    5b0a:	4b1d      	ldr	r3, [pc, #116]	; (5b80 <bruxa_char_changed_event+0x1e0>)
    5b0c:	4798      	blx	r3
    5b0e:	4831      	ldr	r0, [pc, #196]	; (5bd4 <bruxa_char_changed_event+0x234>)
    5b10:	4b1d      	ldr	r3, [pc, #116]	; (5b88 <bruxa_char_changed_event+0x1e8>)
    5b12:	4798      	blx	r3
		if (ble_status != AT_BLE_SUCCESS){
    5b14:	4b21      	ldr	r3, [pc, #132]	; (5b9c <bruxa_char_changed_event+0x1fc>)
    5b16:	781b      	ldrb	r3, [r3, #0]
    5b18:	2b00      	cmp	r3, #0
    5b1a:	d100      	bne.n	5b1e <bruxa_char_changed_event+0x17e>
    5b1c:	e752      	b.n	59c4 <bruxa_char_changed_event+0x24>
			DBG_LOG("Fail to read sync value");
    5b1e:	4817      	ldr	r0, [pc, #92]	; (5b7c <bruxa_char_changed_event+0x1dc>)
    5b20:	4b17      	ldr	r3, [pc, #92]	; (5b80 <bruxa_char_changed_event+0x1e0>)
    5b22:	4798      	blx	r3
    5b24:	482c      	ldr	r0, [pc, #176]	; (5bd8 <bruxa_char_changed_event+0x238>)
    5b26:	4b18      	ldr	r3, [pc, #96]	; (5b88 <bruxa_char_changed_event+0x1e8>)
    5b28:	4798      	blx	r3
    5b2a:	e74b      	b.n	59c4 <bruxa_char_changed_event+0x24>
			DBG_LOG("Starting to sync");
    5b2c:	4813      	ldr	r0, [pc, #76]	; (5b7c <bruxa_char_changed_event+0x1dc>)
    5b2e:	4b14      	ldr	r3, [pc, #80]	; (5b80 <bruxa_char_changed_event+0x1e0>)
    5b30:	4798      	blx	r3
    5b32:	482a      	ldr	r0, [pc, #168]	; (5bdc <bruxa_char_changed_event+0x23c>)
    5b34:	4b14      	ldr	r3, [pc, #80]	; (5b88 <bruxa_char_changed_event+0x1e8>)
    5b36:	4798      	blx	r3
			count_pages_saved();
    5b38:	4b29      	ldr	r3, [pc, #164]	; (5be0 <bruxa_char_changed_event+0x240>)
    5b3a:	4798      	blx	r3
			update_timestamp_char();
    5b3c:	4b1a      	ldr	r3, [pc, #104]	; (5ba8 <bruxa_char_changed_event+0x208>)
    5b3e:	4798      	blx	r3
			current_page = 0;
    5b40:	2200      	movs	r2, #0
    5b42:	4b28      	ldr	r3, [pc, #160]	; (5be4 <bruxa_char_changed_event+0x244>)
    5b44:	801a      	strh	r2, [r3, #0]
			send_pressure_data();
    5b46:	4b28      	ldr	r3, [pc, #160]	; (5be8 <bruxa_char_changed_event+0x248>)
    5b48:	4798      	blx	r3
    5b4a:	e7e3      	b.n	5b14 <bruxa_char_changed_event+0x174>
		send_pressure_data();
    5b4c:	4b26      	ldr	r3, [pc, #152]	; (5be8 <bruxa_char_changed_event+0x248>)
    5b4e:	4798      	blx	r3
    5b50:	e740      	b.n	59d4 <bruxa_char_changed_event+0x34>
		send_battery_data();
    5b52:	4b26      	ldr	r3, [pc, #152]	; (5bec <bruxa_char_changed_event+0x24c>)
    5b54:	4798      	blx	r3
    5b56:	e745      	b.n	59e4 <bruxa_char_changed_event+0x44>
		if (!streaming){
    5b58:	4b25      	ldr	r3, [pc, #148]	; (5bf0 <bruxa_char_changed_event+0x250>)
    5b5a:	781b      	ldrb	r3, [r3, #0]
    5b5c:	2b00      	cmp	r3, #0
    5b5e:	d003      	beq.n	5b68 <bruxa_char_changed_event+0x1c8>
			streaming = false;
    5b60:	2200      	movs	r2, #0
    5b62:	4b23      	ldr	r3, [pc, #140]	; (5bf0 <bruxa_char_changed_event+0x250>)
    5b64:	701a      	strb	r2, [r3, #0]
    5b66:	e745      	b.n	59f4 <bruxa_char_changed_event+0x54>
			streaming = true;
    5b68:	2201      	movs	r2, #1
    5b6a:	4b21      	ldr	r3, [pc, #132]	; (5bf0 <bruxa_char_changed_event+0x250>)
    5b6c:	701a      	strb	r2, [r3, #0]
    5b6e:	e741      	b.n	59f4 <bruxa_char_changed_event+0x54>
    5b70:	20002f54 	.word	0x20002f54
    5b74:	20002f4c 	.word	0x20002f4c
    5b78:	000075b5 	.word	0x000075b5
    5b7c:	0000bf48 	.word	0x0000bf48
    5b80:	0000a435 	.word	0x0000a435
    5b84:	0000c1d8 	.word	0x0000c1d8
    5b88:	0000a319 	.word	0x0000a319
    5b8c:	0000c230 	.word	0x0000c230
    5b90:	20002f2c 	.word	0x20002f2c
    5b94:	200031b0 	.word	0x200031b0
    5b98:	00000901 	.word	0x00000901
    5b9c:	200031ac 	.word	0x200031ac
    5ba0:	0000c244 	.word	0x0000c244
    5ba4:	0000c1f0 	.word	0x0000c1f0
    5ba8:	00005139 	.word	0x00005139
    5bac:	00000755 	.word	0x00000755
    5bb0:	20002f50 	.word	0x20002f50
    5bb4:	0000c204 	.word	0x0000c204
    5bb8:	20002260 	.word	0x20002260
    5bbc:	00000319 	.word	0x00000319
    5bc0:	0000c214 	.word	0x0000c214
    5bc4:	200023d2 	.word	0x200023d2
    5bc8:	00002ffd 	.word	0x00002ffd
    5bcc:	200031f8 	.word	0x200031f8
    5bd0:	0000c264 	.word	0x0000c264
    5bd4:	0000c28c 	.word	0x0000c28c
    5bd8:	0000c29c 	.word	0x0000c29c
    5bdc:	0000c278 	.word	0x0000c278
    5be0:	00005849 	.word	0x00005849
    5be4:	2000225a 	.word	0x2000225a
    5be8:	000058b5 	.word	0x000058b5
    5bec:	00005179 	.word	0x00005179
    5bf0:	2000231a 	.word	0x2000231a

00005bf4 <register_gatt_server_callbacks>:
static const ble_gatt_server_event_cb_t app_gatt_server_handle = {
	.characteristic_changed = bruxa_char_changed_event
};

/* Register GATT callbacks at BLE manager level*/
void register_gatt_server_callbacks(void){
    5bf4:	b510      	push	{r4, lr}
	/* Register GAP Callbacks */
	DBG_LOG_DEV("*** Assignment 4.1: Register GATT Server callbacks");
	ble_status = ble_mgr_events_callback_handler(REGISTER_CALL_BACK,\
    5bf6:	4a08      	ldr	r2, [pc, #32]	; (5c18 <register_gatt_server_callbacks+0x24>)
    5bf8:	2102      	movs	r1, #2
    5bfa:	2000      	movs	r0, #0
    5bfc:	4b07      	ldr	r3, [pc, #28]	; (5c1c <register_gatt_server_callbacks+0x28>)
    5bfe:	4798      	blx	r3
    5c00:	4b07      	ldr	r3, [pc, #28]	; (5c20 <register_gatt_server_callbacks+0x2c>)
    5c02:	7018      	strb	r0, [r3, #0]
	BLE_GATT_SERVER_EVENT_TYPE,&app_gatt_server_handle);
	if (ble_status != true){
    5c04:	781b      	ldrb	r3, [r3, #0]
    5c06:	2b01      	cmp	r3, #1
    5c08:	d005      	beq.n	5c16 <register_gatt_server_callbacks+0x22>
		DBG_LOG("##Error when Registering ATBTLC1000 callbacks");
    5c0a:	4806      	ldr	r0, [pc, #24]	; (5c24 <register_gatt_server_callbacks+0x30>)
    5c0c:	4b06      	ldr	r3, [pc, #24]	; (5c28 <register_gatt_server_callbacks+0x34>)
    5c0e:	4798      	blx	r3
    5c10:	4806      	ldr	r0, [pc, #24]	; (5c2c <register_gatt_server_callbacks+0x38>)
    5c12:	4b07      	ldr	r3, [pc, #28]	; (5c30 <register_gatt_server_callbacks+0x3c>)
    5c14:	4798      	blx	r3
}	
}
    5c16:	bd10      	pop	{r4, pc}
    5c18:	0000c17c 	.word	0x0000c17c
    5c1c:	00003b7d 	.word	0x00003b7d
    5c20:	200031ac 	.word	0x200031ac
    5c24:	0000bf48 	.word	0x0000bf48
    5c28:	0000a435 	.word	0x0000a435
    5c2c:	0000c37c 	.word	0x0000c37c
    5c30:	0000a319 	.word	0x0000a319

00005c34 <main>:

int main (void)
{
    5c34:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c36:	46d6      	mov	lr, sl
    5c38:	464f      	mov	r7, r9
    5c3a:	4646      	mov	r6, r8
    5c3c:	b5c0      	push	{r6, r7, lr}
    5c3e:	b090      	sub	sp, #64	; 0x40
	system_init();
    5c40:	4b8a      	ldr	r3, [pc, #552]	; (5e6c <main+0x238>)
    5c42:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    5c44:	ac02      	add	r4, sp, #8
    5c46:	2501      	movs	r5, #1
    5c48:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    5c4a:	2300      	movs	r3, #0
    5c4c:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    5c4e:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    5c50:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    5c52:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    5c54:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    5c56:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    5c58:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    5c5a:	2224      	movs	r2, #36	; 0x24
    5c5c:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    5c5e:	3a18      	subs	r2, #24
    5c60:	2100      	movs	r1, #0
    5c62:	a808      	add	r0, sp, #32
    5c64:	4b82      	ldr	r3, [pc, #520]	; (5e70 <main+0x23c>)
    5c66:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    5c68:	4b82      	ldr	r3, [pc, #520]	; (5e74 <main+0x240>)
    5c6a:	61a3      	str	r3, [r4, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
    5c6c:	2380      	movs	r3, #128	; 0x80
    5c6e:	025b      	lsls	r3, r3, #9
    5c70:	60e3      	str	r3, [r4, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    5c72:	4b81      	ldr	r3, [pc, #516]	; (5e78 <main+0x244>)
    5c74:	62a3      	str	r3, [r4, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    5c76:	2301      	movs	r3, #1
    5c78:	425b      	negs	r3, r3
    5c7a:	62e3      	str	r3, [r4, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    5c7c:	4b7f      	ldr	r3, [pc, #508]	; (5e7c <main+0x248>)
    5c7e:	6323      	str	r3, [r4, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
    5c80:	4b7f      	ldr	r3, [pc, #508]	; (5e80 <main+0x24c>)
    5c82:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    5c84:	4e7f      	ldr	r6, [pc, #508]	; (5e84 <main+0x250>)
    5c86:	0022      	movs	r2, r4
    5c88:	497f      	ldr	r1, [pc, #508]	; (5e88 <main+0x254>)
    5c8a:	0030      	movs	r0, r6
    5c8c:	4b7f      	ldr	r3, [pc, #508]	; (5e8c <main+0x258>)
    5c8e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5c90:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5c92:	0020      	movs	r0, r4
    5c94:	4b7e      	ldr	r3, [pc, #504]	; (5e90 <main+0x25c>)
    5c96:	4798      	blx	r3
    5c98:	231f      	movs	r3, #31
    5c9a:	4018      	ands	r0, r3
    5c9c:	4085      	lsls	r5, r0
    5c9e:	4b7d      	ldr	r3, [pc, #500]	; (5e94 <main+0x260>)
    5ca0:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5ca2:	6833      	ldr	r3, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    5ca4:	69da      	ldr	r2, [r3, #28]
#  endif

	while (spi_is_syncing(module)) {
    5ca6:	2a00      	cmp	r2, #0
    5ca8:	d1fc      	bne.n	5ca4 <main+0x70>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5caa:	6823      	ldr	r3, [r4, #0]
    5cac:	3202      	adds	r2, #2
    5cae:	4313      	orrs	r3, r2
    5cb0:	6023      	str	r3, [r4, #0]
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
	struct port_config port_config;

	module->type = config->type;
    5cb2:	4c79      	ldr	r4, [pc, #484]	; (5e98 <main+0x264>)
    5cb4:	2304      	movs	r3, #4
    5cb6:	7123      	strb	r3, [r4, #4]
	module->cs_pin = config->cs_pin;
    5cb8:	3309      	adds	r3, #9
    5cba:	7163      	strb	r3, [r4, #5]
	module->spi = spi_module;
    5cbc:	4b71      	ldr	r3, [pc, #452]	; (5e84 <main+0x250>)
    5cbe:	6023      	str	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5cc0:	a901      	add	r1, sp, #4
    5cc2:	2301      	movs	r3, #1
    5cc4:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    5cc6:	2200      	movs	r2, #0
    5cc8:	708a      	strb	r2, [r1, #2]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    5cca:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    5ccc:	200d      	movs	r0, #13
    5cce:	4b73      	ldr	r3, [pc, #460]	; (5e9c <main+0x268>)
    5cd0:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    5cd2:	7962      	ldrb	r2, [r4, #5]
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    5cd4:	0953      	lsrs	r3, r2, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5cd6:	09d0      	lsrs	r0, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    5cd8:	2100      	movs	r1, #0
	if (port_index < PORT_INST_NUM) {
    5cda:	2800      	cmp	r0, #0
    5cdc:	d102      	bne.n	5ce4 <main+0xb0>
		return &(ports[port_index]->Group[group_index]);
    5cde:	01db      	lsls	r3, r3, #7
    5ce0:	496f      	ldr	r1, [pc, #444]	; (5ea0 <main+0x26c>)
    5ce2:	1859      	adds	r1, r3, r1
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5ce4:	231f      	movs	r3, #31
    5ce6:	4013      	ands	r3, r2
    5ce8:	2401      	movs	r4, #1
    5cea:	0022      	movs	r2, r4
    5cec:	409a      	lsls	r2, r3
		port_base->OUTSET.reg = pin_mask;
    5cee:	618a      	str	r2, [r1, #24]

	/* Initialize the AT25DFX chip . */
	at25dfx_init();
	
	/* Wake the AT25DFX chip . */
	at25dfx_chip_wake(&at25dfx_chip);
    5cf0:	4d69      	ldr	r5, [pc, #420]	; (5e98 <main+0x264>)
    5cf2:	0028      	movs	r0, r5
    5cf4:	4b6b      	ldr	r3, [pc, #428]	; (5ea4 <main+0x270>)
    5cf6:	4798      	blx	r3
	//at25dfx_chip_sleep(&at25dfx_chip);
	
	/* Initialize serial console */
	serial_console_init();
    5cf8:	4b6b      	ldr	r3, [pc, #428]	; (5ea8 <main+0x274>)
    5cfa:	4798      	blx	r3
	config->input_pull = PORT_PIN_PULL_UP;
    5cfc:	a902      	add	r1, sp, #8
    5cfe:	704c      	strb	r4, [r1, #1]
	config->powersave  = false;
    5d00:	2300      	movs	r3, #0
    5d02:	708b      	strb	r3, [r1, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    5d04:	700c      	strb	r4, [r1, #0]
	port_pin_set_config(LED0_PIN, &pin_conf);
    5d06:	203e      	movs	r0, #62	; 0x3e
    5d08:	4b64      	ldr	r3, [pc, #400]	; (5e9c <main+0x268>)
    5d0a:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    5d0c:	2280      	movs	r2, #128	; 0x80
    5d0e:	05d2      	lsls	r2, r2, #23
    5d10:	4b66      	ldr	r3, [pc, #408]	; (5eac <main+0x278>)
    5d12:	619a      	str	r2, [r3, #24]
	
	config_led();
	
	delay_init();
    5d14:	4b66      	ldr	r3, [pc, #408]	; (5eb0 <main+0x27c>)
    5d16:	4798      	blx	r3
	
	configure_adc();
    5d18:	4b66      	ldr	r3, [pc, #408]	; (5eb4 <main+0x280>)
    5d1a:	4798      	blx	r3
	
	configure_tc_sensor();
    5d1c:	4b66      	ldr	r3, [pc, #408]	; (5eb8 <main+0x284>)
    5d1e:	4798      	blx	r3
	configure_tc_callbacks_sensor();
    5d20:	4b66      	ldr	r3, [pc, #408]	; (5ebc <main+0x288>)
    5d22:	4798      	blx	r3
	cpu_irq_enable();
    5d24:	4b66      	ldr	r3, [pc, #408]	; (5ec0 <main+0x28c>)
    5d26:	701c      	strb	r4, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    5d28:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    5d2c:	b662      	cpsie	i
	
	system_interrupt_enable_global();
	
	/* Check for flash memory */
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    5d2e:	0028      	movs	r0, r5
    5d30:	4b64      	ldr	r3, [pc, #400]	; (5ec4 <main+0x290>)
    5d32:	4798      	blx	r3
    5d34:	2800      	cmp	r0, #0
    5d36:	d018      	beq.n	5d6a <main+0x136>
		port_base->OUTCLR.reg = pin_mask;
    5d38:	4c5c      	ldr	r4, [pc, #368]	; (5eac <main+0x278>)
    5d3a:	2580      	movs	r5, #128	; 0x80
    5d3c:	05ed      	lsls	r5, r5, #23
    5d3e:	6165      	str	r5, [r4, #20]
		// Handle missing or non-responsive device
		//DBG_LOG("No AT25DFX Chip Found!");
		port_pin_set_output_level(LED0_PIN,LED0_ACTIVE);
		delay_s(2);
    5d40:	20fa      	movs	r0, #250	; 0xfa
    5d42:	00c0      	lsls	r0, r0, #3
    5d44:	4b60      	ldr	r3, [pc, #384]	; (5ec8 <main+0x294>)
    5d46:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    5d48:	61a5      	str	r5, [r4, #24]
	else{
		port_pin_set_output_level(LED0_PIN,LED0_INACTIVE);
	}

	/* initialize the BLE chip  and Set the Device Address */
	ble_device_init(NULL);
    5d4a:	2000      	movs	r0, #0
    5d4c:	4b5f      	ldr	r3, [pc, #380]	; (5ecc <main+0x298>)
    5d4e:	4798      	blx	r3
	
	/* Register ATBTLC1000 Gap Callbacks */
	register_btlc1000_callbacks();
    5d50:	4b5f      	ldr	r3, [pc, #380]	; (5ed0 <main+0x29c>)
    5d52:	4798      	blx	r3
	
	/* Custom service init */
	bruxa_service_init();
    5d54:	4b5f      	ldr	r3, [pc, #380]	; (5ed4 <main+0x2a0>)
    5d56:	4798      	blx	r3
	
	/* Register Gatt server callbacks */
	register_gatt_server_callbacks();
    5d58:	4b5f      	ldr	r3, [pc, #380]	; (5ed8 <main+0x2a4>)
    5d5a:	4798      	blx	r3
	
	/* Start Advertising process */
	start_advertisement();
    5d5c:	4b5f      	ldr	r3, [pc, #380]	; (5edc <main+0x2a8>)
    5d5e:	4798      	blx	r3
	
	while (true){
		/* BLE Event Task */
		ble_event_task();
    5d60:	4f5f      	ldr	r7, [pc, #380]	; (5ee0 <main+0x2ac>)
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5d62:	2401      	movs	r4, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    5d64:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    5d66:	2602      	movs	r6, #2
    5d68:	e049      	b.n	5dfe <main+0x1ca>
    5d6a:	2280      	movs	r2, #128	; 0x80
    5d6c:	05d2      	lsls	r2, r2, #23
    5d6e:	4b4f      	ldr	r3, [pc, #316]	; (5eac <main+0x278>)
    5d70:	619a      	str	r2, [r3, #24]
    5d72:	e7ea      	b.n	5d4a <main+0x116>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    5d74:	420c      	tst	r4, r1
    5d76:	d10a      	bne.n	5d8e <main+0x15a>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    5d78:	7e13      	ldrb	r3, [r2, #24]
    5d7a:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5d7c:	0021      	movs	r1, r4
    5d7e:	4019      	ands	r1, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    5d80:	421d      	tst	r5, r3
    5d82:	d000      	beq.n	5d86 <main+0x152>
		status_flags |= ADC_STATUS_WINDOW;
    5d84:	4331      	orrs	r1, r6
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    5d86:	421e      	tst	r6, r3
    5d88:	d0f4      	beq.n	5d74 <main+0x140>
		status_flags |= ADC_STATUS_OVERRUN;
    5d8a:	4329      	orrs	r1, r5
    5d8c:	e7f2      	b.n	5d74 <main+0x140>
    5d8e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    5d90:	b25b      	sxtb	r3, r3
    5d92:	2b00      	cmp	r3, #0
    5d94:	dbfb      	blt.n	5d8e <main+0x15a>
	*result = adc_module->RESULT.reg;
    5d96:	8b51      	ldrh	r1, [r2, #26]
    5d98:	ab02      	add	r3, sp, #8
    5d9a:	8019      	strh	r1, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    5d9c:	7614      	strb	r4, [r2, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    5d9e:	7e13      	ldrb	r3, [r2, #24]
    5da0:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5da2:	0021      	movs	r1, r4
    5da4:	4019      	ands	r1, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    5da6:	421d      	tst	r5, r3
    5da8:	d000      	beq.n	5dac <main+0x178>
		status_flags |= ADC_STATUS_WINDOW;
    5daa:	4331      	orrs	r1, r6
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    5dac:	421e      	tst	r6, r3
    5dae:	d000      	beq.n	5db2 <main+0x17e>
		status_flags |= ADC_STATUS_OVERRUN;
    5db0:	4329      	orrs	r1, r5
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    5db2:	420d      	tst	r5, r1
    5db4:	d000      	beq.n	5db8 <main+0x184>
	adc_module->INTFLAG.reg = int_flags;
    5db6:	7616      	strb	r6, [r2, #24]
			adc_flush(&adc_instance);
			adc_start_conversion(&adc_instance);
			do{
				/* Wait for conversion to be done and read out result */
			} while(adc_read(&adc_instance, &result) == STATUS_BUSY);
			DBG_LOG("Sensor :: %d",result);
    5db8:	484a      	ldr	r0, [pc, #296]	; (5ee4 <main+0x2b0>)
    5dba:	4b4b      	ldr	r3, [pc, #300]	; (5ee8 <main+0x2b4>)
    5dbc:	4798      	blx	r3
    5dbe:	ab02      	add	r3, sp, #8
    5dc0:	4698      	mov	r8, r3
    5dc2:	7819      	ldrb	r1, [r3, #0]
    5dc4:	4849      	ldr	r0, [pc, #292]	; (5eec <main+0x2b8>)
    5dc6:	4b4a      	ldr	r3, [pc, #296]	; (5ef0 <main+0x2bc>)
    5dc8:	4798      	blx	r3
		
			ble_status = at_ble_characteristic_value_set(bruxa_service_characs[9].char_val_handle, &result, sizeof(uint8_t));
    5dca:	4b4a      	ldr	r3, [pc, #296]	; (5ef4 <main+0x2c0>)
    5dcc:	469a      	mov	sl, r3
    5dce:	2387      	movs	r3, #135	; 0x87
    5dd0:	009b      	lsls	r3, r3, #2
    5dd2:	4699      	mov	r9, r3
    5dd4:	4653      	mov	r3, sl
    5dd6:	464a      	mov	r2, r9
    5dd8:	5a98      	ldrh	r0, [r3, r2]
    5dda:	0022      	movs	r2, r4
    5ddc:	4641      	mov	r1, r8
    5dde:	4b46      	ldr	r3, [pc, #280]	; (5ef8 <main+0x2c4>)
    5de0:	4798      	blx	r3
    5de2:	4b46      	ldr	r3, [pc, #280]	; (5efc <main+0x2c8>)
    5de4:	4698      	mov	r8, r3
    5de6:	7018      	strb	r0, [r3, #0]
			ble_status = at_ble_notification_send(0,bruxa_service_characs[9].char_val_handle);
    5de8:	4653      	mov	r3, sl
    5dea:	464a      	mov	r2, r9
    5dec:	5a99      	ldrh	r1, [r3, r2]
    5dee:	2000      	movs	r0, #0
    5df0:	4b43      	ldr	r3, [pc, #268]	; (5f00 <main+0x2cc>)
    5df2:	4798      	blx	r3
    5df4:	4643      	mov	r3, r8
    5df6:	7018      	strb	r0, [r3, #0]
		
			delay_ms(100);
    5df8:	2064      	movs	r0, #100	; 0x64
    5dfa:	4b33      	ldr	r3, [pc, #204]	; (5ec8 <main+0x294>)
    5dfc:	4798      	blx	r3
		if (streaming){
    5dfe:	4b41      	ldr	r3, [pc, #260]	; (5f04 <main+0x2d0>)
    5e00:	4698      	mov	r8, r3
		ble_event_task();
    5e02:	47b8      	blx	r7
		if (streaming){
    5e04:	4643      	mov	r3, r8
    5e06:	781b      	ldrb	r3, [r3, #0]
    5e08:	2b00      	cmp	r3, #0
    5e0a:	d0fa      	beq.n	5e02 <main+0x1ce>
	Adc *const adc_module = module_inst->hw;
    5e0c:	4b3e      	ldr	r3, [pc, #248]	; (5f08 <main+0x2d4>)
    5e0e:	681a      	ldr	r2, [r3, #0]
    5e10:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    5e12:	b25b      	sxtb	r3, r3
    5e14:	2b00      	cmp	r3, #0
    5e16:	dbfb      	blt.n	5e10 <main+0x1dc>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    5e18:	6913      	ldr	r3, [r2, #16]
    5e1a:	211f      	movs	r1, #31
    5e1c:	438b      	bics	r3, r1
	adc_module->INPUTCTRL.reg =
    5e1e:	6113      	str	r3, [r2, #16]
    5e20:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    5e22:	b25b      	sxtb	r3, r3
    5e24:	2b00      	cmp	r3, #0
    5e26:	dbfb      	blt.n	5e20 <main+0x1ec>
    5e28:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    5e2a:	b25b      	sxtb	r3, r3
    5e2c:	2b00      	cmp	r3, #0
    5e2e:	dbfb      	blt.n	5e28 <main+0x1f4>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_GAIN_Msk) |
    5e30:	6913      	ldr	r3, [r2, #16]
    5e32:	4936      	ldr	r1, [pc, #216]	; (5f0c <main+0x2d8>)
    5e34:	400b      	ands	r3, r1
	adc_module->INPUTCTRL.reg =
    5e36:	6113      	str	r3, [r2, #16]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    5e38:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    5e3a:	b25b      	sxtb	r3, r3
    5e3c:	2b00      	cmp	r3, #0
    5e3e:	dbfb      	blt.n	5e38 <main+0x204>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_FLUSH;
    5e40:	7b13      	ldrb	r3, [r2, #12]
    5e42:	2101      	movs	r1, #1
    5e44:	430b      	orrs	r3, r1
    5e46:	7313      	strb	r3, [r2, #12]
    5e48:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    5e4a:	b25b      	sxtb	r3, r3
    5e4c:	2b00      	cmp	r3, #0
    5e4e:	dbfb      	blt.n	5e48 <main+0x214>
    5e50:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    5e52:	b25b      	sxtb	r3, r3
    5e54:	2b00      	cmp	r3, #0
    5e56:	dbfb      	blt.n	5e50 <main+0x21c>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    5e58:	7b13      	ldrb	r3, [r2, #12]
    5e5a:	2102      	movs	r1, #2
    5e5c:	430b      	orrs	r3, r1
    5e5e:	7313      	strb	r3, [r2, #12]
    5e60:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    5e62:	b25b      	sxtb	r3, r3
    5e64:	2b00      	cmp	r3, #0
    5e66:	dbfb      	blt.n	5e60 <main+0x22c>
    5e68:	e786      	b.n	5d78 <main+0x144>
    5e6a:	46c0      	nop			; (mov r8, r8)
    5e6c:	00002c6d 	.word	0x00002c6d
    5e70:	0000a309 	.word	0x0000a309
    5e74:	0001d4c0 	.word	0x0001d4c0
    5e78:	00300002 	.word	0x00300002
    5e7c:	00360003 	.word	0x00360003
    5e80:	00370003 	.word	0x00370003
    5e84:	200031bc 	.word	0x200031bc
    5e88:	42001c00 	.word	0x42001c00
    5e8c:	00000fb1 	.word	0x00000fb1
    5e90:	00001ddd 	.word	0x00001ddd
    5e94:	e000e100 	.word	0xe000e100
    5e98:	200031b0 	.word	0x200031b0
    5e9c:	00001a05 	.word	0x00001a05
    5ea0:	41004400 	.word	0x41004400
    5ea4:	000009f1 	.word	0x000009f1
    5ea8:	00004791 	.word	0x00004791
    5eac:	41004480 	.word	0x41004480
    5eb0:	00001715 	.word	0x00001715
    5eb4:	00005361 	.word	0x00005361
    5eb8:	00005295 	.word	0x00005295
    5ebc:	00005315 	.word	0x00005315
    5ec0:	20000008 	.word	0x20000008
    5ec4:	00000115 	.word	0x00000115
    5ec8:	00001781 	.word	0x00001781
    5ecc:	00003d71 	.word	0x00003d71
    5ed0:	00005491 	.word	0x00005491
    5ed4:	000054d1 	.word	0x000054d1
    5ed8:	00005bf5 	.word	0x00005bf5
    5edc:	000053e1 	.word	0x000053e1
    5ee0:	00004719 	.word	0x00004719
    5ee4:	0000bf48 	.word	0x0000bf48
    5ee8:	0000a435 	.word	0x0000a435
    5eec:	0000c36c 	.word	0x0000c36c
    5ef0:	0000a319 	.word	0x0000a319
    5ef4:	20002f54 	.word	0x20002f54
    5ef8:	0000756d 	.word	0x0000756d
    5efc:	200031ac 	.word	0x200031ac
    5f00:	0000773d 	.word	0x0000773d
    5f04:	2000231a 	.word	0x2000231a
    5f08:	200031fc 	.word	0x200031fc
    5f0c:	f0ffffff 	.word	0xf0ffffff

00005f10 <trace_set_level>:
    5f10:	4770      	bx	lr
	...

00005f14 <internal_event_post>:
    5f14:	b570      	push	{r4, r5, r6, lr}
    5f16:	4d12      	ldr	r5, [pc, #72]	; (5f60 <internal_event_post+0x4c>)
    5f18:	682c      	ldr	r4, [r5, #0]
    5f1a:	2c00      	cmp	r4, #0
    5f1c:	d013      	beq.n	5f46 <internal_event_post+0x32>
    5f1e:	6826      	ldr	r6, [r4, #0]
    5f20:	60e2      	str	r2, [r4, #12]
    5f22:	602e      	str	r6, [r5, #0]
    5f24:	2500      	movs	r5, #0
    5f26:	4a0f      	ldr	r2, [pc, #60]	; (5f64 <internal_event_post+0x50>)
    5f28:	8123      	strh	r3, [r4, #8]
    5f2a:	6813      	ldr	r3, [r2, #0]
    5f2c:	6025      	str	r5, [r4, #0]
    5f2e:	80a0      	strh	r0, [r4, #4]
    5f30:	80e1      	strh	r1, [r4, #6]
    5f32:	42ab      	cmp	r3, r5
    5f34:	d102      	bne.n	5f3c <internal_event_post+0x28>
    5f36:	6014      	str	r4, [r2, #0]
    5f38:	bd70      	pop	{r4, r5, r6, pc}
    5f3a:	0013      	movs	r3, r2
    5f3c:	681a      	ldr	r2, [r3, #0]
    5f3e:	2a00      	cmp	r2, #0
    5f40:	d1fb      	bne.n	5f3a <internal_event_post+0x26>
    5f42:	601c      	str	r4, [r3, #0]
    5f44:	e7f8      	b.n	5f38 <internal_event_post+0x24>
    5f46:	b2c4      	uxtb	r4, r0
    5f48:	2c00      	cmp	r4, #0
    5f4a:	d1f5      	bne.n	5f38 <internal_event_post+0x24>
    5f4c:	4c06      	ldr	r4, [pc, #24]	; (5f68 <internal_event_post+0x54>)
    5f4e:	60e2      	str	r2, [r4, #12]
    5f50:	2201      	movs	r2, #1
    5f52:	8123      	strh	r3, [r4, #8]
    5f54:	4b05      	ldr	r3, [pc, #20]	; (5f6c <internal_event_post+0x58>)
    5f56:	80a0      	strh	r0, [r4, #4]
    5f58:	80e1      	strh	r1, [r4, #6]
    5f5a:	701a      	strb	r2, [r3, #0]
    5f5c:	e7ec      	b.n	5f38 <internal_event_post+0x24>
    5f5e:	46c0      	nop			; (mov r8, r8)
    5f60:	200023d4 	.word	0x200023d4
    5f64:	200023d8 	.word	0x200023d8
    5f68:	200023dc 	.word	0x200023dc
    5f6c:	200023ec 	.word	0x200023ec

00005f70 <internal_event_init>:
    5f70:	2300      	movs	r3, #0
    5f72:	4a0f      	ldr	r2, [pc, #60]	; (5fb0 <internal_event_init+0x40>)
    5f74:	b570      	push	{r4, r5, r6, lr}
    5f76:	6013      	str	r3, [r2, #0]
    5f78:	4a0e      	ldr	r2, [pc, #56]	; (5fb4 <internal_event_init+0x44>)
    5f7a:	2601      	movs	r6, #1
    5f7c:	7013      	strb	r3, [r2, #0]
    5f7e:	001a      	movs	r2, r3
    5f80:	4c0d      	ldr	r4, [pc, #52]	; (5fb8 <internal_event_init+0x48>)
    5f82:	0900      	lsrs	r0, r0, #4
    5f84:	0100      	lsls	r0, r0, #4
    5f86:	6023      	str	r3, [r4, #0]
    5f88:	1808      	adds	r0, r1, r0
    5f8a:	4281      	cmp	r1, r0
    5f8c:	d10b      	bne.n	5fa6 <internal_event_init+0x36>
    5f8e:	2b00      	cmp	r3, #0
    5f90:	d000      	beq.n	5f94 <internal_event_init+0x24>
    5f92:	6022      	str	r2, [r4, #0]
    5f94:	2201      	movs	r2, #1
    5f96:	4b09      	ldr	r3, [pc, #36]	; (5fbc <internal_event_init+0x4c>)
    5f98:	4252      	negs	r2, r2
    5f9a:	805a      	strh	r2, [r3, #2]
    5f9c:	801a      	strh	r2, [r3, #0]
    5f9e:	2200      	movs	r2, #0
    5fa0:	609a      	str	r2, [r3, #8]
    5fa2:	60da      	str	r2, [r3, #12]
    5fa4:	bd70      	pop	{r4, r5, r6, pc}
    5fa6:	600a      	str	r2, [r1, #0]
    5fa8:	0033      	movs	r3, r6
    5faa:	000a      	movs	r2, r1
    5fac:	3110      	adds	r1, #16
    5fae:	e7ec      	b.n	5f8a <internal_event_init+0x1a>
    5fb0:	200023d8 	.word	0x200023d8
    5fb4:	200023ec 	.word	0x200023ec
    5fb8:	200023d4 	.word	0x200023d4
    5fbc:	2000321c 	.word	0x2000321c

00005fc0 <special_events_handler>:
    5fc0:	b510      	push	{r4, lr}
    5fc2:	4b20      	ldr	r3, [pc, #128]	; (6044 <special_events_handler+0x84>)
    5fc4:	0004      	movs	r4, r0
    5fc6:	0008      	movs	r0, r1
    5fc8:	0011      	movs	r1, r2
    5fca:	881a      	ldrh	r2, [r3, #0]
    5fcc:	42a2      	cmp	r2, r4
    5fce:	d110      	bne.n	5ff2 <special_events_handler+0x32>
    5fd0:	889a      	ldrh	r2, [r3, #4]
    5fd2:	4282      	cmp	r2, r0
    5fd4:	d10d      	bne.n	5ff2 <special_events_handler+0x32>
    5fd6:	2201      	movs	r2, #1
    5fd8:	4252      	negs	r2, r2
    5fda:	801a      	strh	r2, [r3, #0]
    5fdc:	6099      	str	r1, [r3, #8]
    5fde:	885a      	ldrh	r2, [r3, #2]
    5fe0:	4b19      	ldr	r3, [pc, #100]	; (6048 <special_events_handler+0x88>)
    5fe2:	2101      	movs	r1, #1
    5fe4:	429a      	cmp	r2, r3
    5fe6:	d102      	bne.n	5fee <special_events_handler+0x2e>
    5fe8:	4b18      	ldr	r3, [pc, #96]	; (604c <special_events_handler+0x8c>)
    5fea:	4798      	blx	r3
    5fec:	2101      	movs	r1, #1
    5fee:	0008      	movs	r0, r1
    5ff0:	bd10      	pop	{r4, pc}
    5ff2:	885a      	ldrh	r2, [r3, #2]
    5ff4:	42a2      	cmp	r2, r4
    5ff6:	d10c      	bne.n	6012 <special_events_handler+0x52>
    5ff8:	889a      	ldrh	r2, [r3, #4]
    5ffa:	4282      	cmp	r2, r0
    5ffc:	d109      	bne.n	6012 <special_events_handler+0x52>
    5ffe:	2201      	movs	r2, #1
    6000:	4252      	negs	r2, r2
    6002:	805a      	strh	r2, [r3, #2]
    6004:	689a      	ldr	r2, [r3, #8]
    6006:	2a00      	cmp	r2, #0
    6008:	d101      	bne.n	600e <special_events_handler+0x4e>
    600a:	6099      	str	r1, [r3, #8]
    600c:	e7ec      	b.n	5fe8 <special_events_handler+0x28>
    600e:	60d9      	str	r1, [r3, #12]
    6010:	e7ea      	b.n	5fe8 <special_events_handler+0x28>
    6012:	4b0f      	ldr	r3, [pc, #60]	; (6050 <special_events_handler+0x90>)
    6014:	429c      	cmp	r4, r3
    6016:	d00f      	beq.n	6038 <special_events_handler+0x78>
    6018:	4b0e      	ldr	r3, [pc, #56]	; (6054 <special_events_handler+0x94>)
    601a:	429c      	cmp	r4, r3
    601c:	d006      	beq.n	602c <special_events_handler+0x6c>
    601e:	4b0e      	ldr	r3, [pc, #56]	; (6058 <special_events_handler+0x98>)
    6020:	429c      	cmp	r4, r3
    6022:	d10c      	bne.n	603e <special_events_handler+0x7e>
    6024:	0008      	movs	r0, r1
    6026:	4b0d      	ldr	r3, [pc, #52]	; (605c <special_events_handler+0x9c>)
    6028:	4798      	blx	r3
    602a:	e7df      	b.n	5fec <special_events_handler+0x2c>
    602c:	2200      	movs	r2, #0
    602e:	4b0c      	ldr	r3, [pc, #48]	; (6060 <special_events_handler+0xa0>)
    6030:	4798      	blx	r3
    6032:	4241      	negs	r1, r0
    6034:	4141      	adcs	r1, r0
    6036:	e7da      	b.n	5fee <special_events_handler+0x2e>
    6038:	2200      	movs	r2, #0
    603a:	4b0a      	ldr	r3, [pc, #40]	; (6064 <special_events_handler+0xa4>)
    603c:	e7f8      	b.n	6030 <special_events_handler+0x70>
    603e:	2100      	movs	r1, #0
    6040:	e7d5      	b.n	5fee <special_events_handler+0x2e>
    6042:	46c0      	nop			; (mov r8, r8)
    6044:	2000321c 	.word	0x2000321c
    6048:	0000ffff 	.word	0x0000ffff
    604c:	00007dc5 	.word	0x00007dc5
    6050:	00000e13 	.word	0x00000e13
    6054:	00000e15 	.word	0x00000e15
    6058:	00000e01 	.word	0x00000e01
    605c:	0000859d 	.word	0x0000859d
    6060:	00008779 	.word	0x00008779
    6064:	00008855 	.word	0x00008855

00006068 <at_ble_event_get>:
    6068:	2300      	movs	r3, #0
    606a:	b5f0      	push	{r4, r5, r6, r7, lr}
    606c:	000e      	movs	r6, r1
    606e:	b087      	sub	sp, #28
    6070:	9002      	str	r0, [sp, #8]
    6072:	9203      	str	r2, [sp, #12]
    6074:	7003      	strb	r3, [r0, #0]
    6076:	4ba9      	ldr	r3, [pc, #676]	; (631c <at_ble_event_get+0x2b4>)
    6078:	9803      	ldr	r0, [sp, #12]
    607a:	4798      	blx	r3
    607c:	2300      	movs	r3, #0
    607e:	9301      	str	r3, [sp, #4]
    6080:	4ca7      	ldr	r4, [pc, #668]	; (6320 <at_ble_event_get+0x2b8>)
    6082:	6823      	ldr	r3, [r4, #0]
    6084:	2b00      	cmp	r3, #0
    6086:	d104      	bne.n	6092 <at_ble_event_get+0x2a>
    6088:	4ba6      	ldr	r3, [pc, #664]	; (6324 <at_ble_event_get+0x2bc>)
    608a:	4798      	blx	r3
    608c:	9001      	str	r0, [sp, #4]
    608e:	28d0      	cmp	r0, #208	; 0xd0
    6090:	d1f6      	bne.n	6080 <at_ble_event_get+0x18>
    6092:	4ba5      	ldr	r3, [pc, #660]	; (6328 <at_ble_event_get+0x2c0>)
    6094:	4798      	blx	r3
    6096:	9b01      	ldr	r3, [sp, #4]
    6098:	2bd0      	cmp	r3, #208	; 0xd0
    609a:	d02c      	beq.n	60f6 <at_ble_event_get+0x8e>
    609c:	6823      	ldr	r3, [r4, #0]
    609e:	681a      	ldr	r2, [r3, #0]
    60a0:	68dd      	ldr	r5, [r3, #12]
    60a2:	6022      	str	r2, [r4, #0]
    60a4:	88da      	ldrh	r2, [r3, #6]
    60a6:	9200      	str	r2, [sp, #0]
    60a8:	4aa0      	ldr	r2, [pc, #640]	; (632c <at_ble_event_get+0x2c4>)
    60aa:	889c      	ldrh	r4, [r3, #4]
    60ac:	6811      	ldr	r1, [r2, #0]
    60ae:	6013      	str	r3, [r2, #0]
    60b0:	6019      	str	r1, [r3, #0]
    60b2:	4b9f      	ldr	r3, [pc, #636]	; (6330 <at_ble_event_get+0x2c8>)
    60b4:	781b      	ldrb	r3, [r3, #0]
    60b6:	2b01      	cmp	r3, #1
    60b8:	d10f      	bne.n	60da <at_ble_event_get+0x72>
    60ba:	4a9e      	ldr	r2, [pc, #632]	; (6334 <at_ble_event_get+0x2cc>)
    60bc:	4b9d      	ldr	r3, [pc, #628]	; (6334 <at_ble_event_get+0x2cc>)
    60be:	88d1      	ldrh	r1, [r2, #6]
    60c0:	8890      	ldrh	r0, [r2, #4]
    60c2:	891b      	ldrh	r3, [r3, #8]
    60c4:	68d2      	ldr	r2, [r2, #12]
    60c6:	4f9c      	ldr	r7, [pc, #624]	; (6338 <at_ble_event_get+0x2d0>)
    60c8:	47b8      	blx	r7
    60ca:	2210      	movs	r2, #16
    60cc:	4b9b      	ldr	r3, [pc, #620]	; (633c <at_ble_event_get+0x2d4>)
    60ce:	2100      	movs	r1, #0
    60d0:	4898      	ldr	r0, [pc, #608]	; (6334 <at_ble_event_get+0x2cc>)
    60d2:	4798      	blx	r3
    60d4:	2300      	movs	r3, #0
    60d6:	4a96      	ldr	r2, [pc, #600]	; (6330 <at_ble_event_get+0x2c8>)
    60d8:	7013      	strb	r3, [r2, #0]
    60da:	9b01      	ldr	r3, [sp, #4]
    60dc:	2b00      	cmp	r3, #0
    60de:	d10a      	bne.n	60f6 <at_ble_event_get+0x8e>
    60e0:	4b97      	ldr	r3, [pc, #604]	; (6340 <at_ble_event_get+0x2d8>)
    60e2:	429c      	cmp	r4, r3
    60e4:	d111      	bne.n	610a <at_ble_event_get+0xa2>
    60e6:	9b00      	ldr	r3, [sp, #0]
    60e8:	9f01      	ldr	r7, [sp, #4]
    60ea:	42a3      	cmp	r3, r4
    60ec:	d153      	bne.n	6196 <at_ble_event_get+0x12e>
    60ee:	2339      	movs	r3, #57	; 0x39
    60f0:	9a02      	ldr	r2, [sp, #8]
    60f2:	7013      	strb	r3, [r2, #0]
    60f4:	6035      	str	r5, [r6, #0]
    60f6:	9b02      	ldr	r3, [sp, #8]
    60f8:	781b      	ldrb	r3, [r3, #0]
    60fa:	2b3d      	cmp	r3, #61	; 0x3d
    60fc:	d102      	bne.n	6104 <at_ble_event_get+0x9c>
    60fe:	9b01      	ldr	r3, [sp, #4]
    6100:	2b00      	cmp	r3, #0
    6102:	d0b8      	beq.n	6076 <at_ble_event_get+0xe>
    6104:	9801      	ldr	r0, [sp, #4]
    6106:	b007      	add	sp, #28
    6108:	bdf0      	pop	{r4, r5, r6, r7, pc}
    610a:	9b00      	ldr	r3, [sp, #0]
    610c:	2bbb      	cmp	r3, #187	; 0xbb
    610e:	d125      	bne.n	615c <at_ble_event_get+0xf4>
    6110:	2cbb      	cmp	r4, #187	; 0xbb
    6112:	d123      	bne.n	615c <at_ble_event_get+0xf4>
    6114:	466b      	mov	r3, sp
    6116:	889b      	ldrh	r3, [r3, #4]
    6118:	80b3      	strh	r3, [r6, #4]
    611a:	78aa      	ldrb	r2, [r5, #2]
    611c:	786b      	ldrb	r3, [r5, #1]
    611e:	78e8      	ldrb	r0, [r5, #3]
    6120:	0212      	lsls	r2, r2, #8
    6122:	4313      	orrs	r3, r2
    6124:	7929      	ldrb	r1, [r5, #4]
    6126:	796a      	ldrb	r2, [r5, #5]
    6128:	70b0      	strb	r0, [r6, #2]
    612a:	4886      	ldr	r0, [pc, #536]	; (6344 <at_ble_event_get+0x2dc>)
    612c:	b21b      	sxth	r3, r3
    612e:	8033      	strh	r3, [r6, #0]
    6130:	4283      	cmp	r3, r0
    6132:	dc07      	bgt.n	6144 <at_ble_event_get+0xdc>
    6134:	4a84      	ldr	r2, [pc, #528]	; (6348 <at_ble_event_get+0x2e0>)
    6136:	4293      	cmp	r3, r2
    6138:	da0c      	bge.n	6154 <at_ble_event_get+0xec>
    613a:	4a84      	ldr	r2, [pc, #528]	; (634c <at_ble_event_get+0x2e4>)
    613c:	4293      	cmp	r3, r2
    613e:	d009      	beq.n	6154 <at_ble_event_get+0xec>
    6140:	2300      	movs	r3, #0
    6142:	e008      	b.n	6156 <at_ble_event_get+0xee>
    6144:	4882      	ldr	r0, [pc, #520]	; (6350 <at_ble_event_get+0x2e8>)
    6146:	4283      	cmp	r3, r0
    6148:	d1fa      	bne.n	6140 <at_ble_event_get+0xd8>
    614a:	0213      	lsls	r3, r2, #8
    614c:	430b      	orrs	r3, r1
    614e:	80b3      	strh	r3, [r6, #4]
    6150:	2338      	movs	r3, #56	; 0x38
    6152:	e000      	b.n	6156 <at_ble_event_get+0xee>
    6154:	2337      	movs	r3, #55	; 0x37
    6156:	9a02      	ldr	r2, [sp, #8]
    6158:	7013      	strb	r3, [r2, #0]
    615a:	e7cc      	b.n	60f6 <at_ble_event_get+0x8e>
    615c:	4b7d      	ldr	r3, [pc, #500]	; (6354 <at_ble_event_get+0x2ec>)
    615e:	429c      	cmp	r4, r3
    6160:	d100      	bne.n	6164 <at_ble_event_get+0xfc>
    6162:	e1a4      	b.n	64ae <at_ble_event_get+0x446>
    6164:	d900      	bls.n	6168 <at_ble_event_get+0x100>
    6166:	e08a      	b.n	627e <at_ble_event_get+0x216>
    6168:	4b7b      	ldr	r3, [pc, #492]	; (6358 <at_ble_event_get+0x2f0>)
    616a:	429c      	cmp	r4, r3
    616c:	d100      	bne.n	6170 <at_ble_event_get+0x108>
    616e:	e205      	b.n	657c <at_ble_event_get+0x514>
    6170:	d842      	bhi.n	61f8 <at_ble_event_get+0x190>
    6172:	4b7a      	ldr	r3, [pc, #488]	; (635c <at_ble_event_get+0x2f4>)
    6174:	429c      	cmp	r4, r3
    6176:	d100      	bne.n	617a <at_ble_event_get+0x112>
    6178:	e1ec      	b.n	6554 <at_ble_event_get+0x4ec>
    617a:	d81c      	bhi.n	61b6 <at_ble_event_get+0x14e>
    617c:	4b78      	ldr	r3, [pc, #480]	; (6360 <at_ble_event_get+0x2f8>)
    617e:	273b      	movs	r7, #59	; 0x3b
    6180:	429c      	cmp	r4, r3
    6182:	d008      	beq.n	6196 <at_ble_event_get+0x12e>
    6184:	d80a      	bhi.n	619c <at_ble_event_get+0x134>
    6186:	3f02      	subs	r7, #2
    6188:	42bc      	cmp	r4, r7
    618a:	d004      	beq.n	6196 <at_ble_event_get+0x12e>
    618c:	4b75      	ldr	r3, [pc, #468]	; (6364 <at_ble_event_get+0x2fc>)
    618e:	429c      	cmp	r4, r3
    6190:	d100      	bne.n	6194 <at_ble_event_get+0x12c>
    6192:	e196      	b.n	64c2 <at_ble_event_get+0x45a>
    6194:	2700      	movs	r7, #0
    6196:	9b02      	ldr	r3, [sp, #8]
    6198:	701f      	strb	r7, [r3, #0]
    619a:	e7ac      	b.n	60f6 <at_ble_event_get+0x8e>
    619c:	4b72      	ldr	r3, [pc, #456]	; (6368 <at_ble_event_get+0x300>)
    619e:	429c      	cmp	r4, r3
    61a0:	d100      	bne.n	61a4 <at_ble_event_get+0x13c>
    61a2:	e173      	b.n	648c <at_ble_event_get+0x424>
    61a4:	4b71      	ldr	r3, [pc, #452]	; (636c <at_ble_event_get+0x304>)
    61a6:	429c      	cmp	r4, r3
    61a8:	d1f4      	bne.n	6194 <at_ble_event_get+0x12c>
    61aa:	0031      	movs	r1, r6
    61ac:	0028      	movs	r0, r5
    61ae:	4b70      	ldr	r3, [pc, #448]	; (6370 <at_ble_event_get+0x308>)
    61b0:	4798      	blx	r3
    61b2:	272c      	movs	r7, #44	; 0x2c
    61b4:	e7ef      	b.n	6196 <at_ble_event_get+0x12e>
    61b6:	4b6f      	ldr	r3, [pc, #444]	; (6374 <at_ble_event_get+0x30c>)
    61b8:	429c      	cmp	r4, r3
    61ba:	d100      	bne.n	61be <at_ble_event_get+0x156>
    61bc:	e1d0      	b.n	6560 <at_ble_event_get+0x4f8>
    61be:	d80d      	bhi.n	61dc <at_ble_event_get+0x174>
    61c0:	3b04      	subs	r3, #4
    61c2:	429c      	cmp	r4, r3
    61c4:	d100      	bne.n	61c8 <at_ble_event_get+0x160>
    61c6:	e1eb      	b.n	65a0 <at_ble_event_get+0x538>
    61c8:	4b6b      	ldr	r3, [pc, #428]	; (6378 <at_ble_event_get+0x310>)
    61ca:	429c      	cmp	r4, r3
    61cc:	d1e2      	bne.n	6194 <at_ble_event_get+0x12c>
    61ce:	0032      	movs	r2, r6
    61d0:	0029      	movs	r1, r5
    61d2:	9800      	ldr	r0, [sp, #0]
    61d4:	4b69      	ldr	r3, [pc, #420]	; (637c <at_ble_event_get+0x314>)
    61d6:	4798      	blx	r3
    61d8:	2724      	movs	r7, #36	; 0x24
    61da:	e7dc      	b.n	6196 <at_ble_event_get+0x12e>
    61dc:	4b68      	ldr	r3, [pc, #416]	; (6380 <at_ble_event_get+0x318>)
    61de:	429c      	cmp	r4, r3
    61e0:	d100      	bne.n	61e4 <at_ble_event_get+0x17c>
    61e2:	e1c4      	b.n	656e <at_ble_event_get+0x506>
    61e4:	4b67      	ldr	r3, [pc, #412]	; (6384 <at_ble_event_get+0x31c>)
    61e6:	429c      	cmp	r4, r3
    61e8:	d1d4      	bne.n	6194 <at_ble_event_get+0x12c>
    61ea:	0032      	movs	r2, r6
    61ec:	0029      	movs	r1, r5
    61ee:	9800      	ldr	r0, [sp, #0]
    61f0:	4b65      	ldr	r3, [pc, #404]	; (6388 <at_ble_event_get+0x320>)
    61f2:	4798      	blx	r3
    61f4:	2716      	movs	r7, #22
    61f6:	e7ce      	b.n	6196 <at_ble_event_get+0x12e>
    61f8:	4b64      	ldr	r3, [pc, #400]	; (638c <at_ble_event_get+0x324>)
    61fa:	429c      	cmp	r4, r3
    61fc:	d100      	bne.n	6200 <at_ble_event_get+0x198>
    61fe:	e1d4      	b.n	65aa <at_ble_event_get+0x542>
    6200:	d81e      	bhi.n	6240 <at_ble_event_get+0x1d8>
    6202:	4b63      	ldr	r3, [pc, #396]	; (6390 <at_ble_event_get+0x328>)
    6204:	429c      	cmp	r4, r3
    6206:	d100      	bne.n	620a <at_ble_event_get+0x1a2>
    6208:	e1bf      	b.n	658a <at_ble_event_get+0x522>
    620a:	d80b      	bhi.n	6224 <at_ble_event_get+0x1bc>
    620c:	4b61      	ldr	r3, [pc, #388]	; (6394 <at_ble_event_get+0x32c>)
    620e:	429c      	cmp	r4, r3
    6210:	d100      	bne.n	6214 <at_ble_event_get+0x1ac>
    6212:	e1d5      	b.n	65c0 <at_ble_event_get+0x558>
    6214:	4b60      	ldr	r3, [pc, #384]	; (6398 <at_ble_event_get+0x330>)
    6216:	429c      	cmp	r4, r3
    6218:	d1bc      	bne.n	6194 <at_ble_event_get+0x12c>
    621a:	0032      	movs	r2, r6
    621c:	0029      	movs	r1, r5
    621e:	9800      	ldr	r0, [sp, #0]
    6220:	4b5e      	ldr	r3, [pc, #376]	; (639c <at_ble_event_get+0x334>)
    6222:	e048      	b.n	62b6 <at_ble_event_get+0x24e>
    6224:	4b5e      	ldr	r3, [pc, #376]	; (63a0 <at_ble_event_get+0x338>)
    6226:	429c      	cmp	r4, r3
    6228:	d100      	bne.n	622c <at_ble_event_get+0x1c4>
    622a:	e1d0      	b.n	65ce <at_ble_event_get+0x566>
    622c:	4b5d      	ldr	r3, [pc, #372]	; (63a4 <at_ble_event_get+0x33c>)
    622e:	429c      	cmp	r4, r3
    6230:	d1b0      	bne.n	6194 <at_ble_event_get+0x12c>
    6232:	9b00      	ldr	r3, [sp, #0]
    6234:	0031      	movs	r1, r6
    6236:	0a1b      	lsrs	r3, r3, #8
    6238:	8033      	strh	r3, [r6, #0]
    623a:	0028      	movs	r0, r5
    623c:	4b5a      	ldr	r3, [pc, #360]	; (63a8 <at_ble_event_get+0x340>)
    623e:	e00e      	b.n	625e <at_ble_event_get+0x1f6>
    6240:	4b5a      	ldr	r3, [pc, #360]	; (63ac <at_ble_event_get+0x344>)
    6242:	273a      	movs	r7, #58	; 0x3a
    6244:	429c      	cmp	r4, r3
    6246:	d0a6      	beq.n	6196 <at_ble_event_get+0x12e>
    6248:	d80c      	bhi.n	6264 <at_ble_event_get+0x1fc>
    624a:	4b59      	ldr	r3, [pc, #356]	; (63b0 <at_ble_event_get+0x348>)
    624c:	429c      	cmp	r4, r3
    624e:	d100      	bne.n	6252 <at_ble_event_get+0x1ea>
    6250:	e1b0      	b.n	65b4 <at_ble_event_get+0x54c>
    6252:	33e9      	adds	r3, #233	; 0xe9
    6254:	429c      	cmp	r4, r3
    6256:	d19d      	bne.n	6194 <at_ble_event_get+0x12c>
    6258:	0031      	movs	r1, r6
    625a:	0028      	movs	r0, r5
    625c:	4b55      	ldr	r3, [pc, #340]	; (63b4 <at_ble_event_get+0x34c>)
    625e:	4798      	blx	r3
    6260:	0007      	movs	r7, r0
    6262:	e798      	b.n	6196 <at_ble_event_get+0x12e>
    6264:	4b54      	ldr	r3, [pc, #336]	; (63b8 <at_ble_event_get+0x350>)
    6266:	429c      	cmp	r4, r3
    6268:	d100      	bne.n	626c <at_ble_event_get+0x204>
    626a:	e11a      	b.n	64a2 <at_ble_event_get+0x43a>
    626c:	3308      	adds	r3, #8
    626e:	429c      	cmp	r4, r3
    6270:	d190      	bne.n	6194 <at_ble_event_get+0x12c>
    6272:	0031      	movs	r1, r6
    6274:	0028      	movs	r0, r5
    6276:	4b51      	ldr	r3, [pc, #324]	; (63bc <at_ble_event_get+0x354>)
    6278:	4798      	blx	r3
    627a:	2701      	movs	r7, #1
    627c:	e78b      	b.n	6196 <at_ble_event_get+0x12e>
    627e:	4b50      	ldr	r3, [pc, #320]	; (63c0 <at_ble_event_get+0x358>)
    6280:	429c      	cmp	r4, r3
    6282:	d100      	bne.n	6286 <at_ble_event_get+0x21e>
    6284:	e13c      	b.n	6500 <at_ble_event_get+0x498>
    6286:	d900      	bls.n	628a <at_ble_event_get+0x222>
    6288:	e0b8      	b.n	63fc <at_ble_event_get+0x394>
    628a:	4b4e      	ldr	r3, [pc, #312]	; (63c4 <at_ble_event_get+0x35c>)
    628c:	429c      	cmp	r4, r3
    628e:	d100      	bne.n	6292 <at_ble_event_get+0x22a>
    6290:	e15b      	b.n	654a <at_ble_event_get+0x4e2>
    6292:	d821      	bhi.n	62d8 <at_ble_event_get+0x270>
    6294:	4b4c      	ldr	r3, [pc, #304]	; (63c8 <at_ble_event_get+0x360>)
    6296:	429c      	cmp	r4, r3
    6298:	d100      	bne.n	629c <at_ble_event_get+0x234>
    629a:	e11f      	b.n	64dc <at_ble_event_get+0x474>
    629c:	d80d      	bhi.n	62ba <at_ble_event_get+0x252>
    629e:	4b4b      	ldr	r3, [pc, #300]	; (63cc <at_ble_event_get+0x364>)
    62a0:	429c      	cmp	r4, r3
    62a2:	d100      	bne.n	62a6 <at_ble_event_get+0x23e>
    62a4:	e109      	b.n	64ba <at_ble_event_get+0x452>
    62a6:	33e4      	adds	r3, #228	; 0xe4
    62a8:	429c      	cmp	r4, r3
    62aa:	d000      	beq.n	62ae <at_ble_event_get+0x246>
    62ac:	e772      	b.n	6194 <at_ble_event_get+0x12c>
    62ae:	0032      	movs	r2, r6
    62b0:	0029      	movs	r1, r5
    62b2:	9800      	ldr	r0, [sp, #0]
    62b4:	4b46      	ldr	r3, [pc, #280]	; (63d0 <at_ble_event_get+0x368>)
    62b6:	4798      	blx	r3
    62b8:	e7d2      	b.n	6260 <at_ble_event_get+0x1f8>
    62ba:	4b46      	ldr	r3, [pc, #280]	; (63d4 <at_ble_event_get+0x36c>)
    62bc:	429c      	cmp	r4, r3
    62be:	d100      	bne.n	62c2 <at_ble_event_get+0x25a>
    62c0:	e105      	b.n	64ce <at_ble_event_get+0x466>
    62c2:	4b45      	ldr	r3, [pc, #276]	; (63d8 <at_ble_event_get+0x370>)
    62c4:	429c      	cmp	r4, r3
    62c6:	d000      	beq.n	62ca <at_ble_event_get+0x262>
    62c8:	e764      	b.n	6194 <at_ble_event_get+0x12c>
    62ca:	0032      	movs	r2, r6
    62cc:	0029      	movs	r1, r5
    62ce:	9800      	ldr	r0, [sp, #0]
    62d0:	4b42      	ldr	r3, [pc, #264]	; (63dc <at_ble_event_get+0x374>)
    62d2:	4798      	blx	r3
    62d4:	273d      	movs	r7, #61	; 0x3d
    62d6:	e75e      	b.n	6196 <at_ble_event_get+0x12e>
    62d8:	4b41      	ldr	r3, [pc, #260]	; (63e0 <at_ble_event_get+0x378>)
    62da:	429c      	cmp	r4, r3
    62dc:	d100      	bne.n	62e0 <at_ble_event_get+0x278>
    62de:	e103      	b.n	64e8 <at_ble_event_get+0x480>
    62e0:	d80c      	bhi.n	62fc <at_ble_event_get+0x294>
    62e2:	4b40      	ldr	r3, [pc, #256]	; (63e4 <at_ble_event_get+0x37c>)
    62e4:	429c      	cmp	r4, r3
    62e6:	d100      	bne.n	62ea <at_ble_event_get+0x282>
    62e8:	e12a      	b.n	6540 <at_ble_event_get+0x4d8>
    62ea:	4b3f      	ldr	r3, [pc, #252]	; (63e8 <at_ble_event_get+0x380>)
    62ec:	429c      	cmp	r4, r3
    62ee:	d000      	beq.n	62f2 <at_ble_event_get+0x28a>
    62f0:	e750      	b.n	6194 <at_ble_event_get+0x12c>
    62f2:	0032      	movs	r2, r6
    62f4:	0029      	movs	r1, r5
    62f6:	9800      	ldr	r0, [sp, #0]
    62f8:	4b3c      	ldr	r3, [pc, #240]	; (63ec <at_ble_event_get+0x384>)
    62fa:	e7dc      	b.n	62b6 <at_ble_event_get+0x24e>
    62fc:	4b3c      	ldr	r3, [pc, #240]	; (63f0 <at_ble_event_get+0x388>)
    62fe:	429c      	cmp	r4, r3
    6300:	d100      	bne.n	6304 <at_ble_event_get+0x29c>
    6302:	e0f6      	b.n	64f2 <at_ble_event_get+0x48a>
    6304:	4b3b      	ldr	r3, [pc, #236]	; (63f4 <at_ble_event_get+0x38c>)
    6306:	429c      	cmp	r4, r3
    6308:	d000      	beq.n	630c <at_ble_event_get+0x2a4>
    630a:	e743      	b.n	6194 <at_ble_event_get+0x12c>
    630c:	0032      	movs	r2, r6
    630e:	0029      	movs	r1, r5
    6310:	9800      	ldr	r0, [sp, #0]
    6312:	4b39      	ldr	r3, [pc, #228]	; (63f8 <at_ble_event_get+0x390>)
    6314:	4798      	blx	r3
    6316:	270f      	movs	r7, #15
    6318:	e73d      	b.n	6196 <at_ble_event_get+0x12e>
    631a:	46c0      	nop			; (mov r8, r8)
    631c:	00007d75 	.word	0x00007d75
    6320:	200023d8 	.word	0x200023d8
    6324:	00007dd1 	.word	0x00007dd1
    6328:	00007dad 	.word	0x00007dad
    632c:	200023d4 	.word	0x200023d4
    6330:	200023ec 	.word	0x200023ec
    6334:	200023dc 	.word	0x200023dc
    6338:	00005f15 	.word	0x00005f15
    633c:	0000a309 	.word	0x0000a309
    6340:	0000ffff 	.word	0x0000ffff
    6344:	0000201e 	.word	0x0000201e
    6348:	0000201d 	.word	0x0000201d
    634c:	00000c03 	.word	0x00000c03
    6350:	0000201f 	.word	0x0000201f
    6354:	00000d15 	.word	0x00000d15
    6358:	00000c07 	.word	0x00000c07
    635c:	00000a03 	.word	0x00000a03
    6360:	0000033a 	.word	0x0000033a
    6364:	00000339 	.word	0x00000339
    6368:	0000033b 	.word	0x0000033b
    636c:	00000a02 	.word	0x00000a02
    6370:	00007ed5 	.word	0x00007ed5
    6374:	00000c04 	.word	0x00000c04
    6378:	00000c02 	.word	0x00000c02
    637c:	0000985d 	.word	0x0000985d
    6380:	00000c05 	.word	0x00000c05
    6384:	00000c06 	.word	0x00000c06
    6388:	0000970d 	.word	0x0000970d
    638c:	00000c15 	.word	0x00000c15
    6390:	00000c0d 	.word	0x00000c0d
    6394:	00000c09 	.word	0x00000c09
    6398:	00000c0c 	.word	0x00000c0c
    639c:	00009785 	.word	0x00009785
    63a0:	00000c12 	.word	0x00000c12
    63a4:	00000c13 	.word	0x00000c13
    63a8:	000076a1 	.word	0x000076a1
    63ac:	00000d01 	.word	0x00000d01
    63b0:	00000c17 	.word	0x00000c17
    63b4:	0000909d 	.word	0x0000909d
    63b8:	00000d08 	.word	0x00000d08
    63bc:	00009319 	.word	0x00009319
    63c0:	00000e1b 	.word	0x00000e1b
    63c4:	00000e0f 	.word	0x00000e0f
    63c8:	00000e03 	.word	0x00000e03
    63cc:	00000d1c 	.word	0x00000d1c
    63d0:	0000840d 	.word	0x0000840d
    63d4:	00000e06 	.word	0x00000e06
    63d8:	00000e0a 	.word	0x00000e0a
    63dc:	00008c81 	.word	0x00008c81
    63e0:	00000e15 	.word	0x00000e15
    63e4:	00000e11 	.word	0x00000e11
    63e8:	00000e13 	.word	0x00000e13
    63ec:	00008855 	.word	0x00008855
    63f0:	00000e17 	.word	0x00000e17
    63f4:	00000e19 	.word	0x00000e19
    63f8:	00008bc5 	.word	0x00008bc5
    63fc:	4b82      	ldr	r3, [pc, #520]	; (6608 <at_ble_event_get+0x5a0>)
    63fe:	429c      	cmp	r4, r3
    6400:	d100      	bne.n	6404 <at_ble_event_get+0x39c>
    6402:	e091      	b.n	6528 <at_ble_event_get+0x4c0>
    6404:	d81f      	bhi.n	6446 <at_ble_event_get+0x3de>
    6406:	4b81      	ldr	r3, [pc, #516]	; (660c <at_ble_event_get+0x5a4>)
    6408:	429c      	cmp	r4, r3
    640a:	d100      	bne.n	640e <at_ble_event_get+0x3a6>
    640c:	e092      	b.n	6534 <at_ble_event_get+0x4cc>
    640e:	d80d      	bhi.n	642c <at_ble_event_get+0x3c4>
    6410:	4b7f      	ldr	r3, [pc, #508]	; (6610 <at_ble_event_get+0x5a8>)
    6412:	429c      	cmp	r4, r3
    6414:	d07b      	beq.n	650e <at_ble_event_get+0x4a6>
    6416:	4b7f      	ldr	r3, [pc, #508]	; (6614 <at_ble_event_get+0x5ac>)
    6418:	429c      	cmp	r4, r3
    641a:	d000      	beq.n	641e <at_ble_event_get+0x3b6>
    641c:	e6ba      	b.n	6194 <at_ble_event_get+0x12c>
    641e:	0032      	movs	r2, r6
    6420:	0029      	movs	r1, r5
    6422:	9800      	ldr	r0, [sp, #0]
    6424:	4b7c      	ldr	r3, [pc, #496]	; (6618 <at_ble_event_get+0x5b0>)
    6426:	4798      	blx	r3
    6428:	2713      	movs	r7, #19
    642a:	e6b4      	b.n	6196 <at_ble_event_get+0x12e>
    642c:	4b7b      	ldr	r3, [pc, #492]	; (661c <at_ble_event_get+0x5b4>)
    642e:	429c      	cmp	r4, r3
    6430:	d074      	beq.n	651c <at_ble_event_get+0x4b4>
    6432:	4b7b      	ldr	r3, [pc, #492]	; (6620 <at_ble_event_get+0x5b8>)
    6434:	429c      	cmp	r4, r3
    6436:	d000      	beq.n	643a <at_ble_event_get+0x3d2>
    6438:	e6ac      	b.n	6194 <at_ble_event_get+0x12c>
    643a:	0031      	movs	r1, r6
    643c:	0028      	movs	r0, r5
    643e:	4b79      	ldr	r3, [pc, #484]	; (6624 <at_ble_event_get+0x5bc>)
    6440:	4798      	blx	r3
    6442:	272b      	movs	r7, #43	; 0x2b
    6444:	e6a7      	b.n	6196 <at_ble_event_get+0x12e>
    6446:	4b78      	ldr	r3, [pc, #480]	; (6628 <at_ble_event_get+0x5c0>)
    6448:	429c      	cmp	r4, r3
    644a:	d100      	bne.n	644e <at_ble_event_get+0x3e6>
    644c:	e0cd      	b.n	65ea <at_ble_event_get+0x582>
    644e:	d80e      	bhi.n	646e <at_ble_event_get+0x406>
    6450:	4b76      	ldr	r3, [pc, #472]	; (662c <at_ble_event_get+0x5c4>)
    6452:	429c      	cmp	r4, r3
    6454:	d100      	bne.n	6458 <at_ble_event_get+0x3f0>
    6456:	e0c1      	b.n	65dc <at_ble_event_get+0x574>
    6458:	4b75      	ldr	r3, [pc, #468]	; (6630 <at_ble_event_get+0x5c8>)
    645a:	429c      	cmp	r4, r3
    645c:	d000      	beq.n	6460 <at_ble_event_get+0x3f8>
    645e:	e699      	b.n	6194 <at_ble_event_get+0x12c>
    6460:	0032      	movs	r2, r6
    6462:	0029      	movs	r1, r5
    6464:	9800      	ldr	r0, [sp, #0]
    6466:	4b73      	ldr	r3, [pc, #460]	; (6634 <at_ble_event_get+0x5cc>)
    6468:	4798      	blx	r3
    646a:	2731      	movs	r7, #49	; 0x31
    646c:	e693      	b.n	6196 <at_ble_event_get+0x12e>
    646e:	4b72      	ldr	r3, [pc, #456]	; (6638 <at_ble_event_get+0x5d0>)
    6470:	429c      	cmp	r4, r3
    6472:	d100      	bne.n	6476 <at_ble_event_get+0x40e>
    6474:	e0c0      	b.n	65f8 <at_ble_event_get+0x590>
    6476:	4b71      	ldr	r3, [pc, #452]	; (663c <at_ble_event_get+0x5d4>)
    6478:	429c      	cmp	r4, r3
    647a:	d000      	beq.n	647e <at_ble_event_get+0x416>
    647c:	e68a      	b.n	6194 <at_ble_event_get+0x12c>
    647e:	0032      	movs	r2, r6
    6480:	0029      	movs	r1, r5
    6482:	9800      	ldr	r0, [sp, #0]
    6484:	4b6e      	ldr	r3, [pc, #440]	; (6640 <at_ble_event_get+0x5d8>)
    6486:	4798      	blx	r3
    6488:	2733      	movs	r7, #51	; 0x33
    648a:	e684      	b.n	6196 <at_ble_event_get+0x12e>
    648c:	2203      	movs	r2, #3
    648e:	496d      	ldr	r1, [pc, #436]	; (6644 <at_ble_event_get+0x5dc>)
    6490:	4b6d      	ldr	r3, [pc, #436]	; (6648 <at_ble_event_get+0x5e0>)
    6492:	a805      	add	r0, sp, #20
    6494:	4798      	blx	r3
    6496:	2103      	movs	r1, #3
    6498:	a805      	add	r0, sp, #20
    649a:	4b6c      	ldr	r3, [pc, #432]	; (664c <at_ble_event_get+0x5e4>)
    649c:	4798      	blx	r3
    649e:	273c      	movs	r7, #60	; 0x3c
    64a0:	e679      	b.n	6196 <at_ble_event_get+0x12e>
    64a2:	0031      	movs	r1, r6
    64a4:	0028      	movs	r0, r5
    64a6:	4b6a      	ldr	r3, [pc, #424]	; (6650 <at_ble_event_get+0x5e8>)
    64a8:	4798      	blx	r3
    64aa:	2705      	movs	r7, #5
    64ac:	e673      	b.n	6196 <at_ble_event_get+0x12e>
    64ae:	0031      	movs	r1, r6
    64b0:	0028      	movs	r0, r5
    64b2:	4b68      	ldr	r3, [pc, #416]	; (6654 <at_ble_event_get+0x5ec>)
    64b4:	4798      	blx	r3
    64b6:	2710      	movs	r7, #16
    64b8:	e66d      	b.n	6196 <at_ble_event_get+0x12e>
    64ba:	0031      	movs	r1, r6
    64bc:	0028      	movs	r0, r5
    64be:	4b66      	ldr	r3, [pc, #408]	; (6658 <at_ble_event_get+0x5f0>)
    64c0:	e6cd      	b.n	625e <at_ble_event_get+0x1f6>
    64c2:	0031      	movs	r1, r6
    64c4:	0028      	movs	r0, r5
    64c6:	4b65      	ldr	r3, [pc, #404]	; (665c <at_ble_event_get+0x5f4>)
    64c8:	4798      	blx	r3
    64ca:	2703      	movs	r7, #3
    64cc:	e663      	b.n	6196 <at_ble_event_get+0x12e>
    64ce:	0032      	movs	r2, r6
    64d0:	0029      	movs	r1, r5
    64d2:	9800      	ldr	r0, [sp, #0]
    64d4:	4b62      	ldr	r3, [pc, #392]	; (6660 <at_ble_event_get+0x5f8>)
    64d6:	4798      	blx	r3
    64d8:	2712      	movs	r7, #18
    64da:	e65c      	b.n	6196 <at_ble_event_get+0x12e>
    64dc:	0031      	movs	r1, r6
    64de:	0028      	movs	r0, r5
    64e0:	4b60      	ldr	r3, [pc, #384]	; (6664 <at_ble_event_get+0x5fc>)
    64e2:	4798      	blx	r3
    64e4:	2707      	movs	r7, #7
    64e6:	e656      	b.n	6196 <at_ble_event_get+0x12e>
    64e8:	0032      	movs	r2, r6
    64ea:	0029      	movs	r1, r5
    64ec:	9800      	ldr	r0, [sp, #0]
    64ee:	4b5e      	ldr	r3, [pc, #376]	; (6668 <at_ble_event_get+0x600>)
    64f0:	e6e1      	b.n	62b6 <at_ble_event_get+0x24e>
    64f2:	0032      	movs	r2, r6
    64f4:	0029      	movs	r1, r5
    64f6:	9800      	ldr	r0, [sp, #0]
    64f8:	4b5c      	ldr	r3, [pc, #368]	; (666c <at_ble_event_get+0x604>)
    64fa:	4798      	blx	r3
    64fc:	270e      	movs	r7, #14
    64fe:	e64a      	b.n	6196 <at_ble_event_get+0x12e>
    6500:	0032      	movs	r2, r6
    6502:	0029      	movs	r1, r5
    6504:	9800      	ldr	r0, [sp, #0]
    6506:	4b5a      	ldr	r3, [pc, #360]	; (6670 <at_ble_event_get+0x608>)
    6508:	4798      	blx	r3
    650a:	270c      	movs	r7, #12
    650c:	e643      	b.n	6196 <at_ble_event_get+0x12e>
    650e:	0032      	movs	r2, r6
    6510:	0029      	movs	r1, r5
    6512:	9800      	ldr	r0, [sp, #0]
    6514:	4b57      	ldr	r3, [pc, #348]	; (6674 <at_ble_event_get+0x60c>)
    6516:	4798      	blx	r3
    6518:	2711      	movs	r7, #17
    651a:	e63c      	b.n	6196 <at_ble_event_get+0x12e>
    651c:	0031      	movs	r1, r6
    651e:	0028      	movs	r0, r5
    6520:	4b55      	ldr	r3, [pc, #340]	; (6678 <at_ble_event_get+0x610>)
    6522:	4798      	blx	r3
    6524:	2729      	movs	r7, #41	; 0x29
    6526:	e636      	b.n	6196 <at_ble_event_get+0x12e>
    6528:	0031      	movs	r1, r6
    652a:	0028      	movs	r0, r5
    652c:	4b53      	ldr	r3, [pc, #332]	; (667c <at_ble_event_get+0x614>)
    652e:	4798      	blx	r3
    6530:	272a      	movs	r7, #42	; 0x2a
    6532:	e630      	b.n	6196 <at_ble_event_get+0x12e>
    6534:	0031      	movs	r1, r6
    6536:	0028      	movs	r0, r5
    6538:	4b51      	ldr	r3, [pc, #324]	; (6680 <at_ble_event_get+0x618>)
    653a:	4798      	blx	r3
    653c:	2728      	movs	r7, #40	; 0x28
    653e:	e62a      	b.n	6196 <at_ble_event_get+0x12e>
    6540:	0032      	movs	r2, r6
    6542:	0029      	movs	r1, r5
    6544:	9800      	ldr	r0, [sp, #0]
    6546:	4b4f      	ldr	r3, [pc, #316]	; (6684 <at_ble_event_get+0x61c>)
    6548:	e6b5      	b.n	62b6 <at_ble_event_get+0x24e>
    654a:	0032      	movs	r2, r6
    654c:	0029      	movs	r1, r5
    654e:	9800      	ldr	r0, [sp, #0]
    6550:	4b4d      	ldr	r3, [pc, #308]	; (6688 <at_ble_event_get+0x620>)
    6552:	e6b0      	b.n	62b6 <at_ble_event_get+0x24e>
    6554:	0031      	movs	r1, r6
    6556:	0028      	movs	r0, r5
    6558:	4b4c      	ldr	r3, [pc, #304]	; (668c <at_ble_event_get+0x624>)
    655a:	4798      	blx	r3
    655c:	272d      	movs	r7, #45	; 0x2d
    655e:	e61a      	b.n	6196 <at_ble_event_get+0x12e>
    6560:	0032      	movs	r2, r6
    6562:	0029      	movs	r1, r5
    6564:	9800      	ldr	r0, [sp, #0]
    6566:	4b4a      	ldr	r3, [pc, #296]	; (6690 <at_ble_event_get+0x628>)
    6568:	4798      	blx	r3
    656a:	2714      	movs	r7, #20
    656c:	e613      	b.n	6196 <at_ble_event_get+0x12e>
    656e:	0032      	movs	r2, r6
    6570:	0029      	movs	r1, r5
    6572:	9800      	ldr	r0, [sp, #0]
    6574:	4b47      	ldr	r3, [pc, #284]	; (6694 <at_ble_event_get+0x62c>)
    6576:	4798      	blx	r3
    6578:	2715      	movs	r7, #21
    657a:	e60c      	b.n	6196 <at_ble_event_get+0x12e>
    657c:	0032      	movs	r2, r6
    657e:	0029      	movs	r1, r5
    6580:	9800      	ldr	r0, [sp, #0]
    6582:	4b45      	ldr	r3, [pc, #276]	; (6698 <at_ble_event_get+0x630>)
    6584:	4798      	blx	r3
    6586:	2717      	movs	r7, #23
    6588:	e605      	b.n	6196 <at_ble_event_get+0x12e>
    658a:	0029      	movs	r1, r5
    658c:	0032      	movs	r2, r6
    658e:	9800      	ldr	r0, [sp, #0]
    6590:	4b42      	ldr	r3, [pc, #264]	; (669c <at_ble_event_get+0x634>)
    6592:	4798      	blx	r3
    6594:	88b1      	ldrh	r1, [r6, #4]
    6596:	0007      	movs	r7, r0
    6598:	4b41      	ldr	r3, [pc, #260]	; (66a0 <at_ble_event_get+0x638>)
    659a:	8830      	ldrh	r0, [r6, #0]
    659c:	4798      	blx	r3
    659e:	e5fa      	b.n	6196 <at_ble_event_get+0x12e>
    65a0:	0032      	movs	r2, r6
    65a2:	0029      	movs	r1, r5
    65a4:	9800      	ldr	r0, [sp, #0]
    65a6:	4b3f      	ldr	r3, [pc, #252]	; (66a4 <at_ble_event_get+0x63c>)
    65a8:	e685      	b.n	62b6 <at_ble_event_get+0x24e>
    65aa:	0032      	movs	r2, r6
    65ac:	0029      	movs	r1, r5
    65ae:	9800      	ldr	r0, [sp, #0]
    65b0:	4b3d      	ldr	r3, [pc, #244]	; (66a8 <at_ble_event_get+0x640>)
    65b2:	e680      	b.n	62b6 <at_ble_event_get+0x24e>
    65b4:	9a00      	ldr	r2, [sp, #0]
    65b6:	0031      	movs	r1, r6
    65b8:	0028      	movs	r0, r5
    65ba:	4b3c      	ldr	r3, [pc, #240]	; (66ac <at_ble_event_get+0x644>)
    65bc:	4798      	blx	r3
    65be:	e689      	b.n	62d4 <at_ble_event_get+0x26c>
    65c0:	0032      	movs	r2, r6
    65c2:	0029      	movs	r1, r5
    65c4:	9800      	ldr	r0, [sp, #0]
    65c6:	4b3a      	ldr	r3, [pc, #232]	; (66b0 <at_ble_event_get+0x648>)
    65c8:	4798      	blx	r3
    65ca:	2719      	movs	r7, #25
    65cc:	e5e3      	b.n	6196 <at_ble_event_get+0x12e>
    65ce:	0032      	movs	r2, r6
    65d0:	0029      	movs	r1, r5
    65d2:	9800      	ldr	r0, [sp, #0]
    65d4:	4b37      	ldr	r3, [pc, #220]	; (66b4 <at_ble_event_get+0x64c>)
    65d6:	4798      	blx	r3
    65d8:	2721      	movs	r7, #33	; 0x21
    65da:	e5dc      	b.n	6196 <at_ble_event_get+0x12e>
    65dc:	0032      	movs	r2, r6
    65de:	0029      	movs	r1, r5
    65e0:	9800      	ldr	r0, [sp, #0]
    65e2:	4b35      	ldr	r3, [pc, #212]	; (66b8 <at_ble_event_get+0x650>)
    65e4:	4798      	blx	r3
    65e6:	2734      	movs	r7, #52	; 0x34
    65e8:	e5d5      	b.n	6196 <at_ble_event_get+0x12e>
    65ea:	0032      	movs	r2, r6
    65ec:	0029      	movs	r1, r5
    65ee:	9800      	ldr	r0, [sp, #0]
    65f0:	4b32      	ldr	r3, [pc, #200]	; (66bc <at_ble_event_get+0x654>)
    65f2:	4798      	blx	r3
    65f4:	2735      	movs	r7, #53	; 0x35
    65f6:	e5ce      	b.n	6196 <at_ble_event_get+0x12e>
    65f8:	0032      	movs	r2, r6
    65fa:	0029      	movs	r1, r5
    65fc:	9800      	ldr	r0, [sp, #0]
    65fe:	4b30      	ldr	r3, [pc, #192]	; (66c0 <at_ble_event_get+0x658>)
    6600:	4798      	blx	r3
    6602:	2736      	movs	r7, #54	; 0x36
    6604:	e5c7      	b.n	6196 <at_ble_event_get+0x12e>
    6606:	46c0      	nop			; (mov r8, r8)
    6608:	00000e27 	.word	0x00000e27
    660c:	00000e21 	.word	0x00000e21
    6610:	00000e1c 	.word	0x00000e1c
    6614:	00000e1d 	.word	0x00000e1d
    6618:	00008d71 	.word	0x00008d71
    661c:	00000e22 	.word	0x00000e22
    6620:	00000e25 	.word	0x00000e25
    6624:	00008df7 	.word	0x00008df7
    6628:	00001b05 	.word	0x00001b05
    662c:	00001b01 	.word	0x00001b01
    6630:	00001b03 	.word	0x00001b03
    6634:	00009b53 	.word	0x00009b53
    6638:	00001b06 	.word	0x00001b06
    663c:	00001b08 	.word	0x00001b08
    6640:	00009b6b 	.word	0x00009b6b
    6644:	0000c49d 	.word	0x0000c49d
    6648:	0000a2f7 	.word	0x0000a2f7
    664c:	00007859 	.word	0x00007859
    6650:	00009081 	.word	0x00009081
    6654:	00009415 	.word	0x00009415
    6658:	00009439 	.word	0x00009439
    665c:	00009457 	.word	0x00009457
    6660:	00008cf5 	.word	0x00008cf5
    6664:	000086d1 	.word	0x000086d1
    6668:	00008779 	.word	0x00008779
    666c:	00008b11 	.word	0x00008b11
    6670:	00008ca9 	.word	0x00008ca9
    6674:	00008cbf 	.word	0x00008cbf
    6678:	00008d89 	.word	0x00008d89
    667c:	00008db7 	.word	0x00008db7
    6680:	00008dcd 	.word	0x00008dcd
    6684:	00008c25 	.word	0x00008c25
    6688:	00008c4f 	.word	0x00008c4f
    668c:	00007f01 	.word	0x00007f01
    6690:	00009689 	.word	0x00009689
    6694:	000096c5 	.word	0x000096c5
    6698:	00009751 	.word	0x00009751
    669c:	00009785 	.word	0x00009785
    66a0:	00009641 	.word	0x00009641
    66a4:	000097e5 	.word	0x000097e5
    66a8:	0000770d 	.word	0x0000770d
    66ac:	000076d1 	.word	0x000076d1
    66b0:	0000986d 	.word	0x0000986d
    66b4:	000098ad 	.word	0x000098ad
    66b8:	00009b49 	.word	0x00009b49
    66bc:	00009b59 	.word	0x00009b59
    66c0:	00009b5f 	.word	0x00009b5f

000066c4 <internal_event_flush>:
    66c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    66c6:	2200      	movs	r2, #0
    66c8:	4b13      	ldr	r3, [pc, #76]	; (6718 <internal_event_flush+0x54>)
    66ca:	9001      	str	r0, [sp, #4]
    66cc:	681c      	ldr	r4, [r3, #0]
    66ce:	4b13      	ldr	r3, [pc, #76]	; (671c <internal_event_flush+0x58>)
    66d0:	4694      	mov	ip, r2
    66d2:	6818      	ldr	r0, [r3, #0]
    66d4:	0011      	movs	r1, r2
    66d6:	0023      	movs	r3, r4
    66d8:	2b00      	cmp	r3, #0
    66da:	d109      	bne.n	66f0 <internal_event_flush+0x2c>
    66dc:	4663      	mov	r3, ip
    66de:	2b00      	cmp	r3, #0
    66e0:	d001      	beq.n	66e6 <internal_event_flush+0x22>
    66e2:	4b0d      	ldr	r3, [pc, #52]	; (6718 <internal_event_flush+0x54>)
    66e4:	601c      	str	r4, [r3, #0]
    66e6:	2a00      	cmp	r2, #0
    66e8:	d001      	beq.n	66ee <internal_event_flush+0x2a>
    66ea:	4b0c      	ldr	r3, [pc, #48]	; (671c <internal_event_flush+0x58>)
    66ec:	6018      	str	r0, [r3, #0]
    66ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    66f0:	889e      	ldrh	r6, [r3, #4]
    66f2:	681d      	ldr	r5, [r3, #0]
    66f4:	0037      	movs	r7, r6
    66f6:	9e01      	ldr	r6, [sp, #4]
    66f8:	42b7      	cmp	r7, r6
    66fa:	d106      	bne.n	670a <internal_event_flush+0x46>
    66fc:	2900      	cmp	r1, #0
    66fe:	d007      	beq.n	6710 <internal_event_flush+0x4c>
    6700:	600d      	str	r5, [r1, #0]
    6702:	6018      	str	r0, [r3, #0]
    6704:	2201      	movs	r2, #1
    6706:	0018      	movs	r0, r3
    6708:	000b      	movs	r3, r1
    670a:	0019      	movs	r1, r3
    670c:	002b      	movs	r3, r5
    670e:	e7e3      	b.n	66d8 <internal_event_flush+0x14>
    6710:	2201      	movs	r2, #1
    6712:	002c      	movs	r4, r5
    6714:	4694      	mov	ip, r2
    6716:	e7f4      	b.n	6702 <internal_event_flush+0x3e>
    6718:	200023d8 	.word	0x200023d8
    671c:	200023d4 	.word	0x200023d4

00006720 <internal_conn_flush>:
    6720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6722:	2200      	movs	r2, #0
    6724:	4b17      	ldr	r3, [pc, #92]	; (6784 <internal_conn_flush+0x64>)
    6726:	4694      	mov	ip, r2
    6728:	681d      	ldr	r5, [r3, #0]
    672a:	4b17      	ldr	r3, [pc, #92]	; (6788 <internal_conn_flush+0x68>)
    672c:	0011      	movs	r1, r2
    672e:	681c      	ldr	r4, [r3, #0]
    6730:	002b      	movs	r3, r5
    6732:	9001      	str	r0, [sp, #4]
    6734:	2b00      	cmp	r3, #0
    6736:	d109      	bne.n	674c <internal_conn_flush+0x2c>
    6738:	4663      	mov	r3, ip
    673a:	2b00      	cmp	r3, #0
    673c:	d001      	beq.n	6742 <internal_conn_flush+0x22>
    673e:	4b11      	ldr	r3, [pc, #68]	; (6784 <internal_conn_flush+0x64>)
    6740:	601d      	str	r5, [r3, #0]
    6742:	2a00      	cmp	r2, #0
    6744:	d001      	beq.n	674a <internal_conn_flush+0x2a>
    6746:	4b10      	ldr	r3, [pc, #64]	; (6788 <internal_conn_flush+0x68>)
    6748:	601c      	str	r4, [r3, #0]
    674a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    674c:	88d8      	ldrh	r0, [r3, #6]
    674e:	681e      	ldr	r6, [r3, #0]
    6750:	0a07      	lsrs	r7, r0, #8
    6752:	9000      	str	r0, [sp, #0]
    6754:	0038      	movs	r0, r7
    6756:	9f01      	ldr	r7, [sp, #4]
    6758:	42b8      	cmp	r0, r7
    675a:	d10b      	bne.n	6774 <internal_conn_flush+0x54>
    675c:	27fd      	movs	r7, #253	; 0xfd
    675e:	9800      	ldr	r0, [sp, #0]
    6760:	4038      	ands	r0, r7
    6762:	280c      	cmp	r0, #12
    6764:	d106      	bne.n	6774 <internal_conn_flush+0x54>
    6766:	2900      	cmp	r1, #0
    6768:	d007      	beq.n	677a <internal_conn_flush+0x5a>
    676a:	600e      	str	r6, [r1, #0]
    676c:	601c      	str	r4, [r3, #0]
    676e:	2201      	movs	r2, #1
    6770:	001c      	movs	r4, r3
    6772:	000b      	movs	r3, r1
    6774:	0019      	movs	r1, r3
    6776:	0033      	movs	r3, r6
    6778:	e7dc      	b.n	6734 <internal_conn_flush+0x14>
    677a:	2201      	movs	r2, #1
    677c:	0035      	movs	r5, r6
    677e:	4694      	mov	ip, r2
    6780:	e7f4      	b.n	676c <internal_conn_flush+0x4c>
    6782:	46c0      	nop			; (mov r8, r8)
    6784:	200023d8 	.word	0x200023d8
    6788:	200023d4 	.word	0x200023d4

0000678c <gapm_set_adv_data>:
    678c:	b570      	push	{r4, r5, r6, lr}
    678e:	4c0e      	ldr	r4, [pc, #56]	; (67c8 <gapm_set_adv_data+0x3c>)
    6790:	001d      	movs	r5, r3
    6792:	0023      	movs	r3, r4
    6794:	3372      	adds	r3, #114	; 0x72
    6796:	0016      	movs	r6, r2
    6798:	7019      	strb	r1, [r3, #0]
    679a:	2900      	cmp	r1, #0
    679c:	d007      	beq.n	67ae <gapm_set_adv_data+0x22>
    679e:	4b0b      	ldr	r3, [pc, #44]	; (67cc <gapm_set_adv_data+0x40>)
    67a0:	4298      	cmp	r0, r3
    67a2:	d004      	beq.n	67ae <gapm_set_adv_data+0x22>
    67a4:	000a      	movs	r2, r1
    67a6:	0001      	movs	r1, r0
    67a8:	0018      	movs	r0, r3
    67aa:	4b09      	ldr	r3, [pc, #36]	; (67d0 <gapm_set_adv_data+0x44>)
    67ac:	4798      	blx	r3
    67ae:	3473      	adds	r4, #115	; 0x73
    67b0:	7025      	strb	r5, [r4, #0]
    67b2:	2d00      	cmp	r5, #0
    67b4:	d006      	beq.n	67c4 <gapm_set_adv_data+0x38>
    67b6:	4807      	ldr	r0, [pc, #28]	; (67d4 <gapm_set_adv_data+0x48>)
    67b8:	4286      	cmp	r6, r0
    67ba:	d003      	beq.n	67c4 <gapm_set_adv_data+0x38>
    67bc:	002a      	movs	r2, r5
    67be:	0031      	movs	r1, r6
    67c0:	4b03      	ldr	r3, [pc, #12]	; (67d0 <gapm_set_adv_data+0x44>)
    67c2:	4798      	blx	r3
    67c4:	bd70      	pop	{r4, r5, r6, pc}
    67c6:	46c0      	nop			; (mov r8, r8)
    67c8:	200032bc 	.word	0x200032bc
    67cc:	200032f0 	.word	0x200032f0
    67d0:	0000a2f7 	.word	0x0000a2f7
    67d4:	2000330f 	.word	0x2000330f

000067d8 <at_ble_device_name_set>:
    67d8:	b530      	push	{r4, r5, lr}
    67da:	23cf      	movs	r3, #207	; 0xcf
    67dc:	2800      	cmp	r0, #0
    67de:	d010      	beq.n	6802 <at_ble_device_name_set+0x2a>
    67e0:	1e4a      	subs	r2, r1, #1
    67e2:	2a1f      	cmp	r2, #31
    67e4:	d80d      	bhi.n	6802 <at_ble_device_name_set+0x2a>
    67e6:	4a08      	ldr	r2, [pc, #32]	; (6808 <at_ble_device_name_set+0x30>)
    67e8:	0013      	movs	r3, r2
    67ea:	33aa      	adds	r3, #170	; 0xaa
    67ec:	8019      	strh	r1, [r3, #0]
    67ee:	2300      	movs	r3, #0
    67f0:	001c      	movs	r4, r3
    67f2:	5cc5      	ldrb	r5, [r0, r3]
    67f4:	34ac      	adds	r4, #172	; 0xac
    67f6:	3301      	adds	r3, #1
    67f8:	5515      	strb	r5, [r2, r4]
    67fa:	b2dc      	uxtb	r4, r3
    67fc:	42a1      	cmp	r1, r4
    67fe:	d8f7      	bhi.n	67f0 <at_ble_device_name_set+0x18>
    6800:	2300      	movs	r3, #0
    6802:	0018      	movs	r0, r3
    6804:	bd30      	pop	{r4, r5, pc}
    6806:	46c0      	nop			; (mov r8, r8)
    6808:	200032bc 	.word	0x200032bc

0000680c <at_ble_addr_get>:
    680c:	b510      	push	{r4, lr}
    680e:	0004      	movs	r4, r0
    6810:	20cf      	movs	r0, #207	; 0xcf
    6812:	2c00      	cmp	r4, #0
    6814:	d006      	beq.n	6824 <at_ble_addr_get+0x18>
    6816:	4b04      	ldr	r3, [pc, #16]	; (6828 <at_ble_addr_get+0x1c>)
    6818:	0021      	movs	r1, r4
    681a:	38ce      	subs	r0, #206	; 0xce
    681c:	4798      	blx	r3
    681e:	4b03      	ldr	r3, [pc, #12]	; (682c <at_ble_addr_get+0x20>)
    6820:	791b      	ldrb	r3, [r3, #4]
    6822:	7023      	strb	r3, [r4, #0]
    6824:	bd10      	pop	{r4, pc}
    6826:	46c0      	nop			; (mov r8, r8)
    6828:	00008f75 	.word	0x00008f75
    682c:	200032bc 	.word	0x200032bc

00006830 <at_ble_set_dev_config>:
    6830:	b5f0      	push	{r4, r5, r6, r7, lr}
    6832:	0004      	movs	r4, r0
    6834:	b087      	sub	sp, #28
    6836:	25cf      	movs	r5, #207	; 0xcf
    6838:	2800      	cmp	r0, #0
    683a:	d036      	beq.n	68aa <at_ble_set_dev_config+0x7a>
    683c:	7903      	ldrb	r3, [r0, #4]
    683e:	2b03      	cmp	r3, #3
    6840:	d833      	bhi.n	68aa <at_ble_set_dev_config+0x7a>
    6842:	7800      	ldrb	r0, [r0, #0]
    6844:	3511      	adds	r5, #17
    6846:	280f      	cmp	r0, #15
    6848:	d82f      	bhi.n	68aa <at_ble_set_dev_config+0x7a>
    684a:	2280      	movs	r2, #128	; 0x80
    684c:	8ca6      	ldrh	r6, [r4, #36]	; 0x24
    684e:	0092      	lsls	r2, r2, #2
    6850:	3d11      	subs	r5, #17
    6852:	4296      	cmp	r6, r2
    6854:	d829      	bhi.n	68aa <at_ble_set_dev_config+0x7a>
    6856:	7fe5      	ldrb	r5, [r4, #31]
    6858:	7fa2      	ldrb	r2, [r4, #30]
    685a:	01ad      	lsls	r5, r5, #6
    685c:	0152      	lsls	r2, r2, #5
    685e:	4315      	orrs	r5, r2
    6860:	7ee2      	ldrb	r2, [r4, #27]
    6862:	001f      	movs	r7, r3
    6864:	4315      	orrs	r5, r2
    6866:	7f62      	ldrb	r2, [r4, #29]
    6868:	0112      	lsls	r2, r2, #4
    686a:	4315      	orrs	r5, r2
    686c:	7f22      	ldrb	r2, [r4, #28]
    686e:	0092      	lsls	r2, r2, #2
    6870:	4315      	orrs	r5, r2
    6872:	b2ed      	uxtb	r5, r5
    6874:	2b01      	cmp	r3, #1
    6876:	d005      	beq.n	6884 <at_ble_set_dev_config+0x54>
    6878:	2b00      	cmp	r3, #0
    687a:	d002      	beq.n	6882 <at_ble_set_dev_config+0x52>
    687c:	2702      	movs	r7, #2
    687e:	2b03      	cmp	r3, #3
    6880:	d900      	bls.n	6884 <at_ble_set_dev_config+0x54>
    6882:	2700      	movs	r7, #0
    6884:	0023      	movs	r3, r4
    6886:	9604      	str	r6, [sp, #16]
    6888:	8c66      	ldrh	r6, [r4, #34]	; 0x22
    688a:	330b      	adds	r3, #11
    688c:	9603      	str	r6, [sp, #12]
    688e:	8c26      	ldrh	r6, [r4, #32]
    6890:	1d62      	adds	r2, r4, #5
    6892:	8861      	ldrh	r1, [r4, #2]
    6894:	9501      	str	r5, [sp, #4]
    6896:	9602      	str	r6, [sp, #8]
    6898:	4d05      	ldr	r5, [pc, #20]	; (68b0 <at_ble_set_dev_config+0x80>)
    689a:	9700      	str	r7, [sp, #0]
    689c:	47a8      	blx	r5
    689e:	2226      	movs	r2, #38	; 0x26
    68a0:	0005      	movs	r5, r0
    68a2:	0021      	movs	r1, r4
    68a4:	4803      	ldr	r0, [pc, #12]	; (68b4 <at_ble_set_dev_config+0x84>)
    68a6:	4b04      	ldr	r3, [pc, #16]	; (68b8 <at_ble_set_dev_config+0x88>)
    68a8:	4798      	blx	r3
    68aa:	0028      	movs	r0, r5
    68ac:	b007      	add	sp, #28
    68ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68b0:	00008e7d 	.word	0x00008e7d
    68b4:	200032bc 	.word	0x200032bc
    68b8:	0000a2f7 	.word	0x0000a2f7

000068bc <at_ble_init>:
    68bc:	b530      	push	{r4, r5, lr}
    68be:	0004      	movs	r4, r0
    68c0:	b085      	sub	sp, #20
    68c2:	ad01      	add	r5, sp, #4
    68c4:	4b33      	ldr	r3, [pc, #204]	; (6994 <at_ble_init+0xd8>)
    68c6:	220b      	movs	r2, #11
    68c8:	4933      	ldr	r1, [pc, #204]	; (6998 <at_ble_init+0xdc>)
    68ca:	0028      	movs	r0, r5
    68cc:	4798      	blx	r3
    68ce:	0020      	movs	r0, r4
    68d0:	4b32      	ldr	r3, [pc, #200]	; (699c <at_ble_init+0xe0>)
    68d2:	4798      	blx	r3
    68d4:	2800      	cmp	r0, #0
    68d6:	d15b      	bne.n	6990 <at_ble_init+0xd4>
    68d8:	4b31      	ldr	r3, [pc, #196]	; (69a0 <at_ble_init+0xe4>)
    68da:	4798      	blx	r3
    68dc:	2800      	cmp	r0, #0
    68de:	d157      	bne.n	6990 <at_ble_init+0xd4>
    68e0:	2201      	movs	r2, #1
    68e2:	4930      	ldr	r1, [pc, #192]	; (69a4 <at_ble_init+0xe8>)
    68e4:	4252      	negs	r2, r2
    68e6:	1843      	adds	r3, r0, r1
    68e8:	3012      	adds	r0, #18
    68ea:	815a      	strh	r2, [r3, #10]
    68ec:	2890      	cmp	r0, #144	; 0x90
    68ee:	d1fa      	bne.n	68e6 <at_ble_init+0x2a>
    68f0:	230f      	movs	r3, #15
    68f2:	4c2d      	ldr	r4, [pc, #180]	; (69a8 <at_ble_init+0xec>)
    68f4:	492d      	ldr	r1, [pc, #180]	; (69ac <at_ble_init+0xf0>)
    68f6:	7023      	strb	r3, [r4, #0]
    68f8:	4b2d      	ldr	r3, [pc, #180]	; (69b0 <at_ble_init+0xf4>)
    68fa:	8063      	strh	r3, [r4, #2]
    68fc:	2300      	movs	r3, #0
    68fe:	7123      	strb	r3, [r4, #4]
    6900:	1c5a      	adds	r2, r3, #1
    6902:	0112      	lsls	r2, r2, #4
    6904:	431a      	orrs	r2, r3
    6906:	3302      	adds	r3, #2
    6908:	b2db      	uxtb	r3, r3
    690a:	700a      	strb	r2, [r1, #0]
    690c:	3101      	adds	r1, #1
    690e:	2b20      	cmp	r3, #32
    6910:	d1f6      	bne.n	6900 <at_ble_init+0x44>
    6912:	2280      	movs	r2, #128	; 0x80
    6914:	0092      	lsls	r2, r2, #2
    6916:	84a2      	strh	r2, [r4, #36]	; 0x24
    6918:	0022      	movs	r2, r4
    691a:	2300      	movs	r3, #0
    691c:	3273      	adds	r2, #115	; 0x73
    691e:	7013      	strb	r3, [r2, #0]
    6920:	0022      	movs	r2, r4
    6922:	3272      	adds	r2, #114	; 0x72
    6924:	7013      	strb	r3, [r2, #0]
    6926:	0022      	movs	r2, r4
    6928:	3276      	adds	r2, #118	; 0x76
    692a:	7013      	strb	r3, [r2, #0]
    692c:	0022      	movs	r2, r4
    692e:	32cc      	adds	r2, #204	; 0xcc
    6930:	8013      	strh	r3, [r2, #0]
    6932:	0021      	movs	r1, r4
    6934:	22a0      	movs	r2, #160	; 0xa0
    6936:	31d0      	adds	r1, #208	; 0xd0
    6938:	0052      	lsls	r2, r2, #1
    693a:	800a      	strh	r2, [r1, #0]
    693c:	0021      	movs	r1, r4
    693e:	31ce      	adds	r1, #206	; 0xce
    6940:	800a      	strh	r2, [r1, #0]
    6942:	0022      	movs	r2, r4
    6944:	32d2      	adds	r2, #210	; 0xd2
    6946:	8013      	strh	r3, [r2, #0]
    6948:	21fa      	movs	r1, #250	; 0xfa
    694a:	0022      	movs	r2, r4
    694c:	0049      	lsls	r1, r1, #1
    694e:	32d4      	adds	r2, #212	; 0xd4
    6950:	8011      	strh	r1, [r2, #0]
    6952:	0022      	movs	r2, r4
    6954:	32d6      	adds	r2, #214	; 0xd6
    6956:	76e3      	strb	r3, [r4, #27]
    6958:	7723      	strb	r3, [r4, #28]
    695a:	7763      	strb	r3, [r4, #29]
    695c:	77a3      	strb	r3, [r4, #30]
    695e:	77e3      	strb	r3, [r4, #31]
    6960:	8423      	strh	r3, [r4, #32]
    6962:	8463      	strh	r3, [r4, #34]	; 0x22
    6964:	7013      	strb	r3, [r2, #0]
    6966:	0020      	movs	r0, r4
    6968:	4b12      	ldr	r3, [pc, #72]	; (69b4 <at_ble_init+0xf8>)
    696a:	4798      	blx	r3
    696c:	2800      	cmp	r0, #0
    696e:	d10f      	bne.n	6990 <at_ble_init+0xd4>
    6970:	0023      	movs	r3, r4
    6972:	2207      	movs	r2, #7
    6974:	3374      	adds	r3, #116	; 0x74
    6976:	701a      	strb	r2, [r3, #0]
    6978:	0023      	movs	r3, r4
    697a:	3204      	adds	r2, #4
    697c:	33aa      	adds	r3, #170	; 0xaa
    697e:	801a      	strh	r2, [r3, #0]
    6980:	0003      	movs	r3, r0
    6982:	001a      	movs	r2, r3
    6984:	5ce9      	ldrb	r1, [r5, r3]
    6986:	32ac      	adds	r2, #172	; 0xac
    6988:	3301      	adds	r3, #1
    698a:	54a1      	strb	r1, [r4, r2]
    698c:	2b0b      	cmp	r3, #11
    698e:	d1f8      	bne.n	6982 <at_ble_init+0xc6>
    6990:	b005      	add	sp, #20
    6992:	bd30      	pop	{r4, r5, pc}
    6994:	0000a2f7 	.word	0x0000a2f7
    6998:	0000c4a0 	.word	0x0000c4a0
    699c:	00007b71 	.word	0x00007b71
    69a0:	00008e19 	.word	0x00008e19
    69a4:	2000322c 	.word	0x2000322c
    69a8:	200032bc 	.word	0x200032bc
    69ac:	200032c7 	.word	0x200032c7
    69b0:	00003a98 	.word	0x00003a98
    69b4:	00006831 	.word	0x00006831

000069b8 <at_ble_addr_set>:
    69b8:	b570      	push	{r4, r5, r6, lr}
    69ba:	1c45      	adds	r5, r0, #1
    69bc:	0004      	movs	r4, r0
    69be:	20cf      	movs	r0, #207	; 0xcf
    69c0:	2d00      	cmp	r5, #0
    69c2:	d017      	beq.n	69f4 <at_ble_addr_set+0x3c>
    69c4:	7823      	ldrb	r3, [r4, #0]
    69c6:	2b03      	cmp	r3, #3
    69c8:	d814      	bhi.n	69f4 <at_ble_addr_set+0x3c>
    69ca:	2b01      	cmp	r3, #1
    69cc:	d102      	bne.n	69d4 <at_ble_addr_set+0x1c>
    69ce:	7863      	ldrb	r3, [r4, #1]
    69d0:	2b00      	cmp	r3, #0
    69d2:	d00f      	beq.n	69f4 <at_ble_addr_set+0x3c>
    69d4:	2206      	movs	r2, #6
    69d6:	0029      	movs	r1, r5
    69d8:	4b07      	ldr	r3, [pc, #28]	; (69f8 <at_ble_addr_set+0x40>)
    69da:	4808      	ldr	r0, [pc, #32]	; (69fc <at_ble_addr_set+0x44>)
    69dc:	4798      	blx	r3
    69de:	7823      	ldrb	r3, [r4, #0]
    69e0:	4807      	ldr	r0, [pc, #28]	; (6a00 <at_ble_addr_set+0x48>)
    69e2:	7103      	strb	r3, [r0, #4]
    69e4:	4b07      	ldr	r3, [pc, #28]	; (6a04 <at_ble_addr_set+0x4c>)
    69e6:	4798      	blx	r3
    69e8:	7823      	ldrb	r3, [r4, #0]
    69ea:	2b00      	cmp	r3, #0
    69ec:	d102      	bne.n	69f4 <at_ble_addr_set+0x3c>
    69ee:	0028      	movs	r0, r5
    69f0:	4b05      	ldr	r3, [pc, #20]	; (6a08 <at_ble_addr_set+0x50>)
    69f2:	4798      	blx	r3
    69f4:	bd70      	pop	{r4, r5, r6, pc}
    69f6:	46c0      	nop			; (mov r8, r8)
    69f8:	0000a2f7 	.word	0x0000a2f7
    69fc:	200032c1 	.word	0x200032c1
    6a00:	200032bc 	.word	0x200032bc
    6a04:	00006831 	.word	0x00006831
    6a08:	000081d1 	.word	0x000081d1

00006a0c <at_ble_adv_data_set>:
    6a0c:	b510      	push	{r4, lr}
    6a0e:	2800      	cmp	r0, #0
    6a10:	d102      	bne.n	6a18 <at_ble_adv_data_set+0xc>
    6a12:	24e2      	movs	r4, #226	; 0xe2
    6a14:	2a00      	cmp	r2, #0
    6a16:	d007      	beq.n	6a28 <at_ble_adv_data_set+0x1c>
    6a18:	24cf      	movs	r4, #207	; 0xcf
    6a1a:	291f      	cmp	r1, #31
    6a1c:	d804      	bhi.n	6a28 <at_ble_adv_data_set+0x1c>
    6a1e:	2b1f      	cmp	r3, #31
    6a20:	d802      	bhi.n	6a28 <at_ble_adv_data_set+0x1c>
    6a22:	4c02      	ldr	r4, [pc, #8]	; (6a2c <at_ble_adv_data_set+0x20>)
    6a24:	47a0      	blx	r4
    6a26:	2400      	movs	r4, #0
    6a28:	0020      	movs	r0, r4
    6a2a:	bd10      	pop	{r4, pc}
    6a2c:	0000678d 	.word	0x0000678d

00006a30 <at_ble_adv_start>:
    6a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a32:	b093      	sub	sp, #76	; 0x4c
    6a34:	001f      	movs	r7, r3
    6a36:	ab18      	add	r3, sp, #96	; 0x60
    6a38:	881d      	ldrh	r5, [r3, #0]
    6a3a:	ab19      	add	r3, sp, #100	; 0x64
    6a3c:	881b      	ldrh	r3, [r3, #0]
    6a3e:	0004      	movs	r4, r0
    6a40:	9310      	str	r3, [sp, #64]	; 0x40
    6a42:	ab1a      	add	r3, sp, #104	; 0x68
    6a44:	781b      	ldrb	r3, [r3, #0]
    6a46:	910f      	str	r1, [sp, #60]	; 0x3c
    6a48:	0016      	movs	r6, r2
    6a4a:	9311      	str	r3, [sp, #68]	; 0x44
    6a4c:	20cf      	movs	r0, #207	; 0xcf
    6a4e:	2c01      	cmp	r4, #1
    6a50:	d112      	bne.n	6a78 <at_ble_adv_start+0x48>
    6a52:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6a54:	2b00      	cmp	r3, #0
    6a56:	d111      	bne.n	6a7c <at_ble_adv_start+0x4c>
    6a58:	2380      	movs	r3, #128	; 0x80
    6a5a:	20cf      	movs	r0, #207	; 0xcf
    6a5c:	01db      	lsls	r3, r3, #7
    6a5e:	429d      	cmp	r5, r3
    6a60:	d80c      	bhi.n	6a7c <at_ble_adv_start+0x4c>
    6a62:	2d1f      	cmp	r5, #31
    6a64:	d80c      	bhi.n	6a80 <at_ble_adv_start+0x50>
    6a66:	2304      	movs	r3, #4
    6a68:	0022      	movs	r2, r4
    6a6a:	439a      	bics	r2, r3
    6a6c:	d006      	beq.n	6a7c <at_ble_adv_start+0x4c>
    6a6e:	1ea3      	subs	r3, r4, #2
    6a70:	20cf      	movs	r0, #207	; 0xcf
    6a72:	2b01      	cmp	r3, #1
    6a74:	d806      	bhi.n	6a84 <at_ble_adv_start+0x54>
    6a76:	e001      	b.n	6a7c <at_ble_adv_start+0x4c>
    6a78:	2c04      	cmp	r4, #4
    6a7a:	d9ed      	bls.n	6a58 <at_ble_adv_start+0x28>
    6a7c:	b013      	add	sp, #76	; 0x4c
    6a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a80:	2d9f      	cmp	r5, #159	; 0x9f
    6a82:	d9f4      	bls.n	6a6e <at_ble_adv_start+0x3e>
    6a84:	2c01      	cmp	r4, #1
    6a86:	d13f      	bne.n	6b08 <at_ble_adv_start+0xd8>
    6a88:	20cf      	movs	r0, #207	; 0xcf
    6a8a:	2e00      	cmp	r6, #0
    6a8c:	d0f6      	beq.n	6a7c <at_ble_adv_start+0x4c>
    6a8e:	2f00      	cmp	r7, #0
    6a90:	d13c      	bne.n	6b0c <at_ble_adv_start+0xdc>
    6a92:	2d00      	cmp	r5, #0
    6a94:	d144      	bne.n	6b20 <at_ble_adv_start+0xf0>
    6a96:	4b32      	ldr	r3, [pc, #200]	; (6b60 <at_ble_adv_start+0x130>)
    6a98:	2520      	movs	r5, #32
    6a9a:	3373      	adds	r3, #115	; 0x73
    6a9c:	781b      	ldrb	r3, [r3, #0]
    6a9e:	930d      	str	r3, [sp, #52]	; 0x34
    6aa0:	4b30      	ldr	r3, [pc, #192]	; (6b64 <at_ble_adv_start+0x134>)
    6aa2:	4798      	blx	r3
    6aa4:	900e      	str	r0, [sp, #56]	; 0x38
    6aa6:	e044      	b.n	6b32 <at_ble_adv_start+0x102>
    6aa8:	200e      	movs	r0, #14
    6aaa:	1e34      	subs	r4, r6, #0
    6aac:	d12a      	bne.n	6b04 <at_ble_adv_start+0xd4>
    6aae:	4a2c      	ldr	r2, [pc, #176]	; (6b60 <at_ble_adv_start+0x130>)
    6ab0:	2607      	movs	r6, #7
    6ab2:	3274      	adds	r2, #116	; 0x74
    6ab4:	7812      	ldrb	r2, [r2, #0]
    6ab6:	2a00      	cmp	r2, #0
    6ab8:	d000      	beq.n	6abc <at_ble_adv_start+0x8c>
    6aba:	0016      	movs	r6, r2
    6abc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    6abe:	9910      	ldr	r1, [sp, #64]	; 0x40
    6ac0:	920b      	str	r2, [sp, #44]	; 0x2c
    6ac2:	2264      	movs	r2, #100	; 0x64
    6ac4:	434a      	muls	r2, r1
    6ac6:	b292      	uxth	r2, r2
    6ac8:	920a      	str	r2, [sp, #40]	; 0x28
    6aca:	4a27      	ldr	r2, [pc, #156]	; (6b68 <at_ble_adv_start+0x138>)
    6acc:	990e      	ldr	r1, [sp, #56]	; 0x38
    6ace:	9209      	str	r2, [sp, #36]	; 0x24
    6ad0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6ad2:	9208      	str	r2, [sp, #32]
    6ad4:	4a25      	ldr	r2, [pc, #148]	; (6b6c <at_ble_adv_start+0x13c>)
    6ad6:	9207      	str	r2, [sp, #28]
    6ad8:	4a21      	ldr	r2, [pc, #132]	; (6b60 <at_ble_adv_start+0x130>)
    6ada:	3272      	adds	r2, #114	; 0x72
    6adc:	7812      	ldrb	r2, [r2, #0]
    6ade:	9400      	str	r4, [sp, #0]
    6ae0:	9206      	str	r2, [sp, #24]
    6ae2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6ae4:	9705      	str	r7, [sp, #20]
    6ae6:	9204      	str	r2, [sp, #16]
    6ae8:	9603      	str	r6, [sp, #12]
    6aea:	9502      	str	r5, [sp, #8]
    6aec:	9501      	str	r5, [sp, #4]
    6aee:	4a20      	ldr	r2, [pc, #128]	; (6b70 <at_ble_adv_start+0x140>)
    6af0:	4c20      	ldr	r4, [pc, #128]	; (6b74 <at_ble_adv_start+0x144>)
    6af2:	47a0      	blx	r4
    6af4:	e7c2      	b.n	6a7c <at_ble_adv_start+0x4c>
    6af6:	200f      	movs	r0, #15
    6af8:	e7d7      	b.n	6aaa <at_ble_adv_start+0x7a>
    6afa:	2200      	movs	r2, #0
    6afc:	920d      	str	r2, [sp, #52]	; 0x34
    6afe:	200c      	movs	r0, #12
    6b00:	e7d3      	b.n	6aaa <at_ble_adv_start+0x7a>
    6b02:	200d      	movs	r0, #13
    6b04:	1c74      	adds	r4, r6, #1
    6b06:	e7d2      	b.n	6aae <at_ble_adv_start+0x7e>
    6b08:	2f00      	cmp	r7, #0
    6b0a:	d009      	beq.n	6b20 <at_ble_adv_start+0xf0>
    6b0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b0e:	20cf      	movs	r0, #207	; 0xcf
    6b10:	3b01      	subs	r3, #1
    6b12:	2b01      	cmp	r3, #1
    6b14:	d9b2      	bls.n	6a7c <at_ble_adv_start+0x4c>
    6b16:	2c01      	cmp	r4, #1
    6b18:	d102      	bne.n	6b20 <at_ble_adv_start+0xf0>
    6b1a:	2d00      	cmp	r5, #0
    6b1c:	d100      	bne.n	6b20 <at_ble_adv_start+0xf0>
    6b1e:	3520      	adds	r5, #32
    6b20:	4b0f      	ldr	r3, [pc, #60]	; (6b60 <at_ble_adv_start+0x130>)
    6b22:	3373      	adds	r3, #115	; 0x73
    6b24:	781b      	ldrb	r3, [r3, #0]
    6b26:	930d      	str	r3, [sp, #52]	; 0x34
    6b28:	4b0e      	ldr	r3, [pc, #56]	; (6b64 <at_ble_adv_start+0x134>)
    6b2a:	4798      	blx	r3
    6b2c:	900e      	str	r0, [sp, #56]	; 0x38
    6b2e:	2e00      	cmp	r6, #0
    6b30:	d00e      	beq.n	6b50 <at_ble_adv_start+0x120>
    6b32:	7833      	ldrb	r3, [r6, #0]
    6b34:	1e60      	subs	r0, r4, #1
    6b36:	2b00      	cmp	r3, #0
    6b38:	d103      	bne.n	6b42 <at_ble_adv_start+0x112>
    6b3a:	2803      	cmp	r0, #3
    6b3c:	d8e1      	bhi.n	6b02 <at_ble_adv_start+0xd2>
    6b3e:	2300      	movs	r3, #0
    6b40:	e002      	b.n	6b48 <at_ble_adv_start+0x118>
    6b42:	2301      	movs	r3, #1
    6b44:	2803      	cmp	r0, #3
    6b46:	d8dc      	bhi.n	6b02 <at_ble_adv_start+0xd2>
    6b48:	f003 f9ee 	bl	9f28 <__gnu_thumb1_case_sqi>
    6b4c:	d5d7d9ae 	.word	0xd5d7d9ae
    6b50:	1e60      	subs	r0, r4, #1
    6b52:	2803      	cmp	r0, #3
    6b54:	d9f3      	bls.n	6b3e <at_ble_adv_start+0x10e>
    6b56:	0033      	movs	r3, r6
    6b58:	200d      	movs	r0, #13
    6b5a:	0034      	movs	r4, r6
    6b5c:	e7a7      	b.n	6aae <at_ble_adv_start+0x7e>
    6b5e:	46c0      	nop			; (mov r8, r8)
    6b60:	200032bc 	.word	0x200032bc
    6b64:	00009301 	.word	0x00009301
    6b68:	2000330f 	.word	0x2000330f
    6b6c:	200032f0 	.word	0x200032f0
    6b70:	00003a98 	.word	0x00003a98
    6b74:	000091e9 	.word	0x000091e9

00006b78 <at_ble_scan_stop>:
    6b78:	b510      	push	{r4, lr}
    6b7a:	4b05      	ldr	r3, [pc, #20]	; (6b90 <at_ble_scan_stop+0x18>)
    6b7c:	4798      	blx	r3
    6b7e:	1e04      	subs	r4, r0, #0
    6b80:	d103      	bne.n	6b8a <at_ble_scan_stop+0x12>
    6b82:	20d1      	movs	r0, #209	; 0xd1
    6b84:	4b03      	ldr	r3, [pc, #12]	; (6b94 <at_ble_scan_stop+0x1c>)
    6b86:	0100      	lsls	r0, r0, #4
    6b88:	4798      	blx	r3
    6b8a:	0020      	movs	r0, r4
    6b8c:	bd10      	pop	{r4, pc}
    6b8e:	46c0      	nop			; (mov r8, r8)
    6b90:	00009021 	.word	0x00009021
    6b94:	000066c5 	.word	0x000066c5

00006b98 <at_ble_disconnect>:
    6b98:	b570      	push	{r4, r5, r6, lr}
    6b9a:	0004      	movs	r4, r0
    6b9c:	4b04      	ldr	r3, [pc, #16]	; (6bb0 <at_ble_disconnect+0x18>)
    6b9e:	0008      	movs	r0, r1
    6ba0:	0021      	movs	r1, r4
    6ba2:	4798      	blx	r3
    6ba4:	0005      	movs	r5, r0
    6ba6:	4b03      	ldr	r3, [pc, #12]	; (6bb4 <at_ble_disconnect+0x1c>)
    6ba8:	0020      	movs	r0, r4
    6baa:	4798      	blx	r3
    6bac:	0028      	movs	r0, r5
    6bae:	bd70      	pop	{r4, r5, r6, pc}
    6bb0:	00008689 	.word	0x00008689
    6bb4:	00006721 	.word	0x00006721

00006bb8 <at_ble_conn_update_reply>:
    6bb8:	b510      	push	{r4, lr}
    6bba:	4c01      	ldr	r4, [pc, #4]	; (6bc0 <at_ble_conn_update_reply+0x8>)
    6bbc:	47a0      	blx	r4
    6bbe:	bd10      	pop	{r4, pc}
    6bc0:	00008bd5 	.word	0x00008bd5

00006bc4 <at_ble_random_address_resolve>:
    6bc4:	b510      	push	{r4, lr}
    6bc6:	23cf      	movs	r3, #207	; 0xcf
    6bc8:	2800      	cmp	r0, #0
    6bca:	d00a      	beq.n	6be2 <at_ble_random_address_resolve+0x1e>
    6bcc:	2900      	cmp	r1, #0
    6bce:	d008      	beq.n	6be2 <at_ble_random_address_resolve+0x1e>
    6bd0:	2a00      	cmp	r2, #0
    6bd2:	d006      	beq.n	6be2 <at_ble_random_address_resolve+0x1e>
    6bd4:	780c      	ldrb	r4, [r1, #0]
    6bd6:	2c02      	cmp	r4, #2
    6bd8:	d103      	bne.n	6be2 <at_ble_random_address_resolve+0x1e>
    6bda:	4b03      	ldr	r3, [pc, #12]	; (6be8 <at_ble_random_address_resolve+0x24>)
    6bdc:	3101      	adds	r1, #1
    6bde:	4798      	blx	r3
    6be0:	2300      	movs	r3, #0
    6be2:	0018      	movs	r0, r3
    6be4:	bd10      	pop	{r4, pc}
    6be6:	46c0      	nop			; (mov r8, r8)
    6be8:	000093a5 	.word	0x000093a5

00006bec <at_ble_chip_id_get>:
    6bec:	b510      	push	{r4, lr}
    6bee:	0001      	movs	r1, r0
    6bf0:	2320      	movs	r3, #32
    6bf2:	2201      	movs	r2, #1
    6bf4:	4c01      	ldr	r4, [pc, #4]	; (6bfc <at_ble_chip_id_get+0x10>)
    6bf6:	4802      	ldr	r0, [pc, #8]	; (6c00 <at_ble_chip_id_get+0x14>)
    6bf8:	47a0      	blx	r4
    6bfa:	bd10      	pop	{r4, pc}
    6bfc:	0000823d 	.word	0x0000823d
    6c00:	4000b000 	.word	0x4000b000

00006c04 <at_ble_firmware_version_get>:
    6c04:	b510      	push	{r4, lr}
    6c06:	0001      	movs	r1, r0
    6c08:	4803      	ldr	r0, [pc, #12]	; (6c18 <at_ble_firmware_version_get+0x14>)
    6c0a:	2320      	movs	r3, #32
    6c0c:	2201      	movs	r2, #1
    6c0e:	4c03      	ldr	r4, [pc, #12]	; (6c1c <at_ble_firmware_version_get+0x18>)
    6c10:	6800      	ldr	r0, [r0, #0]
    6c12:	47a0      	blx	r4
    6c14:	bd10      	pop	{r4, pc}
    6c16:	46c0      	nop			; (mov r8, r8)
    6c18:	0000c4dc 	.word	0x0000c4dc
    6c1c:	0000823d 	.word	0x0000823d

00006c20 <at_ble_rf_version_get>:
    6c20:	b510      	push	{r4, lr}
    6c22:	0001      	movs	r1, r0
    6c24:	4803      	ldr	r0, [pc, #12]	; (6c34 <at_ble_rf_version_get+0x14>)
    6c26:	2320      	movs	r3, #32
    6c28:	2201      	movs	r2, #1
    6c2a:	4c03      	ldr	r4, [pc, #12]	; (6c38 <at_ble_rf_version_get+0x18>)
    6c2c:	6800      	ldr	r0, [r0, #0]
    6c2e:	47a0      	blx	r4
    6c30:	bd10      	pop	{r4, pc}
    6c32:	46c0      	nop			; (mov r8, r8)
    6c34:	0000c4e0 	.word	0x0000c4e0
    6c38:	0000823d 	.word	0x0000823d

00006c3c <at_ble_uuid_type2len>:
    6c3c:	23cf      	movs	r3, #207	; 0xcf
    6c3e:	2802      	cmp	r0, #2
    6c40:	d801      	bhi.n	6c46 <at_ble_uuid_type2len+0xa>
    6c42:	4b02      	ldr	r3, [pc, #8]	; (6c4c <at_ble_uuid_type2len+0x10>)
    6c44:	5c1b      	ldrb	r3, [r3, r0]
    6c46:	0018      	movs	r0, r3
    6c48:	4770      	bx	lr
    6c4a:	46c0      	nop			; (mov r8, r8)
    6c4c:	0000c4ab 	.word	0x0000c4ab

00006c50 <at_ble_uuid_len2type>:
    6c50:	3802      	subs	r0, #2
    6c52:	b2c3      	uxtb	r3, r0
    6c54:	2003      	movs	r0, #3
    6c56:	2b0e      	cmp	r3, #14
    6c58:	d801      	bhi.n	6c5e <at_ble_uuid_len2type+0xe>
    6c5a:	4a01      	ldr	r2, [pc, #4]	; (6c60 <at_ble_uuid_len2type+0x10>)
    6c5c:	5cd0      	ldrb	r0, [r2, r3]
    6c5e:	4770      	bx	lr
    6c60:	0000c4ae 	.word	0x0000c4ae

00006c64 <db_searchATT>:
    6c64:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c66:	2100      	movs	r1, #0
    6c68:	0004      	movs	r4, r0
    6c6a:	260c      	movs	r6, #12
    6c6c:	4b0b      	ldr	r3, [pc, #44]	; (6c9c <db_searchATT+0x38>)
    6c6e:	681a      	ldr	r2, [r3, #0]
    6c70:	4b0b      	ldr	r3, [pc, #44]	; (6ca0 <db_searchATT+0x3c>)
    6c72:	681d      	ldr	r5, [r3, #0]
    6c74:	4291      	cmp	r1, r2
    6c76:	dd01      	ble.n	6c7c <db_searchATT+0x18>
    6c78:	2000      	movs	r0, #0
    6c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c7c:	1888      	adds	r0, r1, r2
    6c7e:	0fc3      	lsrs	r3, r0, #31
    6c80:	181b      	adds	r3, r3, r0
    6c82:	0030      	movs	r0, r6
    6c84:	105b      	asrs	r3, r3, #1
    6c86:	4358      	muls	r0, r3
    6c88:	1828      	adds	r0, r5, r0
    6c8a:	8807      	ldrh	r7, [r0, #0]
    6c8c:	42a7      	cmp	r7, r4
    6c8e:	d201      	bcs.n	6c94 <db_searchATT+0x30>
    6c90:	1e5a      	subs	r2, r3, #1
    6c92:	e7ef      	b.n	6c74 <db_searchATT+0x10>
    6c94:	42a7      	cmp	r7, r4
    6c96:	d9f0      	bls.n	6c7a <db_searchATT+0x16>
    6c98:	1c59      	adds	r1, r3, #1
    6c9a:	e7eb      	b.n	6c74 <db_searchATT+0x10>
    6c9c:	200033a8 	.word	0x200033a8
    6ca0:	200033a0 	.word	0x200033a0

00006ca4 <att_permissions>:
    6ca4:	2303      	movs	r3, #3
    6ca6:	b530      	push	{r4, r5, lr}
    6ca8:	0005      	movs	r5, r0
    6caa:	1104      	asrs	r4, r0, #4
    6cac:	401d      	ands	r5, r3
    6cae:	0640      	lsls	r0, r0, #25
    6cb0:	401c      	ands	r4, r3
    6cb2:	0fc3      	lsrs	r3, r0, #31
    6cb4:	b2a8      	uxth	r0, r5
    6cb6:	2d00      	cmp	r5, #0
    6cb8:	d102      	bne.n	6cc0 <att_permissions+0x1c>
    6cba:	1e48      	subs	r0, r1, #1
    6cbc:	4181      	sbcs	r1, r0
    6cbe:	b288      	uxth	r0, r1
    6cc0:	2c00      	cmp	r4, #0
    6cc2:	d008      	beq.n	6cd6 <att_permissions+0x32>
    6cc4:	00a4      	lsls	r4, r4, #2
    6cc6:	4320      	orrs	r0, r4
    6cc8:	2180      	movs	r1, #128	; 0x80
    6cca:	2b00      	cmp	r3, #0
    6ccc:	d000      	beq.n	6cd0 <att_permissions+0x2c>
    6cce:	2190      	movs	r1, #144	; 0x90
    6cd0:	0189      	lsls	r1, r1, #6
    6cd2:	4308      	orrs	r0, r1
    6cd4:	bd30      	pop	{r4, r5, pc}
    6cd6:	2a00      	cmp	r2, #0
    6cd8:	d0f6      	beq.n	6cc8 <att_permissions+0x24>
    6cda:	2204      	movs	r2, #4
    6cdc:	4310      	orrs	r0, r2
    6cde:	e7f3      	b.n	6cc8 <att_permissions+0x24>

00006ce0 <db_addATT>:
    6ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6ce2:	ac08      	add	r4, sp, #32
    6ce4:	7824      	ldrb	r4, [r4, #0]
    6ce6:	9401      	str	r4, [sp, #4]
    6ce8:	4c24      	ldr	r4, [pc, #144]	; (6d7c <db_addATT+0x9c>)
    6cea:	6825      	ldr	r5, [r4, #0]
    6cec:	46ac      	mov	ip, r5
    6cee:	4666      	mov	r6, ip
    6cf0:	25d3      	movs	r5, #211	; 0xd3
    6cf2:	2e00      	cmp	r6, #0
    6cf4:	d033      	beq.n	6d5e <db_addATT+0x7e>
    6cf6:	4665      	mov	r5, ip
    6cf8:	3d0c      	subs	r5, #12
    6cfa:	6025      	str	r5, [r4, #0]
    6cfc:	2900      	cmp	r1, #0
    6cfe:	d003      	beq.n	6d08 <db_addATT+0x28>
    6d00:	4f1f      	ldr	r7, [pc, #124]	; (6d80 <db_addATT+0xa0>)
    6d02:	683e      	ldr	r6, [r7, #0]
    6d04:	18f6      	adds	r6, r6, r3
    6d06:	603e      	str	r6, [r7, #0]
    6d08:	4f1d      	ldr	r7, [pc, #116]	; (6d80 <db_addATT+0xa0>)
    6d0a:	683e      	ldr	r6, [r7, #0]
    6d0c:	42b5      	cmp	r5, r6
    6d0e:	d92b      	bls.n	6d68 <db_addATT+0x88>
    6d10:	8028      	strh	r0, [r5, #0]
    6d12:	6825      	ldr	r5, [r4, #0]
    6d14:	80eb      	strh	r3, [r5, #6]
    6d16:	80aa      	strh	r2, [r5, #4]
    6d18:	2900      	cmp	r1, #0
    6d1a:	d022      	beq.n	6d62 <db_addATT+0x82>
    6d1c:	2b00      	cmp	r3, #0
    6d1e:	d020      	beq.n	6d62 <db_addATT+0x82>
    6d20:	6838      	ldr	r0, [r7, #0]
    6d22:	1ac0      	subs	r0, r0, r3
    6d24:	60a8      	str	r0, [r5, #8]
    6d26:	4b17      	ldr	r3, [pc, #92]	; (6d84 <db_addATT+0xa4>)
    6d28:	4798      	blx	r3
    6d2a:	2300      	movs	r3, #0
    6d2c:	6822      	ldr	r2, [r4, #0]
    6d2e:	7093      	strb	r3, [r2, #2]
    6d30:	9b01      	ldr	r3, [sp, #4]
    6d32:	071b      	lsls	r3, r3, #28
    6d34:	d504      	bpl.n	6d40 <db_addATT+0x60>
    6d36:	2301      	movs	r3, #1
    6d38:	6822      	ldr	r2, [r4, #0]
    6d3a:	7891      	ldrb	r1, [r2, #2]
    6d3c:	430b      	orrs	r3, r1
    6d3e:	7093      	strb	r3, [r2, #2]
    6d40:	466b      	mov	r3, sp
    6d42:	791b      	ldrb	r3, [r3, #4]
    6d44:	b25b      	sxtb	r3, r3
    6d46:	2b00      	cmp	r3, #0
    6d48:	da04      	bge.n	6d54 <db_addATT+0x74>
    6d4a:	2302      	movs	r3, #2
    6d4c:	6822      	ldr	r2, [r4, #0]
    6d4e:	7891      	ldrb	r1, [r2, #2]
    6d50:	430b      	orrs	r3, r1
    6d52:	7093      	strb	r3, [r2, #2]
    6d54:	2500      	movs	r5, #0
    6d56:	4a0c      	ldr	r2, [pc, #48]	; (6d88 <db_addATT+0xa8>)
    6d58:	6813      	ldr	r3, [r2, #0]
    6d5a:	3301      	adds	r3, #1
    6d5c:	6013      	str	r3, [r2, #0]
    6d5e:	0028      	movs	r0, r5
    6d60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6d62:	2300      	movs	r3, #0
    6d64:	60ab      	str	r3, [r5, #8]
    6d66:	e7e0      	b.n	6d2a <db_addATT+0x4a>
    6d68:	4660      	mov	r0, ip
    6d6a:	4a04      	ldr	r2, [pc, #16]	; (6d7c <db_addATT+0x9c>)
    6d6c:	2511      	movs	r5, #17
    6d6e:	6010      	str	r0, [r2, #0]
    6d70:	2900      	cmp	r1, #0
    6d72:	d0f4      	beq.n	6d5e <db_addATT+0x7e>
    6d74:	1af3      	subs	r3, r6, r3
    6d76:	603b      	str	r3, [r7, #0]
    6d78:	e7f1      	b.n	6d5e <db_addATT+0x7e>
    6d7a:	46c0      	nop			; (mov r8, r8)
    6d7c:	200033a0 	.word	0x200033a0
    6d80:	20003398 	.word	0x20003398
    6d84:	0000a2f7 	.word	0x0000a2f7
    6d88:	200033a8 	.word	0x200033a8

00006d8c <at_ble_read_authorize_reply.part.1>:
    6d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6d8e:	4b09      	ldr	r3, [pc, #36]	; (6db4 <at_ble_read_authorize_reply.part.1+0x28>)
    6d90:	0005      	movs	r5, r0
    6d92:	0008      	movs	r0, r1
    6d94:	000c      	movs	r4, r1
    6d96:	4798      	blx	r3
    6d98:	2800      	cmp	r0, #0
    6d9a:	d009      	beq.n	6db0 <at_ble_read_authorize_reply.part.1+0x24>
    6d9c:	6882      	ldr	r2, [r0, #8]
    6d9e:	2a00      	cmp	r2, #0
    6da0:	d006      	beq.n	6db0 <at_ble_read_authorize_reply.part.1+0x24>
    6da2:	8883      	ldrh	r3, [r0, #4]
    6da4:	0029      	movs	r1, r5
    6da6:	9200      	str	r2, [sp, #0]
    6da8:	0020      	movs	r0, r4
    6daa:	2200      	movs	r2, #0
    6dac:	4c02      	ldr	r4, [pc, #8]	; (6db8 <at_ble_read_authorize_reply.part.1+0x2c>)
    6dae:	47a0      	blx	r4
    6db0:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    6db2:	46c0      	nop			; (mov r8, r8)
    6db4:	00006c65 	.word	0x00006c65
    6db8:	000094c5 	.word	0x000094c5

00006dbc <internal_at_ble_service_define.part.0>:
    6dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6dbe:	b09d      	sub	sp, #116	; 0x74
    6dc0:	2400      	movs	r4, #0
    6dc2:	9204      	str	r2, [sp, #16]
    6dc4:	2210      	movs	r2, #16
    6dc6:	4ba4      	ldr	r3, [pc, #656]	; (7058 <internal_at_ble_service_define.part.0+0x29c>)
    6dc8:	9003      	str	r0, [sp, #12]
    6dca:	681f      	ldr	r7, [r3, #0]
    6dcc:	9106      	str	r1, [sp, #24]
    6dce:	1dbd      	adds	r5, r7, #6
    6dd0:	807a      	strh	r2, [r7, #2]
    6dd2:	0021      	movs	r1, r4
    6dd4:	4ba1      	ldr	r3, [pc, #644]	; (705c <internal_at_ble_service_define.part.0+0x2a0>)
    6dd6:	803c      	strh	r4, [r7, #0]
    6dd8:	0028      	movs	r0, r5
    6dda:	4798      	blx	r3
    6ddc:	9b03      	ldr	r3, [sp, #12]
    6dde:	7918      	ldrb	r0, [r3, #4]
    6de0:	4b9f      	ldr	r3, [pc, #636]	; (7060 <internal_at_ble_service_define.part.0+0x2a4>)
    6de2:	4798      	blx	r3
    6de4:	9b03      	ldr	r3, [sp, #12]
    6de6:	0002      	movs	r2, r0
    6de8:	1d59      	adds	r1, r3, #5
    6dea:	0028      	movs	r0, r5
    6dec:	4b9d      	ldr	r3, [pc, #628]	; (7064 <internal_at_ble_service_define.part.0+0x2a8>)
    6dee:	4798      	blx	r3
    6df0:	9b03      	ldr	r3, [sp, #12]
    6df2:	9a03      	ldr	r2, [sp, #12]
    6df4:	791b      	ldrb	r3, [r3, #4]
    6df6:	7812      	ldrb	r2, [r2, #0]
    6df8:	011b      	lsls	r3, r3, #4
    6dfa:	0192      	lsls	r2, r2, #6
    6dfc:	4313      	orrs	r3, r2
    6dfe:	2204      	movs	r2, #4
    6e00:	213c      	movs	r1, #60	; 0x3c
    6e02:	2044      	movs	r0, #68	; 0x44
    6e04:	4313      	orrs	r3, r2
    6e06:	713b      	strb	r3, [r7, #4]
    6e08:	9b03      	ldr	r3, [sp, #12]
    6e0a:	717c      	strb	r4, [r7, #5]
    6e0c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    6e0e:	b2a3      	uxth	r3, r4
    6e10:	429a      	cmp	r2, r3
    6e12:	d900      	bls.n	6e16 <internal_at_ble_service_define.part.0+0x5a>
    6e14:	e0ef      	b.n	6ff6 <internal_at_ble_service_define.part.0+0x23a>
    6e16:	9b03      	ldr	r3, [sp, #12]
    6e18:	699b      	ldr	r3, [r3, #24]
    6e1a:	9302      	str	r3, [sp, #8]
    6e1c:	2b00      	cmp	r3, #0
    6e1e:	d006      	beq.n	6e2e <internal_at_ble_service_define.part.0+0x72>
    6e20:	2500      	movs	r5, #0
    6e22:	2616      	movs	r6, #22
    6e24:	9b03      	ldr	r3, [sp, #12]
    6e26:	8b9b      	ldrh	r3, [r3, #28]
    6e28:	42ab      	cmp	r3, r5
    6e2a:	d900      	bls.n	6e2e <internal_at_ble_service_define.part.0+0x72>
    6e2c:	e0f7      	b.n	701e <internal_at_ble_service_define.part.0+0x262>
    6e2e:	2300      	movs	r3, #0
    6e30:	9302      	str	r3, [sp, #8]
    6e32:	9b03      	ldr	r3, [sp, #12]
    6e34:	9a02      	ldr	r2, [sp, #8]
    6e36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    6e38:	4293      	cmp	r3, r2
    6e3a:	d900      	bls.n	6e3e <internal_at_ble_service_define.part.0+0x82>
    6e3c:	e120      	b.n	7080 <internal_at_ble_service_define.part.0+0x2c4>
    6e3e:	0038      	movs	r0, r7
    6e40:	4b89      	ldr	r3, [pc, #548]	; (7068 <internal_at_ble_service_define.part.0+0x2ac>)
    6e42:	4798      	blx	r3
    6e44:	1e04      	subs	r4, r0, #0
    6e46:	d000      	beq.n	6e4a <internal_at_ble_service_define.part.0+0x8e>
    6e48:	e224      	b.n	7294 <internal_at_ble_service_define.part.0+0x4d8>
    6e4a:	883b      	ldrh	r3, [r7, #0]
    6e4c:	9a06      	ldr	r2, [sp, #24]
    6e4e:	8013      	strh	r3, [r2, #0]
    6e50:	883b      	ldrh	r3, [r7, #0]
    6e52:	9306      	str	r3, [sp, #24]
    6e54:	9b03      	ldr	r3, [sp, #12]
    6e56:	699b      	ldr	r3, [r3, #24]
    6e58:	9302      	str	r3, [sp, #8]
    6e5a:	2b00      	cmp	r3, #0
    6e5c:	d009      	beq.n	6e72 <internal_at_ble_service_define.part.0+0xb6>
    6e5e:	9b03      	ldr	r3, [sp, #12]
    6e60:	8b9a      	ldrh	r2, [r3, #28]
    6e62:	0003      	movs	r3, r0
    6e64:	4293      	cmp	r3, r2
    6e66:	d000      	beq.n	6e6a <internal_at_ble_service_define.part.0+0xae>
    6e68:	e27a      	b.n	7360 <internal_at_ble_service_define.part.0+0x5a4>
    6e6a:	9a06      	ldr	r2, [sp, #24]
    6e6c:	18d3      	adds	r3, r2, r3
    6e6e:	b29b      	uxth	r3, r3
    6e70:	9306      	str	r3, [sp, #24]
    6e72:	9b03      	ldr	r3, [sp, #12]
    6e74:	6a1b      	ldr	r3, [r3, #32]
    6e76:	9302      	str	r3, [sp, #8]
    6e78:	2b00      	cmp	r3, #0
    6e7a:	d100      	bne.n	6e7e <internal_at_ble_service_define.part.0+0xc2>
    6e7c:	e20a      	b.n	7294 <internal_at_ble_service_define.part.0+0x4d8>
    6e7e:	2300      	movs	r3, #0
    6e80:	9305      	str	r3, [sp, #20]
    6e82:	9b03      	ldr	r3, [sp, #12]
    6e84:	9a05      	ldr	r2, [sp, #20]
    6e86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    6e88:	4293      	cmp	r3, r2
    6e8a:	d800      	bhi.n	6e8e <internal_at_ble_service_define.part.0+0xd2>
    6e8c:	e202      	b.n	7294 <internal_at_ble_service_define.part.0+0x4d8>
    6e8e:	263c      	movs	r6, #60	; 0x3c
    6e90:	9b03      	ldr	r3, [sp, #12]
    6e92:	6a1b      	ldr	r3, [r3, #32]
    6e94:	9302      	str	r3, [sp, #8]
    6e96:	9b05      	ldr	r3, [sp, #20]
    6e98:	435e      	muls	r6, r3
    6e9a:	9b02      	ldr	r3, [sp, #8]
    6e9c:	199b      	adds	r3, r3, r6
    6e9e:	9302      	str	r3, [sp, #8]
    6ea0:	9b04      	ldr	r3, [sp, #16]
    6ea2:	2b00      	cmp	r3, #0
    6ea4:	d100      	bne.n	6ea8 <internal_at_ble_service_define.part.0+0xec>
    6ea6:	e279      	b.n	739c <internal_at_ble_service_define.part.0+0x5e0>
    6ea8:	9b05      	ldr	r3, [sp, #20]
    6eaa:	00dd      	lsls	r5, r3, #3
    6eac:	9b02      	ldr	r3, [sp, #8]
    6eae:	195d      	adds	r5, r3, r5
    6eb0:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    6eb2:	9307      	str	r3, [sp, #28]
    6eb4:	9b06      	ldr	r3, [sp, #24]
    6eb6:	1c9f      	adds	r7, r3, #2
    6eb8:	b2bf      	uxth	r7, r7
    6eba:	1c6b      	adds	r3, r5, #1
    6ebc:	802f      	strh	r7, [r5, #0]
    6ebe:	7fd8      	ldrb	r0, [r3, #31]
    6ec0:	8beb      	ldrh	r3, [r5, #30]
    6ec2:	10c1      	asrs	r1, r0, #3
    6ec4:	07c9      	lsls	r1, r1, #31
    6ec6:	0c09      	lsrs	r1, r1, #16
    6ec8:	d100      	bne.n	6ecc <internal_at_ble_service_define.part.0+0x110>
    6eca:	e29a      	b.n	7402 <internal_at_ble_service_define.part.0+0x646>
    6ecc:	69a9      	ldr	r1, [r5, #24]
    6ece:	2900      	cmp	r1, #0
    6ed0:	d100      	bne.n	6ed4 <internal_at_ble_service_define.part.0+0x118>
    6ed2:	4966      	ldr	r1, [pc, #408]	; (706c <internal_at_ble_service_define.part.0+0x2b0>)
    6ed4:	8baa      	ldrh	r2, [r5, #28]
    6ed6:	4e66      	ldr	r6, [pc, #408]	; (7070 <internal_at_ble_service_define.part.0+0x2b4>)
    6ed8:	9000      	str	r0, [sp, #0]
    6eda:	0038      	movs	r0, r7
    6edc:	47b0      	blx	r6
    6ede:	2800      	cmp	r0, #0
    6ee0:	d000      	beq.n	6ee4 <internal_at_ble_service_define.part.0+0x128>
    6ee2:	e2ce      	b.n	7482 <internal_at_ble_service_define.part.0+0x6c6>
    6ee4:	22c0      	movs	r2, #192	; 0xc0
    6ee6:	8aab      	ldrh	r3, [r5, #20]
    6ee8:	0052      	lsls	r2, r2, #1
    6eea:	4213      	tst	r3, r2
    6eec:	d000      	beq.n	6ef0 <internal_at_ble_service_define.part.0+0x134>
    6eee:	e295      	b.n	741c <internal_at_ble_service_define.part.0+0x660>
    6ef0:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    6ef2:	2b00      	cmp	r3, #0
    6ef4:	d019      	beq.n	6f2a <internal_at_ble_service_define.part.0+0x16e>
    6ef6:	3701      	adds	r7, #1
    6ef8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6efa:	b2bf      	uxth	r7, r7
    6efc:	856f      	strh	r7, [r5, #42]	; 0x2a
    6efe:	9306      	str	r3, [sp, #24]
    6f00:	2b00      	cmp	r3, #0
    6f02:	d100      	bne.n	6f06 <internal_at_ble_service_define.part.0+0x14a>
    6f04:	e2bc      	b.n	7480 <internal_at_ble_service_define.part.0+0x6c4>
    6f06:	002b      	movs	r3, r5
    6f08:	332c      	adds	r3, #44	; 0x2c
    6f0a:	781b      	ldrb	r3, [r3, #0]
    6f0c:	10d9      	asrs	r1, r3, #3
    6f0e:	07c9      	lsls	r1, r1, #31
    6f10:	9300      	str	r3, [sp, #0]
    6f12:	0c09      	lsrs	r1, r1, #16
    6f14:	9b07      	ldr	r3, [sp, #28]
    6f16:	d100      	bne.n	6f1a <internal_at_ble_service_define.part.0+0x15e>
    6f18:	e284      	b.n	7424 <internal_at_ble_service_define.part.0+0x668>
    6f1a:	001a      	movs	r2, r3
    6f1c:	9906      	ldr	r1, [sp, #24]
    6f1e:	0038      	movs	r0, r7
    6f20:	4e53      	ldr	r6, [pc, #332]	; (7070 <internal_at_ble_service_define.part.0+0x2b4>)
    6f22:	47b0      	blx	r6
    6f24:	2800      	cmp	r0, #0
    6f26:	d000      	beq.n	6f2a <internal_at_ble_service_define.part.0+0x16e>
    6f28:	e2ab      	b.n	7482 <internal_at_ble_service_define.part.0+0x6c6>
    6f2a:	8aab      	ldrh	r3, [r5, #20]
    6f2c:	07db      	lsls	r3, r3, #31
    6f2e:	d512      	bpl.n	6f56 <internal_at_ble_service_define.part.0+0x19a>
    6f30:	002b      	movs	r3, r5
    6f32:	3701      	adds	r7, #1
    6f34:	b2bf      	uxth	r7, r7
    6f36:	876f      	strh	r7, [r5, #58]	; 0x3a
    6f38:	3338      	adds	r3, #56	; 0x38
    6f3a:	781a      	ldrb	r2, [r3, #0]
    6f3c:	2300      	movs	r3, #0
    6f3e:	a909      	add	r1, sp, #36	; 0x24
    6f40:	700b      	strb	r3, [r1, #0]
    6f42:	704b      	strb	r3, [r1, #1]
    6f44:	3302      	adds	r3, #2
    6f46:	9200      	str	r2, [sp, #0]
    6f48:	0038      	movs	r0, r7
    6f4a:	001a      	movs	r2, r3
    6f4c:	4e48      	ldr	r6, [pc, #288]	; (7070 <internal_at_ble_service_define.part.0+0x2b4>)
    6f4e:	47b0      	blx	r6
    6f50:	2800      	cmp	r0, #0
    6f52:	d000      	beq.n	6f56 <internal_at_ble_service_define.part.0+0x19a>
    6f54:	e295      	b.n	7482 <internal_at_ble_service_define.part.0+0x6c6>
    6f56:	2330      	movs	r3, #48	; 0x30
    6f58:	8aaa      	ldrh	r2, [r5, #20]
    6f5a:	421a      	tst	r2, r3
    6f5c:	d012      	beq.n	6f84 <internal_at_ble_service_define.part.0+0x1c8>
    6f5e:	002b      	movs	r3, r5
    6f60:	3701      	adds	r7, #1
    6f62:	b2bf      	uxth	r7, r7
    6f64:	86ef      	strh	r7, [r5, #54]	; 0x36
    6f66:	3334      	adds	r3, #52	; 0x34
    6f68:	781a      	ldrb	r2, [r3, #0]
    6f6a:	2300      	movs	r3, #0
    6f6c:	a909      	add	r1, sp, #36	; 0x24
    6f6e:	700b      	strb	r3, [r1, #0]
    6f70:	704b      	strb	r3, [r1, #1]
    6f72:	3302      	adds	r3, #2
    6f74:	9200      	str	r2, [sp, #0]
    6f76:	0038      	movs	r0, r7
    6f78:	001a      	movs	r2, r3
    6f7a:	4e3d      	ldr	r6, [pc, #244]	; (7070 <internal_at_ble_service_define.part.0+0x2b4>)
    6f7c:	47b0      	blx	r6
    6f7e:	2800      	cmp	r0, #0
    6f80:	d000      	beq.n	6f84 <internal_at_ble_service_define.part.0+0x1c8>
    6f82:	e27e      	b.n	7482 <internal_at_ble_service_define.part.0+0x6c6>
    6f84:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    6f86:	2b00      	cmp	r3, #0
    6f88:	d017      	beq.n	6fba <internal_at_ble_service_define.part.0+0x1fe>
    6f8a:	7819      	ldrb	r1, [r3, #0]
    6f8c:	aa09      	add	r2, sp, #36	; 0x24
    6f8e:	7011      	strb	r1, [r2, #0]
    6f90:	7859      	ldrb	r1, [r3, #1]
    6f92:	3701      	adds	r7, #1
    6f94:	7051      	strb	r1, [r2, #1]
    6f96:	8859      	ldrh	r1, [r3, #2]
    6f98:	b2bf      	uxth	r7, r7
    6f9a:	7091      	strb	r1, [r2, #2]
    6f9c:	0a09      	lsrs	r1, r1, #8
    6f9e:	70d1      	strb	r1, [r2, #3]
    6fa0:	7919      	ldrb	r1, [r3, #4]
    6fa2:	0038      	movs	r0, r7
    6fa4:	7111      	strb	r1, [r2, #4]
    6fa6:	88db      	ldrh	r3, [r3, #6]
    6fa8:	2107      	movs	r1, #7
    6faa:	7153      	strb	r3, [r2, #5]
    6fac:	0a1b      	lsrs	r3, r3, #8
    6fae:	7193      	strb	r3, [r2, #6]
    6fb0:	4b30      	ldr	r3, [pc, #192]	; (7074 <internal_at_ble_service_define.part.0+0x2b8>)
    6fb2:	4798      	blx	r3
    6fb4:	2800      	cmp	r0, #0
    6fb6:	d000      	beq.n	6fba <internal_at_ble_service_define.part.0+0x1fe>
    6fb8:	e263      	b.n	7482 <internal_at_ble_service_define.part.0+0x6c6>
    6fba:	1cab      	adds	r3, r5, #2
    6fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    6fbe:	2b00      	cmp	r3, #0
    6fc0:	d007      	beq.n	6fd2 <internal_at_ble_service_define.part.0+0x216>
    6fc2:	2300      	movs	r3, #0
    6fc4:	9306      	str	r3, [sp, #24]
    6fc6:	1cab      	adds	r3, r5, #2
    6fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    6fca:	9a06      	ldr	r2, [sp, #24]
    6fcc:	429a      	cmp	r2, r3
    6fce:	d200      	bcs.n	6fd2 <internal_at_ble_service_define.part.0+0x216>
    6fd0:	e234      	b.n	743c <internal_at_ble_service_define.part.0+0x680>
    6fd2:	9b04      	ldr	r3, [sp, #16]
    6fd4:	2b00      	cmp	r3, #0
    6fd6:	d108      	bne.n	6fea <internal_at_ble_service_define.part.0+0x22e>
    6fd8:	882b      	ldrh	r3, [r5, #0]
    6fda:	9a02      	ldr	r2, [sp, #8]
    6fdc:	8013      	strh	r3, [r2, #0]
    6fde:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    6fe0:	8693      	strh	r3, [r2, #52]	; 0x34
    6fe2:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    6fe4:	86d3      	strh	r3, [r2, #54]	; 0x36
    6fe6:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
    6fe8:	8713      	strh	r3, [r2, #56]	; 0x38
    6fea:	9b05      	ldr	r3, [sp, #20]
    6fec:	9706      	str	r7, [sp, #24]
    6fee:	3301      	adds	r3, #1
    6ff0:	b29b      	uxth	r3, r3
    6ff2:	9305      	str	r3, [sp, #20]
    6ff4:	e745      	b.n	6e82 <internal_at_ble_service_define.part.0+0xc6>
    6ff6:	9b03      	ldr	r3, [sp, #12]
    6ff8:	6a1d      	ldr	r5, [r3, #32]
    6ffa:	9b04      	ldr	r3, [sp, #16]
    6ffc:	2b00      	cmp	r3, #0
    6ffe:	d00c      	beq.n	701a <internal_at_ble_service_define.part.0+0x25e>
    7000:	0003      	movs	r3, r0
    7002:	4363      	muls	r3, r4
    7004:	18eb      	adds	r3, r5, r3
    7006:	8bdd      	ldrh	r5, [r3, #30]
    7008:	8b9b      	ldrh	r3, [r3, #28]
    700a:	42ab      	cmp	r3, r5
    700c:	d900      	bls.n	7010 <internal_at_ble_service_define.part.0+0x254>
    700e:	e23a      	b.n	7486 <internal_at_ble_service_define.part.0+0x6ca>
    7010:	2d00      	cmp	r5, #0
    7012:	d100      	bne.n	7016 <internal_at_ble_service_define.part.0+0x25a>
    7014:	e237      	b.n	7486 <internal_at_ble_service_define.part.0+0x6ca>
    7016:	3401      	adds	r4, #1
    7018:	e6f9      	b.n	6e0e <internal_at_ble_service_define.part.0+0x52>
    701a:	000b      	movs	r3, r1
    701c:	e7f1      	b.n	7002 <internal_at_ble_service_define.part.0+0x246>
    701e:	9b03      	ldr	r3, [sp, #12]
    7020:	9a04      	ldr	r2, [sp, #16]
    7022:	699b      	ldr	r3, [r3, #24]
    7024:	2a00      	cmp	r2, #0
    7026:	d012      	beq.n	704e <internal_at_ble_service_define.part.0+0x292>
    7028:	006a      	lsls	r2, r5, #1
    702a:	5a99      	ldrh	r1, [r3, r2]
    702c:	230a      	movs	r3, #10
    702e:	aa06      	add	r2, sp, #24
    7030:	189b      	adds	r3, r3, r2
    7032:	9301      	str	r3, [sp, #4]
    7034:	4b10      	ldr	r3, [pc, #64]	; (7078 <internal_at_ble_service_define.part.0+0x2bc>)
    7036:	4c11      	ldr	r4, [pc, #68]	; (707c <internal_at_ble_service_define.part.0+0x2c0>)
    7038:	9300      	str	r3, [sp, #0]
    703a:	2201      	movs	r2, #1
    703c:	2302      	movs	r3, #2
    703e:	0038      	movs	r0, r7
    7040:	47a0      	blx	r4
    7042:	1e04      	subs	r4, r0, #0
    7044:	d000      	beq.n	7048 <internal_at_ble_service_define.part.0+0x28c>
    7046:	e125      	b.n	7294 <internal_at_ble_service_define.part.0+0x4d8>
    7048:	3501      	adds	r5, #1
    704a:	b2ad      	uxth	r5, r5
    704c:	e6ea      	b.n	6e24 <internal_at_ble_service_define.part.0+0x68>
    704e:	0032      	movs	r2, r6
    7050:	436a      	muls	r2, r5
    7052:	189b      	adds	r3, r3, r2
    7054:	8a59      	ldrh	r1, [r3, #18]
    7056:	e7e9      	b.n	702c <internal_at_ble_service_define.part.0+0x270>
    7058:	20003394 	.word	0x20003394
    705c:	0000a309 	.word	0x0000a309
    7060:	00006c3d 	.word	0x00006c3d
    7064:	0000a2f7 	.word	0x0000a2f7
    7068:	000098bd 	.word	0x000098bd
    706c:	0000c4c9 	.word	0x0000c4c9
    7070:	00006ce1 	.word	0x00006ce1
    7074:	00009a31 	.word	0x00009a31
    7078:	0000c4c3 	.word	0x0000c4c3
    707c:	000099bd 	.word	0x000099bd
    7080:	9b03      	ldr	r3, [sp, #12]
    7082:	6a1c      	ldr	r4, [r3, #32]
    7084:	9b04      	ldr	r3, [sp, #16]
    7086:	2b00      	cmp	r3, #0
    7088:	d100      	bne.n	708c <internal_at_ble_service_define.part.0+0x2d0>
    708a:	e0b7      	b.n	71fc <internal_at_ble_service_define.part.0+0x440>
    708c:	2544      	movs	r5, #68	; 0x44
    708e:	9b02      	ldr	r3, [sp, #8]
    7090:	435d      	muls	r5, r3
    7092:	1965      	adds	r5, r4, r5
    7094:	230a      	movs	r3, #10
    7096:	aa06      	add	r2, sp, #24
    7098:	189b      	adds	r3, r3, r2
    709a:	9301      	str	r3, [sp, #4]
    709c:	4bb2      	ldr	r3, [pc, #712]	; (7368 <internal_at_ble_service_define.part.0+0x5ac>)
    709e:	4cb3      	ldr	r4, [pc, #716]	; (736c <internal_at_ble_service_define.part.0+0x5b0>)
    70a0:	9300      	str	r3, [sp, #0]
    70a2:	2201      	movs	r2, #1
    70a4:	2302      	movs	r3, #2
    70a6:	2104      	movs	r1, #4
    70a8:	0038      	movs	r0, r7
    70aa:	47a0      	blx	r4
    70ac:	1e04      	subs	r4, r0, #0
    70ae:	d000      	beq.n	70b2 <internal_at_ble_service_define.part.0+0x2f6>
    70b0:	e0f0      	b.n	7294 <internal_at_ble_service_define.part.0+0x4d8>
    70b2:	1c6b      	adds	r3, r5, #1
    70b4:	7fde      	ldrb	r6, [r3, #31]
    70b6:	78ab      	ldrb	r3, [r5, #2]
    70b8:	0030      	movs	r0, r6
    70ba:	469c      	mov	ip, r3
    70bc:	2303      	movs	r3, #3
    70be:	1132      	asrs	r2, r6, #4
    70c0:	4018      	ands	r0, r3
    70c2:	4013      	ands	r3, r2
    70c4:	2240      	movs	r2, #64	; 0x40
    70c6:	8aa9      	ldrh	r1, [r5, #20]
    70c8:	4032      	ands	r2, r6
    70ca:	9205      	str	r2, [sp, #20]
    70cc:	0022      	movs	r2, r4
    70ce:	078c      	lsls	r4, r1, #30
    70d0:	d500      	bpl.n	70d4 <internal_at_ble_service_define.part.0+0x318>
    70d2:	0002      	movs	r2, r0
    70d4:	070c      	lsls	r4, r1, #28
    70d6:	d500      	bpl.n	70da <internal_at_ble_service_define.part.0+0x31e>
    70d8:	e0be      	b.n	7258 <internal_at_ble_service_define.part.0+0x49c>
    70da:	b294      	uxth	r4, r2
    70dc:	068a      	lsls	r2, r1, #26
    70de:	d504      	bpl.n	70ea <internal_at_ble_service_define.part.0+0x32e>
    70e0:	2210      	movs	r2, #16
    70e2:	2800      	cmp	r0, #0
    70e4:	d000      	beq.n	70e8 <internal_at_ble_service_define.part.0+0x32c>
    70e6:	0102      	lsls	r2, r0, #4
    70e8:	4314      	orrs	r4, r2
    70ea:	06ca      	lsls	r2, r1, #27
    70ec:	d504      	bpl.n	70f8 <internal_at_ble_service_define.part.0+0x33c>
    70ee:	2800      	cmp	r0, #0
    70f0:	d000      	beq.n	70f4 <internal_at_ble_service_define.part.0+0x338>
    70f2:	e0b7      	b.n	7264 <internal_at_ble_service_define.part.0+0x4a8>
    70f4:	2240      	movs	r2, #64	; 0x40
    70f6:	4314      	orrs	r4, r2
    70f8:	2280      	movs	r2, #128	; 0x80
    70fa:	0052      	lsls	r2, r2, #1
    70fc:	4211      	tst	r1, r2
    70fe:	d000      	beq.n	7102 <internal_at_ble_service_define.part.0+0x346>
    7100:	4314      	orrs	r4, r2
    7102:	07ca      	lsls	r2, r1, #31
    7104:	d502      	bpl.n	710c <internal_at_ble_service_define.part.0+0x350>
    7106:	2280      	movs	r2, #128	; 0x80
    7108:	0092      	lsls	r2, r2, #2
    710a:	4314      	orrs	r4, r2
    710c:	9a05      	ldr	r2, [sp, #20]
    710e:	2a00      	cmp	r2, #0
    7110:	d002      	beq.n	7118 <internal_at_ble_service_define.part.0+0x35c>
    7112:	2280      	movs	r2, #128	; 0x80
    7114:	00d2      	lsls	r2, r2, #3
    7116:	4314      	orrs	r4, r2
    7118:	074a      	lsls	r2, r1, #29
    711a:	d504      	bpl.n	7126 <internal_at_ble_service_define.part.0+0x36a>
    711c:	009a      	lsls	r2, r3, #2
    711e:	4314      	orrs	r4, r2
    7120:	2280      	movs	r2, #128	; 0x80
    7122:	0112      	lsls	r2, r2, #4
    7124:	4314      	orrs	r4, r2
    7126:	064a      	lsls	r2, r1, #25
    7128:	d502      	bpl.n	7130 <internal_at_ble_service_define.part.0+0x374>
    712a:	4a91      	ldr	r2, [pc, #580]	; (7370 <internal_at_ble_service_define.part.0+0x5b4>)
    712c:	4314      	orrs	r4, r2
    712e:	b2a4      	uxth	r4, r4
    7130:	060a      	lsls	r2, r1, #24
    7132:	d505      	bpl.n	7140 <internal_at_ble_service_define.part.0+0x384>
    7134:	2284      	movs	r2, #132	; 0x84
    7136:	009b      	lsls	r3, r3, #2
    7138:	431c      	orrs	r4, r3
    713a:	b2a4      	uxth	r4, r4
    713c:	0192      	lsls	r2, r2, #6
    713e:	4314      	orrs	r4, r2
    7140:	4663      	mov	r3, ip
    7142:	10f6      	asrs	r6, r6, #3
    7144:	039a      	lsls	r2, r3, #14
    7146:	8beb      	ldrh	r3, [r5, #30]
    7148:	03f6      	lsls	r6, r6, #15
    714a:	431e      	orrs	r6, r3
    714c:	4660      	mov	r0, ip
    714e:	4b89      	ldr	r3, [pc, #548]	; (7374 <internal_at_ble_service_define.part.0+0x5b8>)
    7150:	4314      	orrs	r4, r2
    7152:	4798      	blx	r3
    7154:	b224      	sxth	r4, r4
    7156:	1ce9      	adds	r1, r5, #3
    7158:	b2b6      	uxth	r6, r6
    715a:	0003      	movs	r3, r0
    715c:	b2a2      	uxth	r2, r4
    715e:	9100      	str	r1, [sp, #0]
    7160:	4c82      	ldr	r4, [pc, #520]	; (736c <internal_at_ble_service_define.part.0+0x5b0>)
    7162:	9501      	str	r5, [sp, #4]
    7164:	0031      	movs	r1, r6
    7166:	0038      	movs	r0, r7
    7168:	47a0      	blx	r4
    716a:	1e04      	subs	r4, r0, #0
    716c:	d000      	beq.n	7170 <internal_at_ble_service_define.part.0+0x3b4>
    716e:	e091      	b.n	7294 <internal_at_ble_service_define.part.0+0x4d8>
    7170:	22c0      	movs	r2, #192	; 0xc0
    7172:	8aab      	ldrh	r3, [r5, #20]
    7174:	0052      	lsls	r2, r2, #1
    7176:	4213      	tst	r3, r2
    7178:	d000      	beq.n	717c <internal_at_ble_service_define.part.0+0x3c0>
    717a:	e076      	b.n	726a <internal_at_ble_service_define.part.0+0x4ae>
    717c:	8d2c      	ldrh	r4, [r5, #40]	; 0x28
    717e:	2c00      	cmp	r4, #0
    7180:	d000      	beq.n	7184 <internal_at_ble_service_define.part.0+0x3c8>
    7182:	e08a      	b.n	729a <internal_at_ble_service_define.part.0+0x4de>
    7184:	2101      	movs	r1, #1
    7186:	8aab      	ldrh	r3, [r5, #20]
    7188:	420b      	tst	r3, r1
    718a:	d012      	beq.n	71b2 <internal_at_ble_service_define.part.0+0x3f6>
    718c:	002b      	movs	r3, r5
    718e:	3338      	adds	r3, #56	; 0x38
    7190:	7818      	ldrb	r0, [r3, #0]
    7192:	2200      	movs	r2, #0
    7194:	4b78      	ldr	r3, [pc, #480]	; (7378 <internal_at_ble_service_define.part.0+0x5bc>)
    7196:	4798      	blx	r3
    7198:	002b      	movs	r3, r5
    719a:	333a      	adds	r3, #58	; 0x3a
    719c:	9301      	str	r3, [sp, #4]
    719e:	4b77      	ldr	r3, [pc, #476]	; (737c <internal_at_ble_service_define.part.0+0x5c0>)
    71a0:	0002      	movs	r2, r0
    71a2:	9300      	str	r3, [sp, #0]
    71a4:	4c71      	ldr	r4, [pc, #452]	; (736c <internal_at_ble_service_define.part.0+0x5b0>)
    71a6:	2302      	movs	r3, #2
    71a8:	4975      	ldr	r1, [pc, #468]	; (7380 <internal_at_ble_service_define.part.0+0x5c4>)
    71aa:	0038      	movs	r0, r7
    71ac:	47a0      	blx	r4
    71ae:	1e04      	subs	r4, r0, #0
    71b0:	d170      	bne.n	7294 <internal_at_ble_service_define.part.0+0x4d8>
    71b2:	2330      	movs	r3, #48	; 0x30
    71b4:	8aaa      	ldrh	r2, [r5, #20]
    71b6:	421a      	tst	r2, r3
    71b8:	d013      	beq.n	71e2 <internal_at_ble_service_define.part.0+0x426>
    71ba:	002b      	movs	r3, r5
    71bc:	2201      	movs	r2, #1
    71be:	3334      	adds	r3, #52	; 0x34
    71c0:	7818      	ldrb	r0, [r3, #0]
    71c2:	0011      	movs	r1, r2
    71c4:	4b6c      	ldr	r3, [pc, #432]	; (7378 <internal_at_ble_service_define.part.0+0x5bc>)
    71c6:	4798      	blx	r3
    71c8:	002b      	movs	r3, r5
    71ca:	3336      	adds	r3, #54	; 0x36
    71cc:	9301      	str	r3, [sp, #4]
    71ce:	4b6d      	ldr	r3, [pc, #436]	; (7384 <internal_at_ble_service_define.part.0+0x5c8>)
    71d0:	0002      	movs	r2, r0
    71d2:	9300      	str	r3, [sp, #0]
    71d4:	4c65      	ldr	r4, [pc, #404]	; (736c <internal_at_ble_service_define.part.0+0x5b0>)
    71d6:	2302      	movs	r3, #2
    71d8:	4969      	ldr	r1, [pc, #420]	; (7380 <internal_at_ble_service_define.part.0+0x5c4>)
    71da:	0038      	movs	r0, r7
    71dc:	47a0      	blx	r4
    71de:	1e04      	subs	r4, r0, #0
    71e0:	d158      	bne.n	7294 <internal_at_ble_service_define.part.0+0x4d8>
    71e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    71e4:	2b00      	cmp	r3, #0
    71e6:	d000      	beq.n	71ea <internal_at_ble_service_define.part.0+0x42e>
    71e8:	e079      	b.n	72de <internal_at_ble_service_define.part.0+0x522>
    71ea:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    71ec:	2600      	movs	r6, #0
    71ee:	2b00      	cmp	r3, #0
    71f0:	d000      	beq.n	71f4 <internal_at_ble_service_define.part.0+0x438>
    71f2:	e0a8      	b.n	7346 <internal_at_ble_service_define.part.0+0x58a>
    71f4:	9b02      	ldr	r3, [sp, #8]
    71f6:	3301      	adds	r3, #1
    71f8:	b29b      	uxth	r3, r3
    71fa:	e619      	b.n	6e30 <internal_at_ble_service_define.part.0+0x74>
    71fc:	253c      	movs	r5, #60	; 0x3c
    71fe:	9b02      	ldr	r3, [sp, #8]
    7200:	2224      	movs	r2, #36	; 0x24
    7202:	435d      	muls	r5, r3
    7204:	1964      	adds	r4, r4, r5
    7206:	ad0b      	add	r5, sp, #44	; 0x2c
    7208:	4b5f      	ldr	r3, [pc, #380]	; (7388 <internal_at_ble_service_define.part.0+0x5cc>)
    720a:	0021      	movs	r1, r4
    720c:	0028      	movs	r0, r5
    720e:	4798      	blx	r3
    7210:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7212:	626b      	str	r3, [r5, #36]	; 0x24
    7214:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    7216:	852b      	strh	r3, [r5, #40]	; 0x28
    7218:	0023      	movs	r3, r4
    721a:	3330      	adds	r3, #48	; 0x30
    721c:	781a      	ldrb	r2, [r3, #0]
    721e:	ab16      	add	r3, sp, #88	; 0x58
    7220:	701a      	strb	r2, [r3, #0]
    7222:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    7224:	856b      	strh	r3, [r5, #42]	; 0x2a
    7226:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7228:	632b      	str	r3, [r5, #48]	; 0x30
    722a:	0023      	movs	r3, r4
    722c:	3331      	adds	r3, #49	; 0x31
    722e:	781a      	ldrb	r2, [r3, #0]
    7230:	ab18      	add	r3, sp, #96	; 0x60
    7232:	701a      	strb	r2, [r3, #0]
    7234:	0023      	movs	r3, r4
    7236:	3332      	adds	r3, #50	; 0x32
    7238:	781a      	ldrb	r2, [r3, #0]
    723a:	ab19      	add	r3, sp, #100	; 0x64
    723c:	701a      	strb	r2, [r3, #0]
    723e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    7240:	aa06      	add	r2, sp, #24
    7242:	86eb      	strh	r3, [r5, #54]	; 0x36
    7244:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    7246:	876b      	strh	r3, [r5, #58]	; 0x3a
    7248:	9b04      	ldr	r3, [sp, #16]
    724a:	63eb      	str	r3, [r5, #60]	; 0x3c
    724c:	2316      	movs	r3, #22
    724e:	189b      	adds	r3, r3, r2
    7250:	466a      	mov	r2, sp
    7252:	8a12      	ldrh	r2, [r2, #16]
    7254:	87da      	strh	r2, [r3, #62]	; 0x3e
    7256:	e71d      	b.n	7094 <internal_at_ble_service_define.part.0+0x2d8>
    7258:	009c      	lsls	r4, r3, #2
    725a:	4314      	orrs	r4, r2
    725c:	2280      	movs	r2, #128	; 0x80
    725e:	0192      	lsls	r2, r2, #6
    7260:	4314      	orrs	r4, r2
    7262:	e73b      	b.n	70dc <internal_at_ble_service_define.part.0+0x320>
    7264:	0180      	lsls	r0, r0, #6
    7266:	4304      	orrs	r4, r0
    7268:	e746      	b.n	70f8 <internal_at_ble_service_define.part.0+0x33c>
    726a:	0619      	lsls	r1, r3, #24
    726c:	0fc9      	lsrs	r1, r1, #31
    726e:	05db      	lsls	r3, r3, #23
    7270:	d501      	bpl.n	7276 <internal_at_ble_service_define.part.0+0x4ba>
    7272:	2302      	movs	r3, #2
    7274:	4319      	orrs	r1, r3
    7276:	230a      	movs	r3, #10
    7278:	aa06      	add	r2, sp, #24
    727a:	189b      	adds	r3, r3, r2
    727c:	9301      	str	r3, [sp, #4]
    727e:	4b43      	ldr	r3, [pc, #268]	; (738c <internal_at_ble_service_define.part.0+0x5d0>)
    7280:	4c3a      	ldr	r4, [pc, #232]	; (736c <internal_at_ble_service_define.part.0+0x5b0>)
    7282:	9300      	str	r3, [sp, #0]
    7284:	0209      	lsls	r1, r1, #8
    7286:	2302      	movs	r3, #2
    7288:	2201      	movs	r2, #1
    728a:	0038      	movs	r0, r7
    728c:	47a0      	blx	r4
    728e:	1e04      	subs	r4, r0, #0
    7290:	d100      	bne.n	7294 <internal_at_ble_service_define.part.0+0x4d8>
    7292:	e773      	b.n	717c <internal_at_ble_service_define.part.0+0x3c0>
    7294:	0020      	movs	r0, r4
    7296:	b01d      	add	sp, #116	; 0x74
    7298:	bdf0      	pop	{r4, r5, r6, r7, pc}
    729a:	2380      	movs	r3, #128	; 0x80
    729c:	8aaa      	ldrh	r2, [r5, #20]
    729e:	005b      	lsls	r3, r3, #1
    72a0:	401a      	ands	r2, r3
    72a2:	002b      	movs	r3, r5
    72a4:	332c      	adds	r3, #44	; 0x2c
    72a6:	7818      	ldrb	r0, [r3, #0]
    72a8:	2101      	movs	r1, #1
    72aa:	2a00      	cmp	r2, #0
    72ac:	d001      	beq.n	72b2 <internal_at_ble_service_define.part.0+0x4f6>
    72ae:	2201      	movs	r2, #1
    72b0:	0011      	movs	r1, r2
    72b2:	4b31      	ldr	r3, [pc, #196]	; (7378 <internal_at_ble_service_define.part.0+0x5bc>)
    72b4:	4798      	blx	r3
    72b6:	002b      	movs	r3, r5
    72b8:	332c      	adds	r3, #44	; 0x2c
    72ba:	781a      	ldrb	r2, [r3, #0]
    72bc:	3b02      	subs	r3, #2
    72be:	10d2      	asrs	r2, r2, #3
    72c0:	9301      	str	r3, [sp, #4]
    72c2:	03d2      	lsls	r2, r2, #15
    72c4:	4b32      	ldr	r3, [pc, #200]	; (7390 <internal_at_ble_service_define.part.0+0x5d4>)
    72c6:	4302      	orrs	r2, r0
    72c8:	9300      	str	r3, [sp, #0]
    72ca:	0021      	movs	r1, r4
    72cc:	b292      	uxth	r2, r2
    72ce:	4c27      	ldr	r4, [pc, #156]	; (736c <internal_at_ble_service_define.part.0+0x5b0>)
    72d0:	2302      	movs	r3, #2
    72d2:	0038      	movs	r0, r7
    72d4:	47a0      	blx	r4
    72d6:	1e04      	subs	r4, r0, #0
    72d8:	d100      	bne.n	72dc <internal_at_ble_service_define.part.0+0x520>
    72da:	e753      	b.n	7184 <internal_at_ble_service_define.part.0+0x3c8>
    72dc:	e7da      	b.n	7294 <internal_at_ble_service_define.part.0+0x4d8>
    72de:	230a      	movs	r3, #10
    72e0:	aa06      	add	r2, sp, #24
    72e2:	189b      	adds	r3, r3, r2
    72e4:	9301      	str	r3, [sp, #4]
    72e6:	4b2b      	ldr	r3, [pc, #172]	; (7394 <internal_at_ble_service_define.part.0+0x5d8>)
    72e8:	4c20      	ldr	r4, [pc, #128]	; (736c <internal_at_ble_service_define.part.0+0x5b0>)
    72ea:	9300      	str	r3, [sp, #0]
    72ec:	2201      	movs	r2, #1
    72ee:	2302      	movs	r3, #2
    72f0:	2107      	movs	r1, #7
    72f2:	0038      	movs	r0, r7
    72f4:	47a0      	blx	r4
    72f6:	1e04      	subs	r4, r0, #0
    72f8:	d100      	bne.n	72fc <internal_at_ble_service_define.part.0+0x540>
    72fa:	e776      	b.n	71ea <internal_at_ble_service_define.part.0+0x42e>
    72fc:	e7ca      	b.n	7294 <internal_at_ble_service_define.part.0+0x4d8>
    72fe:	2318      	movs	r3, #24
    7300:	4373      	muls	r3, r6
    7302:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    7304:	18d4      	adds	r4, r2, r3
    7306:	2200      	movs	r2, #0
    7308:	7923      	ldrb	r3, [r4, #4]
    730a:	0011      	movs	r1, r2
    730c:	9305      	str	r3, [sp, #20]
    730e:	0018      	movs	r0, r3
    7310:	4b19      	ldr	r3, [pc, #100]	; (7378 <internal_at_ble_service_define.part.0+0x5bc>)
    7312:	4798      	blx	r3
    7314:	7963      	ldrb	r3, [r4, #5]
    7316:	0002      	movs	r2, r0
    7318:	2b01      	cmp	r3, #1
    731a:	d019      	beq.n	7350 <internal_at_ble_service_define.part.0+0x594>
    731c:	2b02      	cmp	r3, #2
    731e:	d01c      	beq.n	735a <internal_at_ble_service_define.part.0+0x59e>
    7320:	9b05      	ldr	r3, [sp, #20]
    7322:	0038      	movs	r0, r7
    7324:	10d9      	asrs	r1, r3, #3
    7326:	8863      	ldrh	r3, [r4, #2]
    7328:	03c9      	lsls	r1, r1, #15
    732a:	4319      	orrs	r1, r3
    732c:	0023      	movs	r3, r4
    732e:	3316      	adds	r3, #22
    7330:	9301      	str	r3, [sp, #4]
    7332:	1da3      	adds	r3, r4, #6
    7334:	9300      	str	r3, [sp, #0]
    7336:	4c0d      	ldr	r4, [pc, #52]	; (736c <internal_at_ble_service_define.part.0+0x5b0>)
    7338:	b289      	uxth	r1, r1
    733a:	2311      	movs	r3, #17
    733c:	47a0      	blx	r4
    733e:	1e04      	subs	r4, r0, #0
    7340:	d1a8      	bne.n	7294 <internal_at_ble_service_define.part.0+0x4d8>
    7342:	3601      	adds	r6, #1
    7344:	b2b6      	uxth	r6, r6
    7346:	1cab      	adds	r3, r5, #2
    7348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    734a:	42b3      	cmp	r3, r6
    734c:	d8d7      	bhi.n	72fe <internal_at_ble_service_define.part.0+0x542>
    734e:	e751      	b.n	71f4 <internal_at_ble_service_define.part.0+0x438>
    7350:	2380      	movs	r3, #128	; 0x80
    7352:	01db      	lsls	r3, r3, #7
    7354:	431a      	orrs	r2, r3
    7356:	b292      	uxth	r2, r2
    7358:	e7e2      	b.n	7320 <internal_at_ble_service_define.part.0+0x564>
    735a:	480f      	ldr	r0, [pc, #60]	; (7398 <internal_at_ble_service_define.part.0+0x5dc>)
    735c:	4302      	orrs	r2, r0
    735e:	e7fa      	b.n	7356 <internal_at_ble_service_define.part.0+0x59a>
    7360:	3301      	adds	r3, #1
    7362:	b29b      	uxth	r3, r3
    7364:	e57e      	b.n	6e64 <internal_at_ble_service_define.part.0+0xa8>
    7366:	46c0      	nop			; (mov r8, r8)
    7368:	0000c4bd 	.word	0x0000c4bd
    736c:	000099bd 	.word	0x000099bd
    7370:	00001004 	.word	0x00001004
    7374:	00006c3d 	.word	0x00006c3d
    7378:	00006ca5 	.word	0x00006ca5
    737c:	0000c4c7 	.word	0x0000c4c7
    7380:	00008002 	.word	0x00008002
    7384:	0000c4bf 	.word	0x0000c4bf
    7388:	0000a2f7 	.word	0x0000a2f7
    738c:	0000c4c1 	.word	0x0000c4c1
    7390:	0000c4ca 	.word	0x0000c4ca
    7394:	0000c4c5 	.word	0x0000c4c5
    7398:	ffff8000 	.word	0xffff8000
    739c:	ad0b      	add	r5, sp, #44	; 0x2c
    739e:	2224      	movs	r2, #36	; 0x24
    73a0:	4b3a      	ldr	r3, [pc, #232]	; (748c <internal_at_ble_service_define.part.0+0x6d0>)
    73a2:	9902      	ldr	r1, [sp, #8]
    73a4:	0028      	movs	r0, r5
    73a6:	4798      	blx	r3
    73a8:	9b02      	ldr	r3, [sp, #8]
    73aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    73ac:	626b      	str	r3, [r5, #36]	; 0x24
    73ae:	9b02      	ldr	r3, [sp, #8]
    73b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    73b2:	852b      	strh	r3, [r5, #40]	; 0x28
    73b4:	9b02      	ldr	r3, [sp, #8]
    73b6:	3330      	adds	r3, #48	; 0x30
    73b8:	781a      	ldrb	r2, [r3, #0]
    73ba:	ab16      	add	r3, sp, #88	; 0x58
    73bc:	701a      	strb	r2, [r3, #0]
    73be:	9b02      	ldr	r3, [sp, #8]
    73c0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    73c2:	856b      	strh	r3, [r5, #42]	; 0x2a
    73c4:	9b02      	ldr	r3, [sp, #8]
    73c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    73c8:	9307      	str	r3, [sp, #28]
    73ca:	9b02      	ldr	r3, [sp, #8]
    73cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    73ce:	632b      	str	r3, [r5, #48]	; 0x30
    73d0:	9b02      	ldr	r3, [sp, #8]
    73d2:	3331      	adds	r3, #49	; 0x31
    73d4:	781a      	ldrb	r2, [r3, #0]
    73d6:	ab18      	add	r3, sp, #96	; 0x60
    73d8:	701a      	strb	r2, [r3, #0]
    73da:	9b02      	ldr	r3, [sp, #8]
    73dc:	3332      	adds	r3, #50	; 0x32
    73de:	781a      	ldrb	r2, [r3, #0]
    73e0:	ab19      	add	r3, sp, #100	; 0x64
    73e2:	701a      	strb	r2, [r3, #0]
    73e4:	9b02      	ldr	r3, [sp, #8]
    73e6:	aa06      	add	r2, sp, #24
    73e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    73ea:	86eb      	strh	r3, [r5, #54]	; 0x36
    73ec:	9b02      	ldr	r3, [sp, #8]
    73ee:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    73f0:	876b      	strh	r3, [r5, #58]	; 0x3a
    73f2:	9b04      	ldr	r3, [sp, #16]
    73f4:	63eb      	str	r3, [r5, #60]	; 0x3c
    73f6:	2316      	movs	r3, #22
    73f8:	189b      	adds	r3, r3, r2
    73fa:	466a      	mov	r2, sp
    73fc:	8a12      	ldrh	r2, [r2, #16]
    73fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    7400:	e558      	b.n	6eb4 <internal_at_ble_service_define.part.0+0xf8>
    7402:	9000      	str	r0, [sp, #0]
    7404:	000a      	movs	r2, r1
    7406:	0038      	movs	r0, r7
    7408:	4e21      	ldr	r6, [pc, #132]	; (7490 <internal_at_ble_service_define.part.0+0x6d4>)
    740a:	47b0      	blx	r6
    740c:	2800      	cmp	r0, #0
    740e:	d138      	bne.n	7482 <internal_at_ble_service_define.part.0+0x6c6>
    7410:	8ba9      	ldrh	r1, [r5, #28]
    7412:	8828      	ldrh	r0, [r5, #0]
    7414:	69aa      	ldr	r2, [r5, #24]
    7416:	4b1f      	ldr	r3, [pc, #124]	; (7494 <internal_at_ble_service_define.part.0+0x6d8>)
    7418:	4798      	blx	r3
    741a:	e560      	b.n	6ede <internal_at_ble_service_define.part.0+0x122>
    741c:	9f06      	ldr	r7, [sp, #24]
    741e:	3703      	adds	r7, #3
    7420:	b2bf      	uxth	r7, r7
    7422:	e565      	b.n	6ef0 <internal_at_ble_service_define.part.0+0x134>
    7424:	000a      	movs	r2, r1
    7426:	0038      	movs	r0, r7
    7428:	4e19      	ldr	r6, [pc, #100]	; (7490 <internal_at_ble_service_define.part.0+0x6d4>)
    742a:	47b0      	blx	r6
    742c:	2800      	cmp	r0, #0
    742e:	d128      	bne.n	7482 <internal_at_ble_service_define.part.0+0x6c6>
    7430:	9a06      	ldr	r2, [sp, #24]
    7432:	9907      	ldr	r1, [sp, #28]
    7434:	0038      	movs	r0, r7
    7436:	4b17      	ldr	r3, [pc, #92]	; (7494 <internal_at_ble_service_define.part.0+0x6d8>)
    7438:	4798      	blx	r3
    743a:	e573      	b.n	6f24 <internal_at_ble_service_define.part.0+0x168>
    743c:	2218      	movs	r2, #24
    743e:	9b06      	ldr	r3, [sp, #24]
    7440:	3701      	adds	r7, #1
    7442:	435a      	muls	r2, r3
    7444:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    7446:	b2bf      	uxth	r7, r7
    7448:	189b      	adds	r3, r3, r2
    744a:	82df      	strh	r7, [r3, #22]
    744c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    744e:	189a      	adds	r2, r3, r2
    7450:	7913      	ldrb	r3, [r2, #4]
    7452:	8ad0      	ldrh	r0, [r2, #22]
    7454:	10d9      	asrs	r1, r3, #3
    7456:	07c9      	lsls	r1, r1, #31
    7458:	469c      	mov	ip, r3
    745a:	0c09      	lsrs	r1, r1, #16
    745c:	8853      	ldrh	r3, [r2, #2]
    745e:	2900      	cmp	r1, #0
    7460:	d00a      	beq.n	7478 <internal_at_ble_service_define.part.0+0x6bc>
    7462:	4661      	mov	r1, ip
    7464:	8812      	ldrh	r2, [r2, #0]
    7466:	9100      	str	r1, [sp, #0]
    7468:	490b      	ldr	r1, [pc, #44]	; (7498 <internal_at_ble_service_define.part.0+0x6dc>)
    746a:	4e09      	ldr	r6, [pc, #36]	; (7490 <internal_at_ble_service_define.part.0+0x6d4>)
    746c:	47b0      	blx	r6
    746e:	2800      	cmp	r0, #0
    7470:	d107      	bne.n	7482 <internal_at_ble_service_define.part.0+0x6c6>
    7472:	9b06      	ldr	r3, [sp, #24]
    7474:	3301      	adds	r3, #1
    7476:	e5a5      	b.n	6fc4 <internal_at_ble_service_define.part.0+0x208>
    7478:	4662      	mov	r2, ip
    747a:	9200      	str	r2, [sp, #0]
    747c:	000a      	movs	r2, r1
    747e:	e7f4      	b.n	746a <internal_at_ble_service_define.part.0+0x6ae>
    7480:	20cf      	movs	r0, #207	; 0xcf
    7482:	0004      	movs	r4, r0
    7484:	e706      	b.n	7294 <internal_at_ble_service_define.part.0+0x4d8>
    7486:	24cf      	movs	r4, #207	; 0xcf
    7488:	e704      	b.n	7294 <internal_at_ble_service_define.part.0+0x4d8>
    748a:	46c0      	nop			; (mov r8, r8)
    748c:	0000a2f7 	.word	0x0000a2f7
    7490:	00006ce1 	.word	0x00006ce1
    7494:	00009a31 	.word	0x00009a31
    7498:	0000c4c9 	.word	0x0000c4c9

0000749c <db_init>:
    749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    749e:	000d      	movs	r5, r1
    74a0:	2100      	movs	r1, #0
    74a2:	4b12      	ldr	r3, [pc, #72]	; (74ec <db_init+0x50>)
    74a4:	4f12      	ldr	r7, [pc, #72]	; (74f0 <db_init+0x54>)
    74a6:	6019      	str	r1, [r3, #0]
    74a8:	4b12      	ldr	r3, [pc, #72]	; (74f4 <db_init+0x58>)
    74aa:	4e13      	ldr	r6, [pc, #76]	; (74f8 <db_init+0x5c>)
    74ac:	6019      	str	r1, [r3, #0]
    74ae:	4b13      	ldr	r3, [pc, #76]	; (74fc <db_init+0x60>)
    74b0:	0004      	movs	r4, r0
    74b2:	6019      	str	r1, [r3, #0]
    74b4:	4b12      	ldr	r3, [pc, #72]	; (7500 <db_init+0x64>)
    74b6:	6039      	str	r1, [r7, #0]
    74b8:	6031      	str	r1, [r6, #0]
    74ba:	6019      	str	r1, [r3, #0]
    74bc:	4288      	cmp	r0, r1
    74be:	d013      	beq.n	74e8 <db_init+0x4c>
    74c0:	428d      	cmp	r5, r1
    74c2:	d011      	beq.n	74e8 <db_init+0x4c>
    74c4:	002a      	movs	r2, r5
    74c6:	4b0f      	ldr	r3, [pc, #60]	; (7504 <db_init+0x68>)
    74c8:	4798      	blx	r3
    74ca:	086b      	lsrs	r3, r5, #1
    74cc:	4a09      	ldr	r2, [pc, #36]	; (74f4 <db_init+0x58>)
    74ce:	6033      	str	r3, [r6, #0]
    74d0:	18e3      	adds	r3, r4, r3
    74d2:	6013      	str	r3, [r2, #0]
    74d4:	4a05      	ldr	r2, [pc, #20]	; (74ec <db_init+0x50>)
    74d6:	603c      	str	r4, [r7, #0]
    74d8:	6013      	str	r3, [r2, #0]
    74da:	2303      	movs	r3, #3
    74dc:	1964      	adds	r4, r4, r5
    74de:	3403      	adds	r4, #3
    74e0:	439c      	bics	r4, r3
    74e2:	4b06      	ldr	r3, [pc, #24]	; (74fc <db_init+0x60>)
    74e4:	3c04      	subs	r4, #4
    74e6:	601c      	str	r4, [r3, #0]
    74e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    74ea:	46c0      	nop			; (mov r8, r8)
    74ec:	20003398 	.word	0x20003398
    74f0:	20003394 	.word	0x20003394
    74f4:	200033a4 	.word	0x200033a4
    74f8:	2000339c 	.word	0x2000339c
    74fc:	200033a0 	.word	0x200033a0
    7500:	200033a8 	.word	0x200033a8
    7504:	0000a309 	.word	0x0000a309

00007508 <at_ble_primary_service_define>:
    7508:	4684      	mov	ip, r0
    750a:	b5f0      	push	{r4, r5, r6, r7, lr}
    750c:	b08d      	sub	sp, #52	; 0x34
    750e:	001e      	movs	r6, r3
    7510:	ab12      	add	r3, sp, #72	; 0x48
    7512:	0017      	movs	r7, r2
    7514:	cb04      	ldmia	r3!, {r2}
    7516:	000c      	movs	r4, r1
    7518:	881b      	ldrh	r3, [r3, #0]
    751a:	9200      	str	r2, [sp, #0]
    751c:	9301      	str	r3, [sp, #4]
    751e:	4663      	mov	r3, ip
    7520:	20cf      	movs	r0, #207	; 0xcf
    7522:	2b00      	cmp	r3, #0
    7524:	d01b      	beq.n	755e <at_ble_primary_service_define+0x56>
    7526:	2900      	cmp	r1, #0
    7528:	d019      	beq.n	755e <at_ble_primary_service_define+0x56>
    752a:	2301      	movs	r3, #1
    752c:	2500      	movs	r5, #0
    752e:	aa02      	add	r2, sp, #8
    7530:	7013      	strb	r3, [r2, #0]
    7532:	880b      	ldrh	r3, [r1, #0]
    7534:	7055      	strb	r5, [r2, #1]
    7536:	8053      	strh	r3, [r2, #2]
    7538:	4661      	mov	r1, ip
    753a:	2211      	movs	r2, #17
    753c:	4b09      	ldr	r3, [pc, #36]	; (7564 <at_ble_primary_service_define+0x5c>)
    753e:	a803      	add	r0, sp, #12
    7540:	4798      	blx	r3
    7542:	466a      	mov	r2, sp
    7544:	ab02      	add	r3, sp, #8
    7546:	839e      	strh	r6, [r3, #28]
    7548:	9b00      	ldr	r3, [sp, #0]
    754a:	8892      	ldrh	r2, [r2, #4]
    754c:	930a      	str	r3, [sp, #40]	; 0x28
    754e:	ab02      	add	r3, sp, #8
    7550:	849a      	strh	r2, [r3, #36]	; 0x24
    7552:	0018      	movs	r0, r3
    7554:	002a      	movs	r2, r5
    7556:	0021      	movs	r1, r4
    7558:	4b03      	ldr	r3, [pc, #12]	; (7568 <at_ble_primary_service_define+0x60>)
    755a:	9708      	str	r7, [sp, #32]
    755c:	4798      	blx	r3
    755e:	b00d      	add	sp, #52	; 0x34
    7560:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7562:	46c0      	nop			; (mov r8, r8)
    7564:	0000a2f7 	.word	0x0000a2f7
    7568:	00006dbd 	.word	0x00006dbd

0000756c <at_ble_characteristic_value_set>:
    756c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    756e:	4b0e      	ldr	r3, [pc, #56]	; (75a8 <at_ble_characteristic_value_set+0x3c>)
    7570:	0006      	movs	r6, r0
    7572:	000d      	movs	r5, r1
    7574:	0014      	movs	r4, r2
    7576:	4798      	blx	r3
    7578:	1e03      	subs	r3, r0, #0
    757a:	d00e      	beq.n	759a <at_ble_characteristic_value_set+0x2e>
    757c:	6887      	ldr	r7, [r0, #8]
    757e:	2f00      	cmp	r7, #0
    7580:	d00b      	beq.n	759a <at_ble_characteristic_value_set+0x2e>
    7582:	88c2      	ldrh	r2, [r0, #6]
    7584:	20cf      	movs	r0, #207	; 0xcf
    7586:	42a2      	cmp	r2, r4
    7588:	d306      	bcc.n	7598 <at_ble_characteristic_value_set+0x2c>
    758a:	809c      	strh	r4, [r3, #4]
    758c:	0022      	movs	r2, r4
    758e:	0029      	movs	r1, r5
    7590:	0038      	movs	r0, r7
    7592:	4b06      	ldr	r3, [pc, #24]	; (75ac <at_ble_characteristic_value_set+0x40>)
    7594:	4798      	blx	r3
    7596:	2000      	movs	r0, #0
    7598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    759a:	002a      	movs	r2, r5
    759c:	0021      	movs	r1, r4
    759e:	0030      	movs	r0, r6
    75a0:	4b03      	ldr	r3, [pc, #12]	; (75b0 <at_ble_characteristic_value_set+0x44>)
    75a2:	4798      	blx	r3
    75a4:	e7f8      	b.n	7598 <at_ble_characteristic_value_set+0x2c>
    75a6:	46c0      	nop			; (mov r8, r8)
    75a8:	00006c65 	.word	0x00006c65
    75ac:	0000a2f7 	.word	0x0000a2f7
    75b0:	00009a31 	.word	0x00009a31

000075b4 <at_ble_characteristic_value_get>:
    75b4:	b570      	push	{r4, r5, r6, lr}
    75b6:	4b0c      	ldr	r3, [pc, #48]	; (75e8 <at_ble_characteristic_value_get+0x34>)
    75b8:	0004      	movs	r4, r0
    75ba:	000e      	movs	r6, r1
    75bc:	0015      	movs	r5, r2
    75be:	4798      	blx	r3
    75c0:	2800      	cmp	r0, #0
    75c2:	d00b      	beq.n	75dc <at_ble_characteristic_value_get+0x28>
    75c4:	6883      	ldr	r3, [r0, #8]
    75c6:	2b00      	cmp	r3, #0
    75c8:	d008      	beq.n	75dc <at_ble_characteristic_value_get+0x28>
    75ca:	8883      	ldrh	r3, [r0, #4]
    75cc:	802b      	strh	r3, [r5, #0]
    75ce:	8882      	ldrh	r2, [r0, #4]
    75d0:	6881      	ldr	r1, [r0, #8]
    75d2:	4b06      	ldr	r3, [pc, #24]	; (75ec <at_ble_characteristic_value_get+0x38>)
    75d4:	0030      	movs	r0, r6
    75d6:	4798      	blx	r3
    75d8:	2000      	movs	r0, #0
    75da:	bd70      	pop	{r4, r5, r6, pc}
    75dc:	0032      	movs	r2, r6
    75de:	0029      	movs	r1, r5
    75e0:	0020      	movs	r0, r4
    75e2:	4b03      	ldr	r3, [pc, #12]	; (75f0 <at_ble_characteristic_value_get+0x3c>)
    75e4:	4798      	blx	r3
    75e6:	e7f8      	b.n	75da <at_ble_characteristic_value_get+0x26>
    75e8:	00006c65 	.word	0x00006c65
    75ec:	0000a2f7 	.word	0x0000a2f7
    75f0:	00009ac1 	.word	0x00009ac1

000075f4 <at_ble_write_authorize_reply>:
    75f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    75f6:	0004      	movs	r4, r0
    75f8:	b085      	sub	sp, #20
    75fa:	1e0e      	subs	r6, r1, #0
    75fc:	d11a      	bne.n	7634 <at_ble_write_authorize_reply+0x40>
    75fe:	8847      	ldrh	r7, [r0, #2]
    7600:	4b21      	ldr	r3, [pc, #132]	; (7688 <at_ble_write_authorize_reply+0x94>)
    7602:	0038      	movs	r0, r7
    7604:	4798      	blx	r3
    7606:	1e03      	subs	r3, r0, #0
    7608:	d01c      	beq.n	7644 <at_ble_write_authorize_reply+0x50>
    760a:	6881      	ldr	r1, [r0, #8]
    760c:	2900      	cmp	r1, #0
    760e:	d019      	beq.n	7644 <at_ble_write_authorize_reply+0x50>
    7610:	88e0      	ldrh	r0, [r4, #6]
    7612:	88a2      	ldrh	r2, [r4, #4]
    7614:	88dd      	ldrh	r5, [r3, #6]
    7616:	1812      	adds	r2, r2, r0
    7618:	20cf      	movs	r0, #207	; 0xcf
    761a:	42aa      	cmp	r2, r5
    761c:	dc10      	bgt.n	7640 <at_ble_write_authorize_reply+0x4c>
    761e:	8898      	ldrh	r0, [r3, #4]
    7620:	4282      	cmp	r2, r0
    7622:	dd00      	ble.n	7626 <at_ble_write_authorize_reply+0x32>
    7624:	809a      	strh	r2, [r3, #4]
    7626:	88a0      	ldrh	r0, [r4, #4]
    7628:	88e2      	ldrh	r2, [r4, #6]
    762a:	1808      	adds	r0, r1, r0
    762c:	0021      	movs	r1, r4
    762e:	4b17      	ldr	r3, [pc, #92]	; (768c <at_ble_write_authorize_reply+0x98>)
    7630:	3108      	adds	r1, #8
    7632:	4798      	blx	r3
    7634:	8860      	ldrh	r0, [r4, #2]
    7636:	8821      	ldrh	r1, [r4, #0]
    7638:	0032      	movs	r2, r6
    763a:	4b15      	ldr	r3, [pc, #84]	; (7690 <at_ble_write_authorize_reply+0x9c>)
    763c:	4798      	blx	r3
    763e:	2000      	movs	r0, #0
    7640:	b005      	add	sp, #20
    7642:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7644:	ab02      	add	r3, sp, #8
    7646:	1d9d      	adds	r5, r3, #6
    7648:	2300      	movs	r3, #0
    764a:	802b      	strh	r3, [r5, #0]
    764c:	4b11      	ldr	r3, [pc, #68]	; (7694 <at_ble_write_authorize_reply+0xa0>)
    764e:	002a      	movs	r2, r5
    7650:	681b      	ldr	r3, [r3, #0]
    7652:	0038      	movs	r0, r7
    7654:	0019      	movs	r1, r3
    7656:	9301      	str	r3, [sp, #4]
    7658:	4b0f      	ldr	r3, [pc, #60]	; (7698 <at_ble_write_authorize_reply+0xa4>)
    765a:	4798      	blx	r3
    765c:	0021      	movs	r1, r4
    765e:	9b01      	ldr	r3, [sp, #4]
    7660:	88a0      	ldrh	r0, [r4, #4]
    7662:	88e2      	ldrh	r2, [r4, #6]
    7664:	1818      	adds	r0, r3, r0
    7666:	3108      	adds	r1, #8
    7668:	4b08      	ldr	r3, [pc, #32]	; (768c <at_ble_write_authorize_reply+0x98>)
    766a:	4798      	blx	r3
    766c:	88e2      	ldrh	r2, [r4, #6]
    766e:	88a3      	ldrh	r3, [r4, #4]
    7670:	189b      	adds	r3, r3, r2
    7672:	882a      	ldrh	r2, [r5, #0]
    7674:	4293      	cmp	r3, r2
    7676:	dd00      	ble.n	767a <at_ble_write_authorize_reply+0x86>
    7678:	802b      	strh	r3, [r5, #0]
    767a:	882a      	ldrh	r2, [r5, #0]
    767c:	8860      	ldrh	r0, [r4, #2]
    767e:	9901      	ldr	r1, [sp, #4]
    7680:	4b06      	ldr	r3, [pc, #24]	; (769c <at_ble_write_authorize_reply+0xa8>)
    7682:	4798      	blx	r3
    7684:	e7d6      	b.n	7634 <at_ble_write_authorize_reply+0x40>
    7686:	46c0      	nop			; (mov r8, r8)
    7688:	00006c65 	.word	0x00006c65
    768c:	0000a2f7 	.word	0x0000a2f7
    7690:	00009539 	.word	0x00009539
    7694:	0000c4cc 	.word	0x0000c4cc
    7698:	000075b5 	.word	0x000075b5
    769c:	0000756d 	.word	0x0000756d

000076a0 <gatts_handle_read_req>:
    76a0:	b570      	push	{r4, r5, r6, lr}
    76a2:	000c      	movs	r4, r1
    76a4:	4b07      	ldr	r3, [pc, #28]	; (76c4 <gatts_handle_read_req+0x24>)
    76a6:	4798      	blx	r3
    76a8:	8865      	ldrh	r5, [r4, #2]
    76aa:	4b07      	ldr	r3, [pc, #28]	; (76c8 <gatts_handle_read_req+0x28>)
    76ac:	0028      	movs	r0, r5
    76ae:	4798      	blx	r3
    76b0:	7883      	ldrb	r3, [r0, #2]
    76b2:	2027      	movs	r0, #39	; 0x27
    76b4:	07db      	lsls	r3, r3, #31
    76b6:	d404      	bmi.n	76c2 <gatts_handle_read_req+0x22>
    76b8:	8820      	ldrh	r0, [r4, #0]
    76ba:	0029      	movs	r1, r5
    76bc:	4b03      	ldr	r3, [pc, #12]	; (76cc <gatts_handle_read_req+0x2c>)
    76be:	4798      	blx	r3
    76c0:	203d      	movs	r0, #61	; 0x3d
    76c2:	bd70      	pop	{r4, r5, r6, pc}
    76c4:	00009473 	.word	0x00009473
    76c8:	00006c65 	.word	0x00006c65
    76cc:	00006d8d 	.word	0x00006d8d

000076d0 <gatts_handle_att_info_req>:
    76d0:	b570      	push	{r4, r5, r6, lr}
    76d2:	000d      	movs	r5, r1
    76d4:	4b0a      	ldr	r3, [pc, #40]	; (7700 <gatts_handle_att_info_req+0x30>)
    76d6:	0014      	movs	r4, r2
    76d8:	4798      	blx	r3
    76da:	882d      	ldrh	r5, [r5, #0]
    76dc:	4b09      	ldr	r3, [pc, #36]	; (7704 <gatts_handle_att_info_req+0x34>)
    76de:	0028      	movs	r0, r5
    76e0:	4798      	blx	r3
    76e2:	0a21      	lsrs	r1, r4, #8
    76e4:	1e03      	subs	r3, r0, #0
    76e6:	4c08      	ldr	r4, [pc, #32]	; (7708 <gatts_handle_att_info_req+0x38>)
    76e8:	d006      	beq.n	76f8 <gatts_handle_att_info_req+0x28>
    76ea:	2300      	movs	r3, #0
    76ec:	88c2      	ldrh	r2, [r0, #6]
    76ee:	b289      	uxth	r1, r1
    76f0:	0028      	movs	r0, r5
    76f2:	47a0      	blx	r4
    76f4:	203d      	movs	r0, #61	; 0x3d
    76f6:	bd70      	pop	{r4, r5, r6, pc}
    76f8:	b289      	uxth	r1, r1
    76fa:	2201      	movs	r2, #1
    76fc:	e7f8      	b.n	76f0 <gatts_handle_att_info_req+0x20>
    76fe:	46c0      	nop			; (mov r8, r8)
    7700:	000094b9 	.word	0x000094b9
    7704:	00006c65 	.word	0x00006c65
    7708:	00009581 	.word	0x00009581

0000770c <gatts_handle_write_req>:
    770c:	b510      	push	{r4, lr}
    770e:	0014      	movs	r4, r2
    7710:	4b07      	ldr	r3, [pc, #28]	; (7730 <gatts_handle_write_req+0x24>)
    7712:	4798      	blx	r3
    7714:	4b07      	ldr	r3, [pc, #28]	; (7734 <gatts_handle_write_req+0x28>)
    7716:	8860      	ldrh	r0, [r4, #2]
    7718:	4798      	blx	r3
    771a:	2302      	movs	r3, #2
    771c:	7881      	ldrb	r1, [r0, #2]
    771e:	2023      	movs	r0, #35	; 0x23
    7720:	4019      	ands	r1, r3
    7722:	d103      	bne.n	772c <gatts_handle_write_req+0x20>
    7724:	0020      	movs	r0, r4
    7726:	4b04      	ldr	r3, [pc, #16]	; (7738 <gatts_handle_write_req+0x2c>)
    7728:	4798      	blx	r3
    772a:	2020      	movs	r0, #32
    772c:	bd10      	pop	{r4, pc}
    772e:	46c0      	nop			; (mov r8, r8)
    7730:	00009481 	.word	0x00009481
    7734:	00006c65 	.word	0x00006c65
    7738:	000075f5 	.word	0x000075f5

0000773c <at_ble_notification_send>:
    773c:	b5f0      	push	{r4, r5, r6, r7, lr}
    773e:	4d15      	ldr	r5, [pc, #84]	; (7794 <at_ble_notification_send+0x58>)
    7740:	4c15      	ldr	r4, [pc, #84]	; (7798 <at_ble_notification_send+0x5c>)
    7742:	682b      	ldr	r3, [r5, #0]
    7744:	44a5      	add	sp, r4
    7746:	0006      	movs	r6, r0
    7748:	000c      	movs	r4, r1
    774a:	20d2      	movs	r0, #210	; 0xd2
    774c:	2b04      	cmp	r3, #4
    774e:	d812      	bhi.n	7776 <at_ble_notification_send+0x3a>
    7750:	0008      	movs	r0, r1
    7752:	4b12      	ldr	r3, [pc, #72]	; (779c <at_ble_notification_send+0x60>)
    7754:	4798      	blx	r3
    7756:	2800      	cmp	r0, #0
    7758:	d011      	beq.n	777e <at_ble_notification_send+0x42>
    775a:	6883      	ldr	r3, [r0, #8]
    775c:	2b00      	cmp	r3, #0
    775e:	d00e      	beq.n	777e <at_ble_notification_send+0x42>
    7760:	8882      	ldrh	r2, [r0, #4]
    7762:	9200      	str	r2, [sp, #0]
    7764:	0021      	movs	r1, r4
    7766:	2012      	movs	r0, #18
    7768:	0032      	movs	r2, r6
    776a:	4c0d      	ldr	r4, [pc, #52]	; (77a0 <at_ble_notification_send+0x64>)
    776c:	47a0      	blx	r4
    776e:	2000      	movs	r0, #0
    7770:	682b      	ldr	r3, [r5, #0]
    7772:	3301      	adds	r3, #1
    7774:	602b      	str	r3, [r5, #0]
    7776:	2385      	movs	r3, #133	; 0x85
    7778:	009b      	lsls	r3, r3, #2
    777a:	449d      	add	sp, r3
    777c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    777e:	270e      	movs	r7, #14
    7780:	446f      	add	r7, sp
    7782:	4b08      	ldr	r3, [pc, #32]	; (77a4 <at_ble_notification_send+0x68>)
    7784:	aa04      	add	r2, sp, #16
    7786:	0039      	movs	r1, r7
    7788:	0020      	movs	r0, r4
    778a:	4798      	blx	r3
    778c:	883b      	ldrh	r3, [r7, #0]
    778e:	9300      	str	r3, [sp, #0]
    7790:	ab04      	add	r3, sp, #16
    7792:	e7e7      	b.n	7764 <at_ble_notification_send+0x28>
    7794:	20003bb4 	.word	0x20003bb4
    7798:	fffffdec 	.word	0xfffffdec
    779c:	00006c65 	.word	0x00006c65
    77a0:	000095cd 	.word	0x000095cd
    77a4:	00009ac1 	.word	0x00009ac1

000077a8 <interface_event_timeout_timer_callback>:
    77a8:	2201      	movs	r2, #1
    77aa:	b510      	push	{r4, lr}
    77ac:	4b04      	ldr	r3, [pc, #16]	; (77c0 <interface_event_timeout_timer_callback+0x18>)
    77ae:	701a      	strb	r2, [r3, #0]
    77b0:	4b04      	ldr	r3, [pc, #16]	; (77c4 <interface_event_timeout_timer_callback+0x1c>)
    77b2:	4a05      	ldr	r2, [pc, #20]	; (77c8 <interface_event_timeout_timer_callback+0x20>)
    77b4:	681b      	ldr	r3, [r3, #0]
    77b6:	6810      	ldr	r0, [r2, #0]
    77b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    77ba:	4798      	blx	r3
    77bc:	bd10      	pop	{r4, pc}
    77be:	46c0      	nop			; (mov r8, r8)
    77c0:	20002408 	.word	0x20002408
    77c4:	20002424 	.word	0x20002424
    77c8:	2000240c 	.word	0x2000240c

000077cc <interface_bus_activity_timer_callback>:
    77cc:	b510      	push	{r4, lr}
    77ce:	4b0b      	ldr	r3, [pc, #44]	; (77fc <interface_bus_activity_timer_callback+0x30>)
    77d0:	781b      	ldrb	r3, [r3, #0]
    77d2:	2b00      	cmp	r3, #0
    77d4:	d110      	bne.n	77f8 <interface_bus_activity_timer_callback+0x2c>
    77d6:	4b0a      	ldr	r3, [pc, #40]	; (7800 <interface_bus_activity_timer_callback+0x34>)
    77d8:	781c      	ldrb	r4, [r3, #0]
    77da:	b2e4      	uxtb	r4, r4
    77dc:	2c00      	cmp	r4, #0
    77de:	d10b      	bne.n	77f8 <interface_bus_activity_timer_callback+0x2c>
    77e0:	4b08      	ldr	r3, [pc, #32]	; (7804 <interface_bus_activity_timer_callback+0x38>)
    77e2:	781b      	ldrb	r3, [r3, #0]
    77e4:	2b00      	cmp	r3, #0
    77e6:	d007      	beq.n	77f8 <interface_bus_activity_timer_callback+0x2c>
    77e8:	4b07      	ldr	r3, [pc, #28]	; (7808 <interface_bus_activity_timer_callback+0x3c>)
    77ea:	0021      	movs	r1, r4
    77ec:	681b      	ldr	r3, [r3, #0]
    77ee:	2001      	movs	r0, #1
    77f0:	695b      	ldr	r3, [r3, #20]
    77f2:	4798      	blx	r3
    77f4:	4b05      	ldr	r3, [pc, #20]	; (780c <interface_bus_activity_timer_callback+0x40>)
    77f6:	701c      	strb	r4, [r3, #0]
    77f8:	bd10      	pop	{r4, pc}
    77fa:	46c0      	nop			; (mov r8, r8)
    77fc:	200023ed 	.word	0x200023ed
    7800:	20002420 	.word	0x20002420
    7804:	200000cc 	.word	0x200000cc
    7808:	20002424 	.word	0x20002424
    780c:	20002414 	.word	0x20002414

00007810 <interface_check_and_assert_ext_wakeup>:
    7810:	b570      	push	{r4, r5, r6, lr}
    7812:	4d0d      	ldr	r5, [pc, #52]	; (7848 <interface_check_and_assert_ext_wakeup+0x38>)
    7814:	0006      	movs	r6, r0
    7816:	782b      	ldrb	r3, [r5, #0]
    7818:	4c0c      	ldr	r4, [pc, #48]	; (784c <interface_check_and_assert_ext_wakeup+0x3c>)
    781a:	2b00      	cmp	r3, #0
    781c:	d10f      	bne.n	783e <interface_check_and_assert_ext_wakeup+0x2e>
    781e:	2101      	movs	r1, #1
    7820:	6823      	ldr	r3, [r4, #0]
    7822:	0008      	movs	r0, r1
    7824:	695b      	ldr	r3, [r3, #20]
    7826:	4798      	blx	r3
    7828:	2301      	movs	r3, #1
    782a:	702b      	strb	r3, [r5, #0]
    782c:	429e      	cmp	r6, r3
    782e:	d105      	bne.n	783c <interface_check_and_assert_ext_wakeup+0x2c>
    7830:	4b07      	ldr	r3, [pc, #28]	; (7850 <interface_check_and_assert_ext_wakeup+0x40>)
    7832:	6818      	ldr	r0, [r3, #0]
    7834:	6823      	ldr	r3, [r4, #0]
    7836:	3005      	adds	r0, #5
    7838:	691b      	ldr	r3, [r3, #16]
    783a:	4798      	blx	r3
    783c:	bd70      	pop	{r4, r5, r6, pc}
    783e:	6823      	ldr	r3, [r4, #0]
    7840:	4a04      	ldr	r2, [pc, #16]	; (7854 <interface_check_and_assert_ext_wakeup+0x44>)
    7842:	68db      	ldr	r3, [r3, #12]
    7844:	6810      	ldr	r0, [r2, #0]
    7846:	e7f8      	b.n	783a <interface_check_and_assert_ext_wakeup+0x2a>
    7848:	20002414 	.word	0x20002414
    784c:	20002424 	.word	0x20002424
    7850:	200037ac 	.word	0x200037ac
    7854:	200023f0 	.word	0x200023f0

00007858 <interface_send_sync>:
    7858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    785a:	0006      	movs	r6, r0
    785c:	2001      	movs	r0, #1
    785e:	4d0e      	ldr	r5, [pc, #56]	; (7898 <interface_send_sync+0x40>)
    7860:	4b0e      	ldr	r3, [pc, #56]	; (789c <interface_send_sync+0x44>)
    7862:	000f      	movs	r7, r1
    7864:	7028      	strb	r0, [r5, #0]
    7866:	4798      	blx	r3
    7868:	4b0d      	ldr	r3, [pc, #52]	; (78a0 <interface_send_sync+0x48>)
    786a:	4c0e      	ldr	r4, [pc, #56]	; (78a4 <interface_send_sync+0x4c>)
    786c:	781b      	ldrb	r3, [r3, #0]
    786e:	2b02      	cmp	r3, #2
    7870:	d104      	bne.n	787c <interface_send_sync+0x24>
    7872:	6823      	ldr	r3, [r4, #0]
    7874:	2103      	movs	r1, #3
    7876:	699b      	ldr	r3, [r3, #24]
    7878:	480b      	ldr	r0, [pc, #44]	; (78a8 <interface_send_sync+0x50>)
    787a:	4798      	blx	r3
    787c:	6823      	ldr	r3, [r4, #0]
    787e:	0039      	movs	r1, r7
    7880:	0030      	movs	r0, r6
    7882:	699b      	ldr	r3, [r3, #24]
    7884:	4798      	blx	r3
    7886:	6823      	ldr	r3, [r4, #0]
    7888:	4a08      	ldr	r2, [pc, #32]	; (78ac <interface_send_sync+0x54>)
    788a:	689b      	ldr	r3, [r3, #8]
    788c:	6810      	ldr	r0, [r2, #0]
    788e:	2103      	movs	r1, #3
    7890:	4798      	blx	r3
    7892:	2000      	movs	r0, #0
    7894:	7028      	strb	r0, [r5, #0]
    7896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7898:	20002420 	.word	0x20002420
    789c:	00007811 	.word	0x00007811
    78a0:	200023f4 	.word	0x200023f4
    78a4:	20002424 	.word	0x20002424
    78a8:	0000c4d4 	.word	0x0000c4d4
    78ac:	200023f0 	.word	0x200023f0

000078b0 <interface_recv_async_start>:
    78b0:	b510      	push	{r4, lr}
    78b2:	4b03      	ldr	r3, [pc, #12]	; (78c0 <interface_recv_async_start+0x10>)
    78b4:	4803      	ldr	r0, [pc, #12]	; (78c4 <interface_recv_async_start+0x14>)
    78b6:	681b      	ldr	r3, [r3, #0]
    78b8:	69db      	ldr	r3, [r3, #28]
    78ba:	4798      	blx	r3
    78bc:	bd10      	pop	{r4, pc}
    78be:	46c0      	nop			; (mov r8, r8)
    78c0:	20002424 	.word	0x20002424
    78c4:	00007af5 	.word	0x00007af5

000078c8 <interface_handle_received_data>:
    78c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    78ca:	2700      	movs	r7, #0
    78cc:	b087      	sub	sp, #28
    78ce:	4c78      	ldr	r4, [pc, #480]	; (7ab0 <interface_handle_received_data+0x1e8>)
    78d0:	4b78      	ldr	r3, [pc, #480]	; (7ab4 <interface_handle_received_data+0x1ec>)
    78d2:	0020      	movs	r0, r4
    78d4:	4798      	blx	r3
    78d6:	9001      	str	r0, [sp, #4]
    78d8:	2800      	cmp	r0, #0
    78da:	d010      	beq.n	78fe <interface_handle_received_data+0x36>
    78dc:	4b76      	ldr	r3, [pc, #472]	; (7ab8 <interface_handle_received_data+0x1f0>)
    78de:	781a      	ldrb	r2, [r3, #0]
    78e0:	2a01      	cmp	r2, #1
    78e2:	d103      	bne.n	78ec <interface_handle_received_data+0x24>
    78e4:	2200      	movs	r2, #0
    78e6:	701a      	strb	r2, [r3, #0]
    78e8:	4b74      	ldr	r3, [pc, #464]	; (7abc <interface_handle_received_data+0x1f4>)
    78ea:	4798      	blx	r3
    78ec:	4b74      	ldr	r3, [pc, #464]	; (7ac0 <interface_handle_received_data+0x1f8>)
    78ee:	4a75      	ldr	r2, [pc, #468]	; (7ac4 <interface_handle_received_data+0x1fc>)
    78f0:	681b      	ldr	r3, [r3, #0]
    78f2:	6810      	ldr	r0, [r2, #0]
    78f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    78f6:	4798      	blx	r3
    78f8:	0038      	movs	r0, r7
    78fa:	b007      	add	sp, #28
    78fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    78fe:	4d72      	ldr	r5, [pc, #456]	; (7ac8 <interface_handle_received_data+0x200>)
    7900:	682b      	ldr	r3, [r5, #0]
    7902:	2b01      	cmp	r3, #1
    7904:	d03a      	beq.n	797c <interface_handle_received_data+0xb4>
    7906:	2b00      	cmp	r3, #0
    7908:	d027      	beq.n	795a <interface_handle_received_data+0x92>
    790a:	2b02      	cmp	r3, #2
    790c:	d1df      	bne.n	78ce <interface_handle_received_data+0x6>
    790e:	4e6f      	ldr	r6, [pc, #444]	; (7acc <interface_handle_received_data+0x204>)
    7910:	6833      	ldr	r3, [r6, #0]
    7912:	2b01      	cmp	r3, #1
    7914:	d100      	bne.n	7918 <interface_handle_received_data+0x50>
    7916:	e0b3      	b.n	7a80 <interface_handle_received_data+0x1b8>
    7918:	2b02      	cmp	r3, #2
    791a:	d1d8      	bne.n	78ce <interface_handle_received_data+0x6>
    791c:	4b6c      	ldr	r3, [pc, #432]	; (7ad0 <interface_handle_received_data+0x208>)
    791e:	0020      	movs	r0, r4
    7920:	785e      	ldrb	r6, [r3, #1]
    7922:	4b6c      	ldr	r3, [pc, #432]	; (7ad4 <interface_handle_received_data+0x20c>)
    7924:	4798      	blx	r3
    7926:	4b6c      	ldr	r3, [pc, #432]	; (7ad8 <interface_handle_received_data+0x210>)
    7928:	4c6c      	ldr	r4, [pc, #432]	; (7adc <interface_handle_received_data+0x214>)
    792a:	681a      	ldr	r2, [r3, #0]
    792c:	8821      	ldrh	r1, [r4, #0]
    792e:	5450      	strb	r0, [r2, r1]
    7930:	486b      	ldr	r0, [pc, #428]	; (7ae0 <interface_handle_received_data+0x218>)
    7932:	1c4b      	adds	r3, r1, #1
    7934:	8800      	ldrh	r0, [r0, #0]
    7936:	b29b      	uxth	r3, r3
    7938:	8023      	strh	r3, [r4, #0]
    793a:	1a1b      	subs	r3, r3, r0
    793c:	42b3      	cmp	r3, r6
    793e:	d1c6      	bne.n	78ce <interface_handle_received_data+0x6>
    7940:	9e01      	ldr	r6, [sp, #4]
    7942:	3104      	adds	r1, #4
    7944:	602e      	str	r6, [r5, #0]
    7946:	2503      	movs	r5, #3
    7948:	43a9      	bics	r1, r5
    794a:	8021      	strh	r1, [r4, #0]
    794c:	21bb      	movs	r1, #187	; 0xbb
    794e:	1812      	adds	r2, r2, r0
    7950:	b29b      	uxth	r3, r3
    7952:	0008      	movs	r0, r1
    7954:	4c63      	ldr	r4, [pc, #396]	; (7ae4 <interface_handle_received_data+0x21c>)
    7956:	47a0      	blx	r4
    7958:	e081      	b.n	7a5e <interface_handle_received_data+0x196>
    795a:	4b5e      	ldr	r3, [pc, #376]	; (7ad4 <interface_handle_received_data+0x20c>)
    795c:	0020      	movs	r0, r4
    795e:	4798      	blx	r3
    7960:	2301      	movs	r3, #1
    7962:	2805      	cmp	r0, #5
    7964:	d002      	beq.n	796c <interface_handle_received_data+0xa4>
    7966:	2804      	cmp	r0, #4
    7968:	d101      	bne.n	796e <interface_handle_received_data+0xa6>
    796a:	2302      	movs	r3, #2
    796c:	602b      	str	r3, [r5, #0]
    796e:	2201      	movs	r2, #1
    7970:	4b56      	ldr	r3, [pc, #344]	; (7acc <interface_handle_received_data+0x204>)
    7972:	601a      	str	r2, [r3, #0]
    7974:	2200      	movs	r2, #0
    7976:	4b5c      	ldr	r3, [pc, #368]	; (7ae8 <interface_handle_received_data+0x220>)
    7978:	801a      	strh	r2, [r3, #0]
    797a:	e7a8      	b.n	78ce <interface_handle_received_data+0x6>
    797c:	4e53      	ldr	r6, [pc, #332]	; (7acc <interface_handle_received_data+0x204>)
    797e:	6833      	ldr	r3, [r6, #0]
    7980:	2b01      	cmp	r3, #1
    7982:	d045      	beq.n	7a10 <interface_handle_received_data+0x148>
    7984:	2b02      	cmp	r3, #2
    7986:	d1a2      	bne.n	78ce <interface_handle_received_data+0x6>
    7988:	4b51      	ldr	r3, [pc, #324]	; (7ad0 <interface_handle_received_data+0x208>)
    798a:	0020      	movs	r0, r4
    798c:	781a      	ldrb	r2, [r3, #0]
    798e:	79de      	ldrb	r6, [r3, #7]
    7990:	9202      	str	r2, [sp, #8]
    7992:	785a      	ldrb	r2, [r3, #1]
    7994:	0236      	lsls	r6, r6, #8
    7996:	9203      	str	r2, [sp, #12]
    7998:	791a      	ldrb	r2, [r3, #4]
    799a:	9204      	str	r2, [sp, #16]
    799c:	795a      	ldrb	r2, [r3, #5]
    799e:	799b      	ldrb	r3, [r3, #6]
    79a0:	9205      	str	r2, [sp, #20]
    79a2:	431e      	orrs	r6, r3
    79a4:	4b4b      	ldr	r3, [pc, #300]	; (7ad4 <interface_handle_received_data+0x20c>)
    79a6:	4798      	blx	r3
    79a8:	4b4b      	ldr	r3, [pc, #300]	; (7ad8 <interface_handle_received_data+0x210>)
    79aa:	494c      	ldr	r1, [pc, #304]	; (7adc <interface_handle_received_data+0x214>)
    79ac:	681b      	ldr	r3, [r3, #0]
    79ae:	469c      	mov	ip, r3
    79b0:	4662      	mov	r2, ip
    79b2:	880b      	ldrh	r3, [r1, #0]
    79b4:	54d0      	strb	r0, [r2, r3]
    79b6:	4a4a      	ldr	r2, [pc, #296]	; (7ae0 <interface_handle_received_data+0x218>)
    79b8:	1c5c      	adds	r4, r3, #1
    79ba:	8810      	ldrh	r0, [r2, #0]
    79bc:	b2a4      	uxth	r4, r4
    79be:	800c      	strh	r4, [r1, #0]
    79c0:	1a24      	subs	r4, r4, r0
    79c2:	42b4      	cmp	r4, r6
    79c4:	d000      	beq.n	79c8 <interface_handle_received_data+0x100>
    79c6:	e782      	b.n	78ce <interface_handle_received_data+0x6>
    79c8:	9a03      	ldr	r2, [sp, #12]
    79ca:	3304      	adds	r3, #4
    79cc:	0216      	lsls	r6, r2, #8
    79ce:	9a02      	ldr	r2, [sp, #8]
    79d0:	4316      	orrs	r6, r2
    79d2:	9a05      	ldr	r2, [sp, #20]
    79d4:	0217      	lsls	r7, r2, #8
    79d6:	9a04      	ldr	r2, [sp, #16]
    79d8:	433a      	orrs	r2, r7
    79da:	9202      	str	r2, [sp, #8]
    79dc:	9a01      	ldr	r2, [sp, #4]
    79de:	2701      	movs	r7, #1
    79e0:	602a      	str	r2, [r5, #0]
    79e2:	2503      	movs	r5, #3
    79e4:	0002      	movs	r2, r0
    79e6:	43ab      	bics	r3, r5
    79e8:	800b      	strh	r3, [r1, #0]
    79ea:	4462      	add	r2, ip
    79ec:	9902      	ldr	r1, [sp, #8]
    79ee:	0030      	movs	r0, r6
    79f0:	4b3e      	ldr	r3, [pc, #248]	; (7aec <interface_handle_received_data+0x224>)
    79f2:	4798      	blx	r3
    79f4:	2800      	cmp	r0, #0
    79f6:	d000      	beq.n	79fa <interface_handle_received_data+0x132>
    79f8:	e769      	b.n	78ce <interface_handle_received_data+0x6>
    79fa:	4b39      	ldr	r3, [pc, #228]	; (7ae0 <interface_handle_received_data+0x218>)
    79fc:	4a36      	ldr	r2, [pc, #216]	; (7ad8 <interface_handle_received_data+0x210>)
    79fe:	881b      	ldrh	r3, [r3, #0]
    7a00:	6812      	ldr	r2, [r2, #0]
    7a02:	9902      	ldr	r1, [sp, #8]
    7a04:	18d2      	adds	r2, r2, r3
    7a06:	0030      	movs	r0, r6
    7a08:	0023      	movs	r3, r4
    7a0a:	4c36      	ldr	r4, [pc, #216]	; (7ae4 <interface_handle_received_data+0x21c>)
    7a0c:	47a0      	blx	r4
    7a0e:	e75e      	b.n	78ce <interface_handle_received_data+0x6>
    7a10:	4b30      	ldr	r3, [pc, #192]	; (7ad4 <interface_handle_received_data+0x20c>)
    7a12:	0020      	movs	r0, r4
    7a14:	4798      	blx	r3
    7a16:	4b34      	ldr	r3, [pc, #208]	; (7ae8 <interface_handle_received_data+0x220>)
    7a18:	8819      	ldrh	r1, [r3, #0]
    7a1a:	1c4a      	adds	r2, r1, #1
    7a1c:	b292      	uxth	r2, r2
    7a1e:	801a      	strh	r2, [r3, #0]
    7a20:	4b2b      	ldr	r3, [pc, #172]	; (7ad0 <interface_handle_received_data+0x208>)
    7a22:	5458      	strb	r0, [r3, r1]
    7a24:	2a08      	cmp	r2, #8
    7a26:	d000      	beq.n	7a2a <interface_handle_received_data+0x162>
    7a28:	e751      	b.n	78ce <interface_handle_received_data+0x6>
    7a2a:	79da      	ldrb	r2, [r3, #7]
    7a2c:	7999      	ldrb	r1, [r3, #6]
    7a2e:	0212      	lsls	r2, r2, #8
    7a30:	430a      	orrs	r2, r1
    7a32:	d116      	bne.n	7a62 <interface_handle_received_data+0x19a>
    7a34:	785c      	ldrb	r4, [r3, #1]
    7a36:	795e      	ldrb	r6, [r3, #5]
    7a38:	7819      	ldrb	r1, [r3, #0]
    7a3a:	791b      	ldrb	r3, [r3, #4]
    7a3c:	0224      	lsls	r4, r4, #8
    7a3e:	0236      	lsls	r6, r6, #8
    7a40:	430c      	orrs	r4, r1
    7a42:	431e      	orrs	r6, r3
    7a44:	0031      	movs	r1, r6
    7a46:	0020      	movs	r0, r4
    7a48:	4b28      	ldr	r3, [pc, #160]	; (7aec <interface_handle_received_data+0x224>)
    7a4a:	4798      	blx	r3
    7a4c:	1e02      	subs	r2, r0, #0
    7a4e:	d104      	bne.n	7a5a <interface_handle_received_data+0x192>
    7a50:	0003      	movs	r3, r0
    7a52:	0031      	movs	r1, r6
    7a54:	0020      	movs	r0, r4
    7a56:	4c23      	ldr	r4, [pc, #140]	; (7ae4 <interface_handle_received_data+0x21c>)
    7a58:	47a0      	blx	r4
    7a5a:	2300      	movs	r3, #0
    7a5c:	602b      	str	r3, [r5, #0]
    7a5e:	2701      	movs	r7, #1
    7a60:	e735      	b.n	78ce <interface_handle_received_data+0x6>
    7a62:	2302      	movs	r3, #2
    7a64:	4922      	ldr	r1, [pc, #136]	; (7af0 <interface_handle_received_data+0x228>)
    7a66:	6033      	str	r3, [r6, #0]
    7a68:	4b1c      	ldr	r3, [pc, #112]	; (7adc <interface_handle_received_data+0x214>)
    7a6a:	6809      	ldr	r1, [r1, #0]
    7a6c:	8818      	ldrh	r0, [r3, #0]
    7a6e:	1a09      	subs	r1, r1, r0
    7a70:	4291      	cmp	r1, r2
    7a72:	d202      	bcs.n	7a7a <interface_handle_received_data+0x1b2>
    7a74:	466a      	mov	r2, sp
    7a76:	8892      	ldrh	r2, [r2, #4]
    7a78:	801a      	strh	r2, [r3, #0]
    7a7a:	881a      	ldrh	r2, [r3, #0]
    7a7c:	4b18      	ldr	r3, [pc, #96]	; (7ae0 <interface_handle_received_data+0x218>)
    7a7e:	e77b      	b.n	7978 <interface_handle_received_data+0xb0>
    7a80:	4b14      	ldr	r3, [pc, #80]	; (7ad4 <interface_handle_received_data+0x20c>)
    7a82:	0020      	movs	r0, r4
    7a84:	4798      	blx	r3
    7a86:	4a18      	ldr	r2, [pc, #96]	; (7ae8 <interface_handle_received_data+0x220>)
    7a88:	8811      	ldrh	r1, [r2, #0]
    7a8a:	1c4b      	adds	r3, r1, #1
    7a8c:	b29b      	uxth	r3, r3
    7a8e:	8013      	strh	r3, [r2, #0]
    7a90:	4a0f      	ldr	r2, [pc, #60]	; (7ad0 <interface_handle_received_data+0x208>)
    7a92:	5450      	strb	r0, [r2, r1]
    7a94:	2b02      	cmp	r3, #2
    7a96:	d000      	beq.n	7a9a <interface_handle_received_data+0x1d2>
    7a98:	e719      	b.n	78ce <interface_handle_received_data+0x6>
    7a9a:	7851      	ldrb	r1, [r2, #1]
    7a9c:	6033      	str	r3, [r6, #0]
    7a9e:	4a14      	ldr	r2, [pc, #80]	; (7af0 <interface_handle_received_data+0x228>)
    7aa0:	4b0e      	ldr	r3, [pc, #56]	; (7adc <interface_handle_received_data+0x214>)
    7aa2:	6812      	ldr	r2, [r2, #0]
    7aa4:	8818      	ldrh	r0, [r3, #0]
    7aa6:	1a12      	subs	r2, r2, r0
    7aa8:	428a      	cmp	r2, r1
    7aaa:	d2e6      	bcs.n	7a7a <interface_handle_received_data+0x1b2>
    7aac:	e7e2      	b.n	7a74 <interface_handle_received_data+0x1ac>
    7aae:	46c0      	nop			; (mov r8, r8)
    7ab0:	20002428 	.word	0x20002428
    7ab4:	00009ee5 	.word	0x00009ee5
    7ab8:	200023ed 	.word	0x200023ed
    7abc:	000078b1 	.word	0x000078b1
    7ac0:	20002424 	.word	0x20002424
    7ac4:	2000243c 	.word	0x2000243c
    7ac8:	20002440 	.word	0x20002440
    7acc:	20002444 	.word	0x20002444
    7ad0:	20002415 	.word	0x20002415
    7ad4:	00009ef3 	.word	0x00009ef3
    7ad8:	20002400 	.word	0x20002400
    7adc:	20002454 	.word	0x20002454
    7ae0:	200023fc 	.word	0x200023fc
    7ae4:	00005f15 	.word	0x00005f15
    7ae8:	2000241e 	.word	0x2000241e
    7aec:	00005fc1 	.word	0x00005fc1
    7af0:	20002404 	.word	0x20002404

00007af4 <interface_recv_async_callback>:
    7af4:	b570      	push	{r4, r5, r6, lr}
    7af6:	4b15      	ldr	r3, [pc, #84]	; (7b4c <interface_recv_async_callback+0x58>)
    7af8:	0006      	movs	r6, r0
    7afa:	2002      	movs	r0, #2
    7afc:	4798      	blx	r3
    7afe:	4c14      	ldr	r4, [pc, #80]	; (7b50 <interface_recv_async_callback+0x5c>)
    7b00:	4a14      	ldr	r2, [pc, #80]	; (7b54 <interface_recv_async_callback+0x60>)
    7b02:	6823      	ldr	r3, [r4, #0]
    7b04:	6810      	ldr	r0, [r2, #0]
    7b06:	689b      	ldr	r3, [r3, #8]
    7b08:	2103      	movs	r1, #3
    7b0a:	4798      	blx	r3
    7b0c:	4b12      	ldr	r3, [pc, #72]	; (7b58 <interface_recv_async_callback+0x64>)
    7b0e:	4d13      	ldr	r5, [pc, #76]	; (7b5c <interface_recv_async_callback+0x68>)
    7b10:	781a      	ldrb	r2, [r3, #0]
    7b12:	2a02      	cmp	r2, #2
    7b14:	d112      	bne.n	7b3c <interface_recv_async_callback+0x48>
    7b16:	0031      	movs	r1, r6
    7b18:	4811      	ldr	r0, [pc, #68]	; (7b60 <interface_recv_async_callback+0x6c>)
    7b1a:	4b12      	ldr	r3, [pc, #72]	; (7b64 <interface_recv_async_callback+0x70>)
    7b1c:	4798      	blx	r3
    7b1e:	2800      	cmp	r0, #0
    7b20:	d101      	bne.n	7b26 <interface_recv_async_callback+0x32>
    7b22:	2301      	movs	r3, #1
    7b24:	702b      	strb	r3, [r5, #0]
    7b26:	782b      	ldrb	r3, [r5, #0]
    7b28:	2b00      	cmp	r3, #0
    7b2a:	d101      	bne.n	7b30 <interface_recv_async_callback+0x3c>
    7b2c:	4b0e      	ldr	r3, [pc, #56]	; (7b68 <interface_recv_async_callback+0x74>)
    7b2e:	4798      	blx	r3
    7b30:	6823      	ldr	r3, [r4, #0]
    7b32:	4a0e      	ldr	r2, [pc, #56]	; (7b6c <interface_recv_async_callback+0x78>)
    7b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7b36:	6810      	ldr	r0, [r2, #0]
    7b38:	4798      	blx	r3
    7b3a:	bd70      	pop	{r4, r5, r6, pc}
    7b3c:	2a00      	cmp	r2, #0
    7b3e:	d1f2      	bne.n	7b26 <interface_recv_async_callback+0x32>
    7b40:	2e5a      	cmp	r6, #90	; 0x5a
    7b42:	d1f0      	bne.n	7b26 <interface_recv_async_callback+0x32>
    7b44:	3201      	adds	r2, #1
    7b46:	701a      	strb	r2, [r3, #0]
    7b48:	e7ed      	b.n	7b26 <interface_recv_async_callback+0x32>
    7b4a:	46c0      	nop			; (mov r8, r8)
    7b4c:	00007811 	.word	0x00007811
    7b50:	20002424 	.word	0x20002424
    7b54:	200023f0 	.word	0x200023f0
    7b58:	20003bb8 	.word	0x20003bb8
    7b5c:	200023ed 	.word	0x200023ed
    7b60:	20002428 	.word	0x20002428
    7b64:	00009f07 	.word	0x00009f07
    7b68:	000078b1 	.word	0x000078b1
    7b6c:	2000243c 	.word	0x2000243c

00007b70 <interface_init>:
    7b70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7b72:	1e04      	subs	r4, r0, #0
    7b74:	d103      	bne.n	7b7e <interface_init+0xe>
    7b76:	2440      	movs	r4, #64	; 0x40
    7b78:	0020      	movs	r0, r4
    7b7a:	b004      	add	sp, #16
    7b7c:	bd70      	pop	{r4, r5, r6, pc}
    7b7e:	6883      	ldr	r3, [r0, #8]
    7b80:	2b00      	cmp	r3, #0
    7b82:	d0f8      	beq.n	7b76 <interface_init+0x6>
    7b84:	6903      	ldr	r3, [r0, #16]
    7b86:	2b00      	cmp	r3, #0
    7b88:	d0f5      	beq.n	7b76 <interface_init+0x6>
    7b8a:	6803      	ldr	r3, [r0, #0]
    7b8c:	2b00      	cmp	r3, #0
    7b8e:	d102      	bne.n	7b96 <interface_init+0x26>
    7b90:	6843      	ldr	r3, [r0, #4]
    7b92:	2b00      	cmp	r3, #0
    7b94:	d1ef      	bne.n	7b76 <interface_init+0x6>
    7b96:	69e2      	ldr	r2, [r4, #28]
    7b98:	69a1      	ldr	r1, [r4, #24]
    7b9a:	4858      	ldr	r0, [pc, #352]	; (7cfc <interface_init+0x18c>)
    7b9c:	4b58      	ldr	r3, [pc, #352]	; (7d00 <interface_init+0x190>)
    7b9e:	4798      	blx	r3
    7ba0:	2800      	cmp	r0, #0
    7ba2:	d0e8      	beq.n	7b76 <interface_init+0x6>
    7ba4:	4b57      	ldr	r3, [pc, #348]	; (7d04 <interface_init+0x194>)
    7ba6:	6861      	ldr	r1, [r4, #4]
    7ba8:	6820      	ldr	r0, [r4, #0]
    7baa:	4798      	blx	r3
    7bac:	0023      	movs	r3, r4
    7bae:	335c      	adds	r3, #92	; 0x5c
    7bb0:	781a      	ldrb	r2, [r3, #0]
    7bb2:	4b55      	ldr	r3, [pc, #340]	; (7d08 <interface_init+0x198>)
    7bb4:	4e55      	ldr	r6, [pc, #340]	; (7d0c <interface_init+0x19c>)
    7bb6:	701a      	strb	r2, [r3, #0]
    7bb8:	0023      	movs	r3, r4
    7bba:	3320      	adds	r3, #32
    7bbc:	6033      	str	r3, [r6, #0]
    7bbe:	6a23      	ldr	r3, [r4, #32]
    7bc0:	2b00      	cmp	r3, #0
    7bc2:	d0d8      	beq.n	7b76 <interface_init+0x6>
    7bc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7bc6:	2b00      	cmp	r3, #0
    7bc8:	d0d5      	beq.n	7b76 <interface_init+0x6>
    7bca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7bcc:	2b00      	cmp	r3, #0
    7bce:	d0d2      	beq.n	7b76 <interface_init+0x6>
    7bd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7bd2:	2b00      	cmp	r3, #0
    7bd4:	d0cf      	beq.n	7b76 <interface_init+0x6>
    7bd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7bd8:	2b00      	cmp	r3, #0
    7bda:	d0cc      	beq.n	7b76 <interface_init+0x6>
    7bdc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    7bde:	2900      	cmp	r1, #0
    7be0:	d0c9      	beq.n	7b76 <interface_init+0x6>
    7be2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    7be4:	2900      	cmp	r1, #0
    7be6:	d0c6      	beq.n	7b76 <interface_init+0x6>
    7be8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7bea:	2900      	cmp	r1, #0
    7bec:	d0c3      	beq.n	7b76 <interface_init+0x6>
    7bee:	6d21      	ldr	r1, [r4, #80]	; 0x50
    7bf0:	2900      	cmp	r1, #0
    7bf2:	d0c0      	beq.n	7b76 <interface_init+0x6>
    7bf4:	6d61      	ldr	r1, [r4, #84]	; 0x54
    7bf6:	2900      	cmp	r1, #0
    7bf8:	d0bd      	beq.n	7b76 <interface_init+0x6>
    7bfa:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7bfc:	2900      	cmp	r1, #0
    7bfe:	d101      	bne.n	7c04 <interface_init+0x94>
    7c00:	2a01      	cmp	r2, #1
    7c02:	d0b8      	beq.n	7b76 <interface_init+0x6>
    7c04:	2500      	movs	r5, #0
    7c06:	2101      	movs	r1, #1
    7c08:	4a41      	ldr	r2, [pc, #260]	; (7d10 <interface_init+0x1a0>)
    7c0a:	0008      	movs	r0, r1
    7c0c:	6015      	str	r5, [r2, #0]
    7c0e:	4798      	blx	r3
    7c10:	6833      	ldr	r3, [r6, #0]
    7c12:	0029      	movs	r1, r5
    7c14:	695b      	ldr	r3, [r3, #20]
    7c16:	0028      	movs	r0, r5
    7c18:	4798      	blx	r3
    7c1a:	6833      	ldr	r3, [r6, #0]
    7c1c:	2032      	movs	r0, #50	; 0x32
    7c1e:	691b      	ldr	r3, [r3, #16]
    7c20:	4798      	blx	r3
    7c22:	6833      	ldr	r3, [r6, #0]
    7c24:	2101      	movs	r1, #1
    7c26:	695b      	ldr	r3, [r3, #20]
    7c28:	0028      	movs	r0, r5
    7c2a:	4798      	blx	r3
    7c2c:	20c8      	movs	r0, #200	; 0xc8
    7c2e:	6833      	ldr	r3, [r6, #0]
    7c30:	00c0      	lsls	r0, r0, #3
    7c32:	691b      	ldr	r3, [r3, #16]
    7c34:	4798      	blx	r3
    7c36:	220a      	movs	r2, #10
    7c38:	4b36      	ldr	r3, [pc, #216]	; (7d14 <interface_init+0x1a4>)
    7c3a:	701d      	strb	r5, [r3, #0]
    7c3c:	4b36      	ldr	r3, [pc, #216]	; (7d18 <interface_init+0x1a8>)
    7c3e:	701d      	strb	r5, [r3, #0]
    7c40:	4b36      	ldr	r3, [pc, #216]	; (7d1c <interface_init+0x1ac>)
    7c42:	801d      	strh	r5, [r3, #0]
    7c44:	4b36      	ldr	r3, [pc, #216]	; (7d20 <interface_init+0x1b0>)
    7c46:	801d      	strh	r5, [r3, #0]
    7c48:	4b36      	ldr	r3, [pc, #216]	; (7d24 <interface_init+0x1b4>)
    7c4a:	701d      	strb	r5, [r3, #0]
    7c4c:	4b36      	ldr	r3, [pc, #216]	; (7d28 <interface_init+0x1b8>)
    7c4e:	601d      	str	r5, [r3, #0]
    7c50:	4b36      	ldr	r3, [pc, #216]	; (7d2c <interface_init+0x1bc>)
    7c52:	601d      	str	r5, [r3, #0]
    7c54:	4b36      	ldr	r3, [pc, #216]	; (7d30 <interface_init+0x1c0>)
    7c56:	601d      	str	r5, [r3, #0]
    7c58:	4b36      	ldr	r3, [pc, #216]	; (7d34 <interface_init+0x1c4>)
    7c5a:	701a      	strb	r2, [r3, #0]
    7c5c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    7c5e:	42ab      	cmp	r3, r5
    7c60:	d102      	bne.n	7c68 <interface_init+0xf8>
    7c62:	23e1      	movs	r3, #225	; 0xe1
    7c64:	025b      	lsls	r3, r3, #9
    7c66:	6623      	str	r3, [r4, #96]	; 0x60
    7c68:	4b33      	ldr	r3, [pc, #204]	; (7d38 <interface_init+0x1c8>)
    7c6a:	4798      	blx	r3
    7c6c:	6833      	ldr	r3, [r6, #0]
    7c6e:	4833      	ldr	r0, [pc, #204]	; (7d3c <interface_init+0x1cc>)
    7c70:	681b      	ldr	r3, [r3, #0]
    7c72:	4798      	blx	r3
    7c74:	4b32      	ldr	r3, [pc, #200]	; (7d40 <interface_init+0x1d0>)
    7c76:	6018      	str	r0, [r3, #0]
    7c78:	2800      	cmp	r0, #0
    7c7a:	d101      	bne.n	7c80 <interface_init+0x110>
    7c7c:	24e2      	movs	r4, #226	; 0xe2
    7c7e:	e77b      	b.n	7b78 <interface_init+0x8>
    7c80:	6833      	ldr	r3, [r6, #0]
    7c82:	4830      	ldr	r0, [pc, #192]	; (7d44 <interface_init+0x1d4>)
    7c84:	681b      	ldr	r3, [r3, #0]
    7c86:	4798      	blx	r3
    7c88:	4b2f      	ldr	r3, [pc, #188]	; (7d48 <interface_init+0x1d8>)
    7c8a:	6018      	str	r0, [r3, #0]
    7c8c:	2800      	cmp	r0, #0
    7c8e:	d0f5      	beq.n	7c7c <interface_init+0x10c>
    7c90:	6833      	ldr	r3, [r6, #0]
    7c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c94:	4798      	blx	r3
    7c96:	4b2d      	ldr	r3, [pc, #180]	; (7d4c <interface_init+0x1dc>)
    7c98:	6018      	str	r0, [r3, #0]
    7c9a:	6833      	ldr	r3, [r6, #0]
    7c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c9e:	4798      	blx	r3
    7ca0:	4b2b      	ldr	r3, [pc, #172]	; (7d50 <interface_init+0x1e0>)
    7ca2:	6018      	str	r0, [r3, #0]
    7ca4:	6833      	ldr	r3, [r6, #0]
    7ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7ca8:	4798      	blx	r3
    7caa:	4b2a      	ldr	r3, [pc, #168]	; (7d54 <interface_init+0x1e4>)
    7cac:	4a2a      	ldr	r2, [pc, #168]	; (7d58 <interface_init+0x1e8>)
    7cae:	6018      	str	r0, [r3, #0]
    7cb0:	2300      	movs	r3, #0
    7cb2:	6013      	str	r3, [r2, #0]
    7cb4:	4a29      	ldr	r2, [pc, #164]	; (7d5c <interface_init+0x1ec>)
    7cb6:	68a1      	ldr	r1, [r4, #8]
    7cb8:	7013      	strb	r3, [r2, #0]
    7cba:	6922      	ldr	r2, [r4, #16]
    7cbc:	4b28      	ldr	r3, [pc, #160]	; (7d60 <interface_init+0x1f0>)
    7cbe:	68e0      	ldr	r0, [r4, #12]
    7cc0:	601a      	str	r2, [r3, #0]
    7cc2:	6962      	ldr	r2, [r4, #20]
    7cc4:	4b27      	ldr	r3, [pc, #156]	; (7d64 <interface_init+0x1f4>)
    7cc6:	601a      	str	r2, [r3, #0]
    7cc8:	4b27      	ldr	r3, [pc, #156]	; (7d68 <interface_init+0x1f8>)
    7cca:	4798      	blx	r3
    7ccc:	0020      	movs	r0, r4
    7cce:	4b27      	ldr	r3, [pc, #156]	; (7d6c <interface_init+0x1fc>)
    7cd0:	4798      	blx	r3
    7cd2:	1e04      	subs	r4, r0, #0
    7cd4:	d000      	beq.n	7cd8 <interface_init+0x168>
    7cd6:	e74f      	b.n	7b78 <interface_init+0x8>
    7cd8:	26fa      	movs	r6, #250	; 0xfa
    7cda:	0136      	lsls	r6, r6, #4
    7cdc:	466b      	mov	r3, sp
    7cde:	1ddd      	adds	r5, r3, #7
    7ce0:	0032      	movs	r2, r6
    7ce2:	a902      	add	r1, sp, #8
    7ce4:	0028      	movs	r0, r5
    7ce6:	4b22      	ldr	r3, [pc, #136]	; (7d70 <interface_init+0x200>)
    7ce8:	4798      	blx	r3
    7cea:	2800      	cmp	r0, #0
    7cec:	d000      	beq.n	7cf0 <interface_init+0x180>
    7cee:	e743      	b.n	7b78 <interface_init+0x8>
    7cf0:	782b      	ldrb	r3, [r5, #0]
    7cf2:	2b3a      	cmp	r3, #58	; 0x3a
    7cf4:	d1f2      	bne.n	7cdc <interface_init+0x16c>
    7cf6:	0004      	movs	r4, r0
    7cf8:	e73e      	b.n	7b78 <interface_init+0x8>
    7cfa:	46c0      	nop			; (mov r8, r8)
    7cfc:	20002428 	.word	0x20002428
    7d00:	00009ec5 	.word	0x00009ec5
    7d04:	0000749d 	.word	0x0000749d
    7d08:	200023f4 	.word	0x200023f4
    7d0c:	20002424 	.word	0x20002424
    7d10:	200037ac 	.word	0x200037ac
    7d14:	20002414 	.word	0x20002414
    7d18:	20002420 	.word	0x20002420
    7d1c:	200023fc 	.word	0x200023fc
    7d20:	20002454 	.word	0x20002454
    7d24:	200023ed 	.word	0x200023ed
    7d28:	20002440 	.word	0x20002440
    7d2c:	20002444 	.word	0x20002444
    7d30:	200023f8 	.word	0x200023f8
    7d34:	20003bb0 	.word	0x20003bb0
    7d38:	000078b1 	.word	0x000078b1
    7d3c:	000077a9 	.word	0x000077a9
    7d40:	20002410 	.word	0x20002410
    7d44:	000077cd 	.word	0x000077cd
    7d48:	200023f0 	.word	0x200023f0
    7d4c:	2000243c 	.word	0x2000243c
    7d50:	2000240c 	.word	0x2000240c
    7d54:	20002450 	.word	0x20002450
    7d58:	20002448 	.word	0x20002448
    7d5c:	2000244c 	.word	0x2000244c
    7d60:	20002400 	.word	0x20002400
    7d64:	20002404 	.word	0x20002404
    7d68:	00005f71 	.word	0x00005f71
    7d6c:	00009cf5 	.word	0x00009cf5
    7d70:	00006069 	.word	0x00006069

00007d74 <interface_event_timeout_start_timer>:
    7d74:	2200      	movs	r2, #0
    7d76:	b570      	push	{r4, r5, r6, lr}
    7d78:	0004      	movs	r4, r0
    7d7a:	4b08      	ldr	r3, [pc, #32]	; (7d9c <interface_event_timeout_start_timer+0x28>)
    7d7c:	4d08      	ldr	r5, [pc, #32]	; (7da0 <interface_event_timeout_start_timer+0x2c>)
    7d7e:	701a      	strb	r2, [r3, #0]
    7d80:	682b      	ldr	r3, [r5, #0]
    7d82:	4a08      	ldr	r2, [pc, #32]	; (7da4 <interface_event_timeout_start_timer+0x30>)
    7d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7d86:	6810      	ldr	r0, [r2, #0]
    7d88:	4798      	blx	r3
    7d8a:	1c63      	adds	r3, r4, #1
    7d8c:	d005      	beq.n	7d9a <interface_event_timeout_start_timer+0x26>
    7d8e:	682b      	ldr	r3, [r5, #0]
    7d90:	4a05      	ldr	r2, [pc, #20]	; (7da8 <interface_event_timeout_start_timer+0x34>)
    7d92:	689b      	ldr	r3, [r3, #8]
    7d94:	0021      	movs	r1, r4
    7d96:	6810      	ldr	r0, [r2, #0]
    7d98:	4798      	blx	r3
    7d9a:	bd70      	pop	{r4, r5, r6, pc}
    7d9c:	20002408 	.word	0x20002408
    7da0:	20002424 	.word	0x20002424
    7da4:	2000240c 	.word	0x2000240c
    7da8:	20002410 	.word	0x20002410

00007dac <interface_event_timeout_stop_timer>:
    7dac:	b510      	push	{r4, lr}
    7dae:	4b03      	ldr	r3, [pc, #12]	; (7dbc <interface_event_timeout_stop_timer+0x10>)
    7db0:	4a03      	ldr	r2, [pc, #12]	; (7dc0 <interface_event_timeout_stop_timer+0x14>)
    7db2:	681b      	ldr	r3, [r3, #0]
    7db4:	6810      	ldr	r0, [r2, #0]
    7db6:	68db      	ldr	r3, [r3, #12]
    7db8:	4798      	blx	r3
    7dba:	bd10      	pop	{r4, pc}
    7dbc:	20002424 	.word	0x20002424
    7dc0:	20002410 	.word	0x20002410

00007dc4 <interface_cmd_cmpl_signal>:
    7dc4:	2201      	movs	r2, #1
    7dc6:	4b01      	ldr	r3, [pc, #4]	; (7dcc <interface_cmd_cmpl_signal+0x8>)
    7dc8:	701a      	strb	r2, [r3, #0]
    7dca:	4770      	bx	lr
    7dcc:	200023f5 	.word	0x200023f5

00007dd0 <interface_event_wait>:
    7dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7dd2:	4b1c      	ldr	r3, [pc, #112]	; (7e44 <interface_event_wait+0x74>)
    7dd4:	b087      	sub	sp, #28
    7dd6:	681b      	ldr	r3, [r3, #0]
    7dd8:	4e1b      	ldr	r6, [pc, #108]	; (7e48 <interface_event_wait+0x78>)
    7dda:	9303      	str	r3, [sp, #12]
    7ddc:	4b1b      	ldr	r3, [pc, #108]	; (7e4c <interface_event_wait+0x7c>)
    7dde:	681b      	ldr	r3, [r3, #0]
    7de0:	9301      	str	r3, [sp, #4]
    7de2:	9304      	str	r3, [sp, #16]
    7de4:	6833      	ldr	r3, [r6, #0]
    7de6:	9305      	str	r3, [sp, #20]
    7de8:	4b19      	ldr	r3, [pc, #100]	; (7e50 <interface_event_wait+0x80>)
    7dea:	4798      	blx	r3
    7dec:	4d19      	ldr	r5, [pc, #100]	; (7e54 <interface_event_wait+0x84>)
    7dee:	2801      	cmp	r0, #1
    7df0:	d006      	beq.n	7e00 <interface_event_wait+0x30>
    7df2:	4b19      	ldr	r3, [pc, #100]	; (7e58 <interface_event_wait+0x88>)
    7df4:	781b      	ldrb	r3, [r3, #0]
    7df6:	2b01      	cmp	r3, #1
    7df8:	d002      	beq.n	7e00 <interface_event_wait+0x30>
    7dfa:	782b      	ldrb	r3, [r5, #0]
    7dfc:	2b01      	cmp	r3, #1
    7dfe:	d114      	bne.n	7e2a <interface_event_wait+0x5a>
    7e00:	782b      	ldrb	r3, [r5, #0]
    7e02:	2b01      	cmp	r3, #1
    7e04:	d118      	bne.n	7e38 <interface_event_wait+0x68>
    7e06:	4f15      	ldr	r7, [pc, #84]	; (7e5c <interface_event_wait+0x8c>)
    7e08:	4915      	ldr	r1, [pc, #84]	; (7e60 <interface_event_wait+0x90>)
    7e0a:	2300      	movs	r3, #0
    7e0c:	0008      	movs	r0, r1
    7e0e:	4c15      	ldr	r4, [pc, #84]	; (7e64 <interface_event_wait+0x94>)
    7e10:	683a      	ldr	r2, [r7, #0]
    7e12:	47a0      	blx	r4
    7e14:	2400      	movs	r4, #0
    7e16:	4b14      	ldr	r3, [pc, #80]	; (7e68 <interface_event_wait+0x98>)
    7e18:	6830      	ldr	r0, [r6, #0]
    7e1a:	681b      	ldr	r3, [r3, #0]
    7e1c:	603c      	str	r4, [r7, #0]
    7e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7e20:	702c      	strb	r4, [r5, #0]
    7e22:	4798      	blx	r3
    7e24:	0020      	movs	r0, r4
    7e26:	b007      	add	sp, #28
    7e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e2a:	4b0f      	ldr	r3, [pc, #60]	; (7e68 <interface_event_wait+0x98>)
    7e2c:	a903      	add	r1, sp, #12
    7e2e:	681b      	ldr	r3, [r3, #0]
    7e30:	2003      	movs	r0, #3
    7e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7e34:	4798      	blx	r3
    7e36:	e7d7      	b.n	7de8 <interface_event_wait+0x18>
    7e38:	2400      	movs	r4, #0
    7e3a:	2801      	cmp	r0, #1
    7e3c:	d0f2      	beq.n	7e24 <interface_event_wait+0x54>
    7e3e:	34d0      	adds	r4, #208	; 0xd0
    7e40:	e7f0      	b.n	7e24 <interface_event_wait+0x54>
    7e42:	46c0      	nop			; (mov r8, r8)
    7e44:	2000243c 	.word	0x2000243c
    7e48:	20002450 	.word	0x20002450
    7e4c:	2000240c 	.word	0x2000240c
    7e50:	000078c9 	.word	0x000078c9
    7e54:	2000244c 	.word	0x2000244c
    7e58:	20002408 	.word	0x20002408
    7e5c:	20002448 	.word	0x20002448
    7e60:	0000ffff 	.word	0x0000ffff
    7e64:	00005f15 	.word	0x00005f15
    7e68:	20002424 	.word	0x20002424

00007e6c <interface_cmd_cmpl_wait>:
    7e6c:	20fa      	movs	r0, #250	; 0xfa
    7e6e:	b570      	push	{r4, r5, r6, lr}
    7e70:	2400      	movs	r4, #0
    7e72:	4d11      	ldr	r5, [pc, #68]	; (7eb8 <interface_cmd_cmpl_wait+0x4c>)
    7e74:	0100      	lsls	r0, r0, #4
    7e76:	4b11      	ldr	r3, [pc, #68]	; (7ebc <interface_cmd_cmpl_wait+0x50>)
    7e78:	702c      	strb	r4, [r5, #0]
    7e7a:	4798      	blx	r3
    7e7c:	782b      	ldrb	r3, [r5, #0]
    7e7e:	2b01      	cmp	r3, #1
    7e80:	d004      	beq.n	7e8c <interface_cmd_cmpl_wait+0x20>
    7e82:	4b0f      	ldr	r3, [pc, #60]	; (7ec0 <interface_cmd_cmpl_wait+0x54>)
    7e84:	4798      	blx	r3
    7e86:	0004      	movs	r4, r0
    7e88:	28d0      	cmp	r0, #208	; 0xd0
    7e8a:	d1f7      	bne.n	7e7c <interface_cmd_cmpl_wait+0x10>
    7e8c:	4b0d      	ldr	r3, [pc, #52]	; (7ec4 <interface_cmd_cmpl_wait+0x58>)
    7e8e:	4798      	blx	r3
    7e90:	4a0d      	ldr	r2, [pc, #52]	; (7ec8 <interface_cmd_cmpl_wait+0x5c>)
    7e92:	2cd0      	cmp	r4, #208	; 0xd0
    7e94:	d10d      	bne.n	7eb2 <interface_cmd_cmpl_wait+0x46>
    7e96:	6813      	ldr	r3, [r2, #0]
    7e98:	3301      	adds	r3, #1
    7e9a:	6013      	str	r3, [r2, #0]
    7e9c:	2b04      	cmp	r3, #4
    7e9e:	dd06      	ble.n	7eae <interface_cmd_cmpl_wait+0x42>
    7ea0:	2300      	movs	r3, #0
    7ea2:	4c0a      	ldr	r4, [pc, #40]	; (7ecc <interface_cmd_cmpl_wait+0x60>)
    7ea4:	001a      	movs	r2, r3
    7ea6:	2110      	movs	r1, #16
    7ea8:	4809      	ldr	r0, [pc, #36]	; (7ed0 <interface_cmd_cmpl_wait+0x64>)
    7eaa:	47a0      	blx	r4
    7eac:	24e2      	movs	r4, #226	; 0xe2
    7eae:	0020      	movs	r0, r4
    7eb0:	bd70      	pop	{r4, r5, r6, pc}
    7eb2:	2300      	movs	r3, #0
    7eb4:	6013      	str	r3, [r2, #0]
    7eb6:	e7fa      	b.n	7eae <interface_cmd_cmpl_wait+0x42>
    7eb8:	200023f5 	.word	0x200023f5
    7ebc:	00007d75 	.word	0x00007d75
    7ec0:	00007dd1 	.word	0x00007dd1
    7ec4:	00007dad 	.word	0x00007dad
    7ec8:	200023f8 	.word	0x200023f8
    7ecc:	00005f15 	.word	0x00005f15
    7ed0:	0000033a 	.word	0x0000033a

00007ed4 <l2cc_data_send_rsp_handler>:
    7ed4:	b510      	push	{r4, lr}
    7ed6:	7804      	ldrb	r4, [r0, #0]
    7ed8:	700c      	strb	r4, [r1, #0]
    7eda:	78c2      	ldrb	r2, [r0, #3]
    7edc:	7883      	ldrb	r3, [r0, #2]
    7ede:	0212      	lsls	r2, r2, #8
    7ee0:	4313      	orrs	r3, r2
    7ee2:	804b      	strh	r3, [r1, #2]
    7ee4:	7942      	ldrb	r2, [r0, #5]
    7ee6:	7903      	ldrb	r3, [r0, #4]
    7ee8:	0212      	lsls	r2, r2, #8
    7eea:	4313      	orrs	r3, r2
    7eec:	808b      	strh	r3, [r1, #4]
    7eee:	2c00      	cmp	r4, #0
    7ef0:	d103      	bne.n	7efa <l2cc_data_send_rsp_handler+0x26>
    7ef2:	4a02      	ldr	r2, [pc, #8]	; (7efc <l2cc_data_send_rsp_handler+0x28>)
    7ef4:	7813      	ldrb	r3, [r2, #0]
    7ef6:	3301      	adds	r3, #1
    7ef8:	7013      	strb	r3, [r2, #0]
    7efa:	bd10      	pop	{r4, pc}
    7efc:	20003bb0 	.word	0x20003bb0

00007f00 <l2cc_data_received_handler>:
    7f00:	0003      	movs	r3, r0
    7f02:	b510      	push	{r4, lr}
    7f04:	7840      	ldrb	r0, [r0, #1]
    7f06:	781a      	ldrb	r2, [r3, #0]
    7f08:	0200      	lsls	r0, r0, #8
    7f0a:	4302      	orrs	r2, r0
    7f0c:	800a      	strh	r2, [r1, #0]
    7f0e:	78d8      	ldrb	r0, [r3, #3]
    7f10:	789a      	ldrb	r2, [r3, #2]
    7f12:	0200      	lsls	r0, r0, #8
    7f14:	4302      	orrs	r2, r0
    7f16:	804a      	strh	r2, [r1, #2]
    7f18:	7958      	ldrb	r0, [r3, #5]
    7f1a:	791a      	ldrb	r2, [r3, #4]
    7f1c:	0200      	lsls	r0, r0, #8
    7f1e:	4302      	orrs	r2, r0
    7f20:	808a      	strh	r2, [r1, #4]
    7f22:	1d88      	adds	r0, r1, #6
    7f24:	1d99      	adds	r1, r3, #6
    7f26:	4b01      	ldr	r3, [pc, #4]	; (7f2c <l2cc_data_received_handler+0x2c>)
    7f28:	4798      	blx	r3
    7f2a:	bd10      	pop	{r4, pc}
    7f2c:	0000a2f7 	.word	0x0000a2f7

00007f30 <at_ble_authenticate>:
    7f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f32:	000c      	movs	r4, r1
    7f34:	211f      	movs	r1, #31
    7f36:	b08b      	sub	sp, #44	; 0x2c
    7f38:	9307      	str	r3, [sp, #28]
    7f3a:	ab02      	add	r3, sp, #8
    7f3c:	18c9      	adds	r1, r1, r3
    7f3e:	230f      	movs	r3, #15
    7f40:	700b      	strb	r3, [r1, #0]
    7f42:	4b40      	ldr	r3, [pc, #256]	; (8044 <at_ble_authenticate+0x114>)
    7f44:	0005      	movs	r5, r0
    7f46:	0016      	movs	r6, r2
    7f48:	4798      	blx	r3
    7f4a:	0007      	movs	r7, r0
    7f4c:	2001      	movs	r0, #1
    7f4e:	2f07      	cmp	r7, #7
    7f50:	d808      	bhi.n	7f64 <at_ble_authenticate+0x34>
    7f52:	2c00      	cmp	r4, #0
    7f54:	d115      	bne.n	7f82 <at_ble_authenticate+0x52>
    7f56:	2312      	movs	r3, #18
    7f58:	435f      	muls	r7, r3
    7f5a:	4b3b      	ldr	r3, [pc, #236]	; (8048 <at_ble_authenticate+0x118>)
    7f5c:	5cfb      	ldrb	r3, [r7, r3]
    7f5e:	4283      	cmp	r3, r0
    7f60:	d002      	beq.n	7f68 <at_ble_authenticate+0x38>
    7f62:	20cf      	movs	r0, #207	; 0xcf
    7f64:	b00b      	add	sp, #44	; 0x2c
    7f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f68:	9504      	str	r5, [sp, #16]
    7f6a:	9403      	str	r4, [sp, #12]
    7f6c:	9402      	str	r4, [sp, #8]
    7f6e:	9401      	str	r4, [sp, #4]
    7f70:	9400      	str	r4, [sp, #0]
    7f72:	0023      	movs	r3, r4
    7f74:	0022      	movs	r2, r4
    7f76:	0021      	movs	r1, r4
    7f78:	0020      	movs	r0, r4
    7f7a:	4d34      	ldr	r5, [pc, #208]	; (804c <at_ble_authenticate+0x11c>)
    7f7c:	47a8      	blx	r5
    7f7e:	2000      	movs	r0, #0
    7f80:	e7f0      	b.n	7f64 <at_ble_authenticate+0x34>
    7f82:	7922      	ldrb	r2, [r4, #4]
    7f84:	2a06      	cmp	r2, #6
    7f86:	d9ec      	bls.n	7f62 <at_ble_authenticate+0x32>
    7f88:	7963      	ldrb	r3, [r4, #5]
    7f8a:	2b10      	cmp	r3, #16
    7f8c:	d8e9      	bhi.n	7f62 <at_ble_authenticate+0x32>
    7f8e:	429a      	cmp	r2, r3
    7f90:	d8e7      	bhi.n	7f62 <at_ble_authenticate+0x32>
    7f92:	7a23      	ldrb	r3, [r4, #8]
    7f94:	2b04      	cmp	r3, #4
    7f96:	d8e4      	bhi.n	7f62 <at_ble_authenticate+0x32>
    7f98:	79a3      	ldrb	r3, [r4, #6]
    7f9a:	2b07      	cmp	r3, #7
    7f9c:	d8e1      	bhi.n	7f62 <at_ble_authenticate+0x32>
    7f9e:	79e3      	ldrb	r3, [r4, #7]
    7fa0:	2b07      	cmp	r3, #7
    7fa2:	d8de      	bhi.n	7f62 <at_ble_authenticate+0x32>
    7fa4:	78a3      	ldrb	r3, [r4, #2]
    7fa6:	2b00      	cmp	r3, #0
    7fa8:	d006      	beq.n	7fb8 <at_ble_authenticate+0x88>
    7faa:	2e00      	cmp	r6, #0
    7fac:	d0d9      	beq.n	7f62 <at_ble_authenticate+0x32>
    7fae:	221c      	movs	r2, #28
    7fb0:	0031      	movs	r1, r6
    7fb2:	4827      	ldr	r0, [pc, #156]	; (8050 <at_ble_authenticate+0x120>)
    7fb4:	4b27      	ldr	r3, [pc, #156]	; (8054 <at_ble_authenticate+0x124>)
    7fb6:	4798      	blx	r3
    7fb8:	9b07      	ldr	r3, [sp, #28]
    7fba:	2b00      	cmp	r3, #0
    7fbc:	d005      	beq.n	7fca <at_ble_authenticate+0x9a>
    7fbe:	4826      	ldr	r0, [pc, #152]	; (8058 <at_ble_authenticate+0x128>)
    7fc0:	0019      	movs	r1, r3
    7fc2:	2210      	movs	r2, #16
    7fc4:	309a      	adds	r0, #154	; 0x9a
    7fc6:	4b23      	ldr	r3, [pc, #140]	; (8054 <at_ble_authenticate+0x124>)
    7fc8:	4798      	blx	r3
    7fca:	7863      	ldrb	r3, [r4, #1]
    7fcc:	78a2      	ldrb	r2, [r4, #2]
    7fce:	009b      	lsls	r3, r3, #2
    7fd0:	4313      	orrs	r3, r2
    7fd2:	2212      	movs	r2, #18
    7fd4:	4357      	muls	r7, r2
    7fd6:	4a1c      	ldr	r2, [pc, #112]	; (8048 <at_ble_authenticate+0x118>)
    7fd8:	b2db      	uxtb	r3, r3
    7fda:	5cba      	ldrb	r2, [r7, r2]
    7fdc:	2a00      	cmp	r2, #0
    7fde:	d116      	bne.n	800e <at_ble_authenticate+0xde>
    7fe0:	79a0      	ldrb	r0, [r4, #6]
    7fe2:	0742      	lsls	r2, r0, #29
    7fe4:	d502      	bpl.n	7fec <at_ble_authenticate+0xbc>
    7fe6:	9a07      	ldr	r2, [sp, #28]
    7fe8:	2a00      	cmp	r2, #0
    7fea:	d0ba      	beq.n	7f62 <at_ble_authenticate+0x32>
    7fec:	07c2      	lsls	r2, r0, #31
    7fee:	d501      	bpl.n	7ff4 <at_ble_authenticate+0xc4>
    7ff0:	2e00      	cmp	r6, #0
    7ff2:	d0b6      	beq.n	7f62 <at_ble_authenticate+0x32>
    7ff4:	7a26      	ldrb	r6, [r4, #8]
    7ff6:	78e2      	ldrb	r2, [r4, #3]
    7ff8:	7821      	ldrb	r1, [r4, #0]
    7ffa:	9603      	str	r6, [sp, #12]
    7ffc:	79e6      	ldrb	r6, [r4, #7]
    7ffe:	9001      	str	r0, [sp, #4]
    8000:	9602      	str	r6, [sp, #8]
    8002:	7960      	ldrb	r0, [r4, #5]
    8004:	4c15      	ldr	r4, [pc, #84]	; (805c <at_ble_authenticate+0x12c>)
    8006:	9000      	str	r0, [sp, #0]
    8008:	0028      	movs	r0, r5
    800a:	47a0      	blx	r4
    800c:	e7b7      	b.n	7f7e <at_ble_authenticate+0x4e>
    800e:	2a01      	cmp	r2, #1
    8010:	d1a7      	bne.n	7f62 <at_ble_authenticate+0x32>
    8012:	79e0      	ldrb	r0, [r4, #7]
    8014:	0742      	lsls	r2, r0, #29
    8016:	d502      	bpl.n	801e <at_ble_authenticate+0xee>
    8018:	9a07      	ldr	r2, [sp, #28]
    801a:	2a00      	cmp	r2, #0
    801c:	d0a1      	beq.n	7f62 <at_ble_authenticate+0x32>
    801e:	07c2      	lsls	r2, r0, #31
    8020:	d501      	bpl.n	8026 <at_ble_authenticate+0xf6>
    8022:	2e00      	cmp	r6, #0
    8024:	d09d      	beq.n	7f62 <at_ble_authenticate+0x32>
    8026:	78e2      	ldrb	r2, [r4, #3]
    8028:	7821      	ldrb	r1, [r4, #0]
    802a:	9504      	str	r5, [sp, #16]
    802c:	7a25      	ldrb	r5, [r4, #8]
    802e:	9002      	str	r0, [sp, #8]
    8030:	9503      	str	r5, [sp, #12]
    8032:	79a0      	ldrb	r0, [r4, #6]
    8034:	9001      	str	r0, [sp, #4]
    8036:	7960      	ldrb	r0, [r4, #5]
    8038:	4c04      	ldr	r4, [pc, #16]	; (804c <at_ble_authenticate+0x11c>)
    803a:	9000      	str	r0, [sp, #0]
    803c:	2001      	movs	r0, #1
    803e:	47a0      	blx	r4
    8040:	e79d      	b.n	7f7e <at_ble_authenticate+0x4e>
    8042:	46c0      	nop			; (mov r8, r8)
    8044:	000083a5 	.word	0x000083a5
    8048:	2000322c 	.word	0x2000322c
    804c:	0000893d 	.word	0x0000893d
    8050:	2000333a 	.word	0x2000333a
    8054:	0000a2f7 	.word	0x0000a2f7
    8058:	200032bc 	.word	0x200032bc
    805c:	00008709 	.word	0x00008709

00008060 <at_ble_pair_key_reply>:
    8060:	b5f0      	push	{r4, r5, r6, r7, lr}
    8062:	b085      	sub	sp, #20
    8064:	0005      	movs	r5, r0
    8066:	000c      	movs	r4, r1
    8068:	0016      	movs	r6, r2
    806a:	2100      	movs	r1, #0
    806c:	2210      	movs	r2, #16
    806e:	4668      	mov	r0, sp
    8070:	4b18      	ldr	r3, [pc, #96]	; (80d4 <at_ble_pair_key_reply+0x74>)
    8072:	4798      	blx	r3
    8074:	2101      	movs	r1, #1
    8076:	2e00      	cmp	r6, #0
    8078:	d101      	bne.n	807e <at_ble_pair_key_reply+0x1e>
    807a:	0031      	movs	r1, r6
    807c:	466e      	mov	r6, sp
    807e:	2c00      	cmp	r4, #0
    8080:	d11d      	bne.n	80be <at_ble_pair_key_reply+0x5e>
    8082:	2701      	movs	r7, #1
    8084:	1d70      	adds	r0, r6, #5
    8086:	0023      	movs	r3, r4
    8088:	3e01      	subs	r6, #1
    808a:	340a      	adds	r4, #10
    808c:	7802      	ldrb	r2, [r0, #0]
    808e:	3801      	subs	r0, #1
    8090:	3a30      	subs	r2, #48	; 0x30
    8092:	437a      	muls	r2, r7
    8094:	4367      	muls	r7, r4
    8096:	189b      	adds	r3, r3, r2
    8098:	4286      	cmp	r6, r0
    809a:	d1f7      	bne.n	808c <at_ble_pair_key_reply+0x2c>
    809c:	466a      	mov	r2, sp
    809e:	4668      	mov	r0, sp
    80a0:	7013      	strb	r3, [r2, #0]
    80a2:	0a1a      	lsrs	r2, r3, #8
    80a4:	7042      	strb	r2, [r0, #1]
    80a6:	0c1a      	lsrs	r2, r3, #16
    80a8:	0e1b      	lsrs	r3, r3, #24
    80aa:	7082      	strb	r2, [r0, #2]
    80ac:	70c3      	strb	r3, [r0, #3]
    80ae:	2004      	movs	r0, #4
    80b0:	002b      	movs	r3, r5
    80b2:	466a      	mov	r2, sp
    80b4:	4c08      	ldr	r4, [pc, #32]	; (80d8 <at_ble_pair_key_reply+0x78>)
    80b6:	47a0      	blx	r4
    80b8:	2000      	movs	r0, #0
    80ba:	b005      	add	sp, #20
    80bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80be:	20cf      	movs	r0, #207	; 0xcf
    80c0:	2c01      	cmp	r4, #1
    80c2:	d1fa      	bne.n	80ba <at_ble_pair_key_reply+0x5a>
    80c4:	2300      	movs	r3, #0
    80c6:	4668      	mov	r0, sp
    80c8:	5cf2      	ldrb	r2, [r6, r3]
    80ca:	54c2      	strb	r2, [r0, r3]
    80cc:	3301      	adds	r3, #1
    80ce:	2b10      	cmp	r3, #16
    80d0:	d1f9      	bne.n	80c6 <at_ble_pair_key_reply+0x66>
    80d2:	e7ec      	b.n	80ae <at_ble_pair_key_reply+0x4e>
    80d4:	0000a309 	.word	0x0000a309
    80d8:	000089c1 	.word	0x000089c1

000080dc <at_ble_send_slave_sec_request>:
    80dc:	b570      	push	{r4, r5, r6, lr}
    80de:	4b0c      	ldr	r3, [pc, #48]	; (8110 <at_ble_send_slave_sec_request+0x34>)
    80e0:	000c      	movs	r4, r1
    80e2:	2100      	movs	r1, #0
    80e4:	0005      	movs	r5, r0
    80e6:	0016      	movs	r6, r2
    80e8:	4798      	blx	r3
    80ea:	2301      	movs	r3, #1
    80ec:	2807      	cmp	r0, #7
    80ee:	d80d      	bhi.n	810c <at_ble_send_slave_sec_request+0x30>
    80f0:	3311      	adds	r3, #17
    80f2:	4358      	muls	r0, r3
    80f4:	4b07      	ldr	r3, [pc, #28]	; (8114 <at_ble_send_slave_sec_request+0x38>)
    80f6:	5cc2      	ldrb	r2, [r0, r3]
    80f8:	23e0      	movs	r3, #224	; 0xe0
    80fa:	2a01      	cmp	r2, #1
    80fc:	d106      	bne.n	810c <at_ble_send_slave_sec_request+0x30>
    80fe:	00a4      	lsls	r4, r4, #2
    8100:	4334      	orrs	r4, r6
    8102:	4b05      	ldr	r3, [pc, #20]	; (8118 <at_ble_send_slave_sec_request+0x3c>)
    8104:	b2e1      	uxtb	r1, r4
    8106:	0028      	movs	r0, r5
    8108:	4798      	blx	r3
    810a:	2300      	movs	r3, #0
    810c:	0018      	movs	r0, r3
    810e:	bd70      	pop	{r4, r5, r6, pc}
    8110:	000083a5 	.word	0x000083a5
    8114:	2000322c 	.word	0x2000322c
    8118:	00008a19 	.word	0x00008a19

0000811c <at_ble_encryption_start>:
    811c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    811e:	23cf      	movs	r3, #207	; 0xcf
    8120:	0007      	movs	r7, r0
    8122:	000c      	movs	r4, r1
    8124:	0015      	movs	r5, r2
    8126:	2900      	cmp	r1, #0
    8128:	d007      	beq.n	813a <at_ble_encryption_start+0x1e>
    812a:	2a05      	cmp	r2, #5
    812c:	d805      	bhi.n	813a <at_ble_encryption_start+0x1e>
    812e:	2601      	movs	r6, #1
    8130:	0031      	movs	r1, r6
    8132:	4091      	lsls	r1, r2
    8134:	2233      	movs	r2, #51	; 0x33
    8136:	4211      	tst	r1, r2
    8138:	d101      	bne.n	813e <at_ble_encryption_start+0x22>
    813a:	0018      	movs	r0, r3
    813c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    813e:	7ea2      	ldrb	r2, [r4, #26]
    8140:	3a07      	subs	r2, #7
    8142:	2a09      	cmp	r2, #9
    8144:	d8f9      	bhi.n	813a <at_ble_encryption_start+0x1e>
    8146:	4b0f      	ldr	r3, [pc, #60]	; (8184 <at_ble_encryption_start+0x68>)
    8148:	2100      	movs	r1, #0
    814a:	0038      	movs	r0, r7
    814c:	4798      	blx	r3
    814e:	0033      	movs	r3, r6
    8150:	2807      	cmp	r0, #7
    8152:	d8f2      	bhi.n	813a <at_ble_encryption_start+0x1e>
    8154:	2312      	movs	r3, #18
    8156:	4358      	muls	r0, r3
    8158:	4b0b      	ldr	r3, [pc, #44]	; (8188 <at_ble_encryption_start+0x6c>)
    815a:	5cc6      	ldrb	r6, [r0, r3]
    815c:	23e0      	movs	r3, #224	; 0xe0
    815e:	2e00      	cmp	r6, #0
    8160:	d1eb      	bne.n	813a <at_ble_encryption_start+0x1e>
    8162:	0021      	movs	r1, r4
    8164:	221c      	movs	r2, #28
    8166:	4b09      	ldr	r3, [pc, #36]	; (818c <at_ble_encryption_start+0x70>)
    8168:	4809      	ldr	r0, [pc, #36]	; (8190 <at_ble_encryption_start+0x74>)
    816a:	4798      	blx	r3
    816c:	0023      	movs	r3, r4
    816e:	8a22      	ldrh	r2, [r4, #16]
    8170:	9501      	str	r5, [sp, #4]
    8172:	7ea1      	ldrb	r1, [r4, #26]
    8174:	3312      	adds	r3, #18
    8176:	9100      	str	r1, [sp, #0]
    8178:	0038      	movs	r0, r7
    817a:	0021      	movs	r1, r4
    817c:	4c05      	ldr	r4, [pc, #20]	; (8194 <at_ble_encryption_start+0x78>)
    817e:	47a0      	blx	r4
    8180:	0033      	movs	r3, r6
    8182:	e7da      	b.n	813a <at_ble_encryption_start+0x1e>
    8184:	000083a5 	.word	0x000083a5
    8188:	2000322c 	.word	0x2000322c
    818c:	0000a2f7 	.word	0x0000a2f7
    8190:	2000333a 	.word	0x2000333a
    8194:	00008a61 	.word	0x00008a61

00008198 <at_ble_encryption_request_reply>:
    8198:	b573      	push	{r0, r1, r4, r5, r6, lr}
    819a:	24cf      	movs	r4, #207	; 0xcf
    819c:	2b00      	cmp	r3, #0
    819e:	d008      	beq.n	81b2 <at_ble_encryption_request_reply+0x1a>
    81a0:	2a00      	cmp	r2, #0
    81a2:	d00c      	beq.n	81be <at_ble_encryption_request_reply+0x26>
    81a4:	2905      	cmp	r1, #5
    81a6:	d804      	bhi.n	81b2 <at_ble_encryption_request_reply+0x1a>
    81a8:	2501      	movs	r5, #1
    81aa:	2633      	movs	r6, #51	; 0x33
    81ac:	408d      	lsls	r5, r1
    81ae:	4235      	tst	r5, r6
    81b0:	d101      	bne.n	81b6 <at_ble_encryption_request_reply+0x1e>
    81b2:	0020      	movs	r0, r4
    81b4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    81b6:	7e9d      	ldrb	r5, [r3, #26]
    81b8:	3d07      	subs	r5, #7
    81ba:	2d09      	cmp	r5, #9
    81bc:	d8f9      	bhi.n	81b2 <at_ble_encryption_request_reply+0x1a>
    81be:	7e9c      	ldrb	r4, [r3, #26]
    81c0:	9400      	str	r4, [sp, #0]
    81c2:	4c02      	ldr	r4, [pc, #8]	; (81cc <at_ble_encryption_request_reply+0x34>)
    81c4:	47a0      	blx	r4
    81c6:	2400      	movs	r4, #0
    81c8:	e7f3      	b.n	81b2 <at_ble_encryption_request_reply+0x1a>
    81ca:	46c0      	nop			; (mov r8, r8)
    81cc:	00008b31 	.word	0x00008b31

000081d0 <dbg_le_set_bd_addr_req_handler>:
    81d0:	4a14      	ldr	r2, [pc, #80]	; (8224 <dbg_le_set_bd_addr_req_handler+0x54>)
    81d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81d4:	6814      	ldr	r4, [r2, #0]
    81d6:	2300      	movs	r3, #0
    81d8:	2205      	movs	r2, #5
    81da:	0001      	movs	r1, r0
    81dc:	2603      	movs	r6, #3
    81de:	270f      	movs	r7, #15
    81e0:	0020      	movs	r0, r4
    81e2:	4d11      	ldr	r5, [pc, #68]	; (8228 <dbg_le_set_bd_addr_req_handler+0x58>)
    81e4:	3009      	adds	r0, #9
    81e6:	60ab      	str	r3, [r5, #8]
    81e8:	60eb      	str	r3, [r5, #12]
    81ea:	7022      	strb	r2, [r4, #0]
    81ec:	320b      	adds	r2, #11
    81ee:	7123      	strb	r3, [r4, #4]
    81f0:	7162      	strb	r2, [r4, #5]
    81f2:	71a3      	strb	r3, [r4, #6]
    81f4:	71e3      	strb	r3, [r4, #7]
    81f6:	7223      	strb	r3, [r4, #8]
    81f8:	3a0a      	subs	r2, #10
    81fa:	4b0c      	ldr	r3, [pc, #48]	; (822c <dbg_le_set_bd_addr_req_handler+0x5c>)
    81fc:	7067      	strb	r7, [r4, #1]
    81fe:	70a6      	strb	r6, [r4, #2]
    8200:	70e6      	strb	r6, [r4, #3]
    8202:	4798      	blx	r3
    8204:	4b0a      	ldr	r3, [pc, #40]	; (8230 <dbg_le_set_bd_addr_req_handler+0x60>)
    8206:	0039      	movs	r1, r7
    8208:	802b      	strh	r3, [r5, #0]
    820a:	2306      	movs	r3, #6
    820c:	0020      	movs	r0, r4
    820e:	71e3      	strb	r3, [r4, #7]
    8210:	4b08      	ldr	r3, [pc, #32]	; (8234 <dbg_le_set_bd_addr_req_handler+0x64>)
    8212:	80ae      	strh	r6, [r5, #4]
    8214:	4798      	blx	r3
    8216:	4b08      	ldr	r3, [pc, #32]	; (8238 <dbg_le_set_bd_addr_req_handler+0x68>)
    8218:	4798      	blx	r3
    821a:	2800      	cmp	r0, #0
    821c:	d101      	bne.n	8222 <dbg_le_set_bd_addr_req_handler+0x52>
    821e:	68ab      	ldr	r3, [r5, #8]
    8220:	7818      	ldrb	r0, [r3, #0]
    8222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8224:	0000c4d0 	.word	0x0000c4d0
    8228:	2000321c 	.word	0x2000321c
    822c:	0000a2f7 	.word	0x0000a2f7
    8230:	00000329 	.word	0x00000329
    8234:	00007859 	.word	0x00007859
    8238:	00007e6d 	.word	0x00007e6d

0000823c <dbg_rd_mem_req_handler>:
    823c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    823e:	2410      	movs	r4, #16
    8240:	9101      	str	r1, [sp, #4]
    8242:	2100      	movs	r1, #0
    8244:	001e      	movs	r6, r3
    8246:	4b1b      	ldr	r3, [pc, #108]	; (82b4 <dbg_rd_mem_req_handler+0x78>)
    8248:	4d1b      	ldr	r5, [pc, #108]	; (82b8 <dbg_rd_mem_req_handler+0x7c>)
    824a:	681b      	ldr	r3, [r3, #0]
    824c:	0017      	movs	r7, r2
    824e:	2205      	movs	r2, #5
    8250:	60e9      	str	r1, [r5, #12]
    8252:	60a9      	str	r1, [r5, #8]
    8254:	7059      	strb	r1, [r3, #1]
    8256:	7119      	strb	r1, [r3, #4]
    8258:	7199      	strb	r1, [r3, #6]
    825a:	7219      	strb	r1, [r3, #8]
    825c:	7258      	strb	r0, [r3, #9]
    825e:	0a01      	lsrs	r1, r0, #8
    8260:	40e0      	lsrs	r0, r4
    8262:	701a      	strb	r2, [r3, #0]
    8264:	7299      	strb	r1, [r3, #10]
    8266:	3a02      	subs	r2, #2
    8268:	4914      	ldr	r1, [pc, #80]	; (82bc <dbg_rd_mem_req_handler+0x80>)
    826a:	709a      	strb	r2, [r3, #2]
    826c:	70da      	strb	r2, [r3, #3]
    826e:	715c      	strb	r4, [r3, #5]
    8270:	72d8      	strb	r0, [r3, #11]
    8272:	80aa      	strh	r2, [r5, #4]
    8274:	0a00      	lsrs	r0, r0, #8
    8276:	3203      	adds	r2, #3
    8278:	7318      	strb	r0, [r3, #12]
    827a:	71da      	strb	r2, [r3, #7]
    827c:	735e      	strb	r6, [r3, #13]
    827e:	739f      	strb	r7, [r3, #14]
    8280:	8029      	strh	r1, [r5, #0]
    8282:	0018      	movs	r0, r3
    8284:	210f      	movs	r1, #15
    8286:	4b0e      	ldr	r3, [pc, #56]	; (82c0 <dbg_rd_mem_req_handler+0x84>)
    8288:	4798      	blx	r3
    828a:	4b0e      	ldr	r3, [pc, #56]	; (82c4 <dbg_rd_mem_req_handler+0x88>)
    828c:	4798      	blx	r3
    828e:	1e04      	subs	r4, r0, #0
    8290:	d108      	bne.n	82a4 <dbg_rd_mem_req_handler+0x68>
    8292:	68a9      	ldr	r1, [r5, #8]
    8294:	780c      	ldrb	r4, [r1, #0]
    8296:	2e08      	cmp	r6, #8
    8298:	d106      	bne.n	82a8 <dbg_rd_mem_req_handler+0x6c>
    829a:	003a      	movs	r2, r7
    829c:	3102      	adds	r1, #2
    829e:	9801      	ldr	r0, [sp, #4]
    82a0:	4b09      	ldr	r3, [pc, #36]	; (82c8 <dbg_rd_mem_req_handler+0x8c>)
    82a2:	4798      	blx	r3
    82a4:	0020      	movs	r0, r4
    82a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    82a8:	2e20      	cmp	r6, #32
    82aa:	d1fb      	bne.n	82a4 <dbg_rd_mem_req_handler+0x68>
    82ac:	00ba      	lsls	r2, r7, #2
    82ae:	3102      	adds	r1, #2
    82b0:	e7f5      	b.n	829e <dbg_rd_mem_req_handler+0x62>
    82b2:	46c0      	nop			; (mov r8, r8)
    82b4:	0000c4d0 	.word	0x0000c4d0
    82b8:	2000321c 	.word	0x2000321c
    82bc:	00000319 	.word	0x00000319
    82c0:	00007859 	.word	0x00007859
    82c4:	00007e6d 	.word	0x00007e6d
    82c8:	0000a2f7 	.word	0x0000a2f7

000082cc <gapc_get_dev_info_cfm.constprop.1>:
    82cc:	2200      	movs	r2, #0
    82ce:	4b2f      	ldr	r3, [pc, #188]	; (838c <gapc_get_dev_info_cfm.constprop.1+0xc0>)
    82d0:	b570      	push	{r4, r5, r6, lr}
    82d2:	609a      	str	r2, [r3, #8]
    82d4:	60da      	str	r2, [r3, #12]
    82d6:	4b2e      	ldr	r3, [pc, #184]	; (8390 <gapc_get_dev_info_cfm.constprop.1+0xc4>)
    82d8:	250e      	movs	r5, #14
    82da:	681c      	ldr	r4, [r3, #0]
    82dc:	2305      	movs	r3, #5
    82de:	7121      	strb	r1, [r4, #4]
    82e0:	2110      	movs	r1, #16
    82e2:	7023      	strb	r3, [r4, #0]
    82e4:	70a5      	strb	r5, [r4, #2]
    82e6:	3306      	adds	r3, #6
    82e8:	3529      	adds	r5, #41	; 0x29
    82ea:	7063      	strb	r3, [r4, #1]
    82ec:	70e5      	strb	r5, [r4, #3]
    82ee:	7161      	strb	r1, [r4, #5]
    82f0:	71a2      	strb	r2, [r4, #6]
    82f2:	71e2      	strb	r2, [r4, #7]
    82f4:	7222      	strb	r2, [r4, #8]
    82f6:	7260      	strb	r0, [r4, #9]
    82f8:	72a2      	strb	r2, [r4, #10]
    82fa:	2801      	cmp	r0, #1
    82fc:	d01e      	beq.n	833c <gapc_get_dev_info_cfm.constprop.1+0x70>
    82fe:	4290      	cmp	r0, r2
    8300:	d003      	beq.n	830a <gapc_get_dev_info_cfm.constprop.1+0x3e>
    8302:	2802      	cmp	r0, #2
    8304:	d023      	beq.n	834e <gapc_get_dev_info_cfm.constprop.1+0x82>
    8306:	0019      	movs	r1, r3
    8308:	e00f      	b.n	832a <gapc_get_dev_info_cfm.constprop.1+0x5e>
    830a:	0020      	movs	r0, r4
    830c:	4d21      	ldr	r5, [pc, #132]	; (8394 <gapc_get_dev_info_cfm.constprop.1+0xc8>)
    830e:	4922      	ldr	r1, [pc, #136]	; (8398 <gapc_get_dev_info_cfm.constprop.1+0xcc>)
    8310:	35aa      	adds	r5, #170	; 0xaa
    8312:	882b      	ldrh	r3, [r5, #0]
    8314:	300d      	adds	r0, #13
    8316:	72e3      	strb	r3, [r4, #11]
    8318:	882b      	ldrh	r3, [r5, #0]
    831a:	0a1b      	lsrs	r3, r3, #8
    831c:	7323      	strb	r3, [r4, #12]
    831e:	882a      	ldrh	r2, [r5, #0]
    8320:	4b1e      	ldr	r3, [pc, #120]	; (839c <gapc_get_dev_info_cfm.constprop.1+0xd0>)
    8322:	4798      	blx	r3
    8324:	8829      	ldrh	r1, [r5, #0]
    8326:	310d      	adds	r1, #13
    8328:	b289      	uxth	r1, r1
    832a:	000b      	movs	r3, r1
    832c:	3b09      	subs	r3, #9
    832e:	71e3      	strb	r3, [r4, #7]
    8330:	121b      	asrs	r3, r3, #8
    8332:	7223      	strb	r3, [r4, #8]
    8334:	0020      	movs	r0, r4
    8336:	4b1a      	ldr	r3, [pc, #104]	; (83a0 <gapc_get_dev_info_cfm.constprop.1+0xd4>)
    8338:	4798      	blx	r3
    833a:	bd70      	pop	{r4, r5, r6, pc}
    833c:	4b15      	ldr	r3, [pc, #84]	; (8394 <gapc_get_dev_info_cfm.constprop.1+0xc8>)
    833e:	210d      	movs	r1, #13
    8340:	33cc      	adds	r3, #204	; 0xcc
    8342:	881a      	ldrh	r2, [r3, #0]
    8344:	72e2      	strb	r2, [r4, #11]
    8346:	881b      	ldrh	r3, [r3, #0]
    8348:	0a1b      	lsrs	r3, r3, #8
    834a:	7323      	strb	r3, [r4, #12]
    834c:	e7ed      	b.n	832a <gapc_get_dev_info_cfm.constprop.1+0x5e>
    834e:	4b11      	ldr	r3, [pc, #68]	; (8394 <gapc_get_dev_info_cfm.constprop.1+0xc8>)
    8350:	001a      	movs	r2, r3
    8352:	32ce      	adds	r2, #206	; 0xce
    8354:	8811      	ldrh	r1, [r2, #0]
    8356:	72e1      	strb	r1, [r4, #11]
    8358:	8812      	ldrh	r2, [r2, #0]
    835a:	0a12      	lsrs	r2, r2, #8
    835c:	7322      	strb	r2, [r4, #12]
    835e:	001a      	movs	r2, r3
    8360:	32d0      	adds	r2, #208	; 0xd0
    8362:	8811      	ldrh	r1, [r2, #0]
    8364:	7361      	strb	r1, [r4, #13]
    8366:	8812      	ldrh	r2, [r2, #0]
    8368:	0a12      	lsrs	r2, r2, #8
    836a:	73a2      	strb	r2, [r4, #14]
    836c:	001a      	movs	r2, r3
    836e:	32d2      	adds	r2, #210	; 0xd2
    8370:	8811      	ldrh	r1, [r2, #0]
    8372:	33d4      	adds	r3, #212	; 0xd4
    8374:	73e1      	strb	r1, [r4, #15]
    8376:	8812      	ldrh	r2, [r2, #0]
    8378:	2113      	movs	r1, #19
    837a:	0a12      	lsrs	r2, r2, #8
    837c:	7422      	strb	r2, [r4, #16]
    837e:	881a      	ldrh	r2, [r3, #0]
    8380:	7462      	strb	r2, [r4, #17]
    8382:	881b      	ldrh	r3, [r3, #0]
    8384:	0a1b      	lsrs	r3, r3, #8
    8386:	74a3      	strb	r3, [r4, #18]
    8388:	e7cf      	b.n	832a <gapc_get_dev_info_cfm.constprop.1+0x5e>
    838a:	46c0      	nop			; (mov r8, r8)
    838c:	2000321c 	.word	0x2000321c
    8390:	0000c4d0 	.word	0x0000c4d0
    8394:	200032bc 	.word	0x200032bc
    8398:	20003368 	.word	0x20003368
    839c:	0000a2f7 	.word	0x0000a2f7
    83a0:	00007859 	.word	0x00007859

000083a4 <check_ConnData_idx_role>:
    83a4:	4b0c      	ldr	r3, [pc, #48]	; (83d8 <check_ConnData_idx_role+0x34>)
    83a6:	b5f0      	push	{r4, r5, r6, r7, lr}
    83a8:	2208      	movs	r2, #8
    83aa:	4298      	cmp	r0, r3
    83ac:	d00d      	beq.n	83ca <check_ConnData_idx_role+0x26>
    83ae:	2300      	movs	r3, #0
    83b0:	2612      	movs	r6, #18
    83b2:	4c0a      	ldr	r4, [pc, #40]	; (83dc <check_ConnData_idx_role+0x38>)
    83b4:	0035      	movs	r5, r6
    83b6:	435d      	muls	r5, r3
    83b8:	192f      	adds	r7, r5, r4
    83ba:	897f      	ldrh	r7, [r7, #10]
    83bc:	b2da      	uxtb	r2, r3
    83be:	4287      	cmp	r7, r0
    83c0:	d105      	bne.n	83ce <check_ConnData_idx_role+0x2a>
    83c2:	2900      	cmp	r1, #0
    83c4:	d001      	beq.n	83ca <check_ConnData_idx_role+0x26>
    83c6:	5d2b      	ldrb	r3, [r5, r4]
    83c8:	700b      	strb	r3, [r1, #0]
    83ca:	0010      	movs	r0, r2
    83cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    83ce:	3301      	adds	r3, #1
    83d0:	2b08      	cmp	r3, #8
    83d2:	d1ef      	bne.n	83b4 <check_ConnData_idx_role+0x10>
    83d4:	001a      	movs	r2, r3
    83d6:	e7f8      	b.n	83ca <check_ConnData_idx_role+0x26>
    83d8:	0000ffff 	.word	0x0000ffff
    83dc:	2000322c 	.word	0x2000322c

000083e0 <check_ConnData_emptyEntry>:
    83e0:	2300      	movs	r3, #0
    83e2:	2112      	movs	r1, #18
    83e4:	b530      	push	{r4, r5, lr}
    83e6:	4c07      	ldr	r4, [pc, #28]	; (8404 <check_ConnData_emptyEntry+0x24>)
    83e8:	4d07      	ldr	r5, [pc, #28]	; (8408 <check_ConnData_emptyEntry+0x28>)
    83ea:	000a      	movs	r2, r1
    83ec:	435a      	muls	r2, r3
    83ee:	1912      	adds	r2, r2, r4
    83f0:	8952      	ldrh	r2, [r2, #10]
    83f2:	b2d8      	uxtb	r0, r3
    83f4:	42aa      	cmp	r2, r5
    83f6:	d003      	beq.n	8400 <check_ConnData_emptyEntry+0x20>
    83f8:	3301      	adds	r3, #1
    83fa:	2b08      	cmp	r3, #8
    83fc:	d1f5      	bne.n	83ea <check_ConnData_emptyEntry+0xa>
    83fe:	0018      	movs	r0, r3
    8400:	bd30      	pop	{r4, r5, pc}
    8402:	46c0      	nop			; (mov r8, r8)
    8404:	2000322c 	.word	0x2000322c
    8408:	0000ffff 	.word	0x0000ffff

0000840c <gapc_cmp_evt>:
    840c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    840e:	780b      	ldrb	r3, [r1, #0]
    8410:	0005      	movs	r5, r0
    8412:	1e58      	subs	r0, r3, #1
    8414:	0014      	movs	r4, r2
    8416:	784e      	ldrb	r6, [r1, #1]
    8418:	280f      	cmp	r0, #15
    841a:	d85b      	bhi.n	84d4 <gapc_cmp_evt+0xc8>
    841c:	f001 fd8e 	bl	9f3c <__gnu_thumb1_case_uqi>
    8420:	5a5a460a 	.word	0x5a5a460a
    8424:	4d5a4646 	.word	0x4d5a4646
    8428:	0827142f 	.word	0x0827142f
    842c:	413b5a5a 	.word	0x413b5a5a
    8430:	203d      	movs	r0, #61	; 0x3d
    8432:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8434:	203d      	movs	r0, #61	; 0x3d
    8436:	2e00      	cmp	r6, #0
    8438:	d0fb      	beq.n	8432 <gapc_cmp_evt+0x26>
    843a:	2300      	movs	r3, #0
    843c:	0a2d      	lsrs	r5, r5, #8
    843e:	8015      	strh	r5, [r2, #0]
    8440:	7096      	strb	r6, [r2, #2]
    8442:	70d3      	strb	r3, [r2, #3]
    8444:	3836      	subs	r0, #54	; 0x36
    8446:	e7f4      	b.n	8432 <gapc_cmp_evt+0x26>
    8448:	466b      	mov	r3, sp
    844a:	1ddf      	adds	r7, r3, #7
    844c:	2301      	movs	r3, #1
    844e:	0a2d      	lsrs	r5, r5, #8
    8450:	703b      	strb	r3, [r7, #0]
    8452:	0039      	movs	r1, r7
    8454:	0028      	movs	r0, r5
    8456:	4b20      	ldr	r3, [pc, #128]	; (84d8 <gapc_cmp_evt+0xcc>)
    8458:	4798      	blx	r3
    845a:	2807      	cmp	r0, #7
    845c:	d803      	bhi.n	8466 <gapc_cmp_evt+0x5a>
    845e:	783b      	ldrb	r3, [r7, #0]
    8460:	203d      	movs	r0, #61	; 0x3d
    8462:	2b00      	cmp	r3, #0
    8464:	d0e5      	beq.n	8432 <gapc_cmp_evt+0x26>
    8466:	8065      	strh	r5, [r4, #2]
    8468:	7126      	strb	r6, [r4, #4]
    846a:	200a      	movs	r0, #10
    846c:	e7e1      	b.n	8432 <gapc_cmp_evt+0x26>
    846e:	203d      	movs	r0, #61	; 0x3d
    8470:	2e00      	cmp	r6, #0
    8472:	d0de      	beq.n	8432 <gapc_cmp_evt+0x26>
    8474:	0a2d      	lsrs	r5, r5, #8
    8476:	8015      	strh	r5, [r2, #0]
    8478:	7096      	strb	r6, [r2, #2]
    847a:	382e      	subs	r0, #46	; 0x2e
    847c:	e7d9      	b.n	8432 <gapc_cmp_evt+0x26>
    847e:	203d      	movs	r0, #61	; 0x3d
    8480:	2e00      	cmp	r6, #0
    8482:	d0d6      	beq.n	8432 <gapc_cmp_evt+0x26>
    8484:	2300      	movs	r3, #0
    8486:	0a2d      	lsrs	r5, r5, #8
    8488:	8015      	strh	r5, [r2, #0]
    848a:	7096      	strb	r6, [r2, #2]
    848c:	8093      	strh	r3, [r2, #4]
    848e:	80d3      	strh	r3, [r2, #6]
    8490:	8113      	strh	r3, [r2, #8]
    8492:	3835      	subs	r0, #53	; 0x35
    8494:	e7cd      	b.n	8432 <gapc_cmp_evt+0x26>
    8496:	203d      	movs	r0, #61	; 0x3d
    8498:	2e00      	cmp	r6, #0
    849a:	d0ca      	beq.n	8432 <gapc_cmp_evt+0x26>
    849c:	7216      	strb	r6, [r2, #8]
    849e:	3813      	subs	r0, #19
    84a0:	e7c7      	b.n	8432 <gapc_cmp_evt+0x26>
    84a2:	203d      	movs	r0, #61	; 0x3d
    84a4:	2e00      	cmp	r6, #0
    84a6:	d0c4      	beq.n	8432 <gapc_cmp_evt+0x26>
    84a8:	7116      	strb	r6, [r2, #4]
    84aa:	e7f8      	b.n	849e <gapc_cmp_evt+0x92>
    84ac:	203d      	movs	r0, #61	; 0x3d
    84ae:	2e00      	cmp	r6, #0
    84b0:	d0bf      	beq.n	8432 <gapc_cmp_evt+0x26>
    84b2:	7093      	strb	r3, [r2, #2]
    84b4:	70d6      	strb	r6, [r2, #3]
    84b6:	382b      	subs	r0, #43	; 0x2b
    84b8:	e7bb      	b.n	8432 <gapc_cmp_evt+0x26>
    84ba:	203d      	movs	r0, #61	; 0x3d
    84bc:	2e00      	cmp	r6, #0
    84be:	d0b8      	beq.n	8432 <gapc_cmp_evt+0x26>
    84c0:	0a2d      	lsrs	r5, r5, #8
    84c2:	7016      	strb	r6, [r2, #0]
    84c4:	8055      	strh	r5, [r2, #2]
    84c6:	1d10      	adds	r0, r2, #4
    84c8:	2100      	movs	r1, #0
    84ca:	2205      	movs	r2, #5
    84cc:	4b03      	ldr	r3, [pc, #12]	; (84dc <gapc_cmp_evt+0xd0>)
    84ce:	4798      	blx	r3
    84d0:	2013      	movs	r0, #19
    84d2:	e7ae      	b.n	8432 <gapc_cmp_evt+0x26>
    84d4:	2000      	movs	r0, #0
    84d6:	e7ac      	b.n	8432 <gapc_cmp_evt+0x26>
    84d8:	000083a5 	.word	0x000083a5
    84dc:	0000a309 	.word	0x0000a309

000084e0 <gapc_connection_cfm_handler>:
    84e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    84e2:	2500      	movs	r5, #0
    84e4:	b085      	sub	sp, #20
    84e6:	001f      	movs	r7, r3
    84e8:	ab0a      	add	r3, sp, #40	; 0x28
    84ea:	781b      	ldrb	r3, [r3, #0]
    84ec:	9201      	str	r2, [sp, #4]
    84ee:	9302      	str	r3, [sp, #8]
    84f0:	ab0b      	add	r3, sp, #44	; 0x2c
    84f2:	781b      	ldrb	r3, [r3, #0]
    84f4:	2610      	movs	r6, #16
    84f6:	9303      	str	r3, [sp, #12]
    84f8:	ab0c      	add	r3, sp, #48	; 0x30
    84fa:	881a      	ldrh	r2, [r3, #0]
    84fc:	4b23      	ldr	r3, [pc, #140]	; (858c <gapc_connection_cfm_handler+0xac>)
    84fe:	9100      	str	r1, [sp, #0]
    8500:	609d      	str	r5, [r3, #8]
    8502:	60dd      	str	r5, [r3, #12]
    8504:	4b22      	ldr	r3, [pc, #136]	; (8590 <gapc_connection_cfm_handler+0xb0>)
    8506:	0001      	movs	r1, r0
    8508:	681c      	ldr	r4, [r3, #0]
    850a:	2305      	movs	r3, #5
    850c:	7023      	strb	r3, [r4, #0]
    850e:	3b03      	subs	r3, #3
    8510:	7063      	strb	r3, [r4, #1]
    8512:	330c      	adds	r3, #12
    8514:	70a3      	strb	r3, [r4, #2]
    8516:	70e3      	strb	r3, [r4, #3]
    8518:	0023      	movs	r3, r4
    851a:	3309      	adds	r3, #9
    851c:	7122      	strb	r2, [r4, #4]
    851e:	7166      	strb	r6, [r4, #5]
    8520:	0032      	movs	r2, r6
    8522:	71a5      	strb	r5, [r4, #6]
    8524:	71e5      	strb	r5, [r4, #7]
    8526:	7225      	strb	r5, [r4, #8]
    8528:	0018      	movs	r0, r3
    852a:	4b1a      	ldr	r3, [pc, #104]	; (8594 <gapc_connection_cfm_handler+0xb4>)
    852c:	4798      	blx	r3
    852e:	466b      	mov	r3, sp
    8530:	781b      	ldrb	r3, [r3, #0]
    8532:	0020      	movs	r0, r4
    8534:	7663      	strb	r3, [r4, #25]
    8536:	9b00      	ldr	r3, [sp, #0]
    8538:	0032      	movs	r2, r6
    853a:	0a1b      	lsrs	r3, r3, #8
    853c:	76a3      	strb	r3, [r4, #26]
    853e:	9b00      	ldr	r3, [sp, #0]
    8540:	9901      	ldr	r1, [sp, #4]
    8542:	40f3      	lsrs	r3, r6
    8544:	76e3      	strb	r3, [r4, #27]
    8546:	0a1b      	lsrs	r3, r3, #8
    8548:	7723      	strb	r3, [r4, #28]
    854a:	301d      	adds	r0, #29
    854c:	4b11      	ldr	r3, [pc, #68]	; (8594 <gapc_connection_cfm_handler+0xb4>)
    854e:	4798      	blx	r3
    8550:	0023      	movs	r3, r4
    8552:	0a3a      	lsrs	r2, r7, #8
    8554:	332d      	adds	r3, #45	; 0x2d
    8556:	705a      	strb	r2, [r3, #1]
    8558:	0022      	movs	r2, r4
    855a:	701f      	strb	r7, [r3, #0]
    855c:	322f      	adds	r2, #47	; 0x2f
    855e:	0c3b      	lsrs	r3, r7, #16
    8560:	7013      	strb	r3, [r2, #0]
    8562:	0a1b      	lsrs	r3, r3, #8
    8564:	7053      	strb	r3, [r2, #1]
    8566:	466a      	mov	r2, sp
    8568:	0023      	movs	r3, r4
    856a:	7a12      	ldrb	r2, [r2, #8]
    856c:	3331      	adds	r3, #49	; 0x31
    856e:	701a      	strb	r2, [r3, #0]
    8570:	466a      	mov	r2, sp
    8572:	7b12      	ldrb	r2, [r2, #12]
    8574:	705d      	strb	r5, [r3, #1]
    8576:	709a      	strb	r2, [r3, #2]
    8578:	70dd      	strb	r5, [r3, #3]
    857a:	232c      	movs	r3, #44	; 0x2c
    857c:	2135      	movs	r1, #53	; 0x35
    857e:	71e3      	strb	r3, [r4, #7]
    8580:	0020      	movs	r0, r4
    8582:	4b05      	ldr	r3, [pc, #20]	; (8598 <gapc_connection_cfm_handler+0xb8>)
    8584:	4798      	blx	r3
    8586:	0028      	movs	r0, r5
    8588:	b005      	add	sp, #20
    858a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    858c:	2000321c 	.word	0x2000321c
    8590:	0000c4d0 	.word	0x0000c4d0
    8594:	0000a2f7 	.word	0x0000a2f7
    8598:	00007859 	.word	0x00007859

0000859c <gapc_con_req_ind>:
    859c:	b5f0      	push	{r4, r5, r6, r7, lr}
    859e:	0004      	movs	r4, r0
    85a0:	b08f      	sub	sp, #60	; 0x3c
    85a2:	2210      	movs	r2, #16
    85a4:	2100      	movs	r1, #0
    85a6:	4b32      	ldr	r3, [pc, #200]	; (8670 <gapc_con_req_ind+0xd4>)
    85a8:	a80a      	add	r0, sp, #40	; 0x28
    85aa:	4798      	blx	r3
    85ac:	7863      	ldrb	r3, [r4, #1]
    85ae:	7822      	ldrb	r2, [r4, #0]
    85b0:	021b      	lsls	r3, r3, #8
    85b2:	431a      	orrs	r2, r3
    85b4:	466b      	mov	r3, sp
    85b6:	9205      	str	r2, [sp, #20]
    85b8:	4d2e      	ldr	r5, [pc, #184]	; (8674 <gapc_con_req_ind+0xd8>)
    85ba:	8a9b      	ldrh	r3, [r3, #20]
    85bc:	2124      	movs	r1, #36	; 0x24
    85be:	85ab      	strh	r3, [r5, #44]	; 0x2c
    85c0:	78e3      	ldrb	r3, [r4, #3]
    85c2:	78a2      	ldrb	r2, [r4, #2]
    85c4:	021b      	lsls	r3, r3, #8
    85c6:	431a      	orrs	r2, r3
    85c8:	466b      	mov	r3, sp
    85ca:	9206      	str	r2, [sp, #24]
    85cc:	8b1b      	ldrh	r3, [r3, #24]
    85ce:	85eb      	strh	r3, [r5, #46]	; 0x2e
    85d0:	7963      	ldrb	r3, [r4, #5]
    85d2:	7922      	ldrb	r2, [r4, #4]
    85d4:	021b      	lsls	r3, r3, #8
    85d6:	431a      	orrs	r2, r3
    85d8:	466b      	mov	r3, sp
    85da:	9207      	str	r2, [sp, #28]
    85dc:	8b9b      	ldrh	r3, [r3, #28]
    85de:	862b      	strh	r3, [r5, #48]	; 0x30
    85e0:	79e3      	ldrb	r3, [r4, #7]
    85e2:	79a2      	ldrb	r2, [r4, #6]
    85e4:	021b      	lsls	r3, r3, #8
    85e6:	431a      	orrs	r2, r3
    85e8:	466b      	mov	r3, sp
    85ea:	9208      	str	r2, [sp, #32]
    85ec:	466a      	mov	r2, sp
    85ee:	8c1b      	ldrh	r3, [r3, #32]
    85f0:	1852      	adds	r2, r2, r1
    85f2:	866b      	strh	r3, [r5, #50]	; 0x32
    85f4:	7a63      	ldrb	r3, [r4, #9]
    85f6:	0021      	movs	r1, r4
    85f8:	9309      	str	r3, [sp, #36]	; 0x24
    85fa:	002b      	movs	r3, r5
    85fc:	7812      	ldrb	r2, [r2, #0]
    85fe:	3377      	adds	r3, #119	; 0x77
    8600:	3578      	adds	r5, #120	; 0x78
    8602:	701a      	strb	r2, [r3, #0]
    8604:	310a      	adds	r1, #10
    8606:	2206      	movs	r2, #6
    8608:	4b1b      	ldr	r3, [pc, #108]	; (8678 <gapc_con_req_ind+0xdc>)
    860a:	0028      	movs	r0, r5
    860c:	4798      	blx	r3
    860e:	4b1b      	ldr	r3, [pc, #108]	; (867c <gapc_con_req_ind+0xe0>)
    8610:	4798      	blx	r3
    8612:	4e1b      	ldr	r6, [pc, #108]	; (8680 <gapc_con_req_ind+0xe4>)
    8614:	0007      	movs	r7, r0
    8616:	2807      	cmp	r0, #7
    8618:	d81b      	bhi.n	8652 <gapc_con_req_ind+0xb6>
    861a:	2012      	movs	r0, #18
    861c:	4669      	mov	r1, sp
    861e:	4378      	muls	r0, r7
    8620:	7c22      	ldrb	r2, [r4, #16]
    8622:	8a89      	ldrh	r1, [r1, #20]
    8624:	1833      	adds	r3, r6, r0
    8626:	8159      	strh	r1, [r3, #10]
    8628:	5432      	strb	r2, [r6, r0]
    862a:	2124      	movs	r1, #36	; 0x24
    862c:	466a      	mov	r2, sp
    862e:	1852      	adds	r2, r2, r1
    8630:	7812      	ldrb	r2, [r2, #0]
    8632:	3002      	adds	r0, #2
    8634:	705a      	strb	r2, [r3, #1]
    8636:	466a      	mov	r2, sp
    8638:	8b12      	ldrh	r2, [r2, #24]
    863a:	1830      	adds	r0, r6, r0
    863c:	819a      	strh	r2, [r3, #12]
    863e:	466a      	mov	r2, sp
    8640:	8b92      	ldrh	r2, [r2, #28]
    8642:	0029      	movs	r1, r5
    8644:	81da      	strh	r2, [r3, #14]
    8646:	466a      	mov	r2, sp
    8648:	8c12      	ldrh	r2, [r2, #32]
    864a:	821a      	strh	r2, [r3, #16]
    864c:	2206      	movs	r2, #6
    864e:	4b0a      	ldr	r3, [pc, #40]	; (8678 <gapc_con_req_ind+0xdc>)
    8650:	4798      	blx	r3
    8652:	2312      	movs	r3, #18
    8654:	2100      	movs	r1, #0
    8656:	435f      	muls	r7, r3
    8658:	19f6      	adds	r6, r6, r7
    865a:	8973      	ldrh	r3, [r6, #10]
    865c:	aa0a      	add	r2, sp, #40	; 0x28
    865e:	9302      	str	r3, [sp, #8]
    8660:	9101      	str	r1, [sp, #4]
    8662:	9100      	str	r1, [sp, #0]
    8664:	000b      	movs	r3, r1
    8666:	0010      	movs	r0, r2
    8668:	4c06      	ldr	r4, [pc, #24]	; (8684 <gapc_con_req_ind+0xe8>)
    866a:	47a0      	blx	r4
    866c:	b00f      	add	sp, #60	; 0x3c
    866e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8670:	0000a309 	.word	0x0000a309
    8674:	200032bc 	.word	0x200032bc
    8678:	0000a2f7 	.word	0x0000a2f7
    867c:	000083e1 	.word	0x000083e1
    8680:	2000322c 	.word	0x2000322c
    8684:	000084e1 	.word	0x000084e1

00008688 <gapc_disconnect_cmd_handler>:
    8688:	b510      	push	{r4, lr}
    868a:	2400      	movs	r4, #0
    868c:	2205      	movs	r2, #5
    868e:	4b0d      	ldr	r3, [pc, #52]	; (86c4 <gapc_disconnect_cmd_handler+0x3c>)
    8690:	609c      	str	r4, [r3, #8]
    8692:	60dc      	str	r4, [r3, #12]
    8694:	4b0c      	ldr	r3, [pc, #48]	; (86c8 <gapc_disconnect_cmd_handler+0x40>)
    8696:	681b      	ldr	r3, [r3, #0]
    8698:	701a      	strb	r2, [r3, #0]
    869a:	3a01      	subs	r2, #1
    869c:	705a      	strb	r2, [r3, #1]
    869e:	320a      	adds	r2, #10
    86a0:	709a      	strb	r2, [r3, #2]
    86a2:	70da      	strb	r2, [r3, #3]
    86a4:	3202      	adds	r2, #2
    86a6:	715a      	strb	r2, [r3, #5]
    86a8:	3a0f      	subs	r2, #15
    86aa:	725a      	strb	r2, [r3, #9]
    86ac:	3201      	adds	r2, #1
    86ae:	7119      	strb	r1, [r3, #4]
    86b0:	719c      	strb	r4, [r3, #6]
    86b2:	721c      	strb	r4, [r3, #8]
    86b4:	7298      	strb	r0, [r3, #10]
    86b6:	71da      	strb	r2, [r3, #7]
    86b8:	210b      	movs	r1, #11
    86ba:	0018      	movs	r0, r3
    86bc:	4b03      	ldr	r3, [pc, #12]	; (86cc <gapc_disconnect_cmd_handler+0x44>)
    86be:	4798      	blx	r3
    86c0:	0020      	movs	r0, r4
    86c2:	bd10      	pop	{r4, pc}
    86c4:	2000321c 	.word	0x2000321c
    86c8:	0000c4d0 	.word	0x0000c4d0
    86cc:	00007859 	.word	0x00007859

000086d0 <gapc_disconnect_ind>:
    86d0:	b510      	push	{r4, lr}
    86d2:	0004      	movs	r4, r0
    86d4:	7840      	ldrb	r0, [r0, #1]
    86d6:	7823      	ldrb	r3, [r4, #0]
    86d8:	0200      	lsls	r0, r0, #8
    86da:	4318      	orrs	r0, r3
    86dc:	8008      	strh	r0, [r1, #0]
    86de:	78a3      	ldrb	r3, [r4, #2]
    86e0:	000a      	movs	r2, r1
    86e2:	70cb      	strb	r3, [r1, #3]
    86e4:	2100      	movs	r1, #0
    86e6:	4b06      	ldr	r3, [pc, #24]	; (8700 <gapc_disconnect_ind+0x30>)
    86e8:	7091      	strb	r1, [r2, #2]
    86ea:	4798      	blx	r3
    86ec:	2807      	cmp	r0, #7
    86ee:	d806      	bhi.n	86fe <gapc_disconnect_ind+0x2e>
    86f0:	2312      	movs	r3, #18
    86f2:	4343      	muls	r3, r0
    86f4:	4803      	ldr	r0, [pc, #12]	; (8704 <gapc_disconnect_ind+0x34>)
    86f6:	18c0      	adds	r0, r0, r3
    86f8:	2301      	movs	r3, #1
    86fa:	425b      	negs	r3, r3
    86fc:	8143      	strh	r3, [r0, #10]
    86fe:	bd10      	pop	{r4, pc}
    8700:	000083a5 	.word	0x000083a5
    8704:	2000322c 	.word	0x2000322c

00008708 <gapc_bond_cmd_handler>:
    8708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    870a:	2400      	movs	r4, #0
    870c:	4684      	mov	ip, r0
    870e:	a808      	add	r0, sp, #32
    8710:	7807      	ldrb	r7, [r0, #0]
    8712:	a809      	add	r0, sp, #36	; 0x24
    8714:	7806      	ldrb	r6, [r0, #0]
    8716:	a80a      	add	r0, sp, #40	; 0x28
    8718:	7800      	ldrb	r0, [r0, #0]
    871a:	2505      	movs	r5, #5
    871c:	9000      	str	r0, [sp, #0]
    871e:	a80b      	add	r0, sp, #44	; 0x2c
    8720:	7800      	ldrb	r0, [r0, #0]
    8722:	9001      	str	r0, [sp, #4]
    8724:	4811      	ldr	r0, [pc, #68]	; (876c <gapc_bond_cmd_handler+0x64>)
    8726:	6084      	str	r4, [r0, #8]
    8728:	60c4      	str	r4, [r0, #12]
    872a:	4811      	ldr	r0, [pc, #68]	; (8770 <gapc_bond_cmd_handler+0x68>)
    872c:	6800      	ldr	r0, [r0, #0]
    872e:	7303      	strb	r3, [r0, #12]
    8730:	466b      	mov	r3, sp
    8732:	781b      	ldrb	r3, [r3, #0]
    8734:	7005      	strb	r5, [r0, #0]
    8736:	73c3      	strb	r3, [r0, #15]
    8738:	350d      	adds	r5, #13
    873a:	466b      	mov	r3, sp
    873c:	7045      	strb	r5, [r0, #1]
    873e:	3d04      	subs	r5, #4
    8740:	7085      	strb	r5, [r0, #2]
    8742:	70c5      	strb	r5, [r0, #3]
    8744:	4665      	mov	r5, ip
    8746:	791b      	ldrb	r3, [r3, #4]
    8748:	7105      	strb	r5, [r0, #4]
    874a:	7403      	strb	r3, [r0, #16]
    874c:	2510      	movs	r5, #16
    874e:	2308      	movs	r3, #8
    8750:	7184      	strb	r4, [r0, #6]
    8752:	7204      	strb	r4, [r0, #8]
    8754:	340a      	adds	r4, #10
    8756:	7145      	strb	r5, [r0, #5]
    8758:	7347      	strb	r7, [r0, #13]
    875a:	7386      	strb	r6, [r0, #14]
    875c:	7244      	strb	r4, [r0, #9]
    875e:	7281      	strb	r1, [r0, #10]
    8760:	72c2      	strb	r2, [r0, #11]
    8762:	71c3      	strb	r3, [r0, #7]
    8764:	2111      	movs	r1, #17
    8766:	4b03      	ldr	r3, [pc, #12]	; (8774 <gapc_bond_cmd_handler+0x6c>)
    8768:	4798      	blx	r3
    876a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    876c:	2000321c 	.word	0x2000321c
    8770:	0000c4d0 	.word	0x0000c4d0
    8774:	00007859 	.word	0x00007859

00008778 <gapc_bond_ind>:
    8778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    877a:	0003      	movs	r3, r0
    877c:	7808      	ldrb	r0, [r1, #0]
    877e:	000c      	movs	r4, r1
    8780:	3802      	subs	r0, #2
    8782:	0015      	movs	r5, r2
    8784:	2805      	cmp	r0, #5
    8786:	d841      	bhi.n	880c <gapc_bond_ind+0x94>
    8788:	f001 fbd8 	bl	9f3c <__gnu_thumb1_case_uqi>
    878c:	30400311 	.word	0x30400311
    8790:	4942      	.short	0x4942
    8792:	200a      	movs	r0, #10
    8794:	2a00      	cmp	r2, #0
    8796:	d009      	beq.n	87ac <gapc_bond_ind+0x34>
    8798:	0a1b      	lsrs	r3, r3, #8
    879a:	8053      	strh	r3, [r2, #2]
    879c:	788b      	ldrb	r3, [r1, #2]
    879e:	2100      	movs	r1, #0
    87a0:	7113      	strb	r3, [r2, #4]
    87a2:	2246      	movs	r2, #70	; 0x46
    87a4:	4828      	ldr	r0, [pc, #160]	; (8848 <gapc_bond_ind+0xd0>)
    87a6:	4b29      	ldr	r3, [pc, #164]	; (884c <gapc_bond_ind+0xd4>)
    87a8:	4798      	blx	r3
    87aa:	200a      	movs	r0, #10
    87ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    87ae:	200a      	movs	r0, #10
    87b0:	2a00      	cmp	r2, #0
    87b2:	d0fb      	beq.n	87ac <gapc_bond_ind+0x34>
    87b4:	4c24      	ldr	r4, [pc, #144]	; (8848 <gapc_bond_ind+0xd0>)
    87b6:	0a1b      	lsrs	r3, r3, #8
    87b8:	8053      	strh	r3, [r2, #2]
    87ba:	788b      	ldrb	r3, [r1, #2]
    87bc:	2700      	movs	r7, #0
    87be:	0010      	movs	r0, r2
    87c0:	0021      	movs	r1, r4
    87c2:	7013      	strb	r3, [r2, #0]
    87c4:	4e22      	ldr	r6, [pc, #136]	; (8850 <gapc_bond_ind+0xd8>)
    87c6:	7117      	strb	r7, [r2, #4]
    87c8:	312e      	adds	r1, #46	; 0x2e
    87ca:	2217      	movs	r2, #23
    87cc:	3032      	adds	r0, #50	; 0x32
    87ce:	47b0      	blx	r6
    87d0:	0028      	movs	r0, r5
    87d2:	0021      	movs	r1, r4
    87d4:	2210      	movs	r2, #16
    87d6:	311e      	adds	r1, #30
    87d8:	3022      	adds	r0, #34	; 0x22
    87da:	47b0      	blx	r6
    87dc:	1ca1      	adds	r1, r4, #2
    87de:	221c      	movs	r2, #28
    87e0:	1da8      	adds	r0, r5, #6
    87e2:	47b0      	blx	r6
    87e4:	2246      	movs	r2, #70	; 0x46
    87e6:	0039      	movs	r1, r7
    87e8:	0020      	movs	r0, r4
    87ea:	e7dc      	b.n	87a6 <gapc_bond_ind+0x2e>
    87ec:	4d16      	ldr	r5, [pc, #88]	; (8848 <gapc_bond_ind+0xd0>)
    87ee:	3102      	adds	r1, #2
    87f0:	0028      	movs	r0, r5
    87f2:	2210      	movs	r2, #16
    87f4:	4e16      	ldr	r6, [pc, #88]	; (8850 <gapc_bond_ind+0xd8>)
    87f6:	302e      	adds	r0, #46	; 0x2e
    87f8:	47b0      	blx	r6
    87fa:	0028      	movs	r0, r5
    87fc:	0021      	movs	r1, r4
    87fe:	303f      	adds	r0, #63	; 0x3f
    8800:	3112      	adds	r1, #18
    8802:	2206      	movs	r2, #6
    8804:	47b0      	blx	r6
    8806:	7e23      	ldrb	r3, [r4, #24]
    8808:	353e      	adds	r5, #62	; 0x3e
    880a:	702b      	strb	r3, [r5, #0]
    880c:	2000      	movs	r0, #0
    880e:	e7cd      	b.n	87ac <gapc_bond_ind+0x34>
    8810:	480d      	ldr	r0, [pc, #52]	; (8848 <gapc_bond_ind+0xd0>)
    8812:	3102      	adds	r1, #2
    8814:	2210      	movs	r2, #16
    8816:	4b0e      	ldr	r3, [pc, #56]	; (8850 <gapc_bond_ind+0xd8>)
    8818:	301e      	adds	r0, #30
    881a:	4798      	blx	r3
    881c:	e7f6      	b.n	880c <gapc_bond_ind+0x94>
    881e:	4d0a      	ldr	r5, [pc, #40]	; (8848 <gapc_bond_ind+0xd0>)
    8820:	3102      	adds	r1, #2
    8822:	2210      	movs	r2, #16
    8824:	4e0a      	ldr	r6, [pc, #40]	; (8850 <gapc_bond_ind+0xd8>)
    8826:	1ca8      	adds	r0, r5, #2
    8828:	47b0      	blx	r6
    882a:	0028      	movs	r0, r5
    882c:	0021      	movs	r1, r4
    882e:	7ce2      	ldrb	r2, [r4, #19]
    8830:	7ca3      	ldrb	r3, [r4, #18]
    8832:	0212      	lsls	r2, r2, #8
    8834:	4313      	orrs	r3, r2
    8836:	3014      	adds	r0, #20
    8838:	3114      	adds	r1, #20
    883a:	2208      	movs	r2, #8
    883c:	826b      	strh	r3, [r5, #18]
    883e:	47b0      	blx	r6
    8840:	7f23      	ldrb	r3, [r4, #28]
    8842:	772b      	strb	r3, [r5, #28]
    8844:	e7e2      	b.n	880c <gapc_bond_ind+0x94>
    8846:	46c0      	nop			; (mov r8, r8)
    8848:	20002456 	.word	0x20002456
    884c:	0000a309 	.word	0x0000a309
    8850:	0000a2f7 	.word	0x0000a2f7

00008854 <gapc_bond_req_ind>:
    8854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8856:	780f      	ldrb	r7, [r1, #0]
    8858:	0003      	movs	r3, r0
    885a:	7849      	ldrb	r1, [r1, #1]
    885c:	2f07      	cmp	r7, #7
    885e:	d85c      	bhi.n	891a <gapc_bond_req_ind+0xc6>
    8860:	0038      	movs	r0, r7
    8862:	f001 fb6b 	bl	9f3c <__gnu_thumb1_case_uqi>
    8866:	5a04      	.short	0x5a04
    8868:	5a0b5a5a 	.word	0x5a0b5a5a
    886c:	2020      	.short	0x2020
    886e:	200b      	movs	r0, #11
    8870:	2a00      	cmp	r2, #0
    8872:	d002      	beq.n	887a <gapc_bond_req_ind+0x26>
    8874:	0a1b      	lsrs	r3, r3, #8
    8876:	8013      	strh	r3, [r2, #0]
    8878:	7091      	strb	r1, [r2, #2]
    887a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    887c:	2a00      	cmp	r2, #0
    887e:	d101      	bne.n	8884 <gapc_bond_req_ind+0x30>
    8880:	200d      	movs	r0, #13
    8882:	e7fa      	b.n	887a <gapc_bond_req_ind+0x26>
    8884:	0a1b      	lsrs	r3, r3, #8
    8886:	8013      	strh	r3, [r2, #0]
    8888:	2900      	cmp	r1, #0
    888a:	d102      	bne.n	8892 <gapc_bond_req_ind+0x3e>
    888c:	2301      	movs	r3, #1
    888e:	7093      	strb	r3, [r2, #2]
    8890:	e7f6      	b.n	8880 <gapc_bond_req_ind+0x2c>
    8892:	2300      	movs	r3, #0
    8894:	7093      	strb	r3, [r2, #2]
    8896:	2902      	cmp	r1, #2
    8898:	d101      	bne.n	889e <gapc_bond_req_ind+0x4a>
    889a:	70d3      	strb	r3, [r2, #3]
    889c:	e7f0      	b.n	8880 <gapc_bond_req_ind+0x2c>
    889e:	2901      	cmp	r1, #1
    88a0:	d1ee      	bne.n	8880 <gapc_bond_req_ind+0x2c>
    88a2:	70d1      	strb	r1, [r2, #3]
    88a4:	e7ec      	b.n	8880 <gapc_bond_req_ind+0x2c>
    88a6:	2100      	movs	r1, #0
    88a8:	4a1f      	ldr	r2, [pc, #124]	; (8928 <gapc_bond_req_ind+0xd4>)
    88aa:	0a1b      	lsrs	r3, r3, #8
    88ac:	6091      	str	r1, [r2, #8]
    88ae:	60d1      	str	r1, [r2, #12]
    88b0:	4a1e      	ldr	r2, [pc, #120]	; (892c <gapc_bond_req_ind+0xd8>)
    88b2:	4d1f      	ldr	r5, [pc, #124]	; (8930 <gapc_bond_req_ind+0xdc>)
    88b4:	6814      	ldr	r4, [r2, #0]
    88b6:	2205      	movs	r2, #5
    88b8:	7123      	strb	r3, [r4, #4]
    88ba:	0020      	movs	r0, r4
    88bc:	2301      	movs	r3, #1
    88be:	7022      	strb	r2, [r4, #0]
    88c0:	320f      	adds	r2, #15
    88c2:	7062      	strb	r2, [r4, #1]
    88c4:	3a06      	subs	r2, #6
    88c6:	70a2      	strb	r2, [r4, #2]
    88c8:	70e2      	strb	r2, [r4, #3]
    88ca:	3202      	adds	r2, #2
    88cc:	71a1      	strb	r1, [r4, #6]
    88ce:	71e1      	strb	r1, [r4, #7]
    88d0:	7221      	strb	r1, [r4, #8]
    88d2:	7162      	strb	r2, [r4, #5]
    88d4:	7267      	strb	r7, [r4, #9]
    88d6:	72a3      	strb	r3, [r4, #10]
    88d8:	300b      	adds	r0, #11
    88da:	4e16      	ldr	r6, [pc, #88]	; (8934 <gapc_bond_req_ind+0xe0>)
    88dc:	0029      	movs	r1, r5
    88de:	2f07      	cmp	r7, #7
    88e0:	d11d      	bne.n	891e <gapc_bond_req_ind+0xca>
    88e2:	317e      	adds	r1, #126	; 0x7e
    88e4:	47b0      	blx	r6
    88e6:	002b      	movs	r3, r5
    88e8:	0029      	movs	r1, r5
    88ea:	0020      	movs	r0, r4
    88ec:	338e      	adds	r3, #142	; 0x8e
    88ee:	881a      	ldrh	r2, [r3, #0]
    88f0:	3190      	adds	r1, #144	; 0x90
    88f2:	76e2      	strb	r2, [r4, #27]
    88f4:	881b      	ldrh	r3, [r3, #0]
    88f6:	2208      	movs	r2, #8
    88f8:	0a1b      	lsrs	r3, r3, #8
    88fa:	7723      	strb	r3, [r4, #28]
    88fc:	301d      	adds	r0, #29
    88fe:	47b0      	blx	r6
    8900:	2126      	movs	r1, #38	; 0x26
    8902:	3598      	adds	r5, #152	; 0x98
    8904:	782a      	ldrb	r2, [r5, #0]
    8906:	1da3      	adds	r3, r4, #6
    8908:	77da      	strb	r2, [r3, #31]
    890a:	000b      	movs	r3, r1
    890c:	2500      	movs	r5, #0
    890e:	3b09      	subs	r3, #9
    8910:	71e3      	strb	r3, [r4, #7]
    8912:	7225      	strb	r5, [r4, #8]
    8914:	0020      	movs	r0, r4
    8916:	4b08      	ldr	r3, [pc, #32]	; (8938 <gapc_bond_req_ind+0xe4>)
    8918:	4798      	blx	r3
    891a:	2000      	movs	r0, #0
    891c:	e7ad      	b.n	887a <gapc_bond_req_ind+0x26>
    891e:	319a      	adds	r1, #154	; 0x9a
    8920:	47b0      	blx	r6
    8922:	211b      	movs	r1, #27
    8924:	e7f1      	b.n	890a <gapc_bond_req_ind+0xb6>
    8926:	46c0      	nop			; (mov r8, r8)
    8928:	2000321c 	.word	0x2000321c
    892c:	0000c4d0 	.word	0x0000c4d0
    8930:	200032bc 	.word	0x200032bc
    8934:	0000a2f7 	.word	0x0000a2f7
    8938:	00007859 	.word	0x00007859

0000893c <gapc_bond_cfm_handler_pair_resp>:
    893c:	b5f0      	push	{r4, r5, r6, r7, lr}
    893e:	2400      	movs	r4, #0
    8940:	b085      	sub	sp, #20
    8942:	0007      	movs	r7, r0
    8944:	a80a      	add	r0, sp, #40	; 0x28
    8946:	7806      	ldrb	r6, [r0, #0]
    8948:	a80b      	add	r0, sp, #44	; 0x2c
    894a:	7800      	ldrb	r0, [r0, #0]
    894c:	2505      	movs	r5, #5
    894e:	9001      	str	r0, [sp, #4]
    8950:	a80c      	add	r0, sp, #48	; 0x30
    8952:	7800      	ldrb	r0, [r0, #0]
    8954:	9002      	str	r0, [sp, #8]
    8956:	a80d      	add	r0, sp, #52	; 0x34
    8958:	7800      	ldrb	r0, [r0, #0]
    895a:	9003      	str	r0, [sp, #12]
    895c:	a80e      	add	r0, sp, #56	; 0x38
    895e:	8800      	ldrh	r0, [r0, #0]
    8960:	4684      	mov	ip, r0
    8962:	4814      	ldr	r0, [pc, #80]	; (89b4 <gapc_bond_cfm_handler_pair_resp+0x78>)
    8964:	6084      	str	r4, [r0, #8]
    8966:	60c4      	str	r4, [r0, #12]
    8968:	4813      	ldr	r0, [pc, #76]	; (89b8 <gapc_bond_cfm_handler_pair_resp+0x7c>)
    896a:	6800      	ldr	r0, [r0, #0]
    896c:	7343      	strb	r3, [r0, #13]
    896e:	466b      	mov	r3, sp
    8970:	791b      	ldrb	r3, [r3, #4]
    8972:	7005      	strb	r5, [r0, #0]
    8974:	73c3      	strb	r3, [r0, #15]
    8976:	350f      	adds	r5, #15
    8978:	466b      	mov	r3, sp
    897a:	7045      	strb	r5, [r0, #1]
    897c:	3d06      	subs	r5, #6
    897e:	7085      	strb	r5, [r0, #2]
    8980:	70c5      	strb	r5, [r0, #3]
    8982:	4665      	mov	r5, ip
    8984:	7a1b      	ldrb	r3, [r3, #8]
    8986:	7105      	strb	r5, [r0, #4]
    8988:	7403      	strb	r3, [r0, #16]
    898a:	2510      	movs	r5, #16
    898c:	466b      	mov	r3, sp
    898e:	7184      	strb	r4, [r0, #6]
    8990:	7204      	strb	r4, [r0, #8]
    8992:	3401      	adds	r4, #1
    8994:	7145      	strb	r5, [r0, #5]
    8996:	7244      	strb	r4, [r0, #9]
    8998:	7287      	strb	r7, [r0, #10]
    899a:	72c1      	strb	r1, [r0, #11]
    899c:	7302      	strb	r2, [r0, #12]
    899e:	7386      	strb	r6, [r0, #14]
    89a0:	7b1b      	ldrb	r3, [r3, #12]
    89a2:	2112      	movs	r1, #18
    89a4:	7443      	strb	r3, [r0, #17]
    89a6:	2309      	movs	r3, #9
    89a8:	71c3      	strb	r3, [r0, #7]
    89aa:	4b04      	ldr	r3, [pc, #16]	; (89bc <gapc_bond_cfm_handler_pair_resp+0x80>)
    89ac:	4798      	blx	r3
    89ae:	b005      	add	sp, #20
    89b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    89b2:	46c0      	nop			; (mov r8, r8)
    89b4:	2000321c 	.word	0x2000321c
    89b8:	0000c4d0 	.word	0x0000c4d0
    89bc:	00007859 	.word	0x00007859

000089c0 <gapc_bond_cfm_handler_key_exch>:
    89c0:	b570      	push	{r4, r5, r6, lr}
    89c2:	2500      	movs	r5, #0
    89c4:	000e      	movs	r6, r1
    89c6:	0011      	movs	r1, r2
    89c8:	4a0f      	ldr	r2, [pc, #60]	; (8a08 <gapc_bond_cfm_handler_key_exch+0x48>)
    89ca:	6095      	str	r5, [r2, #8]
    89cc:	60d5      	str	r5, [r2, #12]
    89ce:	4a0f      	ldr	r2, [pc, #60]	; (8a0c <gapc_bond_cfm_handler_key_exch+0x4c>)
    89d0:	6814      	ldr	r4, [r2, #0]
    89d2:	2205      	movs	r2, #5
    89d4:	7260      	strb	r0, [r4, #9]
    89d6:	0020      	movs	r0, r4
    89d8:	7022      	strb	r2, [r4, #0]
    89da:	320f      	adds	r2, #15
    89dc:	7062      	strb	r2, [r4, #1]
    89de:	3a06      	subs	r2, #6
    89e0:	70a2      	strb	r2, [r4, #2]
    89e2:	70e2      	strb	r2, [r4, #3]
    89e4:	3202      	adds	r2, #2
    89e6:	7123      	strb	r3, [r4, #4]
    89e8:	7162      	strb	r2, [r4, #5]
    89ea:	71a5      	strb	r5, [r4, #6]
    89ec:	71e5      	strb	r5, [r4, #7]
    89ee:	7225      	strb	r5, [r4, #8]
    89f0:	72a6      	strb	r6, [r4, #10]
    89f2:	4b07      	ldr	r3, [pc, #28]	; (8a10 <gapc_bond_cfm_handler_key_exch+0x50>)
    89f4:	300b      	adds	r0, #11
    89f6:	4798      	blx	r3
    89f8:	2312      	movs	r3, #18
    89fa:	211b      	movs	r1, #27
    89fc:	71e3      	strb	r3, [r4, #7]
    89fe:	0020      	movs	r0, r4
    8a00:	4b04      	ldr	r3, [pc, #16]	; (8a14 <gapc_bond_cfm_handler_key_exch+0x54>)
    8a02:	4798      	blx	r3
    8a04:	bd70      	pop	{r4, r5, r6, pc}
    8a06:	46c0      	nop			; (mov r8, r8)
    8a08:	2000321c 	.word	0x2000321c
    8a0c:	0000c4d0 	.word	0x0000c4d0
    8a10:	0000a2f7 	.word	0x0000a2f7
    8a14:	00007859 	.word	0x00007859

00008a18 <gapc_security_cmd_handler>:
    8a18:	2200      	movs	r2, #0
    8a1a:	4b0e      	ldr	r3, [pc, #56]	; (8a54 <gapc_security_cmd_handler+0x3c>)
    8a1c:	b510      	push	{r4, lr}
    8a1e:	609a      	str	r2, [r3, #8]
    8a20:	60da      	str	r2, [r3, #12]
    8a22:	4b0d      	ldr	r3, [pc, #52]	; (8a58 <gapc_security_cmd_handler+0x40>)
    8a24:	2405      	movs	r4, #5
    8a26:	681b      	ldr	r3, [r3, #0]
    8a28:	7118      	strb	r0, [r3, #4]
    8a2a:	2010      	movs	r0, #16
    8a2c:	701c      	strb	r4, [r3, #0]
    8a2e:	719a      	strb	r2, [r3, #6]
    8a30:	721a      	strb	r2, [r3, #8]
    8a32:	3415      	adds	r4, #21
    8a34:	320c      	adds	r2, #12
    8a36:	705c      	strb	r4, [r3, #1]
    8a38:	725a      	strb	r2, [r3, #9]
    8a3a:	3c0c      	subs	r4, #12
    8a3c:	3a0a      	subs	r2, #10
    8a3e:	709c      	strb	r4, [r3, #2]
    8a40:	70dc      	strb	r4, [r3, #3]
    8a42:	7158      	strb	r0, [r3, #5]
    8a44:	7299      	strb	r1, [r3, #10]
    8a46:	71da      	strb	r2, [r3, #7]
    8a48:	210b      	movs	r1, #11
    8a4a:	0018      	movs	r0, r3
    8a4c:	4b03      	ldr	r3, [pc, #12]	; (8a5c <gapc_security_cmd_handler+0x44>)
    8a4e:	4798      	blx	r3
    8a50:	bd10      	pop	{r4, pc}
    8a52:	46c0      	nop			; (mov r8, r8)
    8a54:	2000321c 	.word	0x2000321c
    8a58:	0000c4d0 	.word	0x0000c4d0
    8a5c:	00007859 	.word	0x00007859

00008a60 <gapc_encrypt_cmd_handler>:
    8a60:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a62:	2610      	movs	r6, #16
    8a64:	2500      	movs	r5, #0
    8a66:	0007      	movs	r7, r0
    8a68:	b08d      	sub	sp, #52	; 0x34
    8a6a:	9306      	str	r3, [sp, #24]
    8a6c:	ab12      	add	r3, sp, #72	; 0x48
    8a6e:	781b      	ldrb	r3, [r3, #0]
    8a70:	9105      	str	r1, [sp, #20]
    8a72:	9307      	str	r3, [sp, #28]
    8a74:	ab13      	add	r3, sp, #76	; 0x4c
    8a76:	781c      	ldrb	r4, [r3, #0]
    8a78:	9204      	str	r2, [sp, #16]
    8a7a:	2100      	movs	r1, #0
    8a7c:	0032      	movs	r2, r6
    8a7e:	a808      	add	r0, sp, #32
    8a80:	4b1d      	ldr	r3, [pc, #116]	; (8af8 <gapc_encrypt_cmd_handler+0x98>)
    8a82:	4798      	blx	r3
    8a84:	aa08      	add	r2, sp, #32
    8a86:	9501      	str	r5, [sp, #4]
    8a88:	9400      	str	r4, [sp, #0]
    8a8a:	002b      	movs	r3, r5
    8a8c:	0029      	movs	r1, r5
    8a8e:	9702      	str	r7, [sp, #8]
    8a90:	0010      	movs	r0, r2
    8a92:	4c1a      	ldr	r4, [pc, #104]	; (8afc <gapc_encrypt_cmd_handler+0x9c>)
    8a94:	47a0      	blx	r4
    8a96:	4b1a      	ldr	r3, [pc, #104]	; (8b00 <gapc_encrypt_cmd_handler+0xa0>)
    8a98:	0032      	movs	r2, r6
    8a9a:	609d      	str	r5, [r3, #8]
    8a9c:	60dd      	str	r5, [r3, #12]
    8a9e:	4b19      	ldr	r3, [pc, #100]	; (8b04 <gapc_encrypt_cmd_handler+0xa4>)
    8aa0:	9905      	ldr	r1, [sp, #20]
    8aa2:	681c      	ldr	r4, [r3, #0]
    8aa4:	2305      	movs	r3, #5
    8aa6:	7023      	strb	r3, [r4, #0]
    8aa8:	3311      	adds	r3, #17
    8aaa:	7063      	strb	r3, [r4, #1]
    8aac:	3b08      	subs	r3, #8
    8aae:	70a3      	strb	r3, [r4, #2]
    8ab0:	70e3      	strb	r3, [r4, #3]
    8ab2:	3b03      	subs	r3, #3
    8ab4:	71a5      	strb	r5, [r4, #6]
    8ab6:	71e5      	strb	r5, [r4, #7]
    8ab8:	7225      	strb	r5, [r4, #8]
    8aba:	7263      	strb	r3, [r4, #9]
    8abc:	72a5      	strb	r5, [r4, #10]
    8abe:	18e0      	adds	r0, r4, r3
    8ac0:	4d11      	ldr	r5, [pc, #68]	; (8b08 <gapc_encrypt_cmd_handler+0xa8>)
    8ac2:	7127      	strb	r7, [r4, #4]
    8ac4:	7166      	strb	r6, [r4, #5]
    8ac6:	47a8      	blx	r5
    8ac8:	466b      	mov	r3, sp
    8aca:	0020      	movs	r0, r4
    8acc:	7c1b      	ldrb	r3, [r3, #16]
    8ace:	9906      	ldr	r1, [sp, #24]
    8ad0:	76e3      	strb	r3, [r4, #27]
    8ad2:	9b04      	ldr	r3, [sp, #16]
    8ad4:	2208      	movs	r2, #8
    8ad6:	0a1b      	lsrs	r3, r3, #8
    8ad8:	7723      	strb	r3, [r4, #28]
    8ada:	301d      	adds	r0, #29
    8adc:	47a8      	blx	r5
    8ade:	466a      	mov	r2, sp
    8ae0:	7f12      	ldrb	r2, [r2, #28]
    8ae2:	1da3      	adds	r3, r4, #6
    8ae4:	77da      	strb	r2, [r3, #31]
    8ae6:	231d      	movs	r3, #29
    8ae8:	2126      	movs	r1, #38	; 0x26
    8aea:	71e3      	strb	r3, [r4, #7]
    8aec:	0020      	movs	r0, r4
    8aee:	4b07      	ldr	r3, [pc, #28]	; (8b0c <gapc_encrypt_cmd_handler+0xac>)
    8af0:	4798      	blx	r3
    8af2:	b00d      	add	sp, #52	; 0x34
    8af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8af6:	46c0      	nop			; (mov r8, r8)
    8af8:	0000a309 	.word	0x0000a309
    8afc:	000084e1 	.word	0x000084e1
    8b00:	2000321c 	.word	0x2000321c
    8b04:	0000c4d0 	.word	0x0000c4d0
    8b08:	0000a2f7 	.word	0x0000a2f7
    8b0c:	00007859 	.word	0x00007859

00008b10 <gapc_encrypt_req_ind>:
    8b10:	b510      	push	{r4, lr}
    8b12:	0a00      	lsrs	r0, r0, #8
    8b14:	8010      	strh	r0, [r2, #0]
    8b16:	7848      	ldrb	r0, [r1, #1]
    8b18:	780b      	ldrb	r3, [r1, #0]
    8b1a:	0200      	lsls	r0, r0, #8
    8b1c:	4303      	orrs	r3, r0
    8b1e:	8053      	strh	r3, [r2, #2]
    8b20:	1d10      	adds	r0, r2, #4
    8b22:	3102      	adds	r1, #2
    8b24:	2208      	movs	r2, #8
    8b26:	4b01      	ldr	r3, [pc, #4]	; (8b2c <gapc_encrypt_req_ind+0x1c>)
    8b28:	4798      	blx	r3
    8b2a:	bd10      	pop	{r4, pc}
    8b2c:	0000a2f7 	.word	0x0000a2f7

00008b30 <gapc_encrypt_cfm_handler>:
    8b30:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b32:	2610      	movs	r6, #16
    8b34:	2500      	movs	r5, #0
    8b36:	0007      	movs	r7, r0
    8b38:	000c      	movs	r4, r1
    8b3a:	b08d      	sub	sp, #52	; 0x34
    8b3c:	9306      	str	r3, [sp, #24]
    8b3e:	ab12      	add	r3, sp, #72	; 0x48
    8b40:	781b      	ldrb	r3, [r3, #0]
    8b42:	9205      	str	r2, [sp, #20]
    8b44:	9307      	str	r3, [sp, #28]
    8b46:	0032      	movs	r2, r6
    8b48:	2100      	movs	r1, #0
    8b4a:	a808      	add	r0, sp, #32
    8b4c:	4b17      	ldr	r3, [pc, #92]	; (8bac <gapc_encrypt_cfm_handler+0x7c>)
    8b4e:	4798      	blx	r3
    8b50:	aa08      	add	r2, sp, #32
    8b52:	9400      	str	r4, [sp, #0]
    8b54:	002b      	movs	r3, r5
    8b56:	0029      	movs	r1, r5
    8b58:	9702      	str	r7, [sp, #8]
    8b5a:	9501      	str	r5, [sp, #4]
    8b5c:	0010      	movs	r0, r2
    8b5e:	4c14      	ldr	r4, [pc, #80]	; (8bb0 <gapc_encrypt_cfm_handler+0x80>)
    8b60:	47a0      	blx	r4
    8b62:	4b14      	ldr	r3, [pc, #80]	; (8bb4 <gapc_encrypt_cfm_handler+0x84>)
    8b64:	0032      	movs	r2, r6
    8b66:	609d      	str	r5, [r3, #8]
    8b68:	60dd      	str	r5, [r3, #12]
    8b6a:	4b13      	ldr	r3, [pc, #76]	; (8bb8 <gapc_encrypt_cfm_handler+0x88>)
    8b6c:	9906      	ldr	r1, [sp, #24]
    8b6e:	681c      	ldr	r4, [r3, #0]
    8b70:	2305      	movs	r3, #5
    8b72:	7023      	strb	r3, [r4, #0]
    8b74:	3313      	adds	r3, #19
    8b76:	7063      	strb	r3, [r4, #1]
    8b78:	3b0a      	subs	r3, #10
    8b7a:	70a3      	strb	r3, [r4, #2]
    8b7c:	70e3      	strb	r3, [r4, #3]
    8b7e:	466b      	mov	r3, sp
    8b80:	0020      	movs	r0, r4
    8b82:	7d1b      	ldrb	r3, [r3, #20]
    8b84:	7127      	strb	r7, [r4, #4]
    8b86:	7263      	strb	r3, [r4, #9]
    8b88:	7166      	strb	r6, [r4, #5]
    8b8a:	71a5      	strb	r5, [r4, #6]
    8b8c:	71e5      	strb	r5, [r4, #7]
    8b8e:	7225      	strb	r5, [r4, #8]
    8b90:	4b0a      	ldr	r3, [pc, #40]	; (8bbc <gapc_encrypt_cfm_handler+0x8c>)
    8b92:	300a      	adds	r0, #10
    8b94:	4798      	blx	r3
    8b96:	466b      	mov	r3, sp
    8b98:	7f1b      	ldrb	r3, [r3, #28]
    8b9a:	211b      	movs	r1, #27
    8b9c:	76a3      	strb	r3, [r4, #26]
    8b9e:	2312      	movs	r3, #18
    8ba0:	0020      	movs	r0, r4
    8ba2:	71e3      	strb	r3, [r4, #7]
    8ba4:	4b06      	ldr	r3, [pc, #24]	; (8bc0 <gapc_encrypt_cfm_handler+0x90>)
    8ba6:	4798      	blx	r3
    8ba8:	b00d      	add	sp, #52	; 0x34
    8baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8bac:	0000a309 	.word	0x0000a309
    8bb0:	000084e1 	.word	0x000084e1
    8bb4:	2000321c 	.word	0x2000321c
    8bb8:	0000c4d0 	.word	0x0000c4d0
    8bbc:	0000a2f7 	.word	0x0000a2f7
    8bc0:	00007859 	.word	0x00007859

00008bc4 <gapc_encrypt_ind>:
    8bc4:	780b      	ldrb	r3, [r1, #0]
    8bc6:	0a00      	lsrs	r0, r0, #8
    8bc8:	70d3      	strb	r3, [r2, #3]
    8bca:	2300      	movs	r3, #0
    8bcc:	8010      	strh	r0, [r2, #0]
    8bce:	7093      	strb	r3, [r2, #2]
    8bd0:	4770      	bx	lr
	...

00008bd4 <gapc_param_update_cfm_handler>:
    8bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8bd6:	2400      	movs	r4, #0
    8bd8:	000e      	movs	r6, r1
    8bda:	490f      	ldr	r1, [pc, #60]	; (8c18 <gapc_param_update_cfm_handler+0x44>)
    8bdc:	0005      	movs	r5, r0
    8bde:	60cc      	str	r4, [r1, #12]
    8be0:	608c      	str	r4, [r1, #8]
    8be2:	490e      	ldr	r1, [pc, #56]	; (8c1c <gapc_param_update_cfm_handler+0x48>)
    8be4:	2705      	movs	r7, #5
    8be6:	6808      	ldr	r0, [r1, #0]
    8be8:	2110      	movs	r1, #16
    8bea:	468c      	mov	ip, r1
    8bec:	7041      	strb	r1, [r0, #1]
    8bee:	7105      	strb	r5, [r0, #4]
    8bf0:	210e      	movs	r1, #14
    8bf2:	4665      	mov	r5, ip
    8bf4:	7282      	strb	r2, [r0, #10]
    8bf6:	7303      	strb	r3, [r0, #12]
    8bf8:	0a12      	lsrs	r2, r2, #8
    8bfa:	0a1b      	lsrs	r3, r3, #8
    8bfc:	7007      	strb	r7, [r0, #0]
    8bfe:	7145      	strb	r5, [r0, #5]
    8c00:	7246      	strb	r6, [r0, #9]
    8c02:	71c7      	strb	r7, [r0, #7]
    8c04:	7081      	strb	r1, [r0, #2]
    8c06:	70c1      	strb	r1, [r0, #3]
    8c08:	7184      	strb	r4, [r0, #6]
    8c0a:	7204      	strb	r4, [r0, #8]
    8c0c:	72c2      	strb	r2, [r0, #11]
    8c0e:	7343      	strb	r3, [r0, #13]
    8c10:	4b03      	ldr	r3, [pc, #12]	; (8c20 <gapc_param_update_cfm_handler+0x4c>)
    8c12:	4798      	blx	r3
    8c14:	0020      	movs	r0, r4
    8c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8c18:	2000321c 	.word	0x2000321c
    8c1c:	0000c4d0 	.word	0x0000c4d0
    8c20:	00007859 	.word	0x00007859

00008c24 <gapc_param_updated_ind>:
    8c24:	2300      	movs	r3, #0
    8c26:	0a00      	lsrs	r0, r0, #8
    8c28:	8010      	strh	r0, [r2, #0]
    8c2a:	7093      	strb	r3, [r2, #2]
    8c2c:	7848      	ldrb	r0, [r1, #1]
    8c2e:	780b      	ldrb	r3, [r1, #0]
    8c30:	0200      	lsls	r0, r0, #8
    8c32:	4303      	orrs	r3, r0
    8c34:	8093      	strh	r3, [r2, #4]
    8c36:	78c8      	ldrb	r0, [r1, #3]
    8c38:	788b      	ldrb	r3, [r1, #2]
    8c3a:	0200      	lsls	r0, r0, #8
    8c3c:	4303      	orrs	r3, r0
    8c3e:	80d3      	strh	r3, [r2, #6]
    8c40:	7948      	ldrb	r0, [r1, #5]
    8c42:	790b      	ldrb	r3, [r1, #4]
    8c44:	0200      	lsls	r0, r0, #8
    8c46:	4303      	orrs	r3, r0
    8c48:	8113      	strh	r3, [r2, #8]
    8c4a:	2008      	movs	r0, #8
    8c4c:	4770      	bx	lr

00008c4e <gapc_param_updated_req_ind>:
    8c4e:	0a00      	lsrs	r0, r0, #8
    8c50:	8010      	strh	r0, [r2, #0]
    8c52:	7848      	ldrb	r0, [r1, #1]
    8c54:	780b      	ldrb	r3, [r1, #0]
    8c56:	0200      	lsls	r0, r0, #8
    8c58:	4303      	orrs	r3, r0
    8c5a:	8053      	strh	r3, [r2, #2]
    8c5c:	78c8      	ldrb	r0, [r1, #3]
    8c5e:	788b      	ldrb	r3, [r1, #2]
    8c60:	0200      	lsls	r0, r0, #8
    8c62:	4303      	orrs	r3, r0
    8c64:	8093      	strh	r3, [r2, #4]
    8c66:	7948      	ldrb	r0, [r1, #5]
    8c68:	790b      	ldrb	r3, [r1, #4]
    8c6a:	0200      	lsls	r0, r0, #8
    8c6c:	4303      	orrs	r3, r0
    8c6e:	80d3      	strh	r3, [r2, #6]
    8c70:	79c8      	ldrb	r0, [r1, #7]
    8c72:	798b      	ldrb	r3, [r1, #6]
    8c74:	0200      	lsls	r0, r0, #8
    8c76:	4303      	orrs	r3, r0
    8c78:	8113      	strh	r3, [r2, #8]
    8c7a:	2009      	movs	r0, #9
    8c7c:	4770      	bx	lr
	...

00008c80 <gapc_dev_info_req_ind_handler>:
    8c80:	000b      	movs	r3, r1
    8c82:	b510      	push	{r4, lr}
    8c84:	0a01      	lsrs	r1, r0, #8
    8c86:	8011      	strh	r1, [r2, #0]
    8c88:	7818      	ldrb	r0, [r3, #0]
    8c8a:	7090      	strb	r0, [r2, #2]
    8c8c:	2800      	cmp	r0, #0
    8c8e:	d104      	bne.n	8c9a <gapc_dev_info_req_ind_handler+0x1a>
    8c90:	4b03      	ldr	r3, [pc, #12]	; (8ca0 <gapc_dev_info_req_ind_handler+0x20>)
    8c92:	33aa      	adds	r3, #170	; 0xaa
    8c94:	881b      	ldrh	r3, [r3, #0]
    8c96:	2b00      	cmp	r3, #0
    8c98:	d001      	beq.n	8c9e <gapc_dev_info_req_ind_handler+0x1e>
    8c9a:	4b02      	ldr	r3, [pc, #8]	; (8ca4 <gapc_dev_info_req_ind_handler+0x24>)
    8c9c:	4798      	blx	r3
    8c9e:	bd10      	pop	{r4, pc}
    8ca0:	200032bc 	.word	0x200032bc
    8ca4:	000082cd 	.word	0x000082cd

00008ca8 <gapc_sec_req_ind>:
    8ca8:	0a00      	lsrs	r0, r0, #8
    8caa:	8010      	strh	r0, [r2, #0]
    8cac:	780b      	ldrb	r3, [r1, #0]
    8cae:	2101      	movs	r1, #1
    8cb0:	0018      	movs	r0, r3
    8cb2:	089b      	lsrs	r3, r3, #2
    8cb4:	4008      	ands	r0, r1
    8cb6:	400b      	ands	r3, r1
    8cb8:	70d0      	strb	r0, [r2, #3]
    8cba:	7113      	strb	r3, [r2, #4]
    8cbc:	4770      	bx	lr

00008cbe <gapc_sign_counter_ind_handler>:
    8cbe:	0a00      	lsrs	r0, r0, #8
    8cc0:	8010      	strh	r0, [r2, #0]
    8cc2:	7848      	ldrb	r0, [r1, #1]
    8cc4:	780b      	ldrb	r3, [r1, #0]
    8cc6:	0200      	lsls	r0, r0, #8
    8cc8:	4318      	orrs	r0, r3
    8cca:	788b      	ldrb	r3, [r1, #2]
    8ccc:	041b      	lsls	r3, r3, #16
    8cce:	4318      	orrs	r0, r3
    8cd0:	78cb      	ldrb	r3, [r1, #3]
    8cd2:	061b      	lsls	r3, r3, #24
    8cd4:	4303      	orrs	r3, r0
    8cd6:	6053      	str	r3, [r2, #4]
    8cd8:	7948      	ldrb	r0, [r1, #5]
    8cda:	790b      	ldrb	r3, [r1, #4]
    8cdc:	0200      	lsls	r0, r0, #8
    8cde:	4318      	orrs	r0, r3
    8ce0:	798b      	ldrb	r3, [r1, #6]
    8ce2:	041b      	lsls	r3, r3, #16
    8ce4:	4318      	orrs	r0, r3
    8ce6:	79cb      	ldrb	r3, [r1, #7]
    8ce8:	061b      	lsls	r3, r3, #24
    8cea:	4303      	orrs	r3, r0
    8cec:	6093      	str	r3, [r2, #8]
    8cee:	2000      	movs	r0, #0
    8cf0:	4770      	bx	lr
	...

00008cf4 <gapc_peer_att_info_ind_handler>:
    8cf4:	b510      	push	{r4, lr}
    8cf6:	0014      	movs	r4, r2
    8cf8:	0a00      	lsrs	r0, r0, #8
    8cfa:	8010      	strh	r0, [r2, #0]
    8cfc:	780b      	ldrb	r3, [r1, #0]
    8cfe:	7093      	strb	r3, [r2, #2]
    8d00:	7888      	ldrb	r0, [r1, #2]
    8d02:	784a      	ldrb	r2, [r1, #1]
    8d04:	0200      	lsls	r0, r0, #8
    8d06:	4302      	orrs	r2, r0
    8d08:	80a2      	strh	r2, [r4, #4]
    8d0a:	2b01      	cmp	r3, #1
    8d0c:	d011      	beq.n	8d32 <gapc_peer_att_info_ind_handler+0x3e>
    8d0e:	2b00      	cmp	r3, #0
    8d10:	d002      	beq.n	8d18 <gapc_peer_att_info_ind_handler+0x24>
    8d12:	2b02      	cmp	r3, #2
    8d14:	d014      	beq.n	8d40 <gapc_peer_att_info_ind_handler+0x4c>
    8d16:	bd10      	pop	{r4, pc}
    8d18:	0020      	movs	r0, r4
    8d1a:	790b      	ldrb	r3, [r1, #4]
    8d1c:	78ca      	ldrb	r2, [r1, #3]
    8d1e:	021b      	lsls	r3, r3, #8
    8d20:	431a      	orrs	r2, r3
    8d22:	80e2      	strh	r2, [r4, #6]
    8d24:	4b11      	ldr	r3, [pc, #68]	; (8d6c <gapc_peer_att_info_ind_handler+0x78>)
    8d26:	3008      	adds	r0, #8
    8d28:	3105      	adds	r1, #5
    8d2a:	4798      	blx	r3
    8d2c:	2302      	movs	r3, #2
    8d2e:	70a3      	strb	r3, [r4, #2]
    8d30:	e7f1      	b.n	8d16 <gapc_peer_att_info_ind_handler+0x22>
    8d32:	790a      	ldrb	r2, [r1, #4]
    8d34:	78cb      	ldrb	r3, [r1, #3]
    8d36:	0212      	lsls	r2, r2, #8
    8d38:	4313      	orrs	r3, r2
    8d3a:	80e3      	strh	r3, [r4, #6]
    8d3c:	2305      	movs	r3, #5
    8d3e:	e7f6      	b.n	8d2e <gapc_peer_att_info_ind_handler+0x3a>
    8d40:	790a      	ldrb	r2, [r1, #4]
    8d42:	78cb      	ldrb	r3, [r1, #3]
    8d44:	0212      	lsls	r2, r2, #8
    8d46:	4313      	orrs	r3, r2
    8d48:	8123      	strh	r3, [r4, #8]
    8d4a:	798a      	ldrb	r2, [r1, #6]
    8d4c:	794b      	ldrb	r3, [r1, #5]
    8d4e:	0212      	lsls	r2, r2, #8
    8d50:	4313      	orrs	r3, r2
    8d52:	80e3      	strh	r3, [r4, #6]
    8d54:	7a0a      	ldrb	r2, [r1, #8]
    8d56:	79cb      	ldrb	r3, [r1, #7]
    8d58:	0212      	lsls	r2, r2, #8
    8d5a:	4313      	orrs	r3, r2
    8d5c:	81a3      	strh	r3, [r4, #12]
    8d5e:	7a8a      	ldrb	r2, [r1, #10]
    8d60:	7a4b      	ldrb	r3, [r1, #9]
    8d62:	0212      	lsls	r2, r2, #8
    8d64:	4313      	orrs	r3, r2
    8d66:	8163      	strh	r3, [r4, #10]
    8d68:	2306      	movs	r3, #6
    8d6a:	e7e0      	b.n	8d2e <gapc_peer_att_info_ind_handler+0x3a>
    8d6c:	0000a2f7 	.word	0x0000a2f7

00008d70 <gapc_con_channel_map_ind_handler>:
    8d70:	2300      	movs	r3, #0
    8d72:	b510      	push	{r4, lr}
    8d74:	0a00      	lsrs	r0, r0, #8
    8d76:	7013      	strb	r3, [r2, #0]
    8d78:	8050      	strh	r0, [r2, #2]
    8d7a:	4b02      	ldr	r3, [pc, #8]	; (8d84 <gapc_con_channel_map_ind_handler+0x14>)
    8d7c:	1d10      	adds	r0, r2, #4
    8d7e:	2205      	movs	r2, #5
    8d80:	4798      	blx	r3
    8d82:	bd10      	pop	{r4, pc}
    8d84:	0000a2f7 	.word	0x0000a2f7

00008d88 <gapc_lecb_connected>:
    8d88:	7842      	ldrb	r2, [r0, #1]
    8d8a:	7803      	ldrb	r3, [r0, #0]
    8d8c:	0212      	lsls	r2, r2, #8
    8d8e:	4313      	orrs	r3, r2
    8d90:	800b      	strh	r3, [r1, #0]
    8d92:	78c2      	ldrb	r2, [r0, #3]
    8d94:	7883      	ldrb	r3, [r0, #2]
    8d96:	0212      	lsls	r2, r2, #8
    8d98:	4313      	orrs	r3, r2
    8d9a:	804b      	strh	r3, [r1, #2]
    8d9c:	7942      	ldrb	r2, [r0, #5]
    8d9e:	7903      	ldrb	r3, [r0, #4]
    8da0:	0212      	lsls	r2, r2, #8
    8da2:	4313      	orrs	r3, r2
    8da4:	808b      	strh	r3, [r1, #4]
    8da6:	79c2      	ldrb	r2, [r0, #7]
    8da8:	7983      	ldrb	r3, [r0, #6]
    8daa:	0212      	lsls	r2, r2, #8
    8dac:	4313      	orrs	r3, r2
    8dae:	80cb      	strh	r3, [r1, #6]
    8db0:	2300      	movs	r3, #0
    8db2:	720b      	strb	r3, [r1, #8]
    8db4:	4770      	bx	lr

00008db6 <gapc_lecb_disconnected>:
    8db6:	7842      	ldrb	r2, [r0, #1]
    8db8:	7803      	ldrb	r3, [r0, #0]
    8dba:	0212      	lsls	r2, r2, #8
    8dbc:	4313      	orrs	r3, r2
    8dbe:	800b      	strh	r3, [r1, #0]
    8dc0:	78c2      	ldrb	r2, [r0, #3]
    8dc2:	7883      	ldrb	r3, [r0, #2]
    8dc4:	0212      	lsls	r2, r2, #8
    8dc6:	4313      	orrs	r3, r2
    8dc8:	804b      	strh	r3, [r1, #2]
    8dca:	4770      	bx	lr

00008dcc <gapc_lecb_connect_req_ind>:
    8dcc:	7842      	ldrb	r2, [r0, #1]
    8dce:	7803      	ldrb	r3, [r0, #0]
    8dd0:	0212      	lsls	r2, r2, #8
    8dd2:	4313      	orrs	r3, r2
    8dd4:	800b      	strh	r3, [r1, #0]
    8dd6:	78c2      	ldrb	r2, [r0, #3]
    8dd8:	7883      	ldrb	r3, [r0, #2]
    8dda:	0212      	lsls	r2, r2, #8
    8ddc:	4313      	orrs	r3, r2
    8dde:	804b      	strh	r3, [r1, #2]
    8de0:	7942      	ldrb	r2, [r0, #5]
    8de2:	7903      	ldrb	r3, [r0, #4]
    8de4:	0212      	lsls	r2, r2, #8
    8de6:	4313      	orrs	r3, r2
    8de8:	808b      	strh	r3, [r1, #4]
    8dea:	79c2      	ldrb	r2, [r0, #7]
    8dec:	7983      	ldrb	r3, [r0, #6]
    8dee:	0212      	lsls	r2, r2, #8
    8df0:	4313      	orrs	r3, r2
    8df2:	80cb      	strh	r3, [r1, #6]
    8df4:	4770      	bx	lr

00008df6 <gapc_lecb_add_credit_resp_handler>:
    8df6:	7842      	ldrb	r2, [r0, #1]
    8df8:	7803      	ldrb	r3, [r0, #0]
    8dfa:	0212      	lsls	r2, r2, #8
    8dfc:	4313      	orrs	r3, r2
    8dfe:	800b      	strh	r3, [r1, #0]
    8e00:	78c2      	ldrb	r2, [r0, #3]
    8e02:	7883      	ldrb	r3, [r0, #2]
    8e04:	0212      	lsls	r2, r2, #8
    8e06:	4313      	orrs	r3, r2
    8e08:	804b      	strh	r3, [r1, #2]
    8e0a:	7942      	ldrb	r2, [r0, #5]
    8e0c:	7903      	ldrb	r3, [r0, #4]
    8e0e:	0212      	lsls	r2, r2, #8
    8e10:	4313      	orrs	r3, r2
    8e12:	808b      	strh	r3, [r1, #4]
    8e14:	4770      	bx	lr
	...

00008e18 <gapm_reset_req_handler>:
    8e18:	2300      	movs	r3, #0
    8e1a:	2110      	movs	r1, #16
    8e1c:	4a13      	ldr	r2, [pc, #76]	; (8e6c <gapm_reset_req_handler+0x54>)
    8e1e:	b510      	push	{r4, lr}
    8e20:	6810      	ldr	r0, [r2, #0]
    8e22:	4c13      	ldr	r4, [pc, #76]	; (8e70 <gapm_reset_req_handler+0x58>)
    8e24:	2205      	movs	r2, #5
    8e26:	60a3      	str	r3, [r4, #8]
    8e28:	60e3      	str	r3, [r4, #12]
    8e2a:	7141      	strb	r1, [r0, #5]
    8e2c:	21d0      	movs	r1, #208	; 0xd0
    8e2e:	7002      	strb	r2, [r0, #0]
    8e30:	3a03      	subs	r2, #3
    8e32:	7042      	strb	r2, [r0, #1]
    8e34:	7103      	strb	r3, [r0, #4]
    8e36:	320b      	adds	r2, #11
    8e38:	7183      	strb	r3, [r0, #6]
    8e3a:	7203      	strb	r3, [r0, #8]
    8e3c:	0109      	lsls	r1, r1, #4
    8e3e:	3301      	adds	r3, #1
    8e40:	7082      	strb	r2, [r0, #2]
    8e42:	70c2      	strb	r2, [r0, #3]
    8e44:	7243      	strb	r3, [r0, #9]
    8e46:	8021      	strh	r1, [r4, #0]
    8e48:	71c3      	strb	r3, [r0, #7]
    8e4a:	210a      	movs	r1, #10
    8e4c:	4b09      	ldr	r3, [pc, #36]	; (8e74 <gapm_reset_req_handler+0x5c>)
    8e4e:	80a2      	strh	r2, [r4, #4]
    8e50:	4798      	blx	r3
    8e52:	4b09      	ldr	r3, [pc, #36]	; (8e78 <gapm_reset_req_handler+0x60>)
    8e54:	4798      	blx	r3
    8e56:	2800      	cmp	r0, #0
    8e58:	d106      	bne.n	8e68 <gapm_reset_req_handler+0x50>
    8e5a:	68a3      	ldr	r3, [r4, #8]
    8e5c:	30e2      	adds	r0, #226	; 0xe2
    8e5e:	785a      	ldrb	r2, [r3, #1]
    8e60:	781b      	ldrb	r3, [r3, #0]
    8e62:	2b01      	cmp	r3, #1
    8e64:	d100      	bne.n	8e68 <gapm_reset_req_handler+0x50>
    8e66:	0010      	movs	r0, r2
    8e68:	bd10      	pop	{r4, pc}
    8e6a:	46c0      	nop			; (mov r8, r8)
    8e6c:	0000c4d0 	.word	0x0000c4d0
    8e70:	2000321c 	.word	0x2000321c
    8e74:	00007859 	.word	0x00007859
    8e78:	00007e6d 	.word	0x00007e6d

00008e7c <gapm_set_dev_config_cmd_handler>:
    8e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e7e:	b087      	sub	sp, #28
    8e80:	9303      	str	r3, [sp, #12]
    8e82:	ab0c      	add	r3, sp, #48	; 0x30
    8e84:	781b      	ldrb	r3, [r3, #0]
    8e86:	0016      	movs	r6, r2
    8e88:	9304      	str	r3, [sp, #16]
    8e8a:	ab0d      	add	r3, sp, #52	; 0x34
    8e8c:	781b      	ldrb	r3, [r3, #0]
    8e8e:	4a34      	ldr	r2, [pc, #208]	; (8f60 <gapm_set_dev_config_cmd_handler+0xe4>)
    8e90:	9305      	str	r3, [sp, #20]
    8e92:	ab0e      	add	r3, sp, #56	; 0x38
    8e94:	881b      	ldrh	r3, [r3, #0]
    8e96:	6814      	ldr	r4, [r2, #0]
    8e98:	9300      	str	r3, [sp, #0]
    8e9a:	ab0f      	add	r3, sp, #60	; 0x3c
    8e9c:	881b      	ldrh	r3, [r3, #0]
    8e9e:	2205      	movs	r2, #5
    8ea0:	9301      	str	r3, [sp, #4]
    8ea2:	ab10      	add	r3, sp, #64	; 0x40
    8ea4:	881b      	ldrh	r3, [r3, #0]
    8ea6:	270d      	movs	r7, #13
    8ea8:	9302      	str	r3, [sp, #8]
    8eaa:	2300      	movs	r3, #0
    8eac:	4d2d      	ldr	r5, [pc, #180]	; (8f64 <gapm_set_dev_config_cmd_handler+0xe8>)
    8eae:	60eb      	str	r3, [r5, #12]
    8eb0:	60ab      	str	r3, [r5, #8]
    8eb2:	7022      	strb	r2, [r4, #0]
    8eb4:	3a01      	subs	r2, #1
    8eb6:	7062      	strb	r2, [r4, #1]
    8eb8:	7123      	strb	r3, [r4, #4]
    8eba:	320c      	adds	r2, #12
    8ebc:	71a3      	strb	r3, [r4, #6]
    8ebe:	71e3      	strb	r3, [r4, #7]
    8ec0:	7223      	strb	r3, [r4, #8]
    8ec2:	72e1      	strb	r1, [r4, #11]
    8ec4:	3303      	adds	r3, #3
    8ec6:	0a09      	lsrs	r1, r1, #8
    8ec8:	7263      	strb	r3, [r4, #9]
    8eca:	7162      	strb	r2, [r4, #5]
    8ecc:	72a0      	strb	r0, [r4, #10]
    8ece:	7321      	strb	r1, [r4, #12]
    8ed0:	2206      	movs	r2, #6
    8ed2:	0031      	movs	r1, r6
    8ed4:	70a7      	strb	r7, [r4, #2]
    8ed6:	4e24      	ldr	r6, [pc, #144]	; (8f68 <gapm_set_dev_config_cmd_handler+0xec>)
    8ed8:	70e7      	strb	r7, [r4, #3]
    8eda:	19e0      	adds	r0, r4, r7
    8edc:	47b0      	blx	r6
    8ede:	0020      	movs	r0, r4
    8ee0:	2210      	movs	r2, #16
    8ee2:	9903      	ldr	r1, [sp, #12]
    8ee4:	3013      	adds	r0, #19
    8ee6:	47b0      	blx	r6
    8ee8:	466a      	mov	r2, sp
    8eea:	7c12      	ldrb	r2, [r2, #16]
    8eec:	1d23      	adds	r3, r4, #4
    8eee:	77da      	strb	r2, [r3, #31]
    8ef0:	466a      	mov	r2, sp
    8ef2:	7d12      	ldrb	r2, [r2, #20]
    8ef4:	1d63      	adds	r3, r4, #5
    8ef6:	77da      	strb	r2, [r3, #31]
    8ef8:	466a      	mov	r2, sp
    8efa:	7812      	ldrb	r2, [r2, #0]
    8efc:	1da3      	adds	r3, r4, #6
    8efe:	77da      	strb	r2, [r3, #31]
    8f00:	9b00      	ldr	r3, [sp, #0]
    8f02:	1de2      	adds	r2, r4, #7
    8f04:	0a1b      	lsrs	r3, r3, #8
    8f06:	77d3      	strb	r3, [r2, #31]
    8f08:	466a      	mov	r2, sp
    8f0a:	0023      	movs	r3, r4
    8f0c:	7912      	ldrb	r2, [r2, #4]
    8f0e:	3308      	adds	r3, #8
    8f10:	77da      	strb	r2, [r3, #31]
    8f12:	0022      	movs	r2, r4
    8f14:	9b01      	ldr	r3, [sp, #4]
    8f16:	3228      	adds	r2, #40	; 0x28
    8f18:	0a1b      	lsrs	r3, r3, #8
    8f1a:	7013      	strb	r3, [r2, #0]
    8f1c:	466a      	mov	r2, sp
    8f1e:	0023      	movs	r3, r4
    8f20:	7a12      	ldrb	r2, [r2, #8]
    8f22:	3329      	adds	r3, #41	; 0x29
    8f24:	701a      	strb	r2, [r3, #0]
    8f26:	0022      	movs	r2, r4
    8f28:	9b02      	ldr	r3, [sp, #8]
    8f2a:	322a      	adds	r2, #42	; 0x2a
    8f2c:	0a1b      	lsrs	r3, r3, #8
    8f2e:	7013      	strb	r3, [r2, #0]
    8f30:	23d0      	movs	r3, #208	; 0xd0
    8f32:	011b      	lsls	r3, r3, #4
    8f34:	802b      	strh	r3, [r5, #0]
    8f36:	2322      	movs	r3, #34	; 0x22
    8f38:	212b      	movs	r1, #43	; 0x2b
    8f3a:	71e3      	strb	r3, [r4, #7]
    8f3c:	0020      	movs	r0, r4
    8f3e:	4b0b      	ldr	r3, [pc, #44]	; (8f6c <gapm_set_dev_config_cmd_handler+0xf0>)
    8f40:	80af      	strh	r7, [r5, #4]
    8f42:	4798      	blx	r3
    8f44:	4b0a      	ldr	r3, [pc, #40]	; (8f70 <gapm_set_dev_config_cmd_handler+0xf4>)
    8f46:	4798      	blx	r3
    8f48:	2800      	cmp	r0, #0
    8f4a:	d106      	bne.n	8f5a <gapm_set_dev_config_cmd_handler+0xde>
    8f4c:	68ab      	ldr	r3, [r5, #8]
    8f4e:	30e2      	adds	r0, #226	; 0xe2
    8f50:	785a      	ldrb	r2, [r3, #1]
    8f52:	781b      	ldrb	r3, [r3, #0]
    8f54:	2b03      	cmp	r3, #3
    8f56:	d100      	bne.n	8f5a <gapm_set_dev_config_cmd_handler+0xde>
    8f58:	0010      	movs	r0, r2
    8f5a:	b007      	add	sp, #28
    8f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f5e:	46c0      	nop			; (mov r8, r8)
    8f60:	0000c4d0 	.word	0x0000c4d0
    8f64:	2000321c 	.word	0x2000321c
    8f68:	0000a2f7 	.word	0x0000a2f7
    8f6c:	00007859 	.word	0x00007859
    8f70:	00007e6d 	.word	0x00007e6d

00008f74 <gapm_get_dev_config_cmd_handler>:
    8f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8f76:	0007      	movs	r7, r0
    8f78:	000d      	movs	r5, r1
    8f7a:	20cf      	movs	r0, #207	; 0xcf
    8f7c:	2f01      	cmp	r7, #1
    8f7e:	d835      	bhi.n	8fec <gapm_get_dev_config_cmd_handler+0x78>
    8f80:	2900      	cmp	r1, #0
    8f82:	d033      	beq.n	8fec <gapm_get_dev_config_cmd_handler+0x78>
    8f84:	2200      	movs	r2, #0
    8f86:	2105      	movs	r1, #5
    8f88:	4b1e      	ldr	r3, [pc, #120]	; (9004 <gapm_get_dev_config_cmd_handler+0x90>)
    8f8a:	4c1f      	ldr	r4, [pc, #124]	; (9008 <gapm_get_dev_config_cmd_handler+0x94>)
    8f8c:	681b      	ldr	r3, [r3, #0]
    8f8e:	60a2      	str	r2, [r4, #8]
    8f90:	60e2      	str	r2, [r4, #12]
    8f92:	7019      	strb	r1, [r3, #0]
    8f94:	3108      	adds	r1, #8
    8f96:	7099      	strb	r1, [r3, #2]
    8f98:	210d      	movs	r1, #13
    8f9a:	2606      	movs	r6, #6
    8f9c:	70d9      	strb	r1, [r3, #3]
    8f9e:	2110      	movs	r1, #16
    8fa0:	705e      	strb	r6, [r3, #1]
    8fa2:	711a      	strb	r2, [r3, #4]
    8fa4:	7159      	strb	r1, [r3, #5]
    8fa6:	719a      	strb	r2, [r3, #6]
    8fa8:	71da      	strb	r2, [r3, #7]
    8faa:	721a      	strb	r2, [r3, #8]
    8fac:	2f01      	cmp	r7, #1
    8fae:	d11d      	bne.n	8fec <gapm_get_dev_config_cmd_handler+0x78>
    8fb0:	22d0      	movs	r2, #208	; 0xd0
    8fb2:	0112      	lsls	r2, r2, #4
    8fb4:	8062      	strh	r2, [r4, #2]
    8fb6:	4a15      	ldr	r2, [pc, #84]	; (900c <gapm_get_dev_config_cmd_handler+0x98>)
    8fb8:	725e      	strb	r6, [r3, #9]
    8fba:	8022      	strh	r2, [r4, #0]
    8fbc:	220d      	movs	r2, #13
    8fbe:	71df      	strb	r7, [r3, #7]
    8fc0:	0018      	movs	r0, r3
    8fc2:	210a      	movs	r1, #10
    8fc4:	4b12      	ldr	r3, [pc, #72]	; (9010 <gapm_get_dev_config_cmd_handler+0x9c>)
    8fc6:	80a2      	strh	r2, [r4, #4]
    8fc8:	4798      	blx	r3
    8fca:	4b12      	ldr	r3, [pc, #72]	; (9014 <gapm_get_dev_config_cmd_handler+0xa0>)
    8fcc:	4798      	blx	r3
    8fce:	2800      	cmp	r0, #0
    8fd0:	d10c      	bne.n	8fec <gapm_get_dev_config_cmd_handler+0x78>
    8fd2:	2301      	movs	r3, #1
    8fd4:	8821      	ldrh	r1, [r4, #0]
    8fd6:	4a10      	ldr	r2, [pc, #64]	; (9018 <gapm_get_dev_config_cmd_handler+0xa4>)
    8fd8:	68a7      	ldr	r7, [r4, #8]
    8fda:	425b      	negs	r3, r3
    8fdc:	4291      	cmp	r1, r2
    8fde:	d006      	beq.n	8fee <gapm_get_dev_config_cmd_handler+0x7a>
    8fe0:	8023      	strh	r3, [r4, #0]
    8fe2:	783b      	ldrb	r3, [r7, #0]
    8fe4:	20e2      	movs	r0, #226	; 0xe2
    8fe6:	2b06      	cmp	r3, #6
    8fe8:	d100      	bne.n	8fec <gapm_get_dev_config_cmd_handler+0x78>
    8fea:	7878      	ldrb	r0, [r7, #1]
    8fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8fee:	8063      	strh	r3, [r4, #2]
    8ff0:	0039      	movs	r1, r7
    8ff2:	4b0a      	ldr	r3, [pc, #40]	; (901c <gapm_get_dev_config_cmd_handler+0xa8>)
    8ff4:	1c68      	adds	r0, r5, #1
    8ff6:	0032      	movs	r2, r6
    8ff8:	4798      	blx	r3
    8ffa:	79bb      	ldrb	r3, [r7, #6]
    8ffc:	702b      	strb	r3, [r5, #0]
    8ffe:	68e7      	ldr	r7, [r4, #12]
    9000:	e7ef      	b.n	8fe2 <gapm_get_dev_config_cmd_handler+0x6e>
    9002:	46c0      	nop			; (mov r8, r8)
    9004:	0000c4d0 	.word	0x0000c4d0
    9008:	2000321c 	.word	0x2000321c
    900c:	00000d08 	.word	0x00000d08
    9010:	00007859 	.word	0x00007859
    9014:	00007e6d 	.word	0x00007e6d
    9018:	0000ffff 	.word	0x0000ffff
    901c:	0000a2f7 	.word	0x0000a2f7

00009020 <gapm_cancel_cmd_handler>:
    9020:	2300      	movs	r3, #0
    9022:	4a13      	ldr	r2, [pc, #76]	; (9070 <gapm_cancel_cmd_handler+0x50>)
    9024:	b510      	push	{r4, lr}
    9026:	6810      	ldr	r0, [r2, #0]
    9028:	4c12      	ldr	r4, [pc, #72]	; (9074 <gapm_cancel_cmd_handler+0x54>)
    902a:	2205      	movs	r2, #5
    902c:	60a3      	str	r3, [r4, #8]
    902e:	60e3      	str	r3, [r4, #12]
    9030:	7103      	strb	r3, [r0, #4]
    9032:	7183      	strb	r3, [r0, #6]
    9034:	7203      	strb	r3, [r0, #8]
    9036:	3302      	adds	r3, #2
    9038:	7243      	strb	r3, [r0, #9]
    903a:	23d0      	movs	r3, #208	; 0xd0
    903c:	7002      	strb	r2, [r0, #0]
    903e:	011b      	lsls	r3, r3, #4
    9040:	3a02      	subs	r2, #2
    9042:	7042      	strb	r2, [r0, #1]
    9044:	2110      	movs	r1, #16
    9046:	8023      	strh	r3, [r4, #0]
    9048:	2301      	movs	r3, #1
    904a:	320a      	adds	r2, #10
    904c:	7141      	strb	r1, [r0, #5]
    904e:	7082      	strb	r2, [r0, #2]
    9050:	70c2      	strb	r2, [r0, #3]
    9052:	71c3      	strb	r3, [r0, #7]
    9054:	3906      	subs	r1, #6
    9056:	4b08      	ldr	r3, [pc, #32]	; (9078 <gapm_cancel_cmd_handler+0x58>)
    9058:	80a2      	strh	r2, [r4, #4]
    905a:	4798      	blx	r3
    905c:	4b07      	ldr	r3, [pc, #28]	; (907c <gapm_cancel_cmd_handler+0x5c>)
    905e:	4798      	blx	r3
    9060:	2800      	cmp	r0, #0
    9062:	d104      	bne.n	906e <gapm_cancel_cmd_handler+0x4e>
    9064:	68a3      	ldr	r3, [r4, #8]
    9066:	785b      	ldrb	r3, [r3, #1]
    9068:	2b44      	cmp	r3, #68	; 0x44
    906a:	d000      	beq.n	906e <gapm_cancel_cmd_handler+0x4e>
    906c:	0018      	movs	r0, r3
    906e:	bd10      	pop	{r4, pc}
    9070:	0000c4d0 	.word	0x0000c4d0
    9074:	2000321c 	.word	0x2000321c
    9078:	00007859 	.word	0x00007859
    907c:	00007e6d 	.word	0x00007e6d

00009080 <gapm_dev_bdaddr_ind_handler>:
    9080:	b570      	push	{r4, r5, r6, lr}
    9082:	0005      	movs	r5, r0
    9084:	000c      	movs	r4, r1
    9086:	1c48      	adds	r0, r1, #1
    9088:	2206      	movs	r2, #6
    908a:	0029      	movs	r1, r5
    908c:	4b02      	ldr	r3, [pc, #8]	; (9098 <gapm_dev_bdaddr_ind_handler+0x18>)
    908e:	4798      	blx	r3
    9090:	79ab      	ldrb	r3, [r5, #6]
    9092:	2000      	movs	r0, #0
    9094:	7023      	strb	r3, [r4, #0]
    9096:	bd70      	pop	{r4, r5, r6, pc}
    9098:	0000a2f7 	.word	0x0000a2f7

0000909c <gapm_cmp_evt>:
    909c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    909e:	7845      	ldrb	r5, [r0, #1]
    90a0:	7800      	ldrb	r0, [r0, #0]
    90a2:	000c      	movs	r4, r1
    90a4:	380c      	subs	r0, #12
    90a6:	280b      	cmp	r0, #11
    90a8:	d900      	bls.n	90ac <gapm_cmp_evt+0x10>
    90aa:	e091      	b.n	91d0 <gapm_cmp_evt+0x134>
    90ac:	f000 ff46 	bl	9f3c <__gnu_thumb1_case_uqi>
    90b0:	19191951 	.word	0x19191951
    90b4:	57060690 	.word	0x57060690
    90b8:	0e909057 	.word	0x0e909057
    90bc:	2300      	movs	r3, #0
    90be:	2d45      	cmp	r5, #69	; 0x45
    90c0:	d000      	beq.n	90c4 <gapm_cmp_evt+0x28>
    90c2:	002b      	movs	r3, r5
    90c4:	7023      	strb	r3, [r4, #0]
    90c6:	2302      	movs	r3, #2
    90c8:	0018      	movs	r0, r3
    90ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    90cc:	233d      	movs	r3, #61	; 0x3d
    90ce:	2d00      	cmp	r5, #0
    90d0:	d0fa      	beq.n	90c8 <gapm_cmp_evt+0x2c>
    90d2:	700d      	strb	r5, [r1, #0]
    90d4:	1c48      	adds	r0, r1, #1
    90d6:	4b3f      	ldr	r3, [pc, #252]	; (91d4 <gapm_cmp_evt+0x138>)
    90d8:	2210      	movs	r2, #16
    90da:	2100      	movs	r1, #0
    90dc:	4798      	blx	r3
    90de:	2310      	movs	r3, #16
    90e0:	e7f2      	b.n	90c8 <gapm_cmp_evt+0x2c>
    90e2:	2d00      	cmp	r5, #0
    90e4:	d132      	bne.n	914c <gapm_cmp_evt+0xb0>
    90e6:	466b      	mov	r3, sp
    90e8:	4e3b      	ldr	r6, [pc, #236]	; (91d8 <gapm_cmp_evt+0x13c>)
    90ea:	1dd9      	adds	r1, r3, #7
    90ec:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
    90ee:	4b3b      	ldr	r3, [pc, #236]	; (91dc <gapm_cmp_evt+0x140>)
    90f0:	4798      	blx	r3
    90f2:	002b      	movs	r3, r5
    90f4:	2807      	cmp	r0, #7
    90f6:	d8e7      	bhi.n	90c8 <gapm_cmp_evt+0x2c>
    90f8:	3312      	adds	r3, #18
    90fa:	4358      	muls	r0, r3
    90fc:	4938      	ldr	r1, [pc, #224]	; (91e0 <gapm_cmp_evt+0x144>)
    90fe:	180b      	adds	r3, r1, r0
    9100:	895a      	ldrh	r2, [r3, #10]
    9102:	3002      	adds	r0, #2
    9104:	8122      	strh	r2, [r4, #8]
    9106:	785f      	ldrb	r7, [r3, #1]
    9108:	72a5      	strb	r5, [r4, #10]
    910a:	7027      	strb	r7, [r4, #0]
    910c:	899a      	ldrh	r2, [r3, #12]
    910e:	1841      	adds	r1, r0, r1
    9110:	81a2      	strh	r2, [r4, #12]
    9112:	89da      	ldrh	r2, [r3, #14]
    9114:	81e2      	strh	r2, [r4, #14]
    9116:	8a1b      	ldrh	r3, [r3, #16]
    9118:	2206      	movs	r2, #6
    911a:	8223      	strh	r3, [r4, #16]
    911c:	1c63      	adds	r3, r4, #1
    911e:	0018      	movs	r0, r3
    9120:	4b30      	ldr	r3, [pc, #192]	; (91e4 <gapm_cmp_evt+0x148>)
    9122:	4798      	blx	r3
    9124:	2f00      	cmp	r7, #0
    9126:	d00b      	beq.n	9140 <gapm_cmp_evt+0xa4>
    9128:	79a3      	ldrb	r3, [r4, #6]
    912a:	223f      	movs	r2, #63	; 0x3f
    912c:	0019      	movs	r1, r3
    912e:	3501      	adds	r5, #1
    9130:	4391      	bics	r1, r2
    9132:	29c0      	cmp	r1, #192	; 0xc0
    9134:	d004      	beq.n	9140 <gapm_cmp_evt+0xa4>
    9136:	353f      	adds	r5, #63	; 0x3f
    9138:	402b      	ands	r3, r5
    913a:	425d      	negs	r5, r3
    913c:	415d      	adcs	r5, r3
    913e:	3502      	adds	r5, #2
    9140:	2301      	movs	r3, #1
    9142:	425b      	negs	r3, r3
    9144:	7025      	strb	r5, [r4, #0]
    9146:	85b3      	strh	r3, [r6, #44]	; 0x2c
    9148:	3307      	adds	r3, #7
    914a:	e7bd      	b.n	90c8 <gapm_cmp_evt+0x2c>
    914c:	700d      	strb	r5, [r1, #0]
    914e:	2304      	movs	r3, #4
    9150:	e7ba      	b.n	90c8 <gapm_cmp_evt+0x2c>
    9152:	2300      	movs	r3, #0
    9154:	2d45      	cmp	r5, #69	; 0x45
    9156:	d000      	beq.n	915a <gapm_cmp_evt+0xbe>
    9158:	002b      	movs	r3, r5
    915a:	7023      	strb	r3, [r4, #0]
    915c:	e7f7      	b.n	914e <gapm_cmp_evt+0xb2>
    915e:	4f1e      	ldr	r7, [pc, #120]	; (91d8 <gapm_cmp_evt+0x13c>)
    9160:	2100      	movs	r1, #0
    9162:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
    9164:	4b1d      	ldr	r3, [pc, #116]	; (91dc <gapm_cmp_evt+0x140>)
    9166:	2601      	movs	r6, #1
    9168:	4798      	blx	r3
    916a:	4276      	negs	r6, r6
    916c:	2807      	cmp	r0, #7
    916e:	d828      	bhi.n	91c2 <gapm_cmp_evt+0x126>
    9170:	2312      	movs	r3, #18
    9172:	4358      	muls	r0, r3
    9174:	491a      	ldr	r1, [pc, #104]	; (91e0 <gapm_cmp_evt+0x144>)
    9176:	85be      	strh	r6, [r7, #44]	; 0x2c
    9178:	180b      	adds	r3, r1, r0
    917a:	895a      	ldrh	r2, [r3, #10]
    917c:	3002      	adds	r0, #2
    917e:	8122      	strh	r2, [r4, #8]
    9180:	785e      	ldrb	r6, [r3, #1]
    9182:	1841      	adds	r1, r0, r1
    9184:	7026      	strb	r6, [r4, #0]
    9186:	899a      	ldrh	r2, [r3, #12]
    9188:	81a2      	strh	r2, [r4, #12]
    918a:	89da      	ldrh	r2, [r3, #14]
    918c:	81e2      	strh	r2, [r4, #14]
    918e:	8a1b      	ldrh	r3, [r3, #16]
    9190:	2206      	movs	r2, #6
    9192:	8223      	strh	r3, [r4, #16]
    9194:	1c63      	adds	r3, r4, #1
    9196:	0018      	movs	r0, r3
    9198:	4b12      	ldr	r3, [pc, #72]	; (91e4 <gapm_cmp_evt+0x148>)
    919a:	4798      	blx	r3
    919c:	2300      	movs	r3, #0
    919e:	429e      	cmp	r6, r3
    91a0:	d00b      	beq.n	91ba <gapm_cmp_evt+0x11e>
    91a2:	79a2      	ldrb	r2, [r4, #6]
    91a4:	333f      	adds	r3, #63	; 0x3f
    91a6:	0011      	movs	r1, r2
    91a8:	4399      	bics	r1, r3
    91aa:	3b3e      	subs	r3, #62	; 0x3e
    91ac:	29c0      	cmp	r1, #192	; 0xc0
    91ae:	d004      	beq.n	91ba <gapm_cmp_evt+0x11e>
    91b0:	333f      	adds	r3, #63	; 0x3f
    91b2:	401a      	ands	r2, r3
    91b4:	4253      	negs	r3, r2
    91b6:	4153      	adcs	r3, r2
    91b8:	3302      	adds	r3, #2
    91ba:	7023      	strb	r3, [r4, #0]
    91bc:	72a5      	strb	r5, [r4, #10]
    91be:	2306      	movs	r3, #6
    91c0:	e782      	b.n	90c8 <gapm_cmp_evt+0x2c>
    91c2:	2212      	movs	r2, #18
    91c4:	2100      	movs	r1, #0
    91c6:	0020      	movs	r0, r4
    91c8:	4b02      	ldr	r3, [pc, #8]	; (91d4 <gapm_cmp_evt+0x138>)
    91ca:	4798      	blx	r3
    91cc:	8126      	strh	r6, [r4, #8]
    91ce:	e7f5      	b.n	91bc <gapm_cmp_evt+0x120>
    91d0:	2300      	movs	r3, #0
    91d2:	e779      	b.n	90c8 <gapm_cmp_evt+0x2c>
    91d4:	0000a309 	.word	0x0000a309
    91d8:	200032bc 	.word	0x200032bc
    91dc:	000083a5 	.word	0x000083a5
    91e0:	2000322c 	.word	0x2000322c
    91e4:	0000a2f7 	.word	0x0000a2f7

000091e8 <gapm_start_adv_cmd_handler>:
    91e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    91ea:	b089      	sub	sp, #36	; 0x24
    91ec:	9303      	str	r3, [sp, #12]
    91ee:	ab0e      	add	r3, sp, #56	; 0x38
    91f0:	9102      	str	r1, [sp, #8]
    91f2:	cb02      	ldmia	r3!, {r1}
    91f4:	ac08      	add	r4, sp, #32
    91f6:	881e      	ldrh	r6, [r3, #0]
    91f8:	ab10      	add	r3, sp, #64	; 0x40
    91fa:	881b      	ldrh	r3, [r3, #0]
    91fc:	2705      	movs	r7, #5
    91fe:	469c      	mov	ip, r3
    9200:	ab11      	add	r3, sp, #68	; 0x44
    9202:	781b      	ldrb	r3, [r3, #0]
    9204:	9304      	str	r3, [sp, #16]
    9206:	ab12      	add	r3, sp, #72	; 0x48
    9208:	781b      	ldrb	r3, [r3, #0]
    920a:	9305      	str	r3, [sp, #20]
    920c:	ab13      	add	r3, sp, #76	; 0x4c
    920e:	781b      	ldrb	r3, [r3, #0]
    9210:	9306      	str	r3, [sp, #24]
    9212:	ab14      	add	r3, sp, #80	; 0x50
    9214:	781a      	ldrb	r2, [r3, #0]
    9216:	2319      	movs	r3, #25
    9218:	191b      	adds	r3, r3, r4
    921a:	7fdd      	ldrb	r5, [r3, #31]
    921c:	ab18      	add	r3, sp, #96	; 0x60
    921e:	881b      	ldrh	r3, [r3, #0]
    9220:	4c33      	ldr	r4, [pc, #204]	; (92f0 <gapm_start_adv_cmd_handler+0x108>)
    9222:	9301      	str	r3, [sp, #4]
    9224:	ab19      	add	r3, sp, #100	; 0x64
    9226:	781b      	ldrb	r3, [r3, #0]
    9228:	9307      	str	r3, [sp, #28]
    922a:	2300      	movs	r3, #0
    922c:	60a3      	str	r3, [r4, #8]
    922e:	60e3      	str	r3, [r4, #12]
    9230:	4c30      	ldr	r4, [pc, #192]	; (92f4 <gapm_start_adv_cmd_handler+0x10c>)
    9232:	6824      	ldr	r4, [r4, #0]
    9234:	7027      	strb	r7, [r4, #0]
    9236:	3708      	adds	r7, #8
    9238:	7067      	strb	r7, [r4, #1]
    923a:	70a7      	strb	r7, [r4, #2]
    923c:	70e7      	strb	r7, [r4, #3]
    923e:	3703      	adds	r7, #3
    9240:	7123      	strb	r3, [r4, #4]
    9242:	7167      	strb	r7, [r4, #5]
    9244:	71a3      	strb	r3, [r4, #6]
    9246:	71e3      	strb	r3, [r4, #7]
    9248:	7223      	strb	r3, [r4, #8]
    924a:	7260      	strb	r0, [r4, #9]
    924c:	72e3      	strb	r3, [r4, #11]
    924e:	7323      	strb	r3, [r4, #12]
    9250:	4663      	mov	r3, ip
    9252:	73e3      	strb	r3, [r4, #15]
    9254:	4663      	mov	r3, ip
    9256:	0a1b      	lsrs	r3, r3, #8
    9258:	466f      	mov	r7, sp
    925a:	7423      	strb	r3, [r4, #16]
    925c:	466b      	mov	r3, sp
    925e:	7a3f      	ldrb	r7, [r7, #8]
    9260:	7c1b      	ldrb	r3, [r3, #16]
    9262:	7366      	strb	r6, [r4, #13]
    9264:	380e      	subs	r0, #14
    9266:	0a36      	lsrs	r6, r6, #8
    9268:	72a7      	strb	r7, [r4, #10]
    926a:	73a6      	strb	r6, [r4, #14]
    926c:	7463      	strb	r3, [r4, #17]
    926e:	2801      	cmp	r0, #1
    9270:	d828      	bhi.n	92c4 <gapm_start_adv_cmd_handler+0xdc>
    9272:	2900      	cmp	r1, #0
    9274:	d004      	beq.n	9280 <gapm_start_adv_cmd_handler+0x98>
    9276:	0020      	movs	r0, r4
    9278:	2206      	movs	r2, #6
    927a:	3012      	adds	r0, #18
    927c:	4b1e      	ldr	r3, [pc, #120]	; (92f8 <gapm_start_adv_cmd_handler+0x110>)
    927e:	4798      	blx	r3
    9280:	466b      	mov	r3, sp
    9282:	7b1b      	ldrb	r3, [r3, #12]
    9284:	7623      	strb	r3, [r4, #24]
    9286:	0022      	movs	r2, r4
    9288:	23a5      	movs	r3, #165	; 0xa5
    928a:	3251      	adds	r2, #81	; 0x51
    928c:	7013      	strb	r3, [r2, #0]
    928e:	7053      	strb	r3, [r2, #1]
    9290:	466a      	mov	r2, sp
    9292:	0023      	movs	r3, r4
    9294:	7912      	ldrb	r2, [r2, #4]
    9296:	3353      	adds	r3, #83	; 0x53
    9298:	701a      	strb	r2, [r3, #0]
    929a:	0022      	movs	r2, r4
    929c:	9b01      	ldr	r3, [sp, #4]
    929e:	3254      	adds	r2, #84	; 0x54
    92a0:	0a1b      	lsrs	r3, r3, #8
    92a2:	7013      	strb	r3, [r2, #0]
    92a4:	466a      	mov	r2, sp
    92a6:	0023      	movs	r3, r4
    92a8:	7f12      	ldrb	r2, [r2, #28]
    92aa:	3355      	adds	r3, #85	; 0x55
    92ac:	701a      	strb	r2, [r3, #0]
    92ae:	2500      	movs	r5, #0
    92b0:	234d      	movs	r3, #77	; 0x4d
    92b2:	7225      	strb	r5, [r4, #8]
    92b4:	71e3      	strb	r3, [r4, #7]
    92b6:	2156      	movs	r1, #86	; 0x56
    92b8:	0020      	movs	r0, r4
    92ba:	4b10      	ldr	r3, [pc, #64]	; (92fc <gapm_start_adv_cmd_handler+0x114>)
    92bc:	4798      	blx	r3
    92be:	0028      	movs	r0, r5
    92c0:	b009      	add	sp, #36	; 0x24
    92c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    92c4:	466b      	mov	r3, sp
    92c6:	7d1b      	ldrb	r3, [r3, #20]
    92c8:	0020      	movs	r0, r4
    92ca:	74a3      	strb	r3, [r4, #18]
    92cc:	466b      	mov	r3, sp
    92ce:	7e1b      	ldrb	r3, [r3, #24]
    92d0:	7522      	strb	r2, [r4, #20]
    92d2:	74e3      	strb	r3, [r4, #19]
    92d4:	9915      	ldr	r1, [sp, #84]	; 0x54
    92d6:	4e08      	ldr	r6, [pc, #32]	; (92f8 <gapm_start_adv_cmd_handler+0x110>)
    92d8:	3015      	adds	r0, #21
    92da:	47b0      	blx	r6
    92dc:	0023      	movs	r3, r4
    92de:	0020      	movs	r0, r4
    92e0:	3331      	adds	r3, #49	; 0x31
    92e2:	701d      	strb	r5, [r3, #0]
    92e4:	002a      	movs	r2, r5
    92e6:	9917      	ldr	r1, [sp, #92]	; 0x5c
    92e8:	3032      	adds	r0, #50	; 0x32
    92ea:	47b0      	blx	r6
    92ec:	e7cb      	b.n	9286 <gapm_start_adv_cmd_handler+0x9e>
    92ee:	46c0      	nop			; (mov r8, r8)
    92f0:	2000321c 	.word	0x2000321c
    92f4:	0000c4d0 	.word	0x0000c4d0
    92f8:	0000a2f7 	.word	0x0000a2f7
    92fc:	00007859 	.word	0x00007859

00009300 <get_gap_local_addr_type>:
    9300:	4b04      	ldr	r3, [pc, #16]	; (9314 <get_gap_local_addr_type+0x14>)
    9302:	2001      	movs	r0, #1
    9304:	791b      	ldrb	r3, [r3, #4]
    9306:	2b02      	cmp	r3, #2
    9308:	d003      	beq.n	9312 <get_gap_local_addr_type+0x12>
    930a:	3b03      	subs	r3, #3
    930c:	4258      	negs	r0, r3
    930e:	4158      	adcs	r0, r3
    9310:	0040      	lsls	r0, r0, #1
    9312:	4770      	bx	lr
    9314:	200032bc 	.word	0x200032bc

00009318 <gapm_adv_report_evt_handler>:
    9318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    931a:	7843      	ldrb	r3, [r0, #1]
    931c:	0005      	movs	r5, r0
    931e:	9301      	str	r3, [sp, #4]
    9320:	466b      	mov	r3, sp
    9322:	000c      	movs	r4, r1
    9324:	791b      	ldrb	r3, [r3, #4]
    9326:	7806      	ldrb	r6, [r0, #0]
    9328:	2206      	movs	r2, #6
    932a:	704b      	strb	r3, [r1, #1]
    932c:	1c88      	adds	r0, r1, #2
    932e:	4f1c      	ldr	r7, [pc, #112]	; (93a0 <gapm_adv_report_evt_handler+0x88>)
    9330:	1ca9      	adds	r1, r5, #2
    9332:	47b8      	blx	r7
    9334:	0020      	movs	r0, r4
    9336:	0029      	movs	r1, r5
    9338:	7a2a      	ldrb	r2, [r5, #8]
    933a:	3008      	adds	r0, #8
    933c:	77c2      	strb	r2, [r0, #31]
    933e:	3109      	adds	r1, #9
    9340:	3528      	adds	r5, #40	; 0x28
    9342:	47b8      	blx	r7
    9344:	782b      	ldrb	r3, [r5, #0]
    9346:	b25a      	sxtb	r2, r3
    9348:	2a00      	cmp	r2, #0
    934a:	da01      	bge.n	9350 <gapm_adv_report_evt_handler+0x38>
    934c:	3301      	adds	r3, #1
    934e:	b2db      	uxtb	r3, r3
    9350:	0022      	movs	r2, r4
    9352:	3228      	adds	r2, #40	; 0x28
    9354:	7013      	strb	r3, [r2, #0]
    9356:	2300      	movs	r3, #0
    9358:	9a01      	ldr	r2, [sp, #4]
    935a:	429a      	cmp	r2, r3
    935c:	d00b      	beq.n	9376 <gapm_adv_report_evt_handler+0x5e>
    935e:	79e2      	ldrb	r2, [r4, #7]
    9360:	333f      	adds	r3, #63	; 0x3f
    9362:	0011      	movs	r1, r2
    9364:	4399      	bics	r1, r3
    9366:	3b3e      	subs	r3, #62	; 0x3e
    9368:	29c0      	cmp	r1, #192	; 0xc0
    936a:	d004      	beq.n	9376 <gapm_adv_report_evt_handler+0x5e>
    936c:	333f      	adds	r3, #63	; 0x3f
    936e:	401a      	ands	r2, r3
    9370:	4253      	negs	r3, r2
    9372:	4153      	adcs	r3, r2
    9374:	3302      	adds	r3, #2
    9376:	7063      	strb	r3, [r4, #1]
    9378:	2e04      	cmp	r6, #4
    937a:	d807      	bhi.n	938c <gapm_adv_report_evt_handler+0x74>
    937c:	0030      	movs	r0, r6
    937e:	f000 fddd 	bl	9f3c <__gnu_thumb1_case_uqi>
    9382:	0603      	.short	0x0603
    9384:	0a08      	.short	0x0a08
    9386:	0c          	.byte	0x0c
    9387:	00          	.byte	0x00
    9388:	2300      	movs	r3, #0
    938a:	7023      	strb	r3, [r4, #0]
    938c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    938e:	2301      	movs	r3, #1
    9390:	e7fb      	b.n	938a <gapm_adv_report_evt_handler+0x72>
    9392:	2302      	movs	r3, #2
    9394:	e7f9      	b.n	938a <gapm_adv_report_evt_handler+0x72>
    9396:	2303      	movs	r3, #3
    9398:	e7f7      	b.n	938a <gapm_adv_report_evt_handler+0x72>
    939a:	2305      	movs	r3, #5
    939c:	e7f5      	b.n	938a <gapm_adv_report_evt_handler+0x72>
    939e:	46c0      	nop			; (mov r8, r8)
    93a0:	0000a2f7 	.word	0x0000a2f7

000093a4 <gapm_resolv_addr_cmd_handler>:
    93a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    93a6:	2300      	movs	r3, #0
    93a8:	0016      	movs	r6, r2
    93aa:	4a16      	ldr	r2, [pc, #88]	; (9404 <gapm_resolv_addr_cmd_handler+0x60>)
    93ac:	0005      	movs	r5, r0
    93ae:	6093      	str	r3, [r2, #8]
    93b0:	60d3      	str	r3, [r2, #12]
    93b2:	4a15      	ldr	r2, [pc, #84]	; (9408 <gapm_resolv_addr_cmd_handler+0x64>)
    93b4:	4f15      	ldr	r7, [pc, #84]	; (940c <gapm_resolv_addr_cmd_handler+0x68>)
    93b6:	6814      	ldr	r4, [r2, #0]
    93b8:	2205      	movs	r2, #5
    93ba:	72a0      	strb	r0, [r4, #10]
    93bc:	0020      	movs	r0, r4
    93be:	7022      	strb	r2, [r4, #0]
    93c0:	320f      	adds	r2, #15
    93c2:	7062      	strb	r2, [r4, #1]
    93c4:	3a07      	subs	r2, #7
    93c6:	70a2      	strb	r2, [r4, #2]
    93c8:	70e2      	strb	r2, [r4, #3]
    93ca:	7123      	strb	r3, [r4, #4]
    93cc:	71a3      	strb	r3, [r4, #6]
    93ce:	71e3      	strb	r3, [r4, #7]
    93d0:	7223      	strb	r3, [r4, #8]
    93d2:	3203      	adds	r2, #3
    93d4:	3317      	adds	r3, #23
    93d6:	7263      	strb	r3, [r4, #9]
    93d8:	7162      	strb	r2, [r4, #5]
    93da:	300b      	adds	r0, #11
    93dc:	3a0a      	subs	r2, #10
    93de:	47b8      	blx	r7
    93e0:	0020      	movs	r0, r4
    93e2:	012d      	lsls	r5, r5, #4
    93e4:	002a      	movs	r2, r5
    93e6:	0031      	movs	r1, r6
    93e8:	3011      	adds	r0, #17
    93ea:	47b8      	blx	r7
    93ec:	0029      	movs	r1, r5
    93ee:	3111      	adds	r1, #17
    93f0:	000b      	movs	r3, r1
    93f2:	3b09      	subs	r3, #9
    93f4:	71e3      	strb	r3, [r4, #7]
    93f6:	121b      	asrs	r3, r3, #8
    93f8:	7223      	strb	r3, [r4, #8]
    93fa:	0020      	movs	r0, r4
    93fc:	4b04      	ldr	r3, [pc, #16]	; (9410 <gapm_resolv_addr_cmd_handler+0x6c>)
    93fe:	4798      	blx	r3
    9400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9402:	46c0      	nop			; (mov r8, r8)
    9404:	2000321c 	.word	0x2000321c
    9408:	0000c4d0 	.word	0x0000c4d0
    940c:	0000a2f7 	.word	0x0000a2f7
    9410:	00007859 	.word	0x00007859

00009414 <gapm_addr_solved_ind_handler>:
    9414:	b570      	push	{r4, r5, r6, lr}
    9416:	0004      	movs	r4, r0
    9418:	0008      	movs	r0, r1
    941a:	000d      	movs	r5, r1
    941c:	4e05      	ldr	r6, [pc, #20]	; (9434 <gapm_addr_solved_ind_handler+0x20>)
    941e:	0021      	movs	r1, r4
    9420:	2206      	movs	r2, #6
    9422:	3011      	adds	r0, #17
    9424:	47b0      	blx	r6
    9426:	1c68      	adds	r0, r5, #1
    9428:	1da1      	adds	r1, r4, #6
    942a:	2210      	movs	r2, #16
    942c:	47b0      	blx	r6
    942e:	2300      	movs	r3, #0
    9430:	702b      	strb	r3, [r5, #0]
    9432:	bd70      	pop	{r4, r5, r6, pc}
    9434:	0000a2f7 	.word	0x0000a2f7

00009438 <gapm_profile_added_ind_handler>:
    9438:	7842      	ldrb	r2, [r0, #1]
    943a:	7803      	ldrb	r3, [r0, #0]
    943c:	0212      	lsls	r2, r2, #8
    943e:	4313      	orrs	r3, r2
    9440:	2b1b      	cmp	r3, #27
    9442:	d106      	bne.n	9452 <gapm_profile_added_ind_handler+0x1a>
    9444:	7902      	ldrb	r2, [r0, #4]
    9446:	7943      	ldrb	r3, [r0, #5]
    9448:	2000      	movs	r0, #0
    944a:	021b      	lsls	r3, r3, #8
    944c:	4313      	orrs	r3, r2
    944e:	7008      	strb	r0, [r1, #0]
    9450:	804b      	strh	r3, [r1, #2]
    9452:	203d      	movs	r0, #61	; 0x3d
    9454:	4770      	bx	lr

00009456 <gapm_adv_cmp_evt_ind_handler>:
    9456:	7842      	ldrb	r2, [r0, #1]
    9458:	7803      	ldrb	r3, [r0, #0]
    945a:	0212      	lsls	r2, r2, #8
    945c:	431a      	orrs	r2, r3
    945e:	7883      	ldrb	r3, [r0, #2]
    9460:	041b      	lsls	r3, r3, #16
    9462:	431a      	orrs	r2, r3
    9464:	78c3      	ldrb	r3, [r0, #3]
    9466:	061b      	lsls	r3, r3, #24
    9468:	4313      	orrs	r3, r2
    946a:	604b      	str	r3, [r1, #4]
    946c:	7903      	ldrb	r3, [r0, #4]
    946e:	700b      	strb	r3, [r1, #0]
    9470:	4770      	bx	lr

00009472 <gattc_read_req_ind_parser>:
    9472:	7842      	ldrb	r2, [r0, #1]
    9474:	7803      	ldrb	r3, [r0, #0]
    9476:	0212      	lsls	r2, r2, #8
    9478:	4313      	orrs	r3, r2
    947a:	804b      	strh	r3, [r1, #2]
    947c:	4770      	bx	lr
	...

00009480 <gattc_write_req_ind_parser>:
    9480:	0013      	movs	r3, r2
    9482:	b510      	push	{r4, lr}
    9484:	0a00      	lsrs	r0, r0, #8
    9486:	8010      	strh	r0, [r2, #0]
    9488:	7848      	ldrb	r0, [r1, #1]
    948a:	780a      	ldrb	r2, [r1, #0]
    948c:	0200      	lsls	r0, r0, #8
    948e:	4302      	orrs	r2, r0
    9490:	805a      	strh	r2, [r3, #2]
    9492:	78c8      	ldrb	r0, [r1, #3]
    9494:	788a      	ldrb	r2, [r1, #2]
    9496:	0200      	lsls	r0, r0, #8
    9498:	4302      	orrs	r2, r0
    949a:	809a      	strh	r2, [r3, #4]
    949c:	7948      	ldrb	r0, [r1, #5]
    949e:	790a      	ldrb	r2, [r1, #4]
    94a0:	0200      	lsls	r0, r0, #8
    94a2:	4302      	orrs	r2, r0
    94a4:	80da      	strh	r2, [r3, #6]
    94a6:	3308      	adds	r3, #8
    94a8:	0018      	movs	r0, r3
    94aa:	3106      	adds	r1, #6
    94ac:	4b01      	ldr	r3, [pc, #4]	; (94b4 <gattc_write_req_ind_parser+0x34>)
    94ae:	4798      	blx	r3
    94b0:	bd10      	pop	{r4, pc}
    94b2:	46c0      	nop			; (mov r8, r8)
    94b4:	0000a2f7 	.word	0x0000a2f7

000094b8 <gattc_att_info_req_parser>:
    94b8:	7842      	ldrb	r2, [r0, #1]
    94ba:	7803      	ldrb	r3, [r0, #0]
    94bc:	0212      	lsls	r2, r2, #8
    94be:	4313      	orrs	r3, r2
    94c0:	800b      	strh	r3, [r1, #0]
    94c2:	4770      	bx	lr

000094c4 <gattc_read_cfm>:
    94c4:	b570      	push	{r4, r5, r6, lr}
    94c6:	001d      	movs	r5, r3
    94c8:	2300      	movs	r3, #0
    94ca:	4c17      	ldr	r4, [pc, #92]	; (9528 <gattc_read_cfm+0x64>)
    94cc:	2605      	movs	r6, #5
    94ce:	60a3      	str	r3, [r4, #8]
    94d0:	60e3      	str	r3, [r4, #12]
    94d2:	4c16      	ldr	r4, [pc, #88]	; (952c <gattc_read_cfm+0x68>)
    94d4:	6824      	ldr	r4, [r4, #0]
    94d6:	7121      	strb	r1, [r4, #4]
    94d8:	2110      	movs	r1, #16
    94da:	7026      	strb	r6, [r4, #0]
    94dc:	360f      	adds	r6, #15
    94de:	7066      	strb	r6, [r4, #1]
    94e0:	71a3      	strb	r3, [r4, #6]
    94e2:	3e08      	subs	r6, #8
    94e4:	71e3      	strb	r3, [r4, #7]
    94e6:	7223      	strb	r3, [r4, #8]
    94e8:	7260      	strb	r0, [r4, #9]
    94ea:	0a2b      	lsrs	r3, r5, #8
    94ec:	0a00      	lsrs	r0, r0, #8
    94ee:	70a6      	strb	r6, [r4, #2]
    94f0:	70e6      	strb	r6, [r4, #3]
    94f2:	7161      	strb	r1, [r4, #5]
    94f4:	72a0      	strb	r0, [r4, #10]
    94f6:	72e5      	strb	r5, [r4, #11]
    94f8:	7323      	strb	r3, [r4, #12]
    94fa:	7362      	strb	r2, [r4, #13]
    94fc:	2d00      	cmp	r5, #0
    94fe:	d010      	beq.n	9522 <gattc_read_cfm+0x5e>
    9500:	0020      	movs	r0, r4
    9502:	002a      	movs	r2, r5
    9504:	9904      	ldr	r1, [sp, #16]
    9506:	300e      	adds	r0, #14
    9508:	4b09      	ldr	r3, [pc, #36]	; (9530 <gattc_read_cfm+0x6c>)
    950a:	350e      	adds	r5, #14
    950c:	4798      	blx	r3
    950e:	b2a9      	uxth	r1, r5
    9510:	000b      	movs	r3, r1
    9512:	3b09      	subs	r3, #9
    9514:	71e3      	strb	r3, [r4, #7]
    9516:	121b      	asrs	r3, r3, #8
    9518:	7223      	strb	r3, [r4, #8]
    951a:	0020      	movs	r0, r4
    951c:	4b05      	ldr	r3, [pc, #20]	; (9534 <gattc_read_cfm+0x70>)
    951e:	4798      	blx	r3
    9520:	bd70      	pop	{r4, r5, r6, pc}
    9522:	73a5      	strb	r5, [r4, #14]
    9524:	210f      	movs	r1, #15
    9526:	e7f3      	b.n	9510 <gattc_read_cfm+0x4c>
    9528:	2000321c 	.word	0x2000321c
    952c:	0000c4d0 	.word	0x0000c4d0
    9530:	0000a2f7 	.word	0x0000a2f7
    9534:	00007859 	.word	0x00007859

00009538 <gattc_write_cfm>:
    9538:	b570      	push	{r4, r5, r6, lr}
    953a:	2400      	movs	r4, #0
    953c:	000d      	movs	r5, r1
    953e:	4b0d      	ldr	r3, [pc, #52]	; (9574 <gattc_write_cfm+0x3c>)
    9540:	2105      	movs	r1, #5
    9542:	609c      	str	r4, [r3, #8]
    9544:	60dc      	str	r4, [r3, #12]
    9546:	4b0c      	ldr	r3, [pc, #48]	; (9578 <gattc_write_cfm+0x40>)
    9548:	681b      	ldr	r3, [r3, #0]
    954a:	711d      	strb	r5, [r3, #4]
    954c:	72da      	strb	r2, [r3, #11]
    954e:	2510      	movs	r5, #16
    9550:	2203      	movs	r2, #3
    9552:	7019      	strb	r1, [r3, #0]
    9554:	3111      	adds	r1, #17
    9556:	7059      	strb	r1, [r3, #1]
    9558:	7258      	strb	r0, [r3, #9]
    955a:	390a      	subs	r1, #10
    955c:	0a00      	lsrs	r0, r0, #8
    955e:	715d      	strb	r5, [r3, #5]
    9560:	7099      	strb	r1, [r3, #2]
    9562:	70d9      	strb	r1, [r3, #3]
    9564:	719c      	strb	r4, [r3, #6]
    9566:	721c      	strb	r4, [r3, #8]
    9568:	7298      	strb	r0, [r3, #10]
    956a:	71da      	strb	r2, [r3, #7]
    956c:	0018      	movs	r0, r3
    956e:	4b03      	ldr	r3, [pc, #12]	; (957c <gattc_write_cfm+0x44>)
    9570:	4798      	blx	r3
    9572:	bd70      	pop	{r4, r5, r6, pc}
    9574:	2000321c 	.word	0x2000321c
    9578:	0000c4d0 	.word	0x0000c4d0
    957c:	00007859 	.word	0x00007859

00009580 <gattc_att_info_cfm>:
    9580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9582:	2500      	movs	r5, #0
    9584:	4c0e      	ldr	r4, [pc, #56]	; (95c0 <gattc_att_info_cfm+0x40>)
    9586:	2718      	movs	r7, #24
    9588:	60a5      	str	r5, [r4, #8]
    958a:	60e5      	str	r5, [r4, #12]
    958c:	4c0d      	ldr	r4, [pc, #52]	; (95c4 <gattc_att_info_cfm+0x44>)
    958e:	2605      	movs	r6, #5
    9590:	6824      	ldr	r4, [r4, #0]
    9592:	7121      	strb	r1, [r4, #4]
    9594:	2110      	movs	r1, #16
    9596:	7067      	strb	r7, [r4, #1]
    9598:	7260      	strb	r0, [r4, #9]
    959a:	3f0c      	subs	r7, #12
    959c:	72e2      	strb	r2, [r4, #11]
    959e:	0a00      	lsrs	r0, r0, #8
    95a0:	0a12      	lsrs	r2, r2, #8
    95a2:	7026      	strb	r6, [r4, #0]
    95a4:	70a7      	strb	r7, [r4, #2]
    95a6:	70e7      	strb	r7, [r4, #3]
    95a8:	7161      	strb	r1, [r4, #5]
    95aa:	71a5      	strb	r5, [r4, #6]
    95ac:	7225      	strb	r5, [r4, #8]
    95ae:	72a0      	strb	r0, [r4, #10]
    95b0:	7363      	strb	r3, [r4, #13]
    95b2:	71e6      	strb	r6, [r4, #7]
    95b4:	7322      	strb	r2, [r4, #12]
    95b6:	3902      	subs	r1, #2
    95b8:	0020      	movs	r0, r4
    95ba:	4b03      	ldr	r3, [pc, #12]	; (95c8 <gattc_att_info_cfm+0x48>)
    95bc:	4798      	blx	r3
    95be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    95c0:	2000321c 	.word	0x2000321c
    95c4:	0000c4d0 	.word	0x0000c4d0
    95c8:	00007859 	.word	0x00007859

000095cc <gattc_send_evt_cmd_handler>:
    95cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    95ce:	2600      	movs	r6, #0
    95d0:	ac08      	add	r4, sp, #32
    95d2:	8825      	ldrh	r5, [r4, #0]
    95d4:	4c16      	ldr	r4, [pc, #88]	; (9630 <gattc_send_evt_cmd_handler+0x64>)
    95d6:	2705      	movs	r7, #5
    95d8:	60a6      	str	r6, [r4, #8]
    95da:	60e6      	str	r6, [r4, #12]
    95dc:	4c15      	ldr	r4, [pc, #84]	; (9634 <gattc_send_evt_cmd_handler+0x68>)
    95de:	9301      	str	r3, [sp, #4]
    95e0:	6824      	ldr	r4, [r4, #0]
    95e2:	230c      	movs	r3, #12
    95e4:	7122      	strb	r2, [r4, #4]
    95e6:	2201      	movs	r2, #1
    95e8:	7260      	strb	r0, [r4, #9]
    95ea:	0020      	movs	r0, r4
    95ec:	7027      	strb	r7, [r4, #0]
    95ee:	72a2      	strb	r2, [r4, #10]
    95f0:	370b      	adds	r7, #11
    95f2:	7361      	strb	r1, [r4, #13]
    95f4:	0a2a      	lsrs	r2, r5, #8
    95f6:	0a09      	lsrs	r1, r1, #8
    95f8:	7067      	strb	r7, [r4, #1]
    95fa:	70a3      	strb	r3, [r4, #2]
    95fc:	70e3      	strb	r3, [r4, #3]
    95fe:	7167      	strb	r7, [r4, #5]
    9600:	71a6      	strb	r6, [r4, #6]
    9602:	71e6      	strb	r6, [r4, #7]
    9604:	7226      	strb	r6, [r4, #8]
    9606:	72e6      	strb	r6, [r4, #11]
    9608:	7326      	strb	r6, [r4, #12]
    960a:	73a1      	strb	r1, [r4, #14]
    960c:	73e5      	strb	r5, [r4, #15]
    960e:	7422      	strb	r2, [r4, #16]
    9610:	9901      	ldr	r1, [sp, #4]
    9612:	002a      	movs	r2, r5
    9614:	4b08      	ldr	r3, [pc, #32]	; (9638 <gattc_send_evt_cmd_handler+0x6c>)
    9616:	3511      	adds	r5, #17
    9618:	3011      	adds	r0, #17
    961a:	4798      	blx	r3
    961c:	b2a9      	uxth	r1, r5
    961e:	000b      	movs	r3, r1
    9620:	3b09      	subs	r3, #9
    9622:	71e3      	strb	r3, [r4, #7]
    9624:	121b      	asrs	r3, r3, #8
    9626:	7223      	strb	r3, [r4, #8]
    9628:	0020      	movs	r0, r4
    962a:	4b04      	ldr	r3, [pc, #16]	; (963c <gattc_send_evt_cmd_handler+0x70>)
    962c:	4798      	blx	r3
    962e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    9630:	2000321c 	.word	0x2000321c
    9634:	0000c4d0 	.word	0x0000c4d0
    9638:	0000a2f7 	.word	0x0000a2f7
    963c:	00007859 	.word	0x00007859

00009640 <gattc_event_cfm_handler>:
    9640:	2200      	movs	r2, #0
    9642:	4b0e      	ldr	r3, [pc, #56]	; (967c <gattc_event_cfm_handler+0x3c>)
    9644:	b510      	push	{r4, lr}
    9646:	609a      	str	r2, [r3, #8]
    9648:	60da      	str	r2, [r3, #12]
    964a:	4b0d      	ldr	r3, [pc, #52]	; (9680 <gattc_event_cfm_handler+0x40>)
    964c:	2405      	movs	r4, #5
    964e:	681b      	ldr	r3, [r3, #0]
    9650:	7118      	strb	r0, [r3, #4]
    9652:	2010      	movs	r0, #16
    9654:	701c      	strb	r4, [r3, #0]
    9656:	3409      	adds	r4, #9
    9658:	705c      	strb	r4, [r3, #1]
    965a:	719a      	strb	r2, [r3, #6]
    965c:	3c02      	subs	r4, #2
    965e:	721a      	strb	r2, [r3, #8]
    9660:	7259      	strb	r1, [r3, #9]
    9662:	3202      	adds	r2, #2
    9664:	0a09      	lsrs	r1, r1, #8
    9666:	709c      	strb	r4, [r3, #2]
    9668:	70dc      	strb	r4, [r3, #3]
    966a:	7158      	strb	r0, [r3, #5]
    966c:	7299      	strb	r1, [r3, #10]
    966e:	71da      	strb	r2, [r3, #7]
    9670:	210b      	movs	r1, #11
    9672:	0018      	movs	r0, r3
    9674:	4b03      	ldr	r3, [pc, #12]	; (9684 <gattc_event_cfm_handler+0x44>)
    9676:	4798      	blx	r3
    9678:	bd10      	pop	{r4, pc}
    967a:	46c0      	nop			; (mov r8, r8)
    967c:	2000321c 	.word	0x2000321c
    9680:	0000c4d0 	.word	0x0000c4d0
    9684:	00007859 	.word	0x00007859

00009688 <gattc_disc_svc_ind_parser>:
    9688:	b570      	push	{r4, r5, r6, lr}
    968a:	0015      	movs	r5, r2
    968c:	0a00      	lsrs	r0, r0, #8
    968e:	8010      	strh	r0, [r2, #0]
    9690:	784a      	ldrb	r2, [r1, #1]
    9692:	780b      	ldrb	r3, [r1, #0]
    9694:	0212      	lsls	r2, r2, #8
    9696:	4313      	orrs	r3, r2
    9698:	806b      	strh	r3, [r5, #2]
    969a:	78ca      	ldrb	r2, [r1, #3]
    969c:	788b      	ldrb	r3, [r1, #2]
    969e:	0212      	lsls	r2, r2, #8
    96a0:	4313      	orrs	r3, r2
    96a2:	80ab      	strh	r3, [r5, #4]
    96a4:	790e      	ldrb	r6, [r1, #4]
    96a6:	4b05      	ldr	r3, [pc, #20]	; (96bc <gattc_disc_svc_ind_parser+0x34>)
    96a8:	0030      	movs	r0, r6
    96aa:	000c      	movs	r4, r1
    96ac:	4798      	blx	r3
    96ae:	0032      	movs	r2, r6
    96b0:	71a8      	strb	r0, [r5, #6]
    96b2:	1d61      	adds	r1, r4, #5
    96b4:	1de8      	adds	r0, r5, #7
    96b6:	4b02      	ldr	r3, [pc, #8]	; (96c0 <gattc_disc_svc_ind_parser+0x38>)
    96b8:	4798      	blx	r3
    96ba:	bd70      	pop	{r4, r5, r6, pc}
    96bc:	00006c51 	.word	0x00006c51
    96c0:	0000a2f7 	.word	0x0000a2f7

000096c4 <gattc_disc_svc_incl_ind_parser>:
    96c4:	b570      	push	{r4, r5, r6, lr}
    96c6:	0015      	movs	r5, r2
    96c8:	0a00      	lsrs	r0, r0, #8
    96ca:	8010      	strh	r0, [r2, #0]
    96cc:	784a      	ldrb	r2, [r1, #1]
    96ce:	780b      	ldrb	r3, [r1, #0]
    96d0:	0212      	lsls	r2, r2, #8
    96d2:	4313      	orrs	r3, r2
    96d4:	806b      	strh	r3, [r5, #2]
    96d6:	78ca      	ldrb	r2, [r1, #3]
    96d8:	788b      	ldrb	r3, [r1, #2]
    96da:	0212      	lsls	r2, r2, #8
    96dc:	4313      	orrs	r3, r2
    96de:	80ab      	strh	r3, [r5, #4]
    96e0:	794a      	ldrb	r2, [r1, #5]
    96e2:	790b      	ldrb	r3, [r1, #4]
    96e4:	0212      	lsls	r2, r2, #8
    96e6:	4313      	orrs	r3, r2
    96e8:	80eb      	strh	r3, [r5, #6]
    96ea:	798e      	ldrb	r6, [r1, #6]
    96ec:	4b05      	ldr	r3, [pc, #20]	; (9704 <gattc_disc_svc_incl_ind_parser+0x40>)
    96ee:	0030      	movs	r0, r6
    96f0:	000c      	movs	r4, r1
    96f2:	4798      	blx	r3
    96f4:	7228      	strb	r0, [r5, #8]
    96f6:	0028      	movs	r0, r5
    96f8:	0032      	movs	r2, r6
    96fa:	1de1      	adds	r1, r4, #7
    96fc:	4b02      	ldr	r3, [pc, #8]	; (9708 <gattc_disc_svc_incl_ind_parser+0x44>)
    96fe:	3009      	adds	r0, #9
    9700:	4798      	blx	r3
    9702:	bd70      	pop	{r4, r5, r6, pc}
    9704:	00006c51 	.word	0x00006c51
    9708:	0000a2f7 	.word	0x0000a2f7

0000970c <gattc_disc_char_ind_parser>:
    970c:	b570      	push	{r4, r5, r6, lr}
    970e:	0015      	movs	r5, r2
    9710:	0a00      	lsrs	r0, r0, #8
    9712:	8010      	strh	r0, [r2, #0]
    9714:	784a      	ldrb	r2, [r1, #1]
    9716:	780b      	ldrb	r3, [r1, #0]
    9718:	0212      	lsls	r2, r2, #8
    971a:	4313      	orrs	r3, r2
    971c:	806b      	strh	r3, [r5, #2]
    971e:	78ca      	ldrb	r2, [r1, #3]
    9720:	788b      	ldrb	r3, [r1, #2]
    9722:	0212      	lsls	r2, r2, #8
    9724:	4313      	orrs	r3, r2
    9726:	80ab      	strh	r3, [r5, #4]
    9728:	790b      	ldrb	r3, [r1, #4]
    972a:	000c      	movs	r4, r1
    972c:	71ab      	strb	r3, [r5, #6]
    972e:	794e      	ldrb	r6, [r1, #5]
    9730:	4b05      	ldr	r3, [pc, #20]	; (9748 <gattc_disc_char_ind_parser+0x3c>)
    9732:	0030      	movs	r0, r6
    9734:	4798      	blx	r3
    9736:	71e8      	strb	r0, [r5, #7]
    9738:	0028      	movs	r0, r5
    973a:	0032      	movs	r2, r6
    973c:	1da1      	adds	r1, r4, #6
    973e:	4b03      	ldr	r3, [pc, #12]	; (974c <gattc_disc_char_ind_parser+0x40>)
    9740:	3008      	adds	r0, #8
    9742:	4798      	blx	r3
    9744:	bd70      	pop	{r4, r5, r6, pc}
    9746:	46c0      	nop			; (mov r8, r8)
    9748:	00006c51 	.word	0x00006c51
    974c:	0000a2f7 	.word	0x0000a2f7

00009750 <gattc_disc_char_desc_ind_parser>:
    9750:	b570      	push	{r4, r5, r6, lr}
    9752:	0014      	movs	r4, r2
    9754:	0a00      	lsrs	r0, r0, #8
    9756:	8010      	strh	r0, [r2, #0]
    9758:	784a      	ldrb	r2, [r1, #1]
    975a:	780b      	ldrb	r3, [r1, #0]
    975c:	0212      	lsls	r2, r2, #8
    975e:	4313      	orrs	r3, r2
    9760:	8063      	strh	r3, [r4, #2]
    9762:	788e      	ldrb	r6, [r1, #2]
    9764:	4b05      	ldr	r3, [pc, #20]	; (977c <gattc_disc_char_desc_ind_parser+0x2c>)
    9766:	0030      	movs	r0, r6
    9768:	000d      	movs	r5, r1
    976a:	4798      	blx	r3
    976c:	1ce9      	adds	r1, r5, #3
    976e:	7120      	strb	r0, [r4, #4]
    9770:	0032      	movs	r2, r6
    9772:	1d60      	adds	r0, r4, #5
    9774:	4b02      	ldr	r3, [pc, #8]	; (9780 <gattc_disc_char_desc_ind_parser+0x30>)
    9776:	4798      	blx	r3
    9778:	bd70      	pop	{r4, r5, r6, pc}
    977a:	46c0      	nop			; (mov r8, r8)
    977c:	00006c51 	.word	0x00006c51
    9780:	0000a2f7 	.word	0x0000a2f7

00009784 <gattc_event_ind_and_notification_parser>:
    9784:	b510      	push	{r4, lr}
    9786:	780c      	ldrb	r4, [r1, #0]
    9788:	0013      	movs	r3, r2
    978a:	2c12      	cmp	r4, #18
    978c:	d112      	bne.n	97b4 <gattc_event_ind_and_notification_parser+0x30>
    978e:	0a00      	lsrs	r0, r0, #8
    9790:	8010      	strh	r0, [r2, #0]
    9792:	78c8      	ldrb	r0, [r1, #3]
    9794:	788a      	ldrb	r2, [r1, #2]
    9796:	0200      	lsls	r0, r0, #8
    9798:	4302      	orrs	r2, r0
    979a:	805a      	strh	r2, [r3, #2]
    979c:	794c      	ldrb	r4, [r1, #5]
    979e:	7908      	ldrb	r0, [r1, #4]
    97a0:	0224      	lsls	r4, r4, #8
    97a2:	4320      	orrs	r0, r4
    97a4:	8098      	strh	r0, [r3, #4]
    97a6:	3106      	adds	r1, #6
    97a8:	1d98      	adds	r0, r3, #6
    97aa:	4b0d      	ldr	r3, [pc, #52]	; (97e0 <gattc_event_ind_and_notification_parser+0x5c>)
    97ac:	4798      	blx	r3
    97ae:	221c      	movs	r2, #28
    97b0:	0010      	movs	r0, r2
    97b2:	bd10      	pop	{r4, pc}
    97b4:	2200      	movs	r2, #0
    97b6:	2c13      	cmp	r4, #19
    97b8:	d1fa      	bne.n	97b0 <gattc_event_ind_and_notification_parser+0x2c>
    97ba:	0a00      	lsrs	r0, r0, #8
    97bc:	8018      	strh	r0, [r3, #0]
    97be:	78c8      	ldrb	r0, [r1, #3]
    97c0:	788a      	ldrb	r2, [r1, #2]
    97c2:	0200      	lsls	r0, r0, #8
    97c4:	4302      	orrs	r2, r0
    97c6:	805a      	strh	r2, [r3, #2]
    97c8:	794c      	ldrb	r4, [r1, #5]
    97ca:	7908      	ldrb	r0, [r1, #4]
    97cc:	0224      	lsls	r4, r4, #8
    97ce:	4320      	orrs	r0, r4
    97d0:	8098      	strh	r0, [r3, #4]
    97d2:	3106      	adds	r1, #6
    97d4:	1d98      	adds	r0, r3, #6
    97d6:	4b02      	ldr	r3, [pc, #8]	; (97e0 <gattc_event_ind_and_notification_parser+0x5c>)
    97d8:	4798      	blx	r3
    97da:	221d      	movs	r2, #29
    97dc:	e7e8      	b.n	97b0 <gattc_event_ind_and_notification_parser+0x2c>
    97de:	46c0      	nop			; (mov r8, r8)
    97e0:	0000a2f7 	.word	0x0000a2f7

000097e4 <gattc_complete_evt_handler>:
    97e4:	b500      	push	{lr}
    97e6:	0a00      	lsrs	r0, r0, #8
    97e8:	8010      	strh	r0, [r2, #0]
    97ea:	7808      	ldrb	r0, [r1, #0]
    97ec:	7090      	strb	r0, [r2, #2]
    97ee:	784b      	ldrb	r3, [r1, #1]
    97f0:	3801      	subs	r0, #1
    97f2:	70d3      	strb	r3, [r2, #3]
    97f4:	2813      	cmp	r0, #19
    97f6:	d82c      	bhi.n	9852 <gattc_complete_evt_handler+0x6e>
    97f8:	f000 fba0 	bl	9f3c <__gnu_thumb1_case_uqi>
    97fc:	0a0a0a0c 	.word	0x0a0a0a0c
    9800:	210a0a0a 	.word	0x210a0a0a
    9804:	111f2121 	.word	0x111f2121
    9808:	2b111111 	.word	0x2b111111
    980c:	2919132b 	.word	0x2919132b
    9810:	2018      	movs	r0, #24
    9812:	bd00      	pop	{pc}
    9814:	203d      	movs	r0, #61	; 0x3d
    9816:	2b00      	cmp	r3, #0
    9818:	d0fb      	beq.n	9812 <gattc_complete_evt_handler+0x2e>
    981a:	3818      	subs	r0, #24
    981c:	e7f9      	b.n	9812 <gattc_complete_evt_handler+0x2e>
    981e:	2026      	movs	r0, #38	; 0x26
    9820:	e7f7      	b.n	9812 <gattc_complete_evt_handler+0x2e>
    9822:	4a0d      	ldr	r2, [pc, #52]	; (9858 <gattc_complete_evt_handler+0x74>)
    9824:	201e      	movs	r0, #30
    9826:	6813      	ldr	r3, [r2, #0]
    9828:	3b01      	subs	r3, #1
    982a:	6013      	str	r3, [r2, #0]
    982c:	e7f1      	b.n	9812 <gattc_complete_evt_handler+0x2e>
    982e:	4a0a      	ldr	r2, [pc, #40]	; (9858 <gattc_complete_evt_handler+0x74>)
    9830:	201f      	movs	r0, #31
    9832:	6813      	ldr	r3, [r2, #0]
    9834:	3b01      	subs	r3, #1
    9836:	6013      	str	r3, [r2, #0]
    9838:	e7eb      	b.n	9812 <gattc_complete_evt_handler+0x2e>
    983a:	201a      	movs	r0, #26
    983c:	e7e9      	b.n	9812 <gattc_complete_evt_handler+0x2e>
    983e:	203d      	movs	r0, #61	; 0x3d
    9840:	2b00      	cmp	r3, #0
    9842:	d0e6      	beq.n	9812 <gattc_complete_evt_handler+0x2e>
    9844:	2182      	movs	r1, #130	; 0x82
    9846:	0089      	lsls	r1, r1, #2
    9848:	5453      	strb	r3, [r2, r1]
    984a:	3824      	subs	r0, #36	; 0x24
    984c:	e7e1      	b.n	9812 <gattc_complete_evt_handler+0x2e>
    984e:	2022      	movs	r0, #34	; 0x22
    9850:	e7df      	b.n	9812 <gattc_complete_evt_handler+0x2e>
    9852:	2000      	movs	r0, #0
    9854:	e7dd      	b.n	9812 <gattc_complete_evt_handler+0x2e>
    9856:	46c0      	nop			; (mov r8, r8)
    9858:	20003bb4 	.word	0x20003bb4

0000985c <gattc_event_mtu_changed_ind_parser>:
    985c:	0a00      	lsrs	r0, r0, #8
    985e:	8010      	strh	r0, [r2, #0]
    9860:	7848      	ldrb	r0, [r1, #1]
    9862:	780b      	ldrb	r3, [r1, #0]
    9864:	0200      	lsls	r0, r0, #8
    9866:	4303      	orrs	r3, r0
    9868:	8053      	strh	r3, [r2, #2]
    986a:	4770      	bx	lr

0000986c <gattc_read_ind_parser>:
    986c:	0a00      	lsrs	r0, r0, #8
    986e:	b510      	push	{r4, lr}
    9870:	0013      	movs	r3, r2
    9872:	8010      	strh	r0, [r2, #0]
    9874:	2282      	movs	r2, #130	; 0x82
    9876:	2000      	movs	r0, #0
    9878:	0092      	lsls	r2, r2, #2
    987a:	5498      	strb	r0, [r3, r2]
    987c:	7848      	ldrb	r0, [r1, #1]
    987e:	780a      	ldrb	r2, [r1, #0]
    9880:	0200      	lsls	r0, r0, #8
    9882:	4302      	orrs	r2, r0
    9884:	805a      	strh	r2, [r3, #2]
    9886:	78c8      	ldrb	r0, [r1, #3]
    9888:	788a      	ldrb	r2, [r1, #2]
    988a:	0200      	lsls	r0, r0, #8
    988c:	4302      	orrs	r2, r0
    988e:	80da      	strh	r2, [r3, #6]
    9890:	7948      	ldrb	r0, [r1, #5]
    9892:	790a      	ldrb	r2, [r1, #4]
    9894:	0200      	lsls	r0, r0, #8
    9896:	4302      	orrs	r2, r0
    9898:	809a      	strh	r2, [r3, #4]
    989a:	3308      	adds	r3, #8
    989c:	0018      	movs	r0, r3
    989e:	3106      	adds	r1, #6
    98a0:	4b01      	ldr	r3, [pc, #4]	; (98a8 <gattc_read_ind_parser+0x3c>)
    98a2:	4798      	blx	r3
    98a4:	bd10      	pop	{r4, pc}
    98a6:	46c0      	nop			; (mov r8, r8)
    98a8:	0000a2f7 	.word	0x0000a2f7

000098ac <gattc_svc_changed_cfg_ind_parser>:
    98ac:	0a00      	lsrs	r0, r0, #8
    98ae:	8010      	strh	r0, [r2, #0]
    98b0:	7848      	ldrb	r0, [r1, #1]
    98b2:	780b      	ldrb	r3, [r1, #0]
    98b4:	0200      	lsls	r0, r0, #8
    98b6:	4303      	orrs	r3, r0
    98b8:	8053      	strh	r3, [r2, #2]
    98ba:	4770      	bx	lr

000098bc <gattm_add_svc_req_handler>:
    98bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    98be:	7943      	ldrb	r3, [r0, #5]
    98c0:	4a38      	ldr	r2, [pc, #224]	; (99a4 <gattm_add_svc_req_handler+0xe8>)
    98c2:	9301      	str	r3, [sp, #4]
    98c4:	2300      	movs	r3, #0
    98c6:	60d3      	str	r3, [r2, #12]
    98c8:	6093      	str	r3, [r2, #8]
    98ca:	4a37      	ldr	r2, [pc, #220]	; (99a8 <gattm_add_svc_req_handler+0xec>)
    98cc:	0005      	movs	r5, r0
    98ce:	6814      	ldr	r4, [r2, #0]
    98d0:	2205      	movs	r2, #5
    98d2:	7022      	strb	r2, [r4, #0]
    98d4:	3206      	adds	r2, #6
    98d6:	70a2      	strb	r2, [r4, #2]
    98d8:	70e2      	strb	r2, [r4, #3]
    98da:	3205      	adds	r2, #5
    98dc:	7063      	strb	r3, [r4, #1]
    98de:	7123      	strb	r3, [r4, #4]
    98e0:	7162      	strb	r2, [r4, #5]
    98e2:	71a3      	strb	r3, [r4, #6]
    98e4:	71e3      	strb	r3, [r4, #7]
    98e6:	7223      	strb	r3, [r4, #8]
    98e8:	8802      	ldrh	r2, [r0, #0]
    98ea:	7262      	strb	r2, [r4, #9]
    98ec:	8802      	ldrh	r2, [r0, #0]
    98ee:	0a12      	lsrs	r2, r2, #8
    98f0:	72a2      	strb	r2, [r4, #10]
    98f2:	8842      	ldrh	r2, [r0, #2]
    98f4:	72e2      	strb	r2, [r4, #11]
    98f6:	8842      	ldrh	r2, [r0, #2]
    98f8:	0a12      	lsrs	r2, r2, #8
    98fa:	7322      	strb	r2, [r4, #12]
    98fc:	7902      	ldrb	r2, [r0, #4]
    98fe:	7362      	strb	r2, [r4, #13]
    9900:	466a      	mov	r2, sp
    9902:	7912      	ldrb	r2, [r2, #4]
    9904:	73a2      	strb	r2, [r4, #14]
    9906:	18ea      	adds	r2, r5, r3
    9908:	7991      	ldrb	r1, [r2, #6]
    990a:	18e2      	adds	r2, r4, r3
    990c:	3301      	adds	r3, #1
    990e:	73d1      	strb	r1, [r2, #15]
    9910:	2b10      	cmp	r3, #16
    9912:	d1f8      	bne.n	9906 <gattm_add_svc_req_handler+0x4a>
    9914:	002f      	movs	r7, r5
    9916:	2300      	movs	r3, #0
    9918:	261f      	movs	r6, #31
    991a:	3716      	adds	r7, #22
    991c:	9300      	str	r3, [sp, #0]
    991e:	9b00      	ldr	r3, [sp, #0]
    9920:	9a01      	ldr	r2, [sp, #4]
    9922:	4293      	cmp	r3, r2
    9924:	db1b      	blt.n	995e <gattm_add_svc_req_handler+0xa2>
    9926:	2114      	movs	r1, #20
    9928:	4e1e      	ldr	r6, [pc, #120]	; (99a4 <gattm_add_svc_req_handler+0xe8>)
    992a:	4b20      	ldr	r3, [pc, #128]	; (99ac <gattm_add_svc_req_handler+0xf0>)
    992c:	4351      	muls	r1, r2
    992e:	8033      	strh	r3, [r6, #0]
    9930:	230b      	movs	r3, #11
    9932:	311f      	adds	r1, #31
    9934:	80b3      	strh	r3, [r6, #4]
    9936:	000b      	movs	r3, r1
    9938:	3b09      	subs	r3, #9
    993a:	71e3      	strb	r3, [r4, #7]
    993c:	121b      	asrs	r3, r3, #8
    993e:	7223      	strb	r3, [r4, #8]
    9940:	0020      	movs	r0, r4
    9942:	4b1b      	ldr	r3, [pc, #108]	; (99b0 <gattm_add_svc_req_handler+0xf4>)
    9944:	4798      	blx	r3
    9946:	4b1b      	ldr	r3, [pc, #108]	; (99b4 <gattm_add_svc_req_handler+0xf8>)
    9948:	4798      	blx	r3
    994a:	2800      	cmp	r0, #0
    994c:	d106      	bne.n	995c <gattm_add_svc_req_handler+0xa0>
    994e:	68b3      	ldr	r3, [r6, #8]
    9950:	7859      	ldrb	r1, [r3, #1]
    9952:	781a      	ldrb	r2, [r3, #0]
    9954:	0209      	lsls	r1, r1, #8
    9956:	430a      	orrs	r2, r1
    9958:	802a      	strh	r2, [r5, #0]
    995a:	7898      	ldrb	r0, [r3, #2]
    995c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    995e:	0039      	movs	r1, r7
    9960:	19a0      	adds	r0, r4, r6
    9962:	2210      	movs	r2, #16
    9964:	4b14      	ldr	r3, [pc, #80]	; (99b8 <gattm_add_svc_req_handler+0xfc>)
    9966:	4798      	blx	r3
    9968:	0033      	movs	r3, r6
    996a:	8a3a      	ldrh	r2, [r7, #16]
    996c:	3310      	adds	r3, #16
    996e:	b29b      	uxth	r3, r3
    9970:	54e2      	strb	r2, [r4, r3]
    9972:	0033      	movs	r3, r6
    9974:	8a3a      	ldrh	r2, [r7, #16]
    9976:	3311      	adds	r3, #17
    9978:	b29b      	uxth	r3, r3
    997a:	0a12      	lsrs	r2, r2, #8
    997c:	54e2      	strb	r2, [r4, r3]
    997e:	0032      	movs	r2, r6
    9980:	0033      	movs	r3, r6
    9982:	8a79      	ldrh	r1, [r7, #18]
    9984:	3212      	adds	r2, #18
    9986:	b292      	uxth	r2, r2
    9988:	54a1      	strb	r1, [r4, r2]
    998a:	8a7a      	ldrh	r2, [r7, #18]
    998c:	3313      	adds	r3, #19
    998e:	b29b      	uxth	r3, r3
    9990:	0a12      	lsrs	r2, r2, #8
    9992:	54e2      	strb	r2, [r4, r3]
    9994:	9b00      	ldr	r3, [sp, #0]
    9996:	3614      	adds	r6, #20
    9998:	3301      	adds	r3, #1
    999a:	b2b6      	uxth	r6, r6
    999c:	9300      	str	r3, [sp, #0]
    999e:	3714      	adds	r7, #20
    99a0:	e7bd      	b.n	991e <gattm_add_svc_req_handler+0x62>
    99a2:	46c0      	nop			; (mov r8, r8)
    99a4:	2000321c 	.word	0x2000321c
    99a8:	0000c4d0 	.word	0x0000c4d0
    99ac:	00000b01 	.word	0x00000b01
    99b0:	00007859 	.word	0x00007859
    99b4:	00007e6d 	.word	0x00007e6d
    99b8:	0000a2f7 	.word	0x0000a2f7

000099bc <gattm_add_attribute_req_handler>:
    99bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    99be:	001f      	movs	r7, r3
    99c0:	4b17      	ldr	r3, [pc, #92]	; (9a20 <gattm_add_attribute_req_handler+0x64>)
    99c2:	9100      	str	r1, [sp, #0]
    99c4:	9201      	str	r2, [sp, #4]
    99c6:	0004      	movs	r4, r0
    99c8:	7946      	ldrb	r6, [r0, #5]
    99ca:	6818      	ldr	r0, [r3, #0]
    99cc:	2114      	movs	r1, #20
    99ce:	4b15      	ldr	r3, [pc, #84]	; (9a24 <gattm_add_attribute_req_handler+0x68>)
    99d0:	382a      	subs	r0, #42	; 0x2a
    99d2:	4798      	blx	r3
    99d4:	2311      	movs	r3, #17
    99d6:	4286      	cmp	r6, r0
    99d8:	d21f      	bcs.n	9a1a <gattm_add_attribute_req_handler+0x5e>
    99da:	2514      	movs	r5, #20
    99dc:	0030      	movs	r0, r6
    99de:	4368      	muls	r0, r5
    99e0:	3016      	adds	r0, #22
    99e2:	2210      	movs	r2, #16
    99e4:	2100      	movs	r1, #0
    99e6:	4b10      	ldr	r3, [pc, #64]	; (9a28 <gattm_add_attribute_req_handler+0x6c>)
    99e8:	1820      	adds	r0, r4, r0
    99ea:	4798      	blx	r3
    99ec:	7960      	ldrb	r0, [r4, #5]
    99ee:	003a      	movs	r2, r7
    99f0:	4368      	muls	r0, r5
    99f2:	3016      	adds	r0, #22
    99f4:	4b0d      	ldr	r3, [pc, #52]	; (9a2c <gattm_add_attribute_req_handler+0x70>)
    99f6:	1820      	adds	r0, r4, r0
    99f8:	9908      	ldr	r1, [sp, #32]
    99fa:	4798      	blx	r3
    99fc:	466a      	mov	r2, sp
    99fe:	7963      	ldrb	r3, [r4, #5]
    9a00:	8812      	ldrh	r2, [r2, #0]
    9a02:	435d      	muls	r5, r3
    9a04:	1965      	adds	r5, r4, r5
    9a06:	852a      	strh	r2, [r5, #40]	; 0x28
    9a08:	466a      	mov	r2, sp
    9a0a:	8892      	ldrh	r2, [r2, #4]
    9a0c:	84ea      	strh	r2, [r5, #38]	; 0x26
    9a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9a10:	8013      	strh	r3, [r2, #0]
    9a12:	7963      	ldrb	r3, [r4, #5]
    9a14:	3301      	adds	r3, #1
    9a16:	7163      	strb	r3, [r4, #5]
    9a18:	2300      	movs	r3, #0
    9a1a:	0018      	movs	r0, r3
    9a1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9a1e:	46c0      	nop			; (mov r8, r8)
    9a20:	2000339c 	.word	0x2000339c
    9a24:	00009f51 	.word	0x00009f51
    9a28:	0000a309 	.word	0x0000a309
    9a2c:	0000a2f7 	.word	0x0000a2f7

00009a30 <gattm_att_set_value_req_handler>:
    9a30:	b570      	push	{r4, r5, r6, lr}
    9a32:	000d      	movs	r5, r1
    9a34:	0011      	movs	r1, r2
    9a36:	4a1c      	ldr	r2, [pc, #112]	; (9aa8 <gattm_att_set_value_req_handler+0x78>)
    9a38:	2300      	movs	r3, #0
    9a3a:	6814      	ldr	r4, [r2, #0]
    9a3c:	2205      	movs	r2, #5
    9a3e:	4e1b      	ldr	r6, [pc, #108]	; (9aac <gattm_att_set_value_req_handler+0x7c>)
    9a40:	60b3      	str	r3, [r6, #8]
    9a42:	60f3      	str	r3, [r6, #12]
    9a44:	7022      	strb	r2, [r4, #0]
    9a46:	3207      	adds	r2, #7
    9a48:	7062      	strb	r2, [r4, #1]
    9a4a:	3a01      	subs	r2, #1
    9a4c:	70a2      	strb	r2, [r4, #2]
    9a4e:	70e2      	strb	r2, [r4, #3]
    9a50:	7260      	strb	r0, [r4, #9]
    9a52:	3205      	adds	r2, #5
    9a54:	0a00      	lsrs	r0, r0, #8
    9a56:	7123      	strb	r3, [r4, #4]
    9a58:	7162      	strb	r2, [r4, #5]
    9a5a:	71a3      	strb	r3, [r4, #6]
    9a5c:	71e3      	strb	r3, [r4, #7]
    9a5e:	7223      	strb	r3, [r4, #8]
    9a60:	72a0      	strb	r0, [r4, #10]
    9a62:	4299      	cmp	r1, r3
    9a64:	d01c      	beq.n	9aa0 <gattm_att_set_value_req_handler+0x70>
    9a66:	0020      	movs	r0, r4
    9a68:	0a2b      	lsrs	r3, r5, #8
    9a6a:	72e5      	strb	r5, [r4, #11]
    9a6c:	7323      	strb	r3, [r4, #12]
    9a6e:	002a      	movs	r2, r5
    9a70:	300d      	adds	r0, #13
    9a72:	4b0f      	ldr	r3, [pc, #60]	; (9ab0 <gattm_att_set_value_req_handler+0x80>)
    9a74:	350d      	adds	r5, #13
    9a76:	4798      	blx	r3
    9a78:	b2a9      	uxth	r1, r5
    9a7a:	4b0e      	ldr	r3, [pc, #56]	; (9ab4 <gattm_att_set_value_req_handler+0x84>)
    9a7c:	0020      	movs	r0, r4
    9a7e:	8033      	strh	r3, [r6, #0]
    9a80:	230b      	movs	r3, #11
    9a82:	80b3      	strh	r3, [r6, #4]
    9a84:	000b      	movs	r3, r1
    9a86:	3b09      	subs	r3, #9
    9a88:	71e3      	strb	r3, [r4, #7]
    9a8a:	121b      	asrs	r3, r3, #8
    9a8c:	7223      	strb	r3, [r4, #8]
    9a8e:	4b0a      	ldr	r3, [pc, #40]	; (9ab8 <gattm_att_set_value_req_handler+0x88>)
    9a90:	4798      	blx	r3
    9a92:	4b0a      	ldr	r3, [pc, #40]	; (9abc <gattm_att_set_value_req_handler+0x8c>)
    9a94:	4798      	blx	r3
    9a96:	2800      	cmp	r0, #0
    9a98:	d101      	bne.n	9a9e <gattm_att_set_value_req_handler+0x6e>
    9a9a:	68b3      	ldr	r3, [r6, #8]
    9a9c:	7898      	ldrb	r0, [r3, #2]
    9a9e:	bd70      	pop	{r4, r5, r6, pc}
    9aa0:	72e1      	strb	r1, [r4, #11]
    9aa2:	7321      	strb	r1, [r4, #12]
    9aa4:	210d      	movs	r1, #13
    9aa6:	e7e8      	b.n	9a7a <gattm_att_set_value_req_handler+0x4a>
    9aa8:	0000c4d0 	.word	0x0000c4d0
    9aac:	2000321c 	.word	0x2000321c
    9ab0:	0000a2f7 	.word	0x0000a2f7
    9ab4:	00000b0d 	.word	0x00000b0d
    9ab8:	00007859 	.word	0x00007859
    9abc:	00007e6d 	.word	0x00007e6d

00009ac0 <gattm_att_get_value_req_handler>:
    9ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ac2:	2300      	movs	r3, #0
    9ac4:	0005      	movs	r5, r0
    9ac6:	0016      	movs	r6, r2
    9ac8:	4a19      	ldr	r2, [pc, #100]	; (9b30 <gattm_att_get_value_req_handler+0x70>)
    9aca:	4c1a      	ldr	r4, [pc, #104]	; (9b34 <gattm_att_get_value_req_handler+0x74>)
    9acc:	6810      	ldr	r0, [r2, #0]
    9ace:	2205      	movs	r2, #5
    9ad0:	60a3      	str	r3, [r4, #8]
    9ad2:	60e3      	str	r3, [r4, #12]
    9ad4:	7103      	strb	r3, [r0, #4]
    9ad6:	7183      	strb	r3, [r0, #6]
    9ad8:	7203      	strb	r3, [r0, #8]
    9ada:	0a2b      	lsrs	r3, r5, #8
    9adc:	7283      	strb	r3, [r0, #10]
    9ade:	4b16      	ldr	r3, [pc, #88]	; (9b38 <gattm_att_get_value_req_handler+0x78>)
    9ae0:	7002      	strb	r2, [r0, #0]
    9ae2:	1892      	adds	r2, r2, r2
    9ae4:	7042      	strb	r2, [r0, #1]
    9ae6:	000f      	movs	r7, r1
    9ae8:	8023      	strh	r3, [r4, #0]
    9aea:	210b      	movs	r1, #11
    9aec:	2302      	movs	r3, #2
    9aee:	3206      	adds	r2, #6
    9af0:	7081      	strb	r1, [r0, #2]
    9af2:	70c1      	strb	r1, [r0, #3]
    9af4:	7142      	strb	r2, [r0, #5]
    9af6:	71c3      	strb	r3, [r0, #7]
    9af8:	7245      	strb	r5, [r0, #9]
    9afa:	4b10      	ldr	r3, [pc, #64]	; (9b3c <gattm_att_get_value_req_handler+0x7c>)
    9afc:	80a1      	strh	r1, [r4, #4]
    9afe:	4798      	blx	r3
    9b00:	4b0f      	ldr	r3, [pc, #60]	; (9b40 <gattm_att_get_value_req_handler+0x80>)
    9b02:	4798      	blx	r3
    9b04:	2800      	cmp	r0, #0
    9b06:	d112      	bne.n	9b2e <gattm_att_get_value_req_handler+0x6e>
    9b08:	68a1      	ldr	r1, [r4, #8]
    9b0a:	0030      	movs	r0, r6
    9b0c:	784c      	ldrb	r4, [r1, #1]
    9b0e:	780b      	ldrb	r3, [r1, #0]
    9b10:	0224      	lsls	r4, r4, #8
    9b12:	431c      	orrs	r4, r3
    9b14:	78cb      	ldrb	r3, [r1, #3]
    9b16:	788a      	ldrb	r2, [r1, #2]
    9b18:	021b      	lsls	r3, r3, #8
    9b1a:	431a      	orrs	r2, r3
    9b1c:	803a      	strh	r2, [r7, #0]
    9b1e:	790f      	ldrb	r7, [r1, #4]
    9b20:	4b08      	ldr	r3, [pc, #32]	; (9b44 <gattm_att_get_value_req_handler+0x84>)
    9b22:	3105      	adds	r1, #5
    9b24:	4798      	blx	r3
    9b26:	20e2      	movs	r0, #226	; 0xe2
    9b28:	42a5      	cmp	r5, r4
    9b2a:	d100      	bne.n	9b2e <gattm_att_get_value_req_handler+0x6e>
    9b2c:	0038      	movs	r0, r7
    9b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9b30:	0000c4d0 	.word	0x0000c4d0
    9b34:	2000321c 	.word	0x2000321c
    9b38:	00000b0b 	.word	0x00000b0b
    9b3c:	00007859 	.word	0x00007859
    9b40:	00007e6d 	.word	0x00007e6d
    9b44:	0000a2f7 	.word	0x0000a2f7

00009b48 <htpt_enable_rsp_handler>:
    9b48:	780b      	ldrb	r3, [r1, #0]
    9b4a:	7013      	strb	r3, [r2, #0]
    9b4c:	784b      	ldrb	r3, [r1, #1]
    9b4e:	7053      	strb	r3, [r2, #1]
    9b50:	4770      	bx	lr

00009b52 <htpt_temp_send_rsp_handler>:
    9b52:	780b      	ldrb	r3, [r1, #0]
    9b54:	7013      	strb	r3, [r2, #0]
    9b56:	4770      	bx	lr

00009b58 <htpt_meas_intv_upd_rsp_handler>:
    9b58:	780b      	ldrb	r3, [r1, #0]
    9b5a:	7013      	strb	r3, [r2, #0]
    9b5c:	4770      	bx	lr

00009b5e <htpt_meas_intv_chg_req_ind_handler>:
    9b5e:	78c8      	ldrb	r0, [r1, #3]
    9b60:	788b      	ldrb	r3, [r1, #2]
    9b62:	0200      	lsls	r0, r0, #8
    9b64:	4303      	orrs	r3, r0
    9b66:	8013      	strh	r3, [r2, #0]
    9b68:	4770      	bx	lr

00009b6a <htpt_cfg_indntf_ind_handler>:
    9b6a:	780b      	ldrb	r3, [r1, #0]
    9b6c:	7013      	strb	r3, [r2, #0]
    9b6e:	784b      	ldrb	r3, [r1, #1]
    9b70:	7053      	strb	r3, [r2, #1]
    9b72:	4770      	bx	lr

00009b74 <write_32_to_BTLC1000>:
    9b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    9b76:	2206      	movs	r2, #6
    9b78:	ab01      	add	r3, sp, #4
    9b7a:	701a      	strb	r2, [r3, #0]
    9b7c:	0e02      	lsrs	r2, r0, #24
    9b7e:	705a      	strb	r2, [r3, #1]
    9b80:	0c02      	lsrs	r2, r0, #16
    9b82:	709a      	strb	r2, [r3, #2]
    9b84:	0a02      	lsrs	r2, r0, #8
    9b86:	70da      	strb	r2, [r3, #3]
    9b88:	0e0a      	lsrs	r2, r1, #24
    9b8a:	715a      	strb	r2, [r3, #5]
    9b8c:	0c0a      	lsrs	r2, r1, #16
    9b8e:	719a      	strb	r2, [r3, #6]
    9b90:	0a0a      	lsrs	r2, r1, #8
    9b92:	7118      	strb	r0, [r3, #4]
    9b94:	71da      	strb	r2, [r3, #7]
    9b96:	7219      	strb	r1, [r3, #8]
    9b98:	0018      	movs	r0, r3
    9b9a:	2109      	movs	r1, #9
    9b9c:	4b01      	ldr	r3, [pc, #4]	; (9ba4 <write_32_to_BTLC1000+0x30>)
    9b9e:	4798      	blx	r3
    9ba0:	b005      	add	sp, #20
    9ba2:	bd00      	pop	{pc}
    9ba4:	00007859 	.word	0x00007859

00009ba8 <patchFuncAndVars>:
    9ba8:	b510      	push	{r4, lr}
    9baa:	4925      	ldr	r1, [pc, #148]	; (9c40 <patchFuncAndVars+0x98>)
    9bac:	4c25      	ldr	r4, [pc, #148]	; (9c44 <patchFuncAndVars+0x9c>)
    9bae:	4826      	ldr	r0, [pc, #152]	; (9c48 <patchFuncAndVars+0xa0>)
    9bb0:	47a0      	blx	r4
    9bb2:	4926      	ldr	r1, [pc, #152]	; (9c4c <patchFuncAndVars+0xa4>)
    9bb4:	4826      	ldr	r0, [pc, #152]	; (9c50 <patchFuncAndVars+0xa8>)
    9bb6:	47a0      	blx	r4
    9bb8:	4926      	ldr	r1, [pc, #152]	; (9c54 <patchFuncAndVars+0xac>)
    9bba:	4827      	ldr	r0, [pc, #156]	; (9c58 <patchFuncAndVars+0xb0>)
    9bbc:	47a0      	blx	r4
    9bbe:	4927      	ldr	r1, [pc, #156]	; (9c5c <patchFuncAndVars+0xb4>)
    9bc0:	4827      	ldr	r0, [pc, #156]	; (9c60 <patchFuncAndVars+0xb8>)
    9bc2:	47a0      	blx	r4
    9bc4:	4927      	ldr	r1, [pc, #156]	; (9c64 <patchFuncAndVars+0xbc>)
    9bc6:	4828      	ldr	r0, [pc, #160]	; (9c68 <patchFuncAndVars+0xc0>)
    9bc8:	47a0      	blx	r4
    9bca:	4928      	ldr	r1, [pc, #160]	; (9c6c <patchFuncAndVars+0xc4>)
    9bcc:	4828      	ldr	r0, [pc, #160]	; (9c70 <patchFuncAndVars+0xc8>)
    9bce:	47a0      	blx	r4
    9bd0:	4928      	ldr	r1, [pc, #160]	; (9c74 <patchFuncAndVars+0xcc>)
    9bd2:	4829      	ldr	r0, [pc, #164]	; (9c78 <patchFuncAndVars+0xd0>)
    9bd4:	47a0      	blx	r4
    9bd6:	4929      	ldr	r1, [pc, #164]	; (9c7c <patchFuncAndVars+0xd4>)
    9bd8:	4829      	ldr	r0, [pc, #164]	; (9c80 <patchFuncAndVars+0xd8>)
    9bda:	47a0      	blx	r4
    9bdc:	4929      	ldr	r1, [pc, #164]	; (9c84 <patchFuncAndVars+0xdc>)
    9bde:	482a      	ldr	r0, [pc, #168]	; (9c88 <patchFuncAndVars+0xe0>)
    9be0:	47a0      	blx	r4
    9be2:	492a      	ldr	r1, [pc, #168]	; (9c8c <patchFuncAndVars+0xe4>)
    9be4:	482a      	ldr	r0, [pc, #168]	; (9c90 <patchFuncAndVars+0xe8>)
    9be6:	47a0      	blx	r4
    9be8:	492a      	ldr	r1, [pc, #168]	; (9c94 <patchFuncAndVars+0xec>)
    9bea:	482b      	ldr	r0, [pc, #172]	; (9c98 <patchFuncAndVars+0xf0>)
    9bec:	47a0      	blx	r4
    9bee:	492b      	ldr	r1, [pc, #172]	; (9c9c <patchFuncAndVars+0xf4>)
    9bf0:	482b      	ldr	r0, [pc, #172]	; (9ca0 <patchFuncAndVars+0xf8>)
    9bf2:	47a0      	blx	r4
    9bf4:	492b      	ldr	r1, [pc, #172]	; (9ca4 <patchFuncAndVars+0xfc>)
    9bf6:	482c      	ldr	r0, [pc, #176]	; (9ca8 <patchFuncAndVars+0x100>)
    9bf8:	47a0      	blx	r4
    9bfa:	492c      	ldr	r1, [pc, #176]	; (9cac <patchFuncAndVars+0x104>)
    9bfc:	482c      	ldr	r0, [pc, #176]	; (9cb0 <patchFuncAndVars+0x108>)
    9bfe:	47a0      	blx	r4
    9c00:	492c      	ldr	r1, [pc, #176]	; (9cb4 <patchFuncAndVars+0x10c>)
    9c02:	482d      	ldr	r0, [pc, #180]	; (9cb8 <patchFuncAndVars+0x110>)
    9c04:	47a0      	blx	r4
    9c06:	492d      	ldr	r1, [pc, #180]	; (9cbc <patchFuncAndVars+0x114>)
    9c08:	482d      	ldr	r0, [pc, #180]	; (9cc0 <patchFuncAndVars+0x118>)
    9c0a:	47a0      	blx	r4
    9c0c:	492d      	ldr	r1, [pc, #180]	; (9cc4 <patchFuncAndVars+0x11c>)
    9c0e:	482e      	ldr	r0, [pc, #184]	; (9cc8 <patchFuncAndVars+0x120>)
    9c10:	47a0      	blx	r4
    9c12:	492e      	ldr	r1, [pc, #184]	; (9ccc <patchFuncAndVars+0x124>)
    9c14:	482e      	ldr	r0, [pc, #184]	; (9cd0 <patchFuncAndVars+0x128>)
    9c16:	47a0      	blx	r4
    9c18:	492e      	ldr	r1, [pc, #184]	; (9cd4 <patchFuncAndVars+0x12c>)
    9c1a:	482f      	ldr	r0, [pc, #188]	; (9cd8 <patchFuncAndVars+0x130>)
    9c1c:	47a0      	blx	r4
    9c1e:	492f      	ldr	r1, [pc, #188]	; (9cdc <patchFuncAndVars+0x134>)
    9c20:	482f      	ldr	r0, [pc, #188]	; (9ce0 <patchFuncAndVars+0x138>)
    9c22:	47a0      	blx	r4
    9c24:	2101      	movs	r1, #1
    9c26:	482f      	ldr	r0, [pc, #188]	; (9ce4 <patchFuncAndVars+0x13c>)
    9c28:	47a0      	blx	r4
    9c2a:	2101      	movs	r1, #1
    9c2c:	482e      	ldr	r0, [pc, #184]	; (9ce8 <patchFuncAndVars+0x140>)
    9c2e:	47a0      	blx	r4
    9c30:	2104      	movs	r1, #4
    9c32:	482e      	ldr	r0, [pc, #184]	; (9cec <patchFuncAndVars+0x144>)
    9c34:	47a0      	blx	r4
    9c36:	2102      	movs	r1, #2
    9c38:	482d      	ldr	r0, [pc, #180]	; (9cf0 <patchFuncAndVars+0x148>)
    9c3a:	31ff      	adds	r1, #255	; 0xff
    9c3c:	47a0      	blx	r4
    9c3e:	bd10      	pop	{r4, pc}
    9c40:	10007223 	.word	0x10007223
    9c44:	00009b75 	.word	0x00009b75
    9c48:	100401c0 	.word	0x100401c0
    9c4c:	10005565 	.word	0x10005565
    9c50:	1004000c 	.word	0x1004000c
    9c54:	10005691 	.word	0x10005691
    9c58:	10040010 	.word	0x10040010
    9c5c:	10005729 	.word	0x10005729
    9c60:	1004004c 	.word	0x1004004c
    9c64:	10005859 	.word	0x10005859
    9c68:	10040034 	.word	0x10040034
    9c6c:	10005c21 	.word	0x10005c21
    9c70:	10040068 	.word	0x10040068
    9c74:	10005d95 	.word	0x10005d95
    9c78:	10040088 	.word	0x10040088
    9c7c:	10005f35 	.word	0x10005f35
    9c80:	100400bc 	.word	0x100400bc
    9c84:	100060fb 	.word	0x100060fb
    9c88:	100400dc 	.word	0x100400dc
    9c8c:	10006411 	.word	0x10006411
    9c90:	100400e4 	.word	0x100400e4
    9c94:	10006853 	.word	0x10006853
    9c98:	100400e8 	.word	0x100400e8
    9c9c:	100068c3 	.word	0x100068c3
    9ca0:	100400ec 	.word	0x100400ec
    9ca4:	10006a2d 	.word	0x10006a2d
    9ca8:	1004010c 	.word	0x1004010c
    9cac:	10006cad 	.word	0x10006cad
    9cb0:	10040154 	.word	0x10040154
    9cb4:	10006d5d 	.word	0x10006d5d
    9cb8:	10040160 	.word	0x10040160
    9cbc:	10006edd 	.word	0x10006edd
    9cc0:	10040174 	.word	0x10040174
    9cc4:	10007bd1 	.word	0x10007bd1
    9cc8:	10040210 	.word	0x10040210
    9ccc:	10005a0b 	.word	0x10005a0b
    9cd0:	10040038 	.word	0x10040038
    9cd4:	10005c09 	.word	0x10005c09
    9cd8:	10000004 	.word	0x10000004
    9cdc:	100059e7 	.word	0x100059e7
    9ce0:	1000003c 	.word	0x1000003c
    9ce4:	10040168 	.word	0x10040168
    9ce8:	1000826c 	.word	0x1000826c
    9cec:	10008270 	.word	0x10008270
    9cf0:	10040000 	.word	0x10040000

00009cf4 <patch_init>:
    9cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cf6:	2600      	movs	r6, #0
    9cf8:	25fa      	movs	r5, #250	; 0xfa
    9cfa:	27fe      	movs	r7, #254	; 0xfe
    9cfc:	b085      	sub	sp, #20
    9cfe:	4b52      	ldr	r3, [pc, #328]	; (9e48 <patch_init+0x154>)
    9d00:	0004      	movs	r4, r0
    9d02:	2202      	movs	r2, #2
    9d04:	4951      	ldr	r1, [pc, #324]	; (9e4c <patch_init+0x158>)
    9d06:	a803      	add	r0, sp, #12
    9d08:	4798      	blx	r3
    9d0a:	4b51      	ldr	r3, [pc, #324]	; (9e50 <patch_init+0x15c>)
    9d0c:	00ed      	lsls	r5, r5, #3
    9d0e:	701e      	strb	r6, [r3, #0]
    9d10:	4b4f      	ldr	r3, [pc, #316]	; (9e50 <patch_init+0x15c>)
    9d12:	781b      	ldrb	r3, [r3, #0]
    9d14:	2b00      	cmp	r3, #0
    9d16:	d115      	bne.n	9d44 <patch_init+0x50>
    9d18:	2101      	movs	r1, #1
    9d1a:	4b4e      	ldr	r3, [pc, #312]	; (9e54 <patch_init+0x160>)
    9d1c:	a803      	add	r0, sp, #12
    9d1e:	4798      	blx	r3
    9d20:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9d22:	0006      	movs	r6, r0
    9d24:	2001      	movs	r0, #1
    9d26:	4798      	blx	r3
    9d28:	0023      	movs	r3, r4
    9d2a:	335c      	adds	r3, #92	; 0x5c
    9d2c:	781b      	ldrb	r3, [r3, #0]
    9d2e:	2b02      	cmp	r3, #2
    9d30:	d105      	bne.n	9d3e <patch_init+0x4a>
    9d32:	ab02      	add	r3, sp, #8
    9d34:	1cd8      	adds	r0, r3, #3
    9d36:	7007      	strb	r7, [r0, #0]
    9d38:	2101      	movs	r1, #1
    9d3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9d3c:	4798      	blx	r3
    9d3e:	3d01      	subs	r5, #1
    9d40:	2d00      	cmp	r5, #0
    9d42:	d1e5      	bne.n	9d10 <patch_init+0x1c>
    9d44:	4b42      	ldr	r3, [pc, #264]	; (9e50 <patch_init+0x15c>)
    9d46:	781b      	ldrb	r3, [r3, #0]
    9d48:	2b00      	cmp	r3, #0
    9d4a:	d100      	bne.n	9d4e <patch_init+0x5a>
    9d4c:	e07a      	b.n	9e44 <patch_init+0x150>
    9d4e:	0023      	movs	r3, r4
    9d50:	335c      	adds	r3, #92	; 0x5c
    9d52:	9301      	str	r3, [sp, #4]
    9d54:	781b      	ldrb	r3, [r3, #0]
    9d56:	4f3f      	ldr	r7, [pc, #252]	; (9e54 <patch_init+0x160>)
    9d58:	4d3f      	ldr	r5, [pc, #252]	; (9e58 <patch_init+0x164>)
    9d5a:	2b01      	cmp	r3, #1
    9d5c:	d129      	bne.n	9db2 <patch_init+0xbe>
    9d5e:	0023      	movs	r3, r4
    9d60:	335d      	adds	r3, #93	; 0x5d
    9d62:	781b      	ldrb	r3, [r3, #0]
    9d64:	2b00      	cmp	r3, #0
    9d66:	d018      	beq.n	9d9a <patch_init+0xa6>
    9d68:	0023      	movs	r3, r4
    9d6a:	2202      	movs	r2, #2
    9d6c:	3358      	adds	r3, #88	; 0x58
    9d6e:	781b      	ldrb	r3, [r3, #0]
    9d70:	4393      	bics	r3, r2
    9d72:	d112      	bne.n	9d9a <patch_init+0xa6>
    9d74:	4939      	ldr	r1, [pc, #228]	; (9e5c <patch_init+0x168>)
    9d76:	483a      	ldr	r0, [pc, #232]	; (9e60 <patch_init+0x16c>)
    9d78:	47a8      	blx	r5
    9d7a:	493a      	ldr	r1, [pc, #232]	; (9e64 <patch_init+0x170>)
    9d7c:	483a      	ldr	r0, [pc, #232]	; (9e68 <patch_init+0x174>)
    9d7e:	47a8      	blx	r5
    9d80:	493a      	ldr	r1, [pc, #232]	; (9e6c <patch_init+0x178>)
    9d82:	483b      	ldr	r0, [pc, #236]	; (9e70 <patch_init+0x17c>)
    9d84:	47a8      	blx	r5
    9d86:	2122      	movs	r1, #34	; 0x22
    9d88:	483a      	ldr	r0, [pc, #232]	; (9e74 <patch_init+0x180>)
    9d8a:	47a8      	blx	r5
    9d8c:	20e1      	movs	r0, #225	; 0xe1
    9d8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9d90:	0240      	lsls	r0, r0, #9
    9d92:	4798      	blx	r3
    9d94:	2103      	movs	r1, #3
    9d96:	4838      	ldr	r0, [pc, #224]	; (9e78 <patch_init+0x184>)
    9d98:	47b8      	blx	r7
    9d9a:	6e21      	ldr	r1, [r4, #96]	; 0x60
    9d9c:	4b37      	ldr	r3, [pc, #220]	; (9e7c <patch_init+0x188>)
    9d9e:	4838      	ldr	r0, [pc, #224]	; (9e80 <patch_init+0x18c>)
    9da0:	4798      	blx	r3
    9da2:	0001      	movs	r1, r0
    9da4:	4837      	ldr	r0, [pc, #220]	; (9e84 <patch_init+0x190>)
    9da6:	47a8      	blx	r5
    9da8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9daa:	6e20      	ldr	r0, [r4, #96]	; 0x60
    9dac:	4798      	blx	r3
    9dae:	4b36      	ldr	r3, [pc, #216]	; (9e88 <patch_init+0x194>)
    9db0:	4798      	blx	r3
    9db2:	2103      	movs	r1, #3
    9db4:	4830      	ldr	r0, [pc, #192]	; (9e78 <patch_init+0x184>)
    9db6:	47b8      	blx	r7
    9db8:	4934      	ldr	r1, [pc, #208]	; (9e8c <patch_init+0x198>)
    9dba:	4835      	ldr	r0, [pc, #212]	; (9e90 <patch_init+0x19c>)
    9dbc:	47a8      	blx	r5
    9dbe:	4f35      	ldr	r7, [pc, #212]	; (9e94 <patch_init+0x1a0>)
    9dc0:	4b35      	ldr	r3, [pc, #212]	; (9e98 <patch_init+0x1a4>)
    9dc2:	4a36      	ldr	r2, [pc, #216]	; (9e9c <patch_init+0x1a8>)
    9dc4:	19db      	adds	r3, r3, r7
    9dc6:	189a      	adds	r2, r3, r2
    9dc8:	7811      	ldrb	r1, [r2, #0]
    9dca:	4a35      	ldr	r2, [pc, #212]	; (9ea0 <patch_init+0x1ac>)
    9dcc:	0209      	lsls	r1, r1, #8
    9dce:	189a      	adds	r2, r3, r2
    9dd0:	7812      	ldrb	r2, [r2, #0]
    9dd2:	0038      	movs	r0, r7
    9dd4:	0412      	lsls	r2, r2, #16
    9dd6:	4311      	orrs	r1, r2
    9dd8:	4a32      	ldr	r2, [pc, #200]	; (9ea4 <patch_init+0x1b0>)
    9dda:	3704      	adds	r7, #4
    9ddc:	189a      	adds	r2, r3, r2
    9dde:	7812      	ldrb	r2, [r2, #0]
    9de0:	4311      	orrs	r1, r2
    9de2:	4a31      	ldr	r2, [pc, #196]	; (9ea8 <patch_init+0x1b4>)
    9de4:	189b      	adds	r3, r3, r2
    9de6:	781b      	ldrb	r3, [r3, #0]
    9de8:	061b      	lsls	r3, r3, #24
    9dea:	4319      	orrs	r1, r3
    9dec:	47a8      	blx	r5
    9dee:	4b2f      	ldr	r3, [pc, #188]	; (9eac <patch_init+0x1b8>)
    9df0:	429f      	cmp	r7, r3
    9df2:	d1e5      	bne.n	9dc0 <patch_init+0xcc>
    9df4:	2178      	movs	r1, #120	; 0x78
    9df6:	482e      	ldr	r0, [pc, #184]	; (9eb0 <patch_init+0x1bc>)
    9df8:	47a8      	blx	r5
    9dfa:	9b01      	ldr	r3, [sp, #4]
    9dfc:	781b      	ldrb	r3, [r3, #0]
    9dfe:	2b01      	cmp	r3, #1
    9e00:	d102      	bne.n	9e08 <patch_init+0x114>
    9e02:	6e21      	ldr	r1, [r4, #96]	; 0x60
    9e04:	482b      	ldr	r0, [pc, #172]	; (9eb4 <patch_init+0x1c0>)
    9e06:	47a8      	blx	r5
    9e08:	0023      	movs	r3, r4
    9e0a:	0021      	movs	r1, r4
    9e0c:	335d      	adds	r3, #93	; 0x5d
    9e0e:	781a      	ldrb	r2, [r3, #0]
    9e10:	3158      	adds	r1, #88	; 0x58
    9e12:	2a01      	cmp	r2, #1
    9e14:	d003      	beq.n	9e1e <patch_init+0x12a>
    9e16:	780b      	ldrb	r3, [r1, #0]
    9e18:	3b01      	subs	r3, #1
    9e1a:	2b01      	cmp	r3, #1
    9e1c:	d804      	bhi.n	9e28 <patch_init+0x134>
    9e1e:	7809      	ldrb	r1, [r1, #0]
    9e20:	4825      	ldr	r0, [pc, #148]	; (9eb8 <patch_init+0x1c4>)
    9e22:	0049      	lsls	r1, r1, #1
    9e24:	4311      	orrs	r1, r2
    9e26:	47a8      	blx	r5
    9e28:	345e      	adds	r4, #94	; 0x5e
    9e2a:	7821      	ldrb	r1, [r4, #0]
    9e2c:	2900      	cmp	r1, #0
    9e2e:	d001      	beq.n	9e34 <patch_init+0x140>
    9e30:	4822      	ldr	r0, [pc, #136]	; (9ebc <patch_init+0x1c8>)
    9e32:	47a8      	blx	r5
    9e34:	4b22      	ldr	r3, [pc, #136]	; (9ec0 <patch_init+0x1cc>)
    9e36:	4798      	blx	r3
    9e38:	2302      	movs	r3, #2
    9e3a:	4a05      	ldr	r2, [pc, #20]	; (9e50 <patch_init+0x15c>)
    9e3c:	7013      	strb	r3, [r2, #0]
    9e3e:	0030      	movs	r0, r6
    9e40:	b005      	add	sp, #20
    9e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e44:	26d1      	movs	r6, #209	; 0xd1
    9e46:	e7fa      	b.n	9e3e <patch_init+0x14a>
    9e48:	0000a2f7 	.word	0x0000a2f7
    9e4c:	0000c4d8 	.word	0x0000c4d8
    9e50:	20003bb8 	.word	0x20003bb8
    9e54:	00007859 	.word	0x00007859
    9e58:	00009b75 	.word	0x00009b75
    9e5c:	02033f3f 	.word	0x02033f3f
    9e60:	4000b1a8 	.word	0x4000b1a8
    9e64:	3f3f0001 	.word	0x3f3f0001
    9e68:	4000b1ac 	.word	0x4000b1ac
    9e6c:	00111133 	.word	0x00111133
    9e70:	4000b048 	.word	0x4000b048
    9e74:	4000b044 	.word	0x4000b044
    9e78:	0000c4d4 	.word	0x0000c4d4
    9e7c:	00009f51 	.word	0x00009f51
    9e80:	0c65d400 	.word	0x0c65d400
    9e84:	40004024 	.word	0x40004024
    9e88:	000078b1 	.word	0x000078b1
    9e8c:	00000c06 	.word	0x00000c06
    9e90:	4000f408 	.word	0x4000f408
    9e94:	10005184 	.word	0x10005184
    9e98:	0000c4e4 	.word	0x0000c4e4
    9e9c:	efffae7d 	.word	0xefffae7d
    9ea0:	efffae7e 	.word	0xefffae7e
    9ea4:	efffae7c 	.word	0xefffae7c
    9ea8:	efffae7f 	.word	0xefffae7f
    9eac:	10008548 	.word	0x10008548
    9eb0:	4000f044 	.word	0x4000f044
    9eb4:	100083b8 	.word	0x100083b8
    9eb8:	100083b4 	.word	0x100083b4
    9ebc:	100083bc 	.word	0x100083bc
    9ec0:	00009ba9 	.word	0x00009ba9

00009ec4 <fifo_init>:
    9ec4:	b510      	push	{r4, lr}
    9ec6:	1e03      	subs	r3, r0, #0
    9ec8:	d00b      	beq.n	9ee2 <fifo_init+0x1e>
    9eca:	2000      	movs	r0, #0
    9ecc:	4282      	cmp	r2, r0
    9ece:	d008      	beq.n	9ee2 <fifo_init+0x1e>
    9ed0:	1e54      	subs	r4, r2, #1
    9ed2:	4214      	tst	r4, r2
    9ed4:	d105      	bne.n	9ee2 <fifo_init+0x1e>
    9ed6:	6018      	str	r0, [r3, #0]
    9ed8:	6119      	str	r1, [r3, #16]
    9eda:	6058      	str	r0, [r3, #4]
    9edc:	609a      	str	r2, [r3, #8]
    9ede:	60dc      	str	r4, [r3, #12]
    9ee0:	3001      	adds	r0, #1
    9ee2:	bd10      	pop	{r4, pc}

00009ee4 <fifo_empty>:
    9ee4:	6803      	ldr	r3, [r0, #0]
    9ee6:	6840      	ldr	r0, [r0, #4]
    9ee8:	1a18      	subs	r0, r3, r0
    9eea:	4243      	negs	r3, r0
    9eec:	4158      	adcs	r0, r3
    9eee:	b2c0      	uxtb	r0, r0
    9ef0:	4770      	bx	lr

00009ef2 <fifo_get>:
    9ef2:	6843      	ldr	r3, [r0, #4]
    9ef4:	1c5a      	adds	r2, r3, #1
    9ef6:	6042      	str	r2, [r0, #4]
    9ef8:	68c2      	ldr	r2, [r0, #12]
    9efa:	401a      	ands	r2, r3
    9efc:	6903      	ldr	r3, [r0, #16]
    9efe:	189b      	adds	r3, r3, r2
    9f00:	7818      	ldrb	r0, [r3, #0]
    9f02:	b2c0      	uxtb	r0, r0
    9f04:	4770      	bx	lr

00009f06 <fifo_put>:
    9f06:	b510      	push	{r4, lr}
    9f08:	6844      	ldr	r4, [r0, #4]
    9f0a:	6802      	ldr	r2, [r0, #0]
    9f0c:	1c53      	adds	r3, r2, #1
    9f0e:	6003      	str	r3, [r0, #0]
    9f10:	68c3      	ldr	r3, [r0, #12]
    9f12:	401a      	ands	r2, r3
    9f14:	6903      	ldr	r3, [r0, #16]
    9f16:	189a      	adds	r2, r3, r2
    9f18:	7011      	strb	r1, [r2, #0]
    9f1a:	6803      	ldr	r3, [r0, #0]
    9f1c:	68c0      	ldr	r0, [r0, #12]
    9f1e:	1b1b      	subs	r3, r3, r4
    9f20:	4283      	cmp	r3, r0
    9f22:	4180      	sbcs	r0, r0
    9f24:	4240      	negs	r0, r0
    9f26:	bd10      	pop	{r4, pc}

00009f28 <__gnu_thumb1_case_sqi>:
    9f28:	b402      	push	{r1}
    9f2a:	4671      	mov	r1, lr
    9f2c:	0849      	lsrs	r1, r1, #1
    9f2e:	0049      	lsls	r1, r1, #1
    9f30:	5609      	ldrsb	r1, [r1, r0]
    9f32:	0049      	lsls	r1, r1, #1
    9f34:	448e      	add	lr, r1
    9f36:	bc02      	pop	{r1}
    9f38:	4770      	bx	lr
    9f3a:	46c0      	nop			; (mov r8, r8)

00009f3c <__gnu_thumb1_case_uqi>:
    9f3c:	b402      	push	{r1}
    9f3e:	4671      	mov	r1, lr
    9f40:	0849      	lsrs	r1, r1, #1
    9f42:	0049      	lsls	r1, r1, #1
    9f44:	5c09      	ldrb	r1, [r1, r0]
    9f46:	0049      	lsls	r1, r1, #1
    9f48:	448e      	add	lr, r1
    9f4a:	bc02      	pop	{r1}
    9f4c:	4770      	bx	lr
    9f4e:	46c0      	nop			; (mov r8, r8)

00009f50 <__udivsi3>:
    9f50:	2200      	movs	r2, #0
    9f52:	0843      	lsrs	r3, r0, #1
    9f54:	428b      	cmp	r3, r1
    9f56:	d374      	bcc.n	a042 <__udivsi3+0xf2>
    9f58:	0903      	lsrs	r3, r0, #4
    9f5a:	428b      	cmp	r3, r1
    9f5c:	d35f      	bcc.n	a01e <__udivsi3+0xce>
    9f5e:	0a03      	lsrs	r3, r0, #8
    9f60:	428b      	cmp	r3, r1
    9f62:	d344      	bcc.n	9fee <__udivsi3+0x9e>
    9f64:	0b03      	lsrs	r3, r0, #12
    9f66:	428b      	cmp	r3, r1
    9f68:	d328      	bcc.n	9fbc <__udivsi3+0x6c>
    9f6a:	0c03      	lsrs	r3, r0, #16
    9f6c:	428b      	cmp	r3, r1
    9f6e:	d30d      	bcc.n	9f8c <__udivsi3+0x3c>
    9f70:	22ff      	movs	r2, #255	; 0xff
    9f72:	0209      	lsls	r1, r1, #8
    9f74:	ba12      	rev	r2, r2
    9f76:	0c03      	lsrs	r3, r0, #16
    9f78:	428b      	cmp	r3, r1
    9f7a:	d302      	bcc.n	9f82 <__udivsi3+0x32>
    9f7c:	1212      	asrs	r2, r2, #8
    9f7e:	0209      	lsls	r1, r1, #8
    9f80:	d065      	beq.n	a04e <__udivsi3+0xfe>
    9f82:	0b03      	lsrs	r3, r0, #12
    9f84:	428b      	cmp	r3, r1
    9f86:	d319      	bcc.n	9fbc <__udivsi3+0x6c>
    9f88:	e000      	b.n	9f8c <__udivsi3+0x3c>
    9f8a:	0a09      	lsrs	r1, r1, #8
    9f8c:	0bc3      	lsrs	r3, r0, #15
    9f8e:	428b      	cmp	r3, r1
    9f90:	d301      	bcc.n	9f96 <__udivsi3+0x46>
    9f92:	03cb      	lsls	r3, r1, #15
    9f94:	1ac0      	subs	r0, r0, r3
    9f96:	4152      	adcs	r2, r2
    9f98:	0b83      	lsrs	r3, r0, #14
    9f9a:	428b      	cmp	r3, r1
    9f9c:	d301      	bcc.n	9fa2 <__udivsi3+0x52>
    9f9e:	038b      	lsls	r3, r1, #14
    9fa0:	1ac0      	subs	r0, r0, r3
    9fa2:	4152      	adcs	r2, r2
    9fa4:	0b43      	lsrs	r3, r0, #13
    9fa6:	428b      	cmp	r3, r1
    9fa8:	d301      	bcc.n	9fae <__udivsi3+0x5e>
    9faa:	034b      	lsls	r3, r1, #13
    9fac:	1ac0      	subs	r0, r0, r3
    9fae:	4152      	adcs	r2, r2
    9fb0:	0b03      	lsrs	r3, r0, #12
    9fb2:	428b      	cmp	r3, r1
    9fb4:	d301      	bcc.n	9fba <__udivsi3+0x6a>
    9fb6:	030b      	lsls	r3, r1, #12
    9fb8:	1ac0      	subs	r0, r0, r3
    9fba:	4152      	adcs	r2, r2
    9fbc:	0ac3      	lsrs	r3, r0, #11
    9fbe:	428b      	cmp	r3, r1
    9fc0:	d301      	bcc.n	9fc6 <__udivsi3+0x76>
    9fc2:	02cb      	lsls	r3, r1, #11
    9fc4:	1ac0      	subs	r0, r0, r3
    9fc6:	4152      	adcs	r2, r2
    9fc8:	0a83      	lsrs	r3, r0, #10
    9fca:	428b      	cmp	r3, r1
    9fcc:	d301      	bcc.n	9fd2 <__udivsi3+0x82>
    9fce:	028b      	lsls	r3, r1, #10
    9fd0:	1ac0      	subs	r0, r0, r3
    9fd2:	4152      	adcs	r2, r2
    9fd4:	0a43      	lsrs	r3, r0, #9
    9fd6:	428b      	cmp	r3, r1
    9fd8:	d301      	bcc.n	9fde <__udivsi3+0x8e>
    9fda:	024b      	lsls	r3, r1, #9
    9fdc:	1ac0      	subs	r0, r0, r3
    9fde:	4152      	adcs	r2, r2
    9fe0:	0a03      	lsrs	r3, r0, #8
    9fe2:	428b      	cmp	r3, r1
    9fe4:	d301      	bcc.n	9fea <__udivsi3+0x9a>
    9fe6:	020b      	lsls	r3, r1, #8
    9fe8:	1ac0      	subs	r0, r0, r3
    9fea:	4152      	adcs	r2, r2
    9fec:	d2cd      	bcs.n	9f8a <__udivsi3+0x3a>
    9fee:	09c3      	lsrs	r3, r0, #7
    9ff0:	428b      	cmp	r3, r1
    9ff2:	d301      	bcc.n	9ff8 <__udivsi3+0xa8>
    9ff4:	01cb      	lsls	r3, r1, #7
    9ff6:	1ac0      	subs	r0, r0, r3
    9ff8:	4152      	adcs	r2, r2
    9ffa:	0983      	lsrs	r3, r0, #6
    9ffc:	428b      	cmp	r3, r1
    9ffe:	d301      	bcc.n	a004 <__udivsi3+0xb4>
    a000:	018b      	lsls	r3, r1, #6
    a002:	1ac0      	subs	r0, r0, r3
    a004:	4152      	adcs	r2, r2
    a006:	0943      	lsrs	r3, r0, #5
    a008:	428b      	cmp	r3, r1
    a00a:	d301      	bcc.n	a010 <__udivsi3+0xc0>
    a00c:	014b      	lsls	r3, r1, #5
    a00e:	1ac0      	subs	r0, r0, r3
    a010:	4152      	adcs	r2, r2
    a012:	0903      	lsrs	r3, r0, #4
    a014:	428b      	cmp	r3, r1
    a016:	d301      	bcc.n	a01c <__udivsi3+0xcc>
    a018:	010b      	lsls	r3, r1, #4
    a01a:	1ac0      	subs	r0, r0, r3
    a01c:	4152      	adcs	r2, r2
    a01e:	08c3      	lsrs	r3, r0, #3
    a020:	428b      	cmp	r3, r1
    a022:	d301      	bcc.n	a028 <__udivsi3+0xd8>
    a024:	00cb      	lsls	r3, r1, #3
    a026:	1ac0      	subs	r0, r0, r3
    a028:	4152      	adcs	r2, r2
    a02a:	0883      	lsrs	r3, r0, #2
    a02c:	428b      	cmp	r3, r1
    a02e:	d301      	bcc.n	a034 <__udivsi3+0xe4>
    a030:	008b      	lsls	r3, r1, #2
    a032:	1ac0      	subs	r0, r0, r3
    a034:	4152      	adcs	r2, r2
    a036:	0843      	lsrs	r3, r0, #1
    a038:	428b      	cmp	r3, r1
    a03a:	d301      	bcc.n	a040 <__udivsi3+0xf0>
    a03c:	004b      	lsls	r3, r1, #1
    a03e:	1ac0      	subs	r0, r0, r3
    a040:	4152      	adcs	r2, r2
    a042:	1a41      	subs	r1, r0, r1
    a044:	d200      	bcs.n	a048 <__udivsi3+0xf8>
    a046:	4601      	mov	r1, r0
    a048:	4152      	adcs	r2, r2
    a04a:	4610      	mov	r0, r2
    a04c:	4770      	bx	lr
    a04e:	e7ff      	b.n	a050 <__udivsi3+0x100>
    a050:	b501      	push	{r0, lr}
    a052:	2000      	movs	r0, #0
    a054:	f000 f8f0 	bl	a238 <__aeabi_idiv0>
    a058:	bd02      	pop	{r1, pc}
    a05a:	46c0      	nop			; (mov r8, r8)

0000a05c <__aeabi_uidivmod>:
    a05c:	2900      	cmp	r1, #0
    a05e:	d0f7      	beq.n	a050 <__udivsi3+0x100>
    a060:	e776      	b.n	9f50 <__udivsi3>
    a062:	4770      	bx	lr

0000a064 <__divsi3>:
    a064:	4603      	mov	r3, r0
    a066:	430b      	orrs	r3, r1
    a068:	d47f      	bmi.n	a16a <__divsi3+0x106>
    a06a:	2200      	movs	r2, #0
    a06c:	0843      	lsrs	r3, r0, #1
    a06e:	428b      	cmp	r3, r1
    a070:	d374      	bcc.n	a15c <__divsi3+0xf8>
    a072:	0903      	lsrs	r3, r0, #4
    a074:	428b      	cmp	r3, r1
    a076:	d35f      	bcc.n	a138 <__divsi3+0xd4>
    a078:	0a03      	lsrs	r3, r0, #8
    a07a:	428b      	cmp	r3, r1
    a07c:	d344      	bcc.n	a108 <__divsi3+0xa4>
    a07e:	0b03      	lsrs	r3, r0, #12
    a080:	428b      	cmp	r3, r1
    a082:	d328      	bcc.n	a0d6 <__divsi3+0x72>
    a084:	0c03      	lsrs	r3, r0, #16
    a086:	428b      	cmp	r3, r1
    a088:	d30d      	bcc.n	a0a6 <__divsi3+0x42>
    a08a:	22ff      	movs	r2, #255	; 0xff
    a08c:	0209      	lsls	r1, r1, #8
    a08e:	ba12      	rev	r2, r2
    a090:	0c03      	lsrs	r3, r0, #16
    a092:	428b      	cmp	r3, r1
    a094:	d302      	bcc.n	a09c <__divsi3+0x38>
    a096:	1212      	asrs	r2, r2, #8
    a098:	0209      	lsls	r1, r1, #8
    a09a:	d065      	beq.n	a168 <__divsi3+0x104>
    a09c:	0b03      	lsrs	r3, r0, #12
    a09e:	428b      	cmp	r3, r1
    a0a0:	d319      	bcc.n	a0d6 <__divsi3+0x72>
    a0a2:	e000      	b.n	a0a6 <__divsi3+0x42>
    a0a4:	0a09      	lsrs	r1, r1, #8
    a0a6:	0bc3      	lsrs	r3, r0, #15
    a0a8:	428b      	cmp	r3, r1
    a0aa:	d301      	bcc.n	a0b0 <__divsi3+0x4c>
    a0ac:	03cb      	lsls	r3, r1, #15
    a0ae:	1ac0      	subs	r0, r0, r3
    a0b0:	4152      	adcs	r2, r2
    a0b2:	0b83      	lsrs	r3, r0, #14
    a0b4:	428b      	cmp	r3, r1
    a0b6:	d301      	bcc.n	a0bc <__divsi3+0x58>
    a0b8:	038b      	lsls	r3, r1, #14
    a0ba:	1ac0      	subs	r0, r0, r3
    a0bc:	4152      	adcs	r2, r2
    a0be:	0b43      	lsrs	r3, r0, #13
    a0c0:	428b      	cmp	r3, r1
    a0c2:	d301      	bcc.n	a0c8 <__divsi3+0x64>
    a0c4:	034b      	lsls	r3, r1, #13
    a0c6:	1ac0      	subs	r0, r0, r3
    a0c8:	4152      	adcs	r2, r2
    a0ca:	0b03      	lsrs	r3, r0, #12
    a0cc:	428b      	cmp	r3, r1
    a0ce:	d301      	bcc.n	a0d4 <__divsi3+0x70>
    a0d0:	030b      	lsls	r3, r1, #12
    a0d2:	1ac0      	subs	r0, r0, r3
    a0d4:	4152      	adcs	r2, r2
    a0d6:	0ac3      	lsrs	r3, r0, #11
    a0d8:	428b      	cmp	r3, r1
    a0da:	d301      	bcc.n	a0e0 <__divsi3+0x7c>
    a0dc:	02cb      	lsls	r3, r1, #11
    a0de:	1ac0      	subs	r0, r0, r3
    a0e0:	4152      	adcs	r2, r2
    a0e2:	0a83      	lsrs	r3, r0, #10
    a0e4:	428b      	cmp	r3, r1
    a0e6:	d301      	bcc.n	a0ec <__divsi3+0x88>
    a0e8:	028b      	lsls	r3, r1, #10
    a0ea:	1ac0      	subs	r0, r0, r3
    a0ec:	4152      	adcs	r2, r2
    a0ee:	0a43      	lsrs	r3, r0, #9
    a0f0:	428b      	cmp	r3, r1
    a0f2:	d301      	bcc.n	a0f8 <__divsi3+0x94>
    a0f4:	024b      	lsls	r3, r1, #9
    a0f6:	1ac0      	subs	r0, r0, r3
    a0f8:	4152      	adcs	r2, r2
    a0fa:	0a03      	lsrs	r3, r0, #8
    a0fc:	428b      	cmp	r3, r1
    a0fe:	d301      	bcc.n	a104 <__divsi3+0xa0>
    a100:	020b      	lsls	r3, r1, #8
    a102:	1ac0      	subs	r0, r0, r3
    a104:	4152      	adcs	r2, r2
    a106:	d2cd      	bcs.n	a0a4 <__divsi3+0x40>
    a108:	09c3      	lsrs	r3, r0, #7
    a10a:	428b      	cmp	r3, r1
    a10c:	d301      	bcc.n	a112 <__divsi3+0xae>
    a10e:	01cb      	lsls	r3, r1, #7
    a110:	1ac0      	subs	r0, r0, r3
    a112:	4152      	adcs	r2, r2
    a114:	0983      	lsrs	r3, r0, #6
    a116:	428b      	cmp	r3, r1
    a118:	d301      	bcc.n	a11e <__divsi3+0xba>
    a11a:	018b      	lsls	r3, r1, #6
    a11c:	1ac0      	subs	r0, r0, r3
    a11e:	4152      	adcs	r2, r2
    a120:	0943      	lsrs	r3, r0, #5
    a122:	428b      	cmp	r3, r1
    a124:	d301      	bcc.n	a12a <__divsi3+0xc6>
    a126:	014b      	lsls	r3, r1, #5
    a128:	1ac0      	subs	r0, r0, r3
    a12a:	4152      	adcs	r2, r2
    a12c:	0903      	lsrs	r3, r0, #4
    a12e:	428b      	cmp	r3, r1
    a130:	d301      	bcc.n	a136 <__divsi3+0xd2>
    a132:	010b      	lsls	r3, r1, #4
    a134:	1ac0      	subs	r0, r0, r3
    a136:	4152      	adcs	r2, r2
    a138:	08c3      	lsrs	r3, r0, #3
    a13a:	428b      	cmp	r3, r1
    a13c:	d301      	bcc.n	a142 <__divsi3+0xde>
    a13e:	00cb      	lsls	r3, r1, #3
    a140:	1ac0      	subs	r0, r0, r3
    a142:	4152      	adcs	r2, r2
    a144:	0883      	lsrs	r3, r0, #2
    a146:	428b      	cmp	r3, r1
    a148:	d301      	bcc.n	a14e <__divsi3+0xea>
    a14a:	008b      	lsls	r3, r1, #2
    a14c:	1ac0      	subs	r0, r0, r3
    a14e:	4152      	adcs	r2, r2
    a150:	0843      	lsrs	r3, r0, #1
    a152:	428b      	cmp	r3, r1
    a154:	d301      	bcc.n	a15a <__divsi3+0xf6>
    a156:	004b      	lsls	r3, r1, #1
    a158:	1ac0      	subs	r0, r0, r3
    a15a:	4152      	adcs	r2, r2
    a15c:	1a41      	subs	r1, r0, r1
    a15e:	d200      	bcs.n	a162 <__divsi3+0xfe>
    a160:	4601      	mov	r1, r0
    a162:	4152      	adcs	r2, r2
    a164:	4610      	mov	r0, r2
    a166:	4770      	bx	lr
    a168:	e05d      	b.n	a226 <__divsi3+0x1c2>
    a16a:	0fca      	lsrs	r2, r1, #31
    a16c:	d000      	beq.n	a170 <__divsi3+0x10c>
    a16e:	4249      	negs	r1, r1
    a170:	1003      	asrs	r3, r0, #32
    a172:	d300      	bcc.n	a176 <__divsi3+0x112>
    a174:	4240      	negs	r0, r0
    a176:	4053      	eors	r3, r2
    a178:	2200      	movs	r2, #0
    a17a:	469c      	mov	ip, r3
    a17c:	0903      	lsrs	r3, r0, #4
    a17e:	428b      	cmp	r3, r1
    a180:	d32d      	bcc.n	a1de <__divsi3+0x17a>
    a182:	0a03      	lsrs	r3, r0, #8
    a184:	428b      	cmp	r3, r1
    a186:	d312      	bcc.n	a1ae <__divsi3+0x14a>
    a188:	22fc      	movs	r2, #252	; 0xfc
    a18a:	0189      	lsls	r1, r1, #6
    a18c:	ba12      	rev	r2, r2
    a18e:	0a03      	lsrs	r3, r0, #8
    a190:	428b      	cmp	r3, r1
    a192:	d30c      	bcc.n	a1ae <__divsi3+0x14a>
    a194:	0189      	lsls	r1, r1, #6
    a196:	1192      	asrs	r2, r2, #6
    a198:	428b      	cmp	r3, r1
    a19a:	d308      	bcc.n	a1ae <__divsi3+0x14a>
    a19c:	0189      	lsls	r1, r1, #6
    a19e:	1192      	asrs	r2, r2, #6
    a1a0:	428b      	cmp	r3, r1
    a1a2:	d304      	bcc.n	a1ae <__divsi3+0x14a>
    a1a4:	0189      	lsls	r1, r1, #6
    a1a6:	d03a      	beq.n	a21e <__divsi3+0x1ba>
    a1a8:	1192      	asrs	r2, r2, #6
    a1aa:	e000      	b.n	a1ae <__divsi3+0x14a>
    a1ac:	0989      	lsrs	r1, r1, #6
    a1ae:	09c3      	lsrs	r3, r0, #7
    a1b0:	428b      	cmp	r3, r1
    a1b2:	d301      	bcc.n	a1b8 <__divsi3+0x154>
    a1b4:	01cb      	lsls	r3, r1, #7
    a1b6:	1ac0      	subs	r0, r0, r3
    a1b8:	4152      	adcs	r2, r2
    a1ba:	0983      	lsrs	r3, r0, #6
    a1bc:	428b      	cmp	r3, r1
    a1be:	d301      	bcc.n	a1c4 <__divsi3+0x160>
    a1c0:	018b      	lsls	r3, r1, #6
    a1c2:	1ac0      	subs	r0, r0, r3
    a1c4:	4152      	adcs	r2, r2
    a1c6:	0943      	lsrs	r3, r0, #5
    a1c8:	428b      	cmp	r3, r1
    a1ca:	d301      	bcc.n	a1d0 <__divsi3+0x16c>
    a1cc:	014b      	lsls	r3, r1, #5
    a1ce:	1ac0      	subs	r0, r0, r3
    a1d0:	4152      	adcs	r2, r2
    a1d2:	0903      	lsrs	r3, r0, #4
    a1d4:	428b      	cmp	r3, r1
    a1d6:	d301      	bcc.n	a1dc <__divsi3+0x178>
    a1d8:	010b      	lsls	r3, r1, #4
    a1da:	1ac0      	subs	r0, r0, r3
    a1dc:	4152      	adcs	r2, r2
    a1de:	08c3      	lsrs	r3, r0, #3
    a1e0:	428b      	cmp	r3, r1
    a1e2:	d301      	bcc.n	a1e8 <__divsi3+0x184>
    a1e4:	00cb      	lsls	r3, r1, #3
    a1e6:	1ac0      	subs	r0, r0, r3
    a1e8:	4152      	adcs	r2, r2
    a1ea:	0883      	lsrs	r3, r0, #2
    a1ec:	428b      	cmp	r3, r1
    a1ee:	d301      	bcc.n	a1f4 <__divsi3+0x190>
    a1f0:	008b      	lsls	r3, r1, #2
    a1f2:	1ac0      	subs	r0, r0, r3
    a1f4:	4152      	adcs	r2, r2
    a1f6:	d2d9      	bcs.n	a1ac <__divsi3+0x148>
    a1f8:	0843      	lsrs	r3, r0, #1
    a1fa:	428b      	cmp	r3, r1
    a1fc:	d301      	bcc.n	a202 <__divsi3+0x19e>
    a1fe:	004b      	lsls	r3, r1, #1
    a200:	1ac0      	subs	r0, r0, r3
    a202:	4152      	adcs	r2, r2
    a204:	1a41      	subs	r1, r0, r1
    a206:	d200      	bcs.n	a20a <__divsi3+0x1a6>
    a208:	4601      	mov	r1, r0
    a20a:	4663      	mov	r3, ip
    a20c:	4152      	adcs	r2, r2
    a20e:	105b      	asrs	r3, r3, #1
    a210:	4610      	mov	r0, r2
    a212:	d301      	bcc.n	a218 <__divsi3+0x1b4>
    a214:	4240      	negs	r0, r0
    a216:	2b00      	cmp	r3, #0
    a218:	d500      	bpl.n	a21c <__divsi3+0x1b8>
    a21a:	4249      	negs	r1, r1
    a21c:	4770      	bx	lr
    a21e:	4663      	mov	r3, ip
    a220:	105b      	asrs	r3, r3, #1
    a222:	d300      	bcc.n	a226 <__divsi3+0x1c2>
    a224:	4240      	negs	r0, r0
    a226:	b501      	push	{r0, lr}
    a228:	2000      	movs	r0, #0
    a22a:	f000 f805 	bl	a238 <__aeabi_idiv0>
    a22e:	bd02      	pop	{r1, pc}

0000a230 <__aeabi_idivmod>:
    a230:	2900      	cmp	r1, #0
    a232:	d0f8      	beq.n	a226 <__divsi3+0x1c2>
    a234:	e716      	b.n	a064 <__divsi3>
    a236:	4770      	bx	lr

0000a238 <__aeabi_idiv0>:
    a238:	4770      	bx	lr
    a23a:	46c0      	nop			; (mov r8, r8)

0000a23c <__aeabi_lmul>:
    a23c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a23e:	46ce      	mov	lr, r9
    a240:	4647      	mov	r7, r8
    a242:	0415      	lsls	r5, r2, #16
    a244:	0c2d      	lsrs	r5, r5, #16
    a246:	002e      	movs	r6, r5
    a248:	b580      	push	{r7, lr}
    a24a:	0407      	lsls	r7, r0, #16
    a24c:	0c14      	lsrs	r4, r2, #16
    a24e:	0c3f      	lsrs	r7, r7, #16
    a250:	4699      	mov	r9, r3
    a252:	0c03      	lsrs	r3, r0, #16
    a254:	437e      	muls	r6, r7
    a256:	435d      	muls	r5, r3
    a258:	4367      	muls	r7, r4
    a25a:	4363      	muls	r3, r4
    a25c:	197f      	adds	r7, r7, r5
    a25e:	0c34      	lsrs	r4, r6, #16
    a260:	19e4      	adds	r4, r4, r7
    a262:	469c      	mov	ip, r3
    a264:	42a5      	cmp	r5, r4
    a266:	d903      	bls.n	a270 <__aeabi_lmul+0x34>
    a268:	2380      	movs	r3, #128	; 0x80
    a26a:	025b      	lsls	r3, r3, #9
    a26c:	4698      	mov	r8, r3
    a26e:	44c4      	add	ip, r8
    a270:	464b      	mov	r3, r9
    a272:	4351      	muls	r1, r2
    a274:	4343      	muls	r3, r0
    a276:	0436      	lsls	r6, r6, #16
    a278:	0c36      	lsrs	r6, r6, #16
    a27a:	0c25      	lsrs	r5, r4, #16
    a27c:	0424      	lsls	r4, r4, #16
    a27e:	4465      	add	r5, ip
    a280:	19a4      	adds	r4, r4, r6
    a282:	1859      	adds	r1, r3, r1
    a284:	1949      	adds	r1, r1, r5
    a286:	0020      	movs	r0, r4
    a288:	bc0c      	pop	{r2, r3}
    a28a:	4690      	mov	r8, r2
    a28c:	4699      	mov	r9, r3
    a28e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a290 <__libc_init_array>:
    a290:	b570      	push	{r4, r5, r6, lr}
    a292:	2600      	movs	r6, #0
    a294:	4d0c      	ldr	r5, [pc, #48]	; (a2c8 <__libc_init_array+0x38>)
    a296:	4c0d      	ldr	r4, [pc, #52]	; (a2cc <__libc_init_array+0x3c>)
    a298:	1b64      	subs	r4, r4, r5
    a29a:	10a4      	asrs	r4, r4, #2
    a29c:	42a6      	cmp	r6, r4
    a29e:	d109      	bne.n	a2b4 <__libc_init_array+0x24>
    a2a0:	2600      	movs	r6, #0
    a2a2:	f005 fb4d 	bl	f940 <_init>
    a2a6:	4d0a      	ldr	r5, [pc, #40]	; (a2d0 <__libc_init_array+0x40>)
    a2a8:	4c0a      	ldr	r4, [pc, #40]	; (a2d4 <__libc_init_array+0x44>)
    a2aa:	1b64      	subs	r4, r4, r5
    a2ac:	10a4      	asrs	r4, r4, #2
    a2ae:	42a6      	cmp	r6, r4
    a2b0:	d105      	bne.n	a2be <__libc_init_array+0x2e>
    a2b2:	bd70      	pop	{r4, r5, r6, pc}
    a2b4:	00b3      	lsls	r3, r6, #2
    a2b6:	58eb      	ldr	r3, [r5, r3]
    a2b8:	4798      	blx	r3
    a2ba:	3601      	adds	r6, #1
    a2bc:	e7ee      	b.n	a29c <__libc_init_array+0xc>
    a2be:	00b3      	lsls	r3, r6, #2
    a2c0:	58eb      	ldr	r3, [r5, r3]
    a2c2:	4798      	blx	r3
    a2c4:	3601      	adds	r6, #1
    a2c6:	e7f2      	b.n	a2ae <__libc_init_array+0x1e>
    a2c8:	0000f94c 	.word	0x0000f94c
    a2cc:	0000f94c 	.word	0x0000f94c
    a2d0:	0000f94c 	.word	0x0000f94c
    a2d4:	0000f950 	.word	0x0000f950

0000a2d8 <memcmp>:
    a2d8:	b530      	push	{r4, r5, lr}
    a2da:	2400      	movs	r4, #0
    a2dc:	42a2      	cmp	r2, r4
    a2de:	d101      	bne.n	a2e4 <memcmp+0xc>
    a2e0:	2000      	movs	r0, #0
    a2e2:	e005      	b.n	a2f0 <memcmp+0x18>
    a2e4:	5d03      	ldrb	r3, [r0, r4]
    a2e6:	1c65      	adds	r5, r4, #1
    a2e8:	5d0c      	ldrb	r4, [r1, r4]
    a2ea:	42a3      	cmp	r3, r4
    a2ec:	d001      	beq.n	a2f2 <memcmp+0x1a>
    a2ee:	1b18      	subs	r0, r3, r4
    a2f0:	bd30      	pop	{r4, r5, pc}
    a2f2:	002c      	movs	r4, r5
    a2f4:	e7f2      	b.n	a2dc <memcmp+0x4>

0000a2f6 <memcpy>:
    a2f6:	2300      	movs	r3, #0
    a2f8:	b510      	push	{r4, lr}
    a2fa:	429a      	cmp	r2, r3
    a2fc:	d100      	bne.n	a300 <memcpy+0xa>
    a2fe:	bd10      	pop	{r4, pc}
    a300:	5ccc      	ldrb	r4, [r1, r3]
    a302:	54c4      	strb	r4, [r0, r3]
    a304:	3301      	adds	r3, #1
    a306:	e7f8      	b.n	a2fa <memcpy+0x4>

0000a308 <memset>:
    a308:	0003      	movs	r3, r0
    a30a:	1882      	adds	r2, r0, r2
    a30c:	4293      	cmp	r3, r2
    a30e:	d100      	bne.n	a312 <memset+0xa>
    a310:	4770      	bx	lr
    a312:	7019      	strb	r1, [r3, #0]
    a314:	3301      	adds	r3, #1
    a316:	e7f9      	b.n	a30c <memset+0x4>

0000a318 <iprintf>:
    a318:	b40f      	push	{r0, r1, r2, r3}
    a31a:	4b0b      	ldr	r3, [pc, #44]	; (a348 <iprintf+0x30>)
    a31c:	b513      	push	{r0, r1, r4, lr}
    a31e:	681c      	ldr	r4, [r3, #0]
    a320:	2c00      	cmp	r4, #0
    a322:	d005      	beq.n	a330 <iprintf+0x18>
    a324:	69a3      	ldr	r3, [r4, #24]
    a326:	2b00      	cmp	r3, #0
    a328:	d102      	bne.n	a330 <iprintf+0x18>
    a32a:	0020      	movs	r0, r4
    a32c:	f000 fb42 	bl	a9b4 <__sinit>
    a330:	ab05      	add	r3, sp, #20
    a332:	9a04      	ldr	r2, [sp, #16]
    a334:	68a1      	ldr	r1, [r4, #8]
    a336:	0020      	movs	r0, r4
    a338:	9301      	str	r3, [sp, #4]
    a33a:	f000 fd17 	bl	ad6c <_vfiprintf_r>
    a33e:	bc16      	pop	{r1, r2, r4}
    a340:	bc08      	pop	{r3}
    a342:	b004      	add	sp, #16
    a344:	4718      	bx	r3
    a346:	46c0      	nop			; (mov r8, r8)
    a348:	200000d0 	.word	0x200000d0

0000a34c <putchar>:
    a34c:	4b08      	ldr	r3, [pc, #32]	; (a370 <putchar+0x24>)
    a34e:	b570      	push	{r4, r5, r6, lr}
    a350:	681c      	ldr	r4, [r3, #0]
    a352:	0005      	movs	r5, r0
    a354:	2c00      	cmp	r4, #0
    a356:	d005      	beq.n	a364 <putchar+0x18>
    a358:	69a3      	ldr	r3, [r4, #24]
    a35a:	2b00      	cmp	r3, #0
    a35c:	d102      	bne.n	a364 <putchar+0x18>
    a35e:	0020      	movs	r0, r4
    a360:	f000 fb28 	bl	a9b4 <__sinit>
    a364:	0029      	movs	r1, r5
    a366:	68a2      	ldr	r2, [r4, #8]
    a368:	0020      	movs	r0, r4
    a36a:	f000 ffa3 	bl	b2b4 <_putc_r>
    a36e:	bd70      	pop	{r4, r5, r6, pc}
    a370:	200000d0 	.word	0x200000d0

0000a374 <_puts_r>:
    a374:	b570      	push	{r4, r5, r6, lr}
    a376:	0005      	movs	r5, r0
    a378:	000e      	movs	r6, r1
    a37a:	2800      	cmp	r0, #0
    a37c:	d004      	beq.n	a388 <_puts_r+0x14>
    a37e:	6983      	ldr	r3, [r0, #24]
    a380:	2b00      	cmp	r3, #0
    a382:	d101      	bne.n	a388 <_puts_r+0x14>
    a384:	f000 fb16 	bl	a9b4 <__sinit>
    a388:	69ab      	ldr	r3, [r5, #24]
    a38a:	68ac      	ldr	r4, [r5, #8]
    a38c:	2b00      	cmp	r3, #0
    a38e:	d102      	bne.n	a396 <_puts_r+0x22>
    a390:	0028      	movs	r0, r5
    a392:	f000 fb0f 	bl	a9b4 <__sinit>
    a396:	4b24      	ldr	r3, [pc, #144]	; (a428 <_puts_r+0xb4>)
    a398:	429c      	cmp	r4, r3
    a39a:	d10f      	bne.n	a3bc <_puts_r+0x48>
    a39c:	686c      	ldr	r4, [r5, #4]
    a39e:	89a3      	ldrh	r3, [r4, #12]
    a3a0:	071b      	lsls	r3, r3, #28
    a3a2:	d502      	bpl.n	a3aa <_puts_r+0x36>
    a3a4:	6923      	ldr	r3, [r4, #16]
    a3a6:	2b00      	cmp	r3, #0
    a3a8:	d120      	bne.n	a3ec <_puts_r+0x78>
    a3aa:	0021      	movs	r1, r4
    a3ac:	0028      	movs	r0, r5
    a3ae:	f000 f993 	bl	a6d8 <__swsetup_r>
    a3b2:	2800      	cmp	r0, #0
    a3b4:	d01a      	beq.n	a3ec <_puts_r+0x78>
    a3b6:	2001      	movs	r0, #1
    a3b8:	4240      	negs	r0, r0
    a3ba:	bd70      	pop	{r4, r5, r6, pc}
    a3bc:	4b1b      	ldr	r3, [pc, #108]	; (a42c <_puts_r+0xb8>)
    a3be:	429c      	cmp	r4, r3
    a3c0:	d101      	bne.n	a3c6 <_puts_r+0x52>
    a3c2:	68ac      	ldr	r4, [r5, #8]
    a3c4:	e7eb      	b.n	a39e <_puts_r+0x2a>
    a3c6:	4b1a      	ldr	r3, [pc, #104]	; (a430 <_puts_r+0xbc>)
    a3c8:	429c      	cmp	r4, r3
    a3ca:	d1e8      	bne.n	a39e <_puts_r+0x2a>
    a3cc:	68ec      	ldr	r4, [r5, #12]
    a3ce:	e7e6      	b.n	a39e <_puts_r+0x2a>
    a3d0:	3b01      	subs	r3, #1
    a3d2:	3601      	adds	r6, #1
    a3d4:	60a3      	str	r3, [r4, #8]
    a3d6:	2b00      	cmp	r3, #0
    a3d8:	da04      	bge.n	a3e4 <_puts_r+0x70>
    a3da:	69a2      	ldr	r2, [r4, #24]
    a3dc:	4293      	cmp	r3, r2
    a3de:	db16      	blt.n	a40e <_puts_r+0x9a>
    a3e0:	290a      	cmp	r1, #10
    a3e2:	d014      	beq.n	a40e <_puts_r+0x9a>
    a3e4:	6823      	ldr	r3, [r4, #0]
    a3e6:	1c5a      	adds	r2, r3, #1
    a3e8:	6022      	str	r2, [r4, #0]
    a3ea:	7019      	strb	r1, [r3, #0]
    a3ec:	7831      	ldrb	r1, [r6, #0]
    a3ee:	68a3      	ldr	r3, [r4, #8]
    a3f0:	2900      	cmp	r1, #0
    a3f2:	d1ed      	bne.n	a3d0 <_puts_r+0x5c>
    a3f4:	3b01      	subs	r3, #1
    a3f6:	60a3      	str	r3, [r4, #8]
    a3f8:	2b00      	cmp	r3, #0
    a3fa:	da0f      	bge.n	a41c <_puts_r+0xa8>
    a3fc:	0022      	movs	r2, r4
    a3fe:	310a      	adds	r1, #10
    a400:	0028      	movs	r0, r5
    a402:	f000 f913 	bl	a62c <__swbuf_r>
    a406:	1c43      	adds	r3, r0, #1
    a408:	d0d5      	beq.n	a3b6 <_puts_r+0x42>
    a40a:	200a      	movs	r0, #10
    a40c:	e7d5      	b.n	a3ba <_puts_r+0x46>
    a40e:	0022      	movs	r2, r4
    a410:	0028      	movs	r0, r5
    a412:	f000 f90b 	bl	a62c <__swbuf_r>
    a416:	1c43      	adds	r3, r0, #1
    a418:	d1e8      	bne.n	a3ec <_puts_r+0x78>
    a41a:	e7cc      	b.n	a3b6 <_puts_r+0x42>
    a41c:	200a      	movs	r0, #10
    a41e:	6823      	ldr	r3, [r4, #0]
    a420:	1c5a      	adds	r2, r3, #1
    a422:	6022      	str	r2, [r4, #0]
    a424:	7018      	strb	r0, [r3, #0]
    a426:	e7c8      	b.n	a3ba <_puts_r+0x46>
    a428:	0000f8cc 	.word	0x0000f8cc
    a42c:	0000f8ec 	.word	0x0000f8ec
    a430:	0000f8ac 	.word	0x0000f8ac

0000a434 <puts>:
    a434:	b510      	push	{r4, lr}
    a436:	4b03      	ldr	r3, [pc, #12]	; (a444 <puts+0x10>)
    a438:	0001      	movs	r1, r0
    a43a:	6818      	ldr	r0, [r3, #0]
    a43c:	f7ff ff9a 	bl	a374 <_puts_r>
    a440:	bd10      	pop	{r4, pc}
    a442:	46c0      	nop			; (mov r8, r8)
    a444:	200000d0 	.word	0x200000d0

0000a448 <rand>:
    a448:	4b15      	ldr	r3, [pc, #84]	; (a4a0 <rand+0x58>)
    a44a:	b510      	push	{r4, lr}
    a44c:	681c      	ldr	r4, [r3, #0]
    a44e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a450:	2b00      	cmp	r3, #0
    a452:	d115      	bne.n	a480 <rand+0x38>
    a454:	2018      	movs	r0, #24
    a456:	f000 fbaf 	bl	abb8 <malloc>
    a45a:	4b12      	ldr	r3, [pc, #72]	; (a4a4 <rand+0x5c>)
    a45c:	63a0      	str	r0, [r4, #56]	; 0x38
    a45e:	8003      	strh	r3, [r0, #0]
    a460:	4b11      	ldr	r3, [pc, #68]	; (a4a8 <rand+0x60>)
    a462:	2201      	movs	r2, #1
    a464:	8043      	strh	r3, [r0, #2]
    a466:	4b11      	ldr	r3, [pc, #68]	; (a4ac <rand+0x64>)
    a468:	8083      	strh	r3, [r0, #4]
    a46a:	4b11      	ldr	r3, [pc, #68]	; (a4b0 <rand+0x68>)
    a46c:	80c3      	strh	r3, [r0, #6]
    a46e:	4b11      	ldr	r3, [pc, #68]	; (a4b4 <rand+0x6c>)
    a470:	8103      	strh	r3, [r0, #8]
    a472:	2305      	movs	r3, #5
    a474:	8143      	strh	r3, [r0, #10]
    a476:	3306      	adds	r3, #6
    a478:	8183      	strh	r3, [r0, #12]
    a47a:	2300      	movs	r3, #0
    a47c:	6102      	str	r2, [r0, #16]
    a47e:	6143      	str	r3, [r0, #20]
    a480:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    a482:	4a0d      	ldr	r2, [pc, #52]	; (a4b8 <rand+0x70>)
    a484:	6920      	ldr	r0, [r4, #16]
    a486:	6961      	ldr	r1, [r4, #20]
    a488:	4b0c      	ldr	r3, [pc, #48]	; (a4bc <rand+0x74>)
    a48a:	f7ff fed7 	bl	a23c <__aeabi_lmul>
    a48e:	2201      	movs	r2, #1
    a490:	2300      	movs	r3, #0
    a492:	1880      	adds	r0, r0, r2
    a494:	4159      	adcs	r1, r3
    a496:	6120      	str	r0, [r4, #16]
    a498:	6161      	str	r1, [r4, #20]
    a49a:	0048      	lsls	r0, r1, #1
    a49c:	0840      	lsrs	r0, r0, #1
    a49e:	bd10      	pop	{r4, pc}
    a4a0:	200000d0 	.word	0x200000d0
    a4a4:	0000330e 	.word	0x0000330e
    a4a8:	ffffabcd 	.word	0xffffabcd
    a4ac:	00001234 	.word	0x00001234
    a4b0:	ffffe66d 	.word	0xffffe66d
    a4b4:	ffffdeec 	.word	0xffffdeec
    a4b8:	4c957f2d 	.word	0x4c957f2d
    a4bc:	5851f42d 	.word	0x5851f42d

0000a4c0 <setbuf>:
    a4c0:	424a      	negs	r2, r1
    a4c2:	414a      	adcs	r2, r1
    a4c4:	2380      	movs	r3, #128	; 0x80
    a4c6:	b510      	push	{r4, lr}
    a4c8:	0052      	lsls	r2, r2, #1
    a4ca:	00db      	lsls	r3, r3, #3
    a4cc:	f000 f802 	bl	a4d4 <setvbuf>
    a4d0:	bd10      	pop	{r4, pc}
	...

0000a4d4 <setvbuf>:
    a4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4d6:	001d      	movs	r5, r3
    a4d8:	4b4f      	ldr	r3, [pc, #316]	; (a618 <setvbuf+0x144>)
    a4da:	b085      	sub	sp, #20
    a4dc:	681e      	ldr	r6, [r3, #0]
    a4de:	0004      	movs	r4, r0
    a4e0:	000f      	movs	r7, r1
    a4e2:	9200      	str	r2, [sp, #0]
    a4e4:	2e00      	cmp	r6, #0
    a4e6:	d005      	beq.n	a4f4 <setvbuf+0x20>
    a4e8:	69b3      	ldr	r3, [r6, #24]
    a4ea:	2b00      	cmp	r3, #0
    a4ec:	d102      	bne.n	a4f4 <setvbuf+0x20>
    a4ee:	0030      	movs	r0, r6
    a4f0:	f000 fa60 	bl	a9b4 <__sinit>
    a4f4:	4b49      	ldr	r3, [pc, #292]	; (a61c <setvbuf+0x148>)
    a4f6:	429c      	cmp	r4, r3
    a4f8:	d150      	bne.n	a59c <setvbuf+0xc8>
    a4fa:	6874      	ldr	r4, [r6, #4]
    a4fc:	9b00      	ldr	r3, [sp, #0]
    a4fe:	2b02      	cmp	r3, #2
    a500:	d005      	beq.n	a50e <setvbuf+0x3a>
    a502:	2b01      	cmp	r3, #1
    a504:	d900      	bls.n	a508 <setvbuf+0x34>
    a506:	e084      	b.n	a612 <setvbuf+0x13e>
    a508:	2d00      	cmp	r5, #0
    a50a:	da00      	bge.n	a50e <setvbuf+0x3a>
    a50c:	e081      	b.n	a612 <setvbuf+0x13e>
    a50e:	0021      	movs	r1, r4
    a510:	0030      	movs	r0, r6
    a512:	f000 f9e1 	bl	a8d8 <_fflush_r>
    a516:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a518:	2900      	cmp	r1, #0
    a51a:	d008      	beq.n	a52e <setvbuf+0x5a>
    a51c:	0023      	movs	r3, r4
    a51e:	3344      	adds	r3, #68	; 0x44
    a520:	4299      	cmp	r1, r3
    a522:	d002      	beq.n	a52a <setvbuf+0x56>
    a524:	0030      	movs	r0, r6
    a526:	f000 fb51 	bl	abcc <_free_r>
    a52a:	2300      	movs	r3, #0
    a52c:	6363      	str	r3, [r4, #52]	; 0x34
    a52e:	2300      	movs	r3, #0
    a530:	61a3      	str	r3, [r4, #24]
    a532:	6063      	str	r3, [r4, #4]
    a534:	89a3      	ldrh	r3, [r4, #12]
    a536:	061b      	lsls	r3, r3, #24
    a538:	d503      	bpl.n	a542 <setvbuf+0x6e>
    a53a:	6921      	ldr	r1, [r4, #16]
    a53c:	0030      	movs	r0, r6
    a53e:	f000 fb45 	bl	abcc <_free_r>
    a542:	89a3      	ldrh	r3, [r4, #12]
    a544:	4a36      	ldr	r2, [pc, #216]	; (a620 <setvbuf+0x14c>)
    a546:	4013      	ands	r3, r2
    a548:	81a3      	strh	r3, [r4, #12]
    a54a:	9b00      	ldr	r3, [sp, #0]
    a54c:	2b02      	cmp	r3, #2
    a54e:	d05a      	beq.n	a606 <setvbuf+0x132>
    a550:	ab03      	add	r3, sp, #12
    a552:	aa02      	add	r2, sp, #8
    a554:	0021      	movs	r1, r4
    a556:	0030      	movs	r0, r6
    a558:	f000 fac2 	bl	aae0 <__swhatbuf_r>
    a55c:	89a3      	ldrh	r3, [r4, #12]
    a55e:	4318      	orrs	r0, r3
    a560:	81a0      	strh	r0, [r4, #12]
    a562:	2d00      	cmp	r5, #0
    a564:	d124      	bne.n	a5b0 <setvbuf+0xdc>
    a566:	9d02      	ldr	r5, [sp, #8]
    a568:	0028      	movs	r0, r5
    a56a:	f000 fb25 	bl	abb8 <malloc>
    a56e:	9501      	str	r5, [sp, #4]
    a570:	1e07      	subs	r7, r0, #0
    a572:	d142      	bne.n	a5fa <setvbuf+0x126>
    a574:	9b02      	ldr	r3, [sp, #8]
    a576:	9301      	str	r3, [sp, #4]
    a578:	42ab      	cmp	r3, r5
    a57a:	d139      	bne.n	a5f0 <setvbuf+0x11c>
    a57c:	2001      	movs	r0, #1
    a57e:	4240      	negs	r0, r0
    a580:	2302      	movs	r3, #2
    a582:	89a2      	ldrh	r2, [r4, #12]
    a584:	4313      	orrs	r3, r2
    a586:	81a3      	strh	r3, [r4, #12]
    a588:	2300      	movs	r3, #0
    a58a:	60a3      	str	r3, [r4, #8]
    a58c:	0023      	movs	r3, r4
    a58e:	3347      	adds	r3, #71	; 0x47
    a590:	6023      	str	r3, [r4, #0]
    a592:	6123      	str	r3, [r4, #16]
    a594:	2301      	movs	r3, #1
    a596:	6163      	str	r3, [r4, #20]
    a598:	b005      	add	sp, #20
    a59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a59c:	4b21      	ldr	r3, [pc, #132]	; (a624 <setvbuf+0x150>)
    a59e:	429c      	cmp	r4, r3
    a5a0:	d101      	bne.n	a5a6 <setvbuf+0xd2>
    a5a2:	68b4      	ldr	r4, [r6, #8]
    a5a4:	e7aa      	b.n	a4fc <setvbuf+0x28>
    a5a6:	4b20      	ldr	r3, [pc, #128]	; (a628 <setvbuf+0x154>)
    a5a8:	429c      	cmp	r4, r3
    a5aa:	d1a7      	bne.n	a4fc <setvbuf+0x28>
    a5ac:	68f4      	ldr	r4, [r6, #12]
    a5ae:	e7a5      	b.n	a4fc <setvbuf+0x28>
    a5b0:	2f00      	cmp	r7, #0
    a5b2:	d0d9      	beq.n	a568 <setvbuf+0x94>
    a5b4:	69b3      	ldr	r3, [r6, #24]
    a5b6:	2b00      	cmp	r3, #0
    a5b8:	d102      	bne.n	a5c0 <setvbuf+0xec>
    a5ba:	0030      	movs	r0, r6
    a5bc:	f000 f9fa 	bl	a9b4 <__sinit>
    a5c0:	9b00      	ldr	r3, [sp, #0]
    a5c2:	2b01      	cmp	r3, #1
    a5c4:	d103      	bne.n	a5ce <setvbuf+0xfa>
    a5c6:	89a3      	ldrh	r3, [r4, #12]
    a5c8:	9a00      	ldr	r2, [sp, #0]
    a5ca:	431a      	orrs	r2, r3
    a5cc:	81a2      	strh	r2, [r4, #12]
    a5ce:	2008      	movs	r0, #8
    a5d0:	89a3      	ldrh	r3, [r4, #12]
    a5d2:	6027      	str	r7, [r4, #0]
    a5d4:	6127      	str	r7, [r4, #16]
    a5d6:	6165      	str	r5, [r4, #20]
    a5d8:	4018      	ands	r0, r3
    a5da:	d018      	beq.n	a60e <setvbuf+0x13a>
    a5dc:	2001      	movs	r0, #1
    a5de:	4018      	ands	r0, r3
    a5e0:	2300      	movs	r3, #0
    a5e2:	4298      	cmp	r0, r3
    a5e4:	d011      	beq.n	a60a <setvbuf+0x136>
    a5e6:	426d      	negs	r5, r5
    a5e8:	60a3      	str	r3, [r4, #8]
    a5ea:	61a5      	str	r5, [r4, #24]
    a5ec:	0018      	movs	r0, r3
    a5ee:	e7d3      	b.n	a598 <setvbuf+0xc4>
    a5f0:	9801      	ldr	r0, [sp, #4]
    a5f2:	f000 fae1 	bl	abb8 <malloc>
    a5f6:	1e07      	subs	r7, r0, #0
    a5f8:	d0c0      	beq.n	a57c <setvbuf+0xa8>
    a5fa:	2380      	movs	r3, #128	; 0x80
    a5fc:	89a2      	ldrh	r2, [r4, #12]
    a5fe:	9d01      	ldr	r5, [sp, #4]
    a600:	4313      	orrs	r3, r2
    a602:	81a3      	strh	r3, [r4, #12]
    a604:	e7d6      	b.n	a5b4 <setvbuf+0xe0>
    a606:	2000      	movs	r0, #0
    a608:	e7ba      	b.n	a580 <setvbuf+0xac>
    a60a:	60a5      	str	r5, [r4, #8]
    a60c:	e7c4      	b.n	a598 <setvbuf+0xc4>
    a60e:	60a0      	str	r0, [r4, #8]
    a610:	e7c2      	b.n	a598 <setvbuf+0xc4>
    a612:	2001      	movs	r0, #1
    a614:	4240      	negs	r0, r0
    a616:	e7bf      	b.n	a598 <setvbuf+0xc4>
    a618:	200000d0 	.word	0x200000d0
    a61c:	0000f8cc 	.word	0x0000f8cc
    a620:	fffff35c 	.word	0xfffff35c
    a624:	0000f8ec 	.word	0x0000f8ec
    a628:	0000f8ac 	.word	0x0000f8ac

0000a62c <__swbuf_r>:
    a62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a62e:	0005      	movs	r5, r0
    a630:	000e      	movs	r6, r1
    a632:	0014      	movs	r4, r2
    a634:	2800      	cmp	r0, #0
    a636:	d004      	beq.n	a642 <__swbuf_r+0x16>
    a638:	6983      	ldr	r3, [r0, #24]
    a63a:	2b00      	cmp	r3, #0
    a63c:	d101      	bne.n	a642 <__swbuf_r+0x16>
    a63e:	f000 f9b9 	bl	a9b4 <__sinit>
    a642:	4b22      	ldr	r3, [pc, #136]	; (a6cc <__swbuf_r+0xa0>)
    a644:	429c      	cmp	r4, r3
    a646:	d12d      	bne.n	a6a4 <__swbuf_r+0x78>
    a648:	686c      	ldr	r4, [r5, #4]
    a64a:	69a3      	ldr	r3, [r4, #24]
    a64c:	60a3      	str	r3, [r4, #8]
    a64e:	89a3      	ldrh	r3, [r4, #12]
    a650:	071b      	lsls	r3, r3, #28
    a652:	d531      	bpl.n	a6b8 <__swbuf_r+0x8c>
    a654:	6923      	ldr	r3, [r4, #16]
    a656:	2b00      	cmp	r3, #0
    a658:	d02e      	beq.n	a6b8 <__swbuf_r+0x8c>
    a65a:	6823      	ldr	r3, [r4, #0]
    a65c:	6922      	ldr	r2, [r4, #16]
    a65e:	b2f7      	uxtb	r7, r6
    a660:	1a98      	subs	r0, r3, r2
    a662:	6963      	ldr	r3, [r4, #20]
    a664:	b2f6      	uxtb	r6, r6
    a666:	4298      	cmp	r0, r3
    a668:	db05      	blt.n	a676 <__swbuf_r+0x4a>
    a66a:	0021      	movs	r1, r4
    a66c:	0028      	movs	r0, r5
    a66e:	f000 f933 	bl	a8d8 <_fflush_r>
    a672:	2800      	cmp	r0, #0
    a674:	d126      	bne.n	a6c4 <__swbuf_r+0x98>
    a676:	68a3      	ldr	r3, [r4, #8]
    a678:	3001      	adds	r0, #1
    a67a:	3b01      	subs	r3, #1
    a67c:	60a3      	str	r3, [r4, #8]
    a67e:	6823      	ldr	r3, [r4, #0]
    a680:	1c5a      	adds	r2, r3, #1
    a682:	6022      	str	r2, [r4, #0]
    a684:	701f      	strb	r7, [r3, #0]
    a686:	6963      	ldr	r3, [r4, #20]
    a688:	4298      	cmp	r0, r3
    a68a:	d004      	beq.n	a696 <__swbuf_r+0x6a>
    a68c:	89a3      	ldrh	r3, [r4, #12]
    a68e:	07db      	lsls	r3, r3, #31
    a690:	d51a      	bpl.n	a6c8 <__swbuf_r+0x9c>
    a692:	2e0a      	cmp	r6, #10
    a694:	d118      	bne.n	a6c8 <__swbuf_r+0x9c>
    a696:	0021      	movs	r1, r4
    a698:	0028      	movs	r0, r5
    a69a:	f000 f91d 	bl	a8d8 <_fflush_r>
    a69e:	2800      	cmp	r0, #0
    a6a0:	d012      	beq.n	a6c8 <__swbuf_r+0x9c>
    a6a2:	e00f      	b.n	a6c4 <__swbuf_r+0x98>
    a6a4:	4b0a      	ldr	r3, [pc, #40]	; (a6d0 <__swbuf_r+0xa4>)
    a6a6:	429c      	cmp	r4, r3
    a6a8:	d101      	bne.n	a6ae <__swbuf_r+0x82>
    a6aa:	68ac      	ldr	r4, [r5, #8]
    a6ac:	e7cd      	b.n	a64a <__swbuf_r+0x1e>
    a6ae:	4b09      	ldr	r3, [pc, #36]	; (a6d4 <__swbuf_r+0xa8>)
    a6b0:	429c      	cmp	r4, r3
    a6b2:	d1ca      	bne.n	a64a <__swbuf_r+0x1e>
    a6b4:	68ec      	ldr	r4, [r5, #12]
    a6b6:	e7c8      	b.n	a64a <__swbuf_r+0x1e>
    a6b8:	0021      	movs	r1, r4
    a6ba:	0028      	movs	r0, r5
    a6bc:	f000 f80c 	bl	a6d8 <__swsetup_r>
    a6c0:	2800      	cmp	r0, #0
    a6c2:	d0ca      	beq.n	a65a <__swbuf_r+0x2e>
    a6c4:	2601      	movs	r6, #1
    a6c6:	4276      	negs	r6, r6
    a6c8:	0030      	movs	r0, r6
    a6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a6cc:	0000f8cc 	.word	0x0000f8cc
    a6d0:	0000f8ec 	.word	0x0000f8ec
    a6d4:	0000f8ac 	.word	0x0000f8ac

0000a6d8 <__swsetup_r>:
    a6d8:	4b36      	ldr	r3, [pc, #216]	; (a7b4 <__swsetup_r+0xdc>)
    a6da:	b570      	push	{r4, r5, r6, lr}
    a6dc:	681d      	ldr	r5, [r3, #0]
    a6de:	0006      	movs	r6, r0
    a6e0:	000c      	movs	r4, r1
    a6e2:	2d00      	cmp	r5, #0
    a6e4:	d005      	beq.n	a6f2 <__swsetup_r+0x1a>
    a6e6:	69ab      	ldr	r3, [r5, #24]
    a6e8:	2b00      	cmp	r3, #0
    a6ea:	d102      	bne.n	a6f2 <__swsetup_r+0x1a>
    a6ec:	0028      	movs	r0, r5
    a6ee:	f000 f961 	bl	a9b4 <__sinit>
    a6f2:	4b31      	ldr	r3, [pc, #196]	; (a7b8 <__swsetup_r+0xe0>)
    a6f4:	429c      	cmp	r4, r3
    a6f6:	d10f      	bne.n	a718 <__swsetup_r+0x40>
    a6f8:	686c      	ldr	r4, [r5, #4]
    a6fa:	230c      	movs	r3, #12
    a6fc:	5ee2      	ldrsh	r2, [r4, r3]
    a6fe:	b293      	uxth	r3, r2
    a700:	0719      	lsls	r1, r3, #28
    a702:	d42d      	bmi.n	a760 <__swsetup_r+0x88>
    a704:	06d9      	lsls	r1, r3, #27
    a706:	d411      	bmi.n	a72c <__swsetup_r+0x54>
    a708:	2309      	movs	r3, #9
    a70a:	2001      	movs	r0, #1
    a70c:	6033      	str	r3, [r6, #0]
    a70e:	3337      	adds	r3, #55	; 0x37
    a710:	4313      	orrs	r3, r2
    a712:	81a3      	strh	r3, [r4, #12]
    a714:	4240      	negs	r0, r0
    a716:	bd70      	pop	{r4, r5, r6, pc}
    a718:	4b28      	ldr	r3, [pc, #160]	; (a7bc <__swsetup_r+0xe4>)
    a71a:	429c      	cmp	r4, r3
    a71c:	d101      	bne.n	a722 <__swsetup_r+0x4a>
    a71e:	68ac      	ldr	r4, [r5, #8]
    a720:	e7eb      	b.n	a6fa <__swsetup_r+0x22>
    a722:	4b27      	ldr	r3, [pc, #156]	; (a7c0 <__swsetup_r+0xe8>)
    a724:	429c      	cmp	r4, r3
    a726:	d1e8      	bne.n	a6fa <__swsetup_r+0x22>
    a728:	68ec      	ldr	r4, [r5, #12]
    a72a:	e7e6      	b.n	a6fa <__swsetup_r+0x22>
    a72c:	075b      	lsls	r3, r3, #29
    a72e:	d513      	bpl.n	a758 <__swsetup_r+0x80>
    a730:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a732:	2900      	cmp	r1, #0
    a734:	d008      	beq.n	a748 <__swsetup_r+0x70>
    a736:	0023      	movs	r3, r4
    a738:	3344      	adds	r3, #68	; 0x44
    a73a:	4299      	cmp	r1, r3
    a73c:	d002      	beq.n	a744 <__swsetup_r+0x6c>
    a73e:	0030      	movs	r0, r6
    a740:	f000 fa44 	bl	abcc <_free_r>
    a744:	2300      	movs	r3, #0
    a746:	6363      	str	r3, [r4, #52]	; 0x34
    a748:	2224      	movs	r2, #36	; 0x24
    a74a:	89a3      	ldrh	r3, [r4, #12]
    a74c:	4393      	bics	r3, r2
    a74e:	81a3      	strh	r3, [r4, #12]
    a750:	2300      	movs	r3, #0
    a752:	6063      	str	r3, [r4, #4]
    a754:	6923      	ldr	r3, [r4, #16]
    a756:	6023      	str	r3, [r4, #0]
    a758:	2308      	movs	r3, #8
    a75a:	89a2      	ldrh	r2, [r4, #12]
    a75c:	4313      	orrs	r3, r2
    a75e:	81a3      	strh	r3, [r4, #12]
    a760:	6923      	ldr	r3, [r4, #16]
    a762:	2b00      	cmp	r3, #0
    a764:	d10b      	bne.n	a77e <__swsetup_r+0xa6>
    a766:	21a0      	movs	r1, #160	; 0xa0
    a768:	2280      	movs	r2, #128	; 0x80
    a76a:	89a3      	ldrh	r3, [r4, #12]
    a76c:	0089      	lsls	r1, r1, #2
    a76e:	0092      	lsls	r2, r2, #2
    a770:	400b      	ands	r3, r1
    a772:	4293      	cmp	r3, r2
    a774:	d003      	beq.n	a77e <__swsetup_r+0xa6>
    a776:	0021      	movs	r1, r4
    a778:	0030      	movs	r0, r6
    a77a:	f000 f9d9 	bl	ab30 <__smakebuf_r>
    a77e:	2301      	movs	r3, #1
    a780:	89a2      	ldrh	r2, [r4, #12]
    a782:	4013      	ands	r3, r2
    a784:	d011      	beq.n	a7aa <__swsetup_r+0xd2>
    a786:	2300      	movs	r3, #0
    a788:	60a3      	str	r3, [r4, #8]
    a78a:	6963      	ldr	r3, [r4, #20]
    a78c:	425b      	negs	r3, r3
    a78e:	61a3      	str	r3, [r4, #24]
    a790:	2000      	movs	r0, #0
    a792:	6923      	ldr	r3, [r4, #16]
    a794:	4283      	cmp	r3, r0
    a796:	d1be      	bne.n	a716 <__swsetup_r+0x3e>
    a798:	230c      	movs	r3, #12
    a79a:	5ee2      	ldrsh	r2, [r4, r3]
    a79c:	0613      	lsls	r3, r2, #24
    a79e:	d5ba      	bpl.n	a716 <__swsetup_r+0x3e>
    a7a0:	2340      	movs	r3, #64	; 0x40
    a7a2:	4313      	orrs	r3, r2
    a7a4:	81a3      	strh	r3, [r4, #12]
    a7a6:	3801      	subs	r0, #1
    a7a8:	e7b5      	b.n	a716 <__swsetup_r+0x3e>
    a7aa:	0792      	lsls	r2, r2, #30
    a7ac:	d400      	bmi.n	a7b0 <__swsetup_r+0xd8>
    a7ae:	6963      	ldr	r3, [r4, #20]
    a7b0:	60a3      	str	r3, [r4, #8]
    a7b2:	e7ed      	b.n	a790 <__swsetup_r+0xb8>
    a7b4:	200000d0 	.word	0x200000d0
    a7b8:	0000f8cc 	.word	0x0000f8cc
    a7bc:	0000f8ec 	.word	0x0000f8ec
    a7c0:	0000f8ac 	.word	0x0000f8ac

0000a7c4 <__sflush_r>:
    a7c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a7c6:	898a      	ldrh	r2, [r1, #12]
    a7c8:	0005      	movs	r5, r0
    a7ca:	000c      	movs	r4, r1
    a7cc:	0713      	lsls	r3, r2, #28
    a7ce:	d460      	bmi.n	a892 <__sflush_r+0xce>
    a7d0:	684b      	ldr	r3, [r1, #4]
    a7d2:	2b00      	cmp	r3, #0
    a7d4:	dc04      	bgt.n	a7e0 <__sflush_r+0x1c>
    a7d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    a7d8:	2b00      	cmp	r3, #0
    a7da:	dc01      	bgt.n	a7e0 <__sflush_r+0x1c>
    a7dc:	2000      	movs	r0, #0
    a7de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a7e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    a7e2:	2f00      	cmp	r7, #0
    a7e4:	d0fa      	beq.n	a7dc <__sflush_r+0x18>
    a7e6:	2300      	movs	r3, #0
    a7e8:	682e      	ldr	r6, [r5, #0]
    a7ea:	602b      	str	r3, [r5, #0]
    a7ec:	2380      	movs	r3, #128	; 0x80
    a7ee:	015b      	lsls	r3, r3, #5
    a7f0:	401a      	ands	r2, r3
    a7f2:	d034      	beq.n	a85e <__sflush_r+0x9a>
    a7f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    a7f6:	89a3      	ldrh	r3, [r4, #12]
    a7f8:	075b      	lsls	r3, r3, #29
    a7fa:	d506      	bpl.n	a80a <__sflush_r+0x46>
    a7fc:	6863      	ldr	r3, [r4, #4]
    a7fe:	1ac0      	subs	r0, r0, r3
    a800:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a802:	2b00      	cmp	r3, #0
    a804:	d001      	beq.n	a80a <__sflush_r+0x46>
    a806:	6c23      	ldr	r3, [r4, #64]	; 0x40
    a808:	1ac0      	subs	r0, r0, r3
    a80a:	0002      	movs	r2, r0
    a80c:	6a21      	ldr	r1, [r4, #32]
    a80e:	2300      	movs	r3, #0
    a810:	0028      	movs	r0, r5
    a812:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    a814:	47b8      	blx	r7
    a816:	89a1      	ldrh	r1, [r4, #12]
    a818:	1c43      	adds	r3, r0, #1
    a81a:	d106      	bne.n	a82a <__sflush_r+0x66>
    a81c:	682b      	ldr	r3, [r5, #0]
    a81e:	2b1d      	cmp	r3, #29
    a820:	d831      	bhi.n	a886 <__sflush_r+0xc2>
    a822:	4a2c      	ldr	r2, [pc, #176]	; (a8d4 <__sflush_r+0x110>)
    a824:	40da      	lsrs	r2, r3
    a826:	07d3      	lsls	r3, r2, #31
    a828:	d52d      	bpl.n	a886 <__sflush_r+0xc2>
    a82a:	2300      	movs	r3, #0
    a82c:	6063      	str	r3, [r4, #4]
    a82e:	6923      	ldr	r3, [r4, #16]
    a830:	6023      	str	r3, [r4, #0]
    a832:	04cb      	lsls	r3, r1, #19
    a834:	d505      	bpl.n	a842 <__sflush_r+0x7e>
    a836:	1c43      	adds	r3, r0, #1
    a838:	d102      	bne.n	a840 <__sflush_r+0x7c>
    a83a:	682b      	ldr	r3, [r5, #0]
    a83c:	2b00      	cmp	r3, #0
    a83e:	d100      	bne.n	a842 <__sflush_r+0x7e>
    a840:	6560      	str	r0, [r4, #84]	; 0x54
    a842:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a844:	602e      	str	r6, [r5, #0]
    a846:	2900      	cmp	r1, #0
    a848:	d0c8      	beq.n	a7dc <__sflush_r+0x18>
    a84a:	0023      	movs	r3, r4
    a84c:	3344      	adds	r3, #68	; 0x44
    a84e:	4299      	cmp	r1, r3
    a850:	d002      	beq.n	a858 <__sflush_r+0x94>
    a852:	0028      	movs	r0, r5
    a854:	f000 f9ba 	bl	abcc <_free_r>
    a858:	2000      	movs	r0, #0
    a85a:	6360      	str	r0, [r4, #52]	; 0x34
    a85c:	e7bf      	b.n	a7de <__sflush_r+0x1a>
    a85e:	2301      	movs	r3, #1
    a860:	6a21      	ldr	r1, [r4, #32]
    a862:	0028      	movs	r0, r5
    a864:	47b8      	blx	r7
    a866:	1c43      	adds	r3, r0, #1
    a868:	d1c5      	bne.n	a7f6 <__sflush_r+0x32>
    a86a:	682b      	ldr	r3, [r5, #0]
    a86c:	2b00      	cmp	r3, #0
    a86e:	d0c2      	beq.n	a7f6 <__sflush_r+0x32>
    a870:	2b1d      	cmp	r3, #29
    a872:	d001      	beq.n	a878 <__sflush_r+0xb4>
    a874:	2b16      	cmp	r3, #22
    a876:	d101      	bne.n	a87c <__sflush_r+0xb8>
    a878:	602e      	str	r6, [r5, #0]
    a87a:	e7af      	b.n	a7dc <__sflush_r+0x18>
    a87c:	2340      	movs	r3, #64	; 0x40
    a87e:	89a2      	ldrh	r2, [r4, #12]
    a880:	4313      	orrs	r3, r2
    a882:	81a3      	strh	r3, [r4, #12]
    a884:	e7ab      	b.n	a7de <__sflush_r+0x1a>
    a886:	2340      	movs	r3, #64	; 0x40
    a888:	430b      	orrs	r3, r1
    a88a:	2001      	movs	r0, #1
    a88c:	81a3      	strh	r3, [r4, #12]
    a88e:	4240      	negs	r0, r0
    a890:	e7a5      	b.n	a7de <__sflush_r+0x1a>
    a892:	690f      	ldr	r7, [r1, #16]
    a894:	2f00      	cmp	r7, #0
    a896:	d0a1      	beq.n	a7dc <__sflush_r+0x18>
    a898:	680b      	ldr	r3, [r1, #0]
    a89a:	600f      	str	r7, [r1, #0]
    a89c:	1bdb      	subs	r3, r3, r7
    a89e:	9301      	str	r3, [sp, #4]
    a8a0:	2300      	movs	r3, #0
    a8a2:	0792      	lsls	r2, r2, #30
    a8a4:	d100      	bne.n	a8a8 <__sflush_r+0xe4>
    a8a6:	694b      	ldr	r3, [r1, #20]
    a8a8:	60a3      	str	r3, [r4, #8]
    a8aa:	9b01      	ldr	r3, [sp, #4]
    a8ac:	2b00      	cmp	r3, #0
    a8ae:	dc00      	bgt.n	a8b2 <__sflush_r+0xee>
    a8b0:	e794      	b.n	a7dc <__sflush_r+0x18>
    a8b2:	9b01      	ldr	r3, [sp, #4]
    a8b4:	003a      	movs	r2, r7
    a8b6:	6a21      	ldr	r1, [r4, #32]
    a8b8:	0028      	movs	r0, r5
    a8ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    a8bc:	47b0      	blx	r6
    a8be:	2800      	cmp	r0, #0
    a8c0:	dc03      	bgt.n	a8ca <__sflush_r+0x106>
    a8c2:	2340      	movs	r3, #64	; 0x40
    a8c4:	89a2      	ldrh	r2, [r4, #12]
    a8c6:	4313      	orrs	r3, r2
    a8c8:	e7df      	b.n	a88a <__sflush_r+0xc6>
    a8ca:	9b01      	ldr	r3, [sp, #4]
    a8cc:	183f      	adds	r7, r7, r0
    a8ce:	1a1b      	subs	r3, r3, r0
    a8d0:	9301      	str	r3, [sp, #4]
    a8d2:	e7ea      	b.n	a8aa <__sflush_r+0xe6>
    a8d4:	20400001 	.word	0x20400001

0000a8d8 <_fflush_r>:
    a8d8:	690b      	ldr	r3, [r1, #16]
    a8da:	b570      	push	{r4, r5, r6, lr}
    a8dc:	0005      	movs	r5, r0
    a8de:	000c      	movs	r4, r1
    a8e0:	2b00      	cmp	r3, #0
    a8e2:	d101      	bne.n	a8e8 <_fflush_r+0x10>
    a8e4:	2000      	movs	r0, #0
    a8e6:	bd70      	pop	{r4, r5, r6, pc}
    a8e8:	2800      	cmp	r0, #0
    a8ea:	d004      	beq.n	a8f6 <_fflush_r+0x1e>
    a8ec:	6983      	ldr	r3, [r0, #24]
    a8ee:	2b00      	cmp	r3, #0
    a8f0:	d101      	bne.n	a8f6 <_fflush_r+0x1e>
    a8f2:	f000 f85f 	bl	a9b4 <__sinit>
    a8f6:	4b0b      	ldr	r3, [pc, #44]	; (a924 <_fflush_r+0x4c>)
    a8f8:	429c      	cmp	r4, r3
    a8fa:	d109      	bne.n	a910 <_fflush_r+0x38>
    a8fc:	686c      	ldr	r4, [r5, #4]
    a8fe:	220c      	movs	r2, #12
    a900:	5ea3      	ldrsh	r3, [r4, r2]
    a902:	2b00      	cmp	r3, #0
    a904:	d0ee      	beq.n	a8e4 <_fflush_r+0xc>
    a906:	0021      	movs	r1, r4
    a908:	0028      	movs	r0, r5
    a90a:	f7ff ff5b 	bl	a7c4 <__sflush_r>
    a90e:	e7ea      	b.n	a8e6 <_fflush_r+0xe>
    a910:	4b05      	ldr	r3, [pc, #20]	; (a928 <_fflush_r+0x50>)
    a912:	429c      	cmp	r4, r3
    a914:	d101      	bne.n	a91a <_fflush_r+0x42>
    a916:	68ac      	ldr	r4, [r5, #8]
    a918:	e7f1      	b.n	a8fe <_fflush_r+0x26>
    a91a:	4b04      	ldr	r3, [pc, #16]	; (a92c <_fflush_r+0x54>)
    a91c:	429c      	cmp	r4, r3
    a91e:	d1ee      	bne.n	a8fe <_fflush_r+0x26>
    a920:	68ec      	ldr	r4, [r5, #12]
    a922:	e7ec      	b.n	a8fe <_fflush_r+0x26>
    a924:	0000f8cc 	.word	0x0000f8cc
    a928:	0000f8ec 	.word	0x0000f8ec
    a92c:	0000f8ac 	.word	0x0000f8ac

0000a930 <_cleanup_r>:
    a930:	b510      	push	{r4, lr}
    a932:	4902      	ldr	r1, [pc, #8]	; (a93c <_cleanup_r+0xc>)
    a934:	f000 f8b2 	bl	aa9c <_fwalk_reent>
    a938:	bd10      	pop	{r4, pc}
    a93a:	46c0      	nop			; (mov r8, r8)
    a93c:	0000a8d9 	.word	0x0000a8d9

0000a940 <std.isra.0>:
    a940:	2300      	movs	r3, #0
    a942:	b510      	push	{r4, lr}
    a944:	0004      	movs	r4, r0
    a946:	6003      	str	r3, [r0, #0]
    a948:	6043      	str	r3, [r0, #4]
    a94a:	6083      	str	r3, [r0, #8]
    a94c:	8181      	strh	r1, [r0, #12]
    a94e:	6643      	str	r3, [r0, #100]	; 0x64
    a950:	81c2      	strh	r2, [r0, #14]
    a952:	6103      	str	r3, [r0, #16]
    a954:	6143      	str	r3, [r0, #20]
    a956:	6183      	str	r3, [r0, #24]
    a958:	0019      	movs	r1, r3
    a95a:	2208      	movs	r2, #8
    a95c:	305c      	adds	r0, #92	; 0x5c
    a95e:	f7ff fcd3 	bl	a308 <memset>
    a962:	4b05      	ldr	r3, [pc, #20]	; (a978 <std.isra.0+0x38>)
    a964:	6224      	str	r4, [r4, #32]
    a966:	6263      	str	r3, [r4, #36]	; 0x24
    a968:	4b04      	ldr	r3, [pc, #16]	; (a97c <std.isra.0+0x3c>)
    a96a:	62a3      	str	r3, [r4, #40]	; 0x28
    a96c:	4b04      	ldr	r3, [pc, #16]	; (a980 <std.isra.0+0x40>)
    a96e:	62e3      	str	r3, [r4, #44]	; 0x2c
    a970:	4b04      	ldr	r3, [pc, #16]	; (a984 <std.isra.0+0x44>)
    a972:	6323      	str	r3, [r4, #48]	; 0x30
    a974:	bd10      	pop	{r4, pc}
    a976:	46c0      	nop			; (mov r8, r8)
    a978:	0000b345 	.word	0x0000b345
    a97c:	0000b36d 	.word	0x0000b36d
    a980:	0000b3a5 	.word	0x0000b3a5
    a984:	0000b3d1 	.word	0x0000b3d1

0000a988 <__sfmoreglue>:
    a988:	b570      	push	{r4, r5, r6, lr}
    a98a:	2568      	movs	r5, #104	; 0x68
    a98c:	1e4a      	subs	r2, r1, #1
    a98e:	4355      	muls	r5, r2
    a990:	000e      	movs	r6, r1
    a992:	0029      	movs	r1, r5
    a994:	3174      	adds	r1, #116	; 0x74
    a996:	f000 f963 	bl	ac60 <_malloc_r>
    a99a:	1e04      	subs	r4, r0, #0
    a99c:	d008      	beq.n	a9b0 <__sfmoreglue+0x28>
    a99e:	2100      	movs	r1, #0
    a9a0:	002a      	movs	r2, r5
    a9a2:	6001      	str	r1, [r0, #0]
    a9a4:	6046      	str	r6, [r0, #4]
    a9a6:	300c      	adds	r0, #12
    a9a8:	60a0      	str	r0, [r4, #8]
    a9aa:	3268      	adds	r2, #104	; 0x68
    a9ac:	f7ff fcac 	bl	a308 <memset>
    a9b0:	0020      	movs	r0, r4
    a9b2:	bd70      	pop	{r4, r5, r6, pc}

0000a9b4 <__sinit>:
    a9b4:	6983      	ldr	r3, [r0, #24]
    a9b6:	b513      	push	{r0, r1, r4, lr}
    a9b8:	0004      	movs	r4, r0
    a9ba:	2b00      	cmp	r3, #0
    a9bc:	d128      	bne.n	aa10 <__sinit+0x5c>
    a9be:	6483      	str	r3, [r0, #72]	; 0x48
    a9c0:	64c3      	str	r3, [r0, #76]	; 0x4c
    a9c2:	6503      	str	r3, [r0, #80]	; 0x50
    a9c4:	4b13      	ldr	r3, [pc, #76]	; (aa14 <__sinit+0x60>)
    a9c6:	4a14      	ldr	r2, [pc, #80]	; (aa18 <__sinit+0x64>)
    a9c8:	681b      	ldr	r3, [r3, #0]
    a9ca:	6282      	str	r2, [r0, #40]	; 0x28
    a9cc:	9301      	str	r3, [sp, #4]
    a9ce:	4298      	cmp	r0, r3
    a9d0:	d101      	bne.n	a9d6 <__sinit+0x22>
    a9d2:	2301      	movs	r3, #1
    a9d4:	6183      	str	r3, [r0, #24]
    a9d6:	0020      	movs	r0, r4
    a9d8:	f000 f820 	bl	aa1c <__sfp>
    a9dc:	6060      	str	r0, [r4, #4]
    a9de:	0020      	movs	r0, r4
    a9e0:	f000 f81c 	bl	aa1c <__sfp>
    a9e4:	60a0      	str	r0, [r4, #8]
    a9e6:	0020      	movs	r0, r4
    a9e8:	f000 f818 	bl	aa1c <__sfp>
    a9ec:	2200      	movs	r2, #0
    a9ee:	60e0      	str	r0, [r4, #12]
    a9f0:	2104      	movs	r1, #4
    a9f2:	6860      	ldr	r0, [r4, #4]
    a9f4:	f7ff ffa4 	bl	a940 <std.isra.0>
    a9f8:	2201      	movs	r2, #1
    a9fa:	2109      	movs	r1, #9
    a9fc:	68a0      	ldr	r0, [r4, #8]
    a9fe:	f7ff ff9f 	bl	a940 <std.isra.0>
    aa02:	2202      	movs	r2, #2
    aa04:	2112      	movs	r1, #18
    aa06:	68e0      	ldr	r0, [r4, #12]
    aa08:	f7ff ff9a 	bl	a940 <std.isra.0>
    aa0c:	2301      	movs	r3, #1
    aa0e:	61a3      	str	r3, [r4, #24]
    aa10:	bd13      	pop	{r0, r1, r4, pc}
    aa12:	46c0      	nop			; (mov r8, r8)
    aa14:	0000f8a8 	.word	0x0000f8a8
    aa18:	0000a931 	.word	0x0000a931

0000aa1c <__sfp>:
    aa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa1e:	4b1e      	ldr	r3, [pc, #120]	; (aa98 <__sfp+0x7c>)
    aa20:	0007      	movs	r7, r0
    aa22:	681e      	ldr	r6, [r3, #0]
    aa24:	69b3      	ldr	r3, [r6, #24]
    aa26:	2b00      	cmp	r3, #0
    aa28:	d102      	bne.n	aa30 <__sfp+0x14>
    aa2a:	0030      	movs	r0, r6
    aa2c:	f7ff ffc2 	bl	a9b4 <__sinit>
    aa30:	3648      	adds	r6, #72	; 0x48
    aa32:	68b4      	ldr	r4, [r6, #8]
    aa34:	6873      	ldr	r3, [r6, #4]
    aa36:	3b01      	subs	r3, #1
    aa38:	d504      	bpl.n	aa44 <__sfp+0x28>
    aa3a:	6833      	ldr	r3, [r6, #0]
    aa3c:	2b00      	cmp	r3, #0
    aa3e:	d007      	beq.n	aa50 <__sfp+0x34>
    aa40:	6836      	ldr	r6, [r6, #0]
    aa42:	e7f6      	b.n	aa32 <__sfp+0x16>
    aa44:	220c      	movs	r2, #12
    aa46:	5ea5      	ldrsh	r5, [r4, r2]
    aa48:	2d00      	cmp	r5, #0
    aa4a:	d00d      	beq.n	aa68 <__sfp+0x4c>
    aa4c:	3468      	adds	r4, #104	; 0x68
    aa4e:	e7f2      	b.n	aa36 <__sfp+0x1a>
    aa50:	2104      	movs	r1, #4
    aa52:	0038      	movs	r0, r7
    aa54:	f7ff ff98 	bl	a988 <__sfmoreglue>
    aa58:	6030      	str	r0, [r6, #0]
    aa5a:	2800      	cmp	r0, #0
    aa5c:	d1f0      	bne.n	aa40 <__sfp+0x24>
    aa5e:	230c      	movs	r3, #12
    aa60:	0004      	movs	r4, r0
    aa62:	603b      	str	r3, [r7, #0]
    aa64:	0020      	movs	r0, r4
    aa66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa68:	2301      	movs	r3, #1
    aa6a:	0020      	movs	r0, r4
    aa6c:	425b      	negs	r3, r3
    aa6e:	81e3      	strh	r3, [r4, #14]
    aa70:	3302      	adds	r3, #2
    aa72:	81a3      	strh	r3, [r4, #12]
    aa74:	6665      	str	r5, [r4, #100]	; 0x64
    aa76:	6025      	str	r5, [r4, #0]
    aa78:	60a5      	str	r5, [r4, #8]
    aa7a:	6065      	str	r5, [r4, #4]
    aa7c:	6125      	str	r5, [r4, #16]
    aa7e:	6165      	str	r5, [r4, #20]
    aa80:	61a5      	str	r5, [r4, #24]
    aa82:	2208      	movs	r2, #8
    aa84:	0029      	movs	r1, r5
    aa86:	305c      	adds	r0, #92	; 0x5c
    aa88:	f7ff fc3e 	bl	a308 <memset>
    aa8c:	6365      	str	r5, [r4, #52]	; 0x34
    aa8e:	63a5      	str	r5, [r4, #56]	; 0x38
    aa90:	64a5      	str	r5, [r4, #72]	; 0x48
    aa92:	64e5      	str	r5, [r4, #76]	; 0x4c
    aa94:	e7e6      	b.n	aa64 <__sfp+0x48>
    aa96:	46c0      	nop			; (mov r8, r8)
    aa98:	0000f8a8 	.word	0x0000f8a8

0000aa9c <_fwalk_reent>:
    aa9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    aa9e:	0004      	movs	r4, r0
    aaa0:	0007      	movs	r7, r0
    aaa2:	2600      	movs	r6, #0
    aaa4:	9101      	str	r1, [sp, #4]
    aaa6:	3448      	adds	r4, #72	; 0x48
    aaa8:	2c00      	cmp	r4, #0
    aaaa:	d101      	bne.n	aab0 <_fwalk_reent+0x14>
    aaac:	0030      	movs	r0, r6
    aaae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    aab0:	6863      	ldr	r3, [r4, #4]
    aab2:	68a5      	ldr	r5, [r4, #8]
    aab4:	9300      	str	r3, [sp, #0]
    aab6:	9b00      	ldr	r3, [sp, #0]
    aab8:	3b01      	subs	r3, #1
    aaba:	9300      	str	r3, [sp, #0]
    aabc:	d501      	bpl.n	aac2 <_fwalk_reent+0x26>
    aabe:	6824      	ldr	r4, [r4, #0]
    aac0:	e7f2      	b.n	aaa8 <_fwalk_reent+0xc>
    aac2:	89ab      	ldrh	r3, [r5, #12]
    aac4:	2b01      	cmp	r3, #1
    aac6:	d908      	bls.n	aada <_fwalk_reent+0x3e>
    aac8:	220e      	movs	r2, #14
    aaca:	5eab      	ldrsh	r3, [r5, r2]
    aacc:	3301      	adds	r3, #1
    aace:	d004      	beq.n	aada <_fwalk_reent+0x3e>
    aad0:	0029      	movs	r1, r5
    aad2:	0038      	movs	r0, r7
    aad4:	9b01      	ldr	r3, [sp, #4]
    aad6:	4798      	blx	r3
    aad8:	4306      	orrs	r6, r0
    aada:	3568      	adds	r5, #104	; 0x68
    aadc:	e7eb      	b.n	aab6 <_fwalk_reent+0x1a>
	...

0000aae0 <__swhatbuf_r>:
    aae0:	b570      	push	{r4, r5, r6, lr}
    aae2:	000e      	movs	r6, r1
    aae4:	001d      	movs	r5, r3
    aae6:	230e      	movs	r3, #14
    aae8:	5ec9      	ldrsh	r1, [r1, r3]
    aaea:	b090      	sub	sp, #64	; 0x40
    aaec:	0014      	movs	r4, r2
    aaee:	2900      	cmp	r1, #0
    aaf0:	da07      	bge.n	ab02 <__swhatbuf_r+0x22>
    aaf2:	2300      	movs	r3, #0
    aaf4:	602b      	str	r3, [r5, #0]
    aaf6:	89b3      	ldrh	r3, [r6, #12]
    aaf8:	061b      	lsls	r3, r3, #24
    aafa:	d411      	bmi.n	ab20 <__swhatbuf_r+0x40>
    aafc:	2380      	movs	r3, #128	; 0x80
    aafe:	00db      	lsls	r3, r3, #3
    ab00:	e00f      	b.n	ab22 <__swhatbuf_r+0x42>
    ab02:	aa01      	add	r2, sp, #4
    ab04:	f000 fc90 	bl	b428 <_fstat_r>
    ab08:	2800      	cmp	r0, #0
    ab0a:	dbf2      	blt.n	aaf2 <__swhatbuf_r+0x12>
    ab0c:	22f0      	movs	r2, #240	; 0xf0
    ab0e:	9b02      	ldr	r3, [sp, #8]
    ab10:	0212      	lsls	r2, r2, #8
    ab12:	4013      	ands	r3, r2
    ab14:	4a05      	ldr	r2, [pc, #20]	; (ab2c <__swhatbuf_r+0x4c>)
    ab16:	189b      	adds	r3, r3, r2
    ab18:	425a      	negs	r2, r3
    ab1a:	4153      	adcs	r3, r2
    ab1c:	602b      	str	r3, [r5, #0]
    ab1e:	e7ed      	b.n	aafc <__swhatbuf_r+0x1c>
    ab20:	2340      	movs	r3, #64	; 0x40
    ab22:	2000      	movs	r0, #0
    ab24:	6023      	str	r3, [r4, #0]
    ab26:	b010      	add	sp, #64	; 0x40
    ab28:	bd70      	pop	{r4, r5, r6, pc}
    ab2a:	46c0      	nop			; (mov r8, r8)
    ab2c:	ffffe000 	.word	0xffffe000

0000ab30 <__smakebuf_r>:
    ab30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ab32:	2602      	movs	r6, #2
    ab34:	898b      	ldrh	r3, [r1, #12]
    ab36:	0005      	movs	r5, r0
    ab38:	000c      	movs	r4, r1
    ab3a:	4233      	tst	r3, r6
    ab3c:	d006      	beq.n	ab4c <__smakebuf_r+0x1c>
    ab3e:	0023      	movs	r3, r4
    ab40:	3347      	adds	r3, #71	; 0x47
    ab42:	6023      	str	r3, [r4, #0]
    ab44:	6123      	str	r3, [r4, #16]
    ab46:	2301      	movs	r3, #1
    ab48:	6163      	str	r3, [r4, #20]
    ab4a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    ab4c:	ab01      	add	r3, sp, #4
    ab4e:	466a      	mov	r2, sp
    ab50:	f7ff ffc6 	bl	aae0 <__swhatbuf_r>
    ab54:	9900      	ldr	r1, [sp, #0]
    ab56:	0007      	movs	r7, r0
    ab58:	0028      	movs	r0, r5
    ab5a:	f000 f881 	bl	ac60 <_malloc_r>
    ab5e:	2800      	cmp	r0, #0
    ab60:	d108      	bne.n	ab74 <__smakebuf_r+0x44>
    ab62:	220c      	movs	r2, #12
    ab64:	5ea3      	ldrsh	r3, [r4, r2]
    ab66:	059a      	lsls	r2, r3, #22
    ab68:	d4ef      	bmi.n	ab4a <__smakebuf_r+0x1a>
    ab6a:	2203      	movs	r2, #3
    ab6c:	4393      	bics	r3, r2
    ab6e:	431e      	orrs	r6, r3
    ab70:	81a6      	strh	r6, [r4, #12]
    ab72:	e7e4      	b.n	ab3e <__smakebuf_r+0xe>
    ab74:	4b0f      	ldr	r3, [pc, #60]	; (abb4 <__smakebuf_r+0x84>)
    ab76:	62ab      	str	r3, [r5, #40]	; 0x28
    ab78:	2380      	movs	r3, #128	; 0x80
    ab7a:	89a2      	ldrh	r2, [r4, #12]
    ab7c:	6020      	str	r0, [r4, #0]
    ab7e:	4313      	orrs	r3, r2
    ab80:	81a3      	strh	r3, [r4, #12]
    ab82:	9b00      	ldr	r3, [sp, #0]
    ab84:	6120      	str	r0, [r4, #16]
    ab86:	6163      	str	r3, [r4, #20]
    ab88:	9b01      	ldr	r3, [sp, #4]
    ab8a:	2b00      	cmp	r3, #0
    ab8c:	d00d      	beq.n	abaa <__smakebuf_r+0x7a>
    ab8e:	230e      	movs	r3, #14
    ab90:	5ee1      	ldrsh	r1, [r4, r3]
    ab92:	0028      	movs	r0, r5
    ab94:	f000 fc5a 	bl	b44c <_isatty_r>
    ab98:	2800      	cmp	r0, #0
    ab9a:	d006      	beq.n	abaa <__smakebuf_r+0x7a>
    ab9c:	2203      	movs	r2, #3
    ab9e:	89a3      	ldrh	r3, [r4, #12]
    aba0:	4393      	bics	r3, r2
    aba2:	001a      	movs	r2, r3
    aba4:	2301      	movs	r3, #1
    aba6:	4313      	orrs	r3, r2
    aba8:	81a3      	strh	r3, [r4, #12]
    abaa:	89a0      	ldrh	r0, [r4, #12]
    abac:	4338      	orrs	r0, r7
    abae:	81a0      	strh	r0, [r4, #12]
    abb0:	e7cb      	b.n	ab4a <__smakebuf_r+0x1a>
    abb2:	46c0      	nop			; (mov r8, r8)
    abb4:	0000a931 	.word	0x0000a931

0000abb8 <malloc>:
    abb8:	b510      	push	{r4, lr}
    abba:	4b03      	ldr	r3, [pc, #12]	; (abc8 <malloc+0x10>)
    abbc:	0001      	movs	r1, r0
    abbe:	6818      	ldr	r0, [r3, #0]
    abc0:	f000 f84e 	bl	ac60 <_malloc_r>
    abc4:	bd10      	pop	{r4, pc}
    abc6:	46c0      	nop			; (mov r8, r8)
    abc8:	200000d0 	.word	0x200000d0

0000abcc <_free_r>:
    abcc:	b570      	push	{r4, r5, r6, lr}
    abce:	0005      	movs	r5, r0
    abd0:	2900      	cmp	r1, #0
    abd2:	d010      	beq.n	abf6 <_free_r+0x2a>
    abd4:	1f0c      	subs	r4, r1, #4
    abd6:	6823      	ldr	r3, [r4, #0]
    abd8:	2b00      	cmp	r3, #0
    abda:	da00      	bge.n	abde <_free_r+0x12>
    abdc:	18e4      	adds	r4, r4, r3
    abde:	0028      	movs	r0, r5
    abe0:	f000 fc65 	bl	b4ae <__malloc_lock>
    abe4:	4a1d      	ldr	r2, [pc, #116]	; (ac5c <_free_r+0x90>)
    abe6:	6813      	ldr	r3, [r2, #0]
    abe8:	2b00      	cmp	r3, #0
    abea:	d105      	bne.n	abf8 <_free_r+0x2c>
    abec:	6063      	str	r3, [r4, #4]
    abee:	6014      	str	r4, [r2, #0]
    abf0:	0028      	movs	r0, r5
    abf2:	f000 fc5d 	bl	b4b0 <__malloc_unlock>
    abf6:	bd70      	pop	{r4, r5, r6, pc}
    abf8:	42a3      	cmp	r3, r4
    abfa:	d909      	bls.n	ac10 <_free_r+0x44>
    abfc:	6821      	ldr	r1, [r4, #0]
    abfe:	1860      	adds	r0, r4, r1
    ac00:	4283      	cmp	r3, r0
    ac02:	d1f3      	bne.n	abec <_free_r+0x20>
    ac04:	6818      	ldr	r0, [r3, #0]
    ac06:	685b      	ldr	r3, [r3, #4]
    ac08:	1841      	adds	r1, r0, r1
    ac0a:	6021      	str	r1, [r4, #0]
    ac0c:	e7ee      	b.n	abec <_free_r+0x20>
    ac0e:	0013      	movs	r3, r2
    ac10:	685a      	ldr	r2, [r3, #4]
    ac12:	2a00      	cmp	r2, #0
    ac14:	d001      	beq.n	ac1a <_free_r+0x4e>
    ac16:	42a2      	cmp	r2, r4
    ac18:	d9f9      	bls.n	ac0e <_free_r+0x42>
    ac1a:	6819      	ldr	r1, [r3, #0]
    ac1c:	1858      	adds	r0, r3, r1
    ac1e:	42a0      	cmp	r0, r4
    ac20:	d10b      	bne.n	ac3a <_free_r+0x6e>
    ac22:	6820      	ldr	r0, [r4, #0]
    ac24:	1809      	adds	r1, r1, r0
    ac26:	1858      	adds	r0, r3, r1
    ac28:	6019      	str	r1, [r3, #0]
    ac2a:	4282      	cmp	r2, r0
    ac2c:	d1e0      	bne.n	abf0 <_free_r+0x24>
    ac2e:	6810      	ldr	r0, [r2, #0]
    ac30:	6852      	ldr	r2, [r2, #4]
    ac32:	1841      	adds	r1, r0, r1
    ac34:	6019      	str	r1, [r3, #0]
    ac36:	605a      	str	r2, [r3, #4]
    ac38:	e7da      	b.n	abf0 <_free_r+0x24>
    ac3a:	42a0      	cmp	r0, r4
    ac3c:	d902      	bls.n	ac44 <_free_r+0x78>
    ac3e:	230c      	movs	r3, #12
    ac40:	602b      	str	r3, [r5, #0]
    ac42:	e7d5      	b.n	abf0 <_free_r+0x24>
    ac44:	6821      	ldr	r1, [r4, #0]
    ac46:	1860      	adds	r0, r4, r1
    ac48:	4282      	cmp	r2, r0
    ac4a:	d103      	bne.n	ac54 <_free_r+0x88>
    ac4c:	6810      	ldr	r0, [r2, #0]
    ac4e:	6852      	ldr	r2, [r2, #4]
    ac50:	1841      	adds	r1, r0, r1
    ac52:	6021      	str	r1, [r4, #0]
    ac54:	6062      	str	r2, [r4, #4]
    ac56:	605c      	str	r4, [r3, #4]
    ac58:	e7ca      	b.n	abf0 <_free_r+0x24>
    ac5a:	46c0      	nop			; (mov r8, r8)
    ac5c:	2000249c 	.word	0x2000249c

0000ac60 <_malloc_r>:
    ac60:	2303      	movs	r3, #3
    ac62:	b570      	push	{r4, r5, r6, lr}
    ac64:	1ccd      	adds	r5, r1, #3
    ac66:	439d      	bics	r5, r3
    ac68:	3508      	adds	r5, #8
    ac6a:	0006      	movs	r6, r0
    ac6c:	2d0c      	cmp	r5, #12
    ac6e:	d21e      	bcs.n	acae <_malloc_r+0x4e>
    ac70:	250c      	movs	r5, #12
    ac72:	42a9      	cmp	r1, r5
    ac74:	d81d      	bhi.n	acb2 <_malloc_r+0x52>
    ac76:	0030      	movs	r0, r6
    ac78:	f000 fc19 	bl	b4ae <__malloc_lock>
    ac7c:	4a25      	ldr	r2, [pc, #148]	; (ad14 <_malloc_r+0xb4>)
    ac7e:	6814      	ldr	r4, [r2, #0]
    ac80:	0021      	movs	r1, r4
    ac82:	2900      	cmp	r1, #0
    ac84:	d119      	bne.n	acba <_malloc_r+0x5a>
    ac86:	4c24      	ldr	r4, [pc, #144]	; (ad18 <_malloc_r+0xb8>)
    ac88:	6823      	ldr	r3, [r4, #0]
    ac8a:	2b00      	cmp	r3, #0
    ac8c:	d103      	bne.n	ac96 <_malloc_r+0x36>
    ac8e:	0030      	movs	r0, r6
    ac90:	f000 fb46 	bl	b320 <_sbrk_r>
    ac94:	6020      	str	r0, [r4, #0]
    ac96:	0029      	movs	r1, r5
    ac98:	0030      	movs	r0, r6
    ac9a:	f000 fb41 	bl	b320 <_sbrk_r>
    ac9e:	1c43      	adds	r3, r0, #1
    aca0:	d12c      	bne.n	acfc <_malloc_r+0x9c>
    aca2:	230c      	movs	r3, #12
    aca4:	0030      	movs	r0, r6
    aca6:	6033      	str	r3, [r6, #0]
    aca8:	f000 fc02 	bl	b4b0 <__malloc_unlock>
    acac:	e003      	b.n	acb6 <_malloc_r+0x56>
    acae:	2d00      	cmp	r5, #0
    acb0:	dadf      	bge.n	ac72 <_malloc_r+0x12>
    acb2:	230c      	movs	r3, #12
    acb4:	6033      	str	r3, [r6, #0]
    acb6:	2000      	movs	r0, #0
    acb8:	bd70      	pop	{r4, r5, r6, pc}
    acba:	680b      	ldr	r3, [r1, #0]
    acbc:	1b5b      	subs	r3, r3, r5
    acbe:	d41a      	bmi.n	acf6 <_malloc_r+0x96>
    acc0:	2b0b      	cmp	r3, #11
    acc2:	d903      	bls.n	accc <_malloc_r+0x6c>
    acc4:	600b      	str	r3, [r1, #0]
    acc6:	18cc      	adds	r4, r1, r3
    acc8:	6025      	str	r5, [r4, #0]
    acca:	e003      	b.n	acd4 <_malloc_r+0x74>
    accc:	428c      	cmp	r4, r1
    acce:	d10e      	bne.n	acee <_malloc_r+0x8e>
    acd0:	6863      	ldr	r3, [r4, #4]
    acd2:	6013      	str	r3, [r2, #0]
    acd4:	0030      	movs	r0, r6
    acd6:	f000 fbeb 	bl	b4b0 <__malloc_unlock>
    acda:	0020      	movs	r0, r4
    acdc:	2207      	movs	r2, #7
    acde:	300b      	adds	r0, #11
    ace0:	1d23      	adds	r3, r4, #4
    ace2:	4390      	bics	r0, r2
    ace4:	1ac3      	subs	r3, r0, r3
    ace6:	d0e7      	beq.n	acb8 <_malloc_r+0x58>
    ace8:	425a      	negs	r2, r3
    acea:	50e2      	str	r2, [r4, r3]
    acec:	e7e4      	b.n	acb8 <_malloc_r+0x58>
    acee:	684b      	ldr	r3, [r1, #4]
    acf0:	6063      	str	r3, [r4, #4]
    acf2:	000c      	movs	r4, r1
    acf4:	e7ee      	b.n	acd4 <_malloc_r+0x74>
    acf6:	000c      	movs	r4, r1
    acf8:	6849      	ldr	r1, [r1, #4]
    acfa:	e7c2      	b.n	ac82 <_malloc_r+0x22>
    acfc:	2303      	movs	r3, #3
    acfe:	1cc4      	adds	r4, r0, #3
    ad00:	439c      	bics	r4, r3
    ad02:	42a0      	cmp	r0, r4
    ad04:	d0e0      	beq.n	acc8 <_malloc_r+0x68>
    ad06:	1a21      	subs	r1, r4, r0
    ad08:	0030      	movs	r0, r6
    ad0a:	f000 fb09 	bl	b320 <_sbrk_r>
    ad0e:	1c43      	adds	r3, r0, #1
    ad10:	d1da      	bne.n	acc8 <_malloc_r+0x68>
    ad12:	e7c6      	b.n	aca2 <_malloc_r+0x42>
    ad14:	2000249c 	.word	0x2000249c
    ad18:	200024a0 	.word	0x200024a0

0000ad1c <__sfputc_r>:
    ad1c:	6893      	ldr	r3, [r2, #8]
    ad1e:	b510      	push	{r4, lr}
    ad20:	3b01      	subs	r3, #1
    ad22:	6093      	str	r3, [r2, #8]
    ad24:	2b00      	cmp	r3, #0
    ad26:	da05      	bge.n	ad34 <__sfputc_r+0x18>
    ad28:	6994      	ldr	r4, [r2, #24]
    ad2a:	42a3      	cmp	r3, r4
    ad2c:	db08      	blt.n	ad40 <__sfputc_r+0x24>
    ad2e:	b2cb      	uxtb	r3, r1
    ad30:	2b0a      	cmp	r3, #10
    ad32:	d005      	beq.n	ad40 <__sfputc_r+0x24>
    ad34:	6813      	ldr	r3, [r2, #0]
    ad36:	1c58      	adds	r0, r3, #1
    ad38:	6010      	str	r0, [r2, #0]
    ad3a:	7019      	strb	r1, [r3, #0]
    ad3c:	b2c8      	uxtb	r0, r1
    ad3e:	bd10      	pop	{r4, pc}
    ad40:	f7ff fc74 	bl	a62c <__swbuf_r>
    ad44:	e7fb      	b.n	ad3e <__sfputc_r+0x22>

0000ad46 <__sfputs_r>:
    ad46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ad48:	0006      	movs	r6, r0
    ad4a:	000f      	movs	r7, r1
    ad4c:	0014      	movs	r4, r2
    ad4e:	18d5      	adds	r5, r2, r3
    ad50:	42ac      	cmp	r4, r5
    ad52:	d101      	bne.n	ad58 <__sfputs_r+0x12>
    ad54:	2000      	movs	r0, #0
    ad56:	e007      	b.n	ad68 <__sfputs_r+0x22>
    ad58:	7821      	ldrb	r1, [r4, #0]
    ad5a:	003a      	movs	r2, r7
    ad5c:	0030      	movs	r0, r6
    ad5e:	f7ff ffdd 	bl	ad1c <__sfputc_r>
    ad62:	3401      	adds	r4, #1
    ad64:	1c43      	adds	r3, r0, #1
    ad66:	d1f3      	bne.n	ad50 <__sfputs_r+0xa>
    ad68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000ad6c <_vfiprintf_r>:
    ad6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad6e:	b09f      	sub	sp, #124	; 0x7c
    ad70:	0006      	movs	r6, r0
    ad72:	000f      	movs	r7, r1
    ad74:	0014      	movs	r4, r2
    ad76:	9305      	str	r3, [sp, #20]
    ad78:	2800      	cmp	r0, #0
    ad7a:	d004      	beq.n	ad86 <_vfiprintf_r+0x1a>
    ad7c:	6983      	ldr	r3, [r0, #24]
    ad7e:	2b00      	cmp	r3, #0
    ad80:	d101      	bne.n	ad86 <_vfiprintf_r+0x1a>
    ad82:	f7ff fe17 	bl	a9b4 <__sinit>
    ad86:	4b7f      	ldr	r3, [pc, #508]	; (af84 <_vfiprintf_r+0x218>)
    ad88:	429f      	cmp	r7, r3
    ad8a:	d15c      	bne.n	ae46 <_vfiprintf_r+0xda>
    ad8c:	6877      	ldr	r7, [r6, #4]
    ad8e:	89bb      	ldrh	r3, [r7, #12]
    ad90:	071b      	lsls	r3, r3, #28
    ad92:	d562      	bpl.n	ae5a <_vfiprintf_r+0xee>
    ad94:	693b      	ldr	r3, [r7, #16]
    ad96:	2b00      	cmp	r3, #0
    ad98:	d05f      	beq.n	ae5a <_vfiprintf_r+0xee>
    ad9a:	2300      	movs	r3, #0
    ad9c:	ad06      	add	r5, sp, #24
    ad9e:	616b      	str	r3, [r5, #20]
    ada0:	3320      	adds	r3, #32
    ada2:	766b      	strb	r3, [r5, #25]
    ada4:	3310      	adds	r3, #16
    ada6:	76ab      	strb	r3, [r5, #26]
    ada8:	9402      	str	r4, [sp, #8]
    adaa:	9c02      	ldr	r4, [sp, #8]
    adac:	7823      	ldrb	r3, [r4, #0]
    adae:	2b00      	cmp	r3, #0
    adb0:	d15d      	bne.n	ae6e <_vfiprintf_r+0x102>
    adb2:	9b02      	ldr	r3, [sp, #8]
    adb4:	1ae3      	subs	r3, r4, r3
    adb6:	9304      	str	r3, [sp, #16]
    adb8:	d00d      	beq.n	add6 <_vfiprintf_r+0x6a>
    adba:	9b04      	ldr	r3, [sp, #16]
    adbc:	9a02      	ldr	r2, [sp, #8]
    adbe:	0039      	movs	r1, r7
    adc0:	0030      	movs	r0, r6
    adc2:	f7ff ffc0 	bl	ad46 <__sfputs_r>
    adc6:	1c43      	adds	r3, r0, #1
    adc8:	d100      	bne.n	adcc <_vfiprintf_r+0x60>
    adca:	e0cc      	b.n	af66 <_vfiprintf_r+0x1fa>
    adcc:	696a      	ldr	r2, [r5, #20]
    adce:	9b04      	ldr	r3, [sp, #16]
    add0:	4694      	mov	ip, r2
    add2:	4463      	add	r3, ip
    add4:	616b      	str	r3, [r5, #20]
    add6:	7823      	ldrb	r3, [r4, #0]
    add8:	2b00      	cmp	r3, #0
    adda:	d100      	bne.n	adde <_vfiprintf_r+0x72>
    addc:	e0c3      	b.n	af66 <_vfiprintf_r+0x1fa>
    adde:	2201      	movs	r2, #1
    ade0:	2300      	movs	r3, #0
    ade2:	4252      	negs	r2, r2
    ade4:	606a      	str	r2, [r5, #4]
    ade6:	a902      	add	r1, sp, #8
    ade8:	3254      	adds	r2, #84	; 0x54
    adea:	1852      	adds	r2, r2, r1
    adec:	3401      	adds	r4, #1
    adee:	602b      	str	r3, [r5, #0]
    adf0:	60eb      	str	r3, [r5, #12]
    adf2:	60ab      	str	r3, [r5, #8]
    adf4:	7013      	strb	r3, [r2, #0]
    adf6:	65ab      	str	r3, [r5, #88]	; 0x58
    adf8:	7821      	ldrb	r1, [r4, #0]
    adfa:	2205      	movs	r2, #5
    adfc:	4862      	ldr	r0, [pc, #392]	; (af88 <_vfiprintf_r+0x21c>)
    adfe:	f000 fb4b 	bl	b498 <memchr>
    ae02:	1c63      	adds	r3, r4, #1
    ae04:	469c      	mov	ip, r3
    ae06:	2800      	cmp	r0, #0
    ae08:	d135      	bne.n	ae76 <_vfiprintf_r+0x10a>
    ae0a:	6829      	ldr	r1, [r5, #0]
    ae0c:	06cb      	lsls	r3, r1, #27
    ae0e:	d504      	bpl.n	ae1a <_vfiprintf_r+0xae>
    ae10:	2353      	movs	r3, #83	; 0x53
    ae12:	aa02      	add	r2, sp, #8
    ae14:	3020      	adds	r0, #32
    ae16:	189b      	adds	r3, r3, r2
    ae18:	7018      	strb	r0, [r3, #0]
    ae1a:	070b      	lsls	r3, r1, #28
    ae1c:	d504      	bpl.n	ae28 <_vfiprintf_r+0xbc>
    ae1e:	2353      	movs	r3, #83	; 0x53
    ae20:	202b      	movs	r0, #43	; 0x2b
    ae22:	aa02      	add	r2, sp, #8
    ae24:	189b      	adds	r3, r3, r2
    ae26:	7018      	strb	r0, [r3, #0]
    ae28:	7823      	ldrb	r3, [r4, #0]
    ae2a:	2b2a      	cmp	r3, #42	; 0x2a
    ae2c:	d02c      	beq.n	ae88 <_vfiprintf_r+0x11c>
    ae2e:	2000      	movs	r0, #0
    ae30:	210a      	movs	r1, #10
    ae32:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae34:	7822      	ldrb	r2, [r4, #0]
    ae36:	3a30      	subs	r2, #48	; 0x30
    ae38:	2a09      	cmp	r2, #9
    ae3a:	d800      	bhi.n	ae3e <_vfiprintf_r+0xd2>
    ae3c:	e06b      	b.n	af16 <_vfiprintf_r+0x1aa>
    ae3e:	2800      	cmp	r0, #0
    ae40:	d02a      	beq.n	ae98 <_vfiprintf_r+0x12c>
    ae42:	9309      	str	r3, [sp, #36]	; 0x24
    ae44:	e028      	b.n	ae98 <_vfiprintf_r+0x12c>
    ae46:	4b51      	ldr	r3, [pc, #324]	; (af8c <_vfiprintf_r+0x220>)
    ae48:	429f      	cmp	r7, r3
    ae4a:	d101      	bne.n	ae50 <_vfiprintf_r+0xe4>
    ae4c:	68b7      	ldr	r7, [r6, #8]
    ae4e:	e79e      	b.n	ad8e <_vfiprintf_r+0x22>
    ae50:	4b4f      	ldr	r3, [pc, #316]	; (af90 <_vfiprintf_r+0x224>)
    ae52:	429f      	cmp	r7, r3
    ae54:	d19b      	bne.n	ad8e <_vfiprintf_r+0x22>
    ae56:	68f7      	ldr	r7, [r6, #12]
    ae58:	e799      	b.n	ad8e <_vfiprintf_r+0x22>
    ae5a:	0039      	movs	r1, r7
    ae5c:	0030      	movs	r0, r6
    ae5e:	f7ff fc3b 	bl	a6d8 <__swsetup_r>
    ae62:	2800      	cmp	r0, #0
    ae64:	d099      	beq.n	ad9a <_vfiprintf_r+0x2e>
    ae66:	2001      	movs	r0, #1
    ae68:	4240      	negs	r0, r0
    ae6a:	b01f      	add	sp, #124	; 0x7c
    ae6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae6e:	2b25      	cmp	r3, #37	; 0x25
    ae70:	d09f      	beq.n	adb2 <_vfiprintf_r+0x46>
    ae72:	3401      	adds	r4, #1
    ae74:	e79a      	b.n	adac <_vfiprintf_r+0x40>
    ae76:	4b44      	ldr	r3, [pc, #272]	; (af88 <_vfiprintf_r+0x21c>)
    ae78:	6829      	ldr	r1, [r5, #0]
    ae7a:	1ac0      	subs	r0, r0, r3
    ae7c:	2301      	movs	r3, #1
    ae7e:	4083      	lsls	r3, r0
    ae80:	430b      	orrs	r3, r1
    ae82:	602b      	str	r3, [r5, #0]
    ae84:	4664      	mov	r4, ip
    ae86:	e7b7      	b.n	adf8 <_vfiprintf_r+0x8c>
    ae88:	9b05      	ldr	r3, [sp, #20]
    ae8a:	1d18      	adds	r0, r3, #4
    ae8c:	681b      	ldr	r3, [r3, #0]
    ae8e:	9005      	str	r0, [sp, #20]
    ae90:	2b00      	cmp	r3, #0
    ae92:	db3a      	blt.n	af0a <_vfiprintf_r+0x19e>
    ae94:	9309      	str	r3, [sp, #36]	; 0x24
    ae96:	4664      	mov	r4, ip
    ae98:	7823      	ldrb	r3, [r4, #0]
    ae9a:	2b2e      	cmp	r3, #46	; 0x2e
    ae9c:	d10b      	bne.n	aeb6 <_vfiprintf_r+0x14a>
    ae9e:	7863      	ldrb	r3, [r4, #1]
    aea0:	1c62      	adds	r2, r4, #1
    aea2:	2b2a      	cmp	r3, #42	; 0x2a
    aea4:	d13f      	bne.n	af26 <_vfiprintf_r+0x1ba>
    aea6:	9b05      	ldr	r3, [sp, #20]
    aea8:	3402      	adds	r4, #2
    aeaa:	1d1a      	adds	r2, r3, #4
    aeac:	681b      	ldr	r3, [r3, #0]
    aeae:	9205      	str	r2, [sp, #20]
    aeb0:	2b00      	cmp	r3, #0
    aeb2:	db35      	blt.n	af20 <_vfiprintf_r+0x1b4>
    aeb4:	9307      	str	r3, [sp, #28]
    aeb6:	7821      	ldrb	r1, [r4, #0]
    aeb8:	2203      	movs	r2, #3
    aeba:	4836      	ldr	r0, [pc, #216]	; (af94 <_vfiprintf_r+0x228>)
    aebc:	f000 faec 	bl	b498 <memchr>
    aec0:	2800      	cmp	r0, #0
    aec2:	d007      	beq.n	aed4 <_vfiprintf_r+0x168>
    aec4:	4b33      	ldr	r3, [pc, #204]	; (af94 <_vfiprintf_r+0x228>)
    aec6:	682a      	ldr	r2, [r5, #0]
    aec8:	1ac0      	subs	r0, r0, r3
    aeca:	2340      	movs	r3, #64	; 0x40
    aecc:	4083      	lsls	r3, r0
    aece:	4313      	orrs	r3, r2
    aed0:	602b      	str	r3, [r5, #0]
    aed2:	3401      	adds	r4, #1
    aed4:	7821      	ldrb	r1, [r4, #0]
    aed6:	1c63      	adds	r3, r4, #1
    aed8:	2206      	movs	r2, #6
    aeda:	482f      	ldr	r0, [pc, #188]	; (af98 <_vfiprintf_r+0x22c>)
    aedc:	9302      	str	r3, [sp, #8]
    aede:	7629      	strb	r1, [r5, #24]
    aee0:	f000 fada 	bl	b498 <memchr>
    aee4:	2800      	cmp	r0, #0
    aee6:	d044      	beq.n	af72 <_vfiprintf_r+0x206>
    aee8:	4b2c      	ldr	r3, [pc, #176]	; (af9c <_vfiprintf_r+0x230>)
    aeea:	2b00      	cmp	r3, #0
    aeec:	d12f      	bne.n	af4e <_vfiprintf_r+0x1e2>
    aeee:	6829      	ldr	r1, [r5, #0]
    aef0:	9b05      	ldr	r3, [sp, #20]
    aef2:	2207      	movs	r2, #7
    aef4:	05c9      	lsls	r1, r1, #23
    aef6:	d528      	bpl.n	af4a <_vfiprintf_r+0x1de>
    aef8:	189b      	adds	r3, r3, r2
    aefa:	4393      	bics	r3, r2
    aefc:	3308      	adds	r3, #8
    aefe:	9305      	str	r3, [sp, #20]
    af00:	696b      	ldr	r3, [r5, #20]
    af02:	9a03      	ldr	r2, [sp, #12]
    af04:	189b      	adds	r3, r3, r2
    af06:	616b      	str	r3, [r5, #20]
    af08:	e74f      	b.n	adaa <_vfiprintf_r+0x3e>
    af0a:	425b      	negs	r3, r3
    af0c:	60eb      	str	r3, [r5, #12]
    af0e:	2302      	movs	r3, #2
    af10:	430b      	orrs	r3, r1
    af12:	602b      	str	r3, [r5, #0]
    af14:	e7bf      	b.n	ae96 <_vfiprintf_r+0x12a>
    af16:	434b      	muls	r3, r1
    af18:	3401      	adds	r4, #1
    af1a:	189b      	adds	r3, r3, r2
    af1c:	2001      	movs	r0, #1
    af1e:	e789      	b.n	ae34 <_vfiprintf_r+0xc8>
    af20:	2301      	movs	r3, #1
    af22:	425b      	negs	r3, r3
    af24:	e7c6      	b.n	aeb4 <_vfiprintf_r+0x148>
    af26:	2300      	movs	r3, #0
    af28:	0014      	movs	r4, r2
    af2a:	200a      	movs	r0, #10
    af2c:	001a      	movs	r2, r3
    af2e:	606b      	str	r3, [r5, #4]
    af30:	7821      	ldrb	r1, [r4, #0]
    af32:	3930      	subs	r1, #48	; 0x30
    af34:	2909      	cmp	r1, #9
    af36:	d903      	bls.n	af40 <_vfiprintf_r+0x1d4>
    af38:	2b00      	cmp	r3, #0
    af3a:	d0bc      	beq.n	aeb6 <_vfiprintf_r+0x14a>
    af3c:	9207      	str	r2, [sp, #28]
    af3e:	e7ba      	b.n	aeb6 <_vfiprintf_r+0x14a>
    af40:	4342      	muls	r2, r0
    af42:	3401      	adds	r4, #1
    af44:	1852      	adds	r2, r2, r1
    af46:	2301      	movs	r3, #1
    af48:	e7f2      	b.n	af30 <_vfiprintf_r+0x1c4>
    af4a:	3307      	adds	r3, #7
    af4c:	e7d5      	b.n	aefa <_vfiprintf_r+0x18e>
    af4e:	ab05      	add	r3, sp, #20
    af50:	9300      	str	r3, [sp, #0]
    af52:	003a      	movs	r2, r7
    af54:	4b12      	ldr	r3, [pc, #72]	; (afa0 <_vfiprintf_r+0x234>)
    af56:	0029      	movs	r1, r5
    af58:	0030      	movs	r0, r6
    af5a:	e000      	b.n	af5e <_vfiprintf_r+0x1f2>
    af5c:	bf00      	nop
    af5e:	9003      	str	r0, [sp, #12]
    af60:	9b03      	ldr	r3, [sp, #12]
    af62:	3301      	adds	r3, #1
    af64:	d1cc      	bne.n	af00 <_vfiprintf_r+0x194>
    af66:	89bb      	ldrh	r3, [r7, #12]
    af68:	065b      	lsls	r3, r3, #25
    af6a:	d500      	bpl.n	af6e <_vfiprintf_r+0x202>
    af6c:	e77b      	b.n	ae66 <_vfiprintf_r+0xfa>
    af6e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    af70:	e77b      	b.n	ae6a <_vfiprintf_r+0xfe>
    af72:	ab05      	add	r3, sp, #20
    af74:	9300      	str	r3, [sp, #0]
    af76:	003a      	movs	r2, r7
    af78:	4b09      	ldr	r3, [pc, #36]	; (afa0 <_vfiprintf_r+0x234>)
    af7a:	0029      	movs	r1, r5
    af7c:	0030      	movs	r0, r6
    af7e:	f000 f87f 	bl	b080 <_printf_i>
    af82:	e7ec      	b.n	af5e <_vfiprintf_r+0x1f2>
    af84:	0000f8cc 	.word	0x0000f8cc
    af88:	0000f90c 	.word	0x0000f90c
    af8c:	0000f8ec 	.word	0x0000f8ec
    af90:	0000f8ac 	.word	0x0000f8ac
    af94:	0000f912 	.word	0x0000f912
    af98:	0000f916 	.word	0x0000f916
    af9c:	00000000 	.word	0x00000000
    afa0:	0000ad47 	.word	0x0000ad47

0000afa4 <_printf_common>:
    afa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    afa6:	0015      	movs	r5, r2
    afa8:	9301      	str	r3, [sp, #4]
    afaa:	688a      	ldr	r2, [r1, #8]
    afac:	690b      	ldr	r3, [r1, #16]
    afae:	9000      	str	r0, [sp, #0]
    afb0:	000c      	movs	r4, r1
    afb2:	4293      	cmp	r3, r2
    afb4:	da00      	bge.n	afb8 <_printf_common+0x14>
    afb6:	0013      	movs	r3, r2
    afb8:	0022      	movs	r2, r4
    afba:	602b      	str	r3, [r5, #0]
    afbc:	3243      	adds	r2, #67	; 0x43
    afbe:	7812      	ldrb	r2, [r2, #0]
    afc0:	2a00      	cmp	r2, #0
    afc2:	d001      	beq.n	afc8 <_printf_common+0x24>
    afc4:	3301      	adds	r3, #1
    afc6:	602b      	str	r3, [r5, #0]
    afc8:	6823      	ldr	r3, [r4, #0]
    afca:	069b      	lsls	r3, r3, #26
    afcc:	d502      	bpl.n	afd4 <_printf_common+0x30>
    afce:	682b      	ldr	r3, [r5, #0]
    afd0:	3302      	adds	r3, #2
    afd2:	602b      	str	r3, [r5, #0]
    afd4:	2706      	movs	r7, #6
    afd6:	6823      	ldr	r3, [r4, #0]
    afd8:	401f      	ands	r7, r3
    afda:	d027      	beq.n	b02c <_printf_common+0x88>
    afdc:	0023      	movs	r3, r4
    afde:	3343      	adds	r3, #67	; 0x43
    afe0:	781b      	ldrb	r3, [r3, #0]
    afe2:	1e5a      	subs	r2, r3, #1
    afe4:	4193      	sbcs	r3, r2
    afe6:	6822      	ldr	r2, [r4, #0]
    afe8:	0692      	lsls	r2, r2, #26
    afea:	d430      	bmi.n	b04e <_printf_common+0xaa>
    afec:	0022      	movs	r2, r4
    afee:	9901      	ldr	r1, [sp, #4]
    aff0:	3243      	adds	r2, #67	; 0x43
    aff2:	9800      	ldr	r0, [sp, #0]
    aff4:	9e08      	ldr	r6, [sp, #32]
    aff6:	47b0      	blx	r6
    aff8:	1c43      	adds	r3, r0, #1
    affa:	d025      	beq.n	b048 <_printf_common+0xa4>
    affc:	2306      	movs	r3, #6
    affe:	6820      	ldr	r0, [r4, #0]
    b000:	682a      	ldr	r2, [r5, #0]
    b002:	68e1      	ldr	r1, [r4, #12]
    b004:	4003      	ands	r3, r0
    b006:	2500      	movs	r5, #0
    b008:	2b04      	cmp	r3, #4
    b00a:	d103      	bne.n	b014 <_printf_common+0x70>
    b00c:	1a8d      	subs	r5, r1, r2
    b00e:	43eb      	mvns	r3, r5
    b010:	17db      	asrs	r3, r3, #31
    b012:	401d      	ands	r5, r3
    b014:	68a3      	ldr	r3, [r4, #8]
    b016:	6922      	ldr	r2, [r4, #16]
    b018:	4293      	cmp	r3, r2
    b01a:	dd01      	ble.n	b020 <_printf_common+0x7c>
    b01c:	1a9b      	subs	r3, r3, r2
    b01e:	18ed      	adds	r5, r5, r3
    b020:	2700      	movs	r7, #0
    b022:	42bd      	cmp	r5, r7
    b024:	d120      	bne.n	b068 <_printf_common+0xc4>
    b026:	2000      	movs	r0, #0
    b028:	e010      	b.n	b04c <_printf_common+0xa8>
    b02a:	3701      	adds	r7, #1
    b02c:	68e3      	ldr	r3, [r4, #12]
    b02e:	682a      	ldr	r2, [r5, #0]
    b030:	1a9b      	subs	r3, r3, r2
    b032:	429f      	cmp	r7, r3
    b034:	dad2      	bge.n	afdc <_printf_common+0x38>
    b036:	0022      	movs	r2, r4
    b038:	2301      	movs	r3, #1
    b03a:	3219      	adds	r2, #25
    b03c:	9901      	ldr	r1, [sp, #4]
    b03e:	9800      	ldr	r0, [sp, #0]
    b040:	9e08      	ldr	r6, [sp, #32]
    b042:	47b0      	blx	r6
    b044:	1c43      	adds	r3, r0, #1
    b046:	d1f0      	bne.n	b02a <_printf_common+0x86>
    b048:	2001      	movs	r0, #1
    b04a:	4240      	negs	r0, r0
    b04c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b04e:	2030      	movs	r0, #48	; 0x30
    b050:	18e1      	adds	r1, r4, r3
    b052:	3143      	adds	r1, #67	; 0x43
    b054:	7008      	strb	r0, [r1, #0]
    b056:	0021      	movs	r1, r4
    b058:	1c5a      	adds	r2, r3, #1
    b05a:	3145      	adds	r1, #69	; 0x45
    b05c:	7809      	ldrb	r1, [r1, #0]
    b05e:	18a2      	adds	r2, r4, r2
    b060:	3243      	adds	r2, #67	; 0x43
    b062:	3302      	adds	r3, #2
    b064:	7011      	strb	r1, [r2, #0]
    b066:	e7c1      	b.n	afec <_printf_common+0x48>
    b068:	0022      	movs	r2, r4
    b06a:	2301      	movs	r3, #1
    b06c:	321a      	adds	r2, #26
    b06e:	9901      	ldr	r1, [sp, #4]
    b070:	9800      	ldr	r0, [sp, #0]
    b072:	9e08      	ldr	r6, [sp, #32]
    b074:	47b0      	blx	r6
    b076:	1c43      	adds	r3, r0, #1
    b078:	d0e6      	beq.n	b048 <_printf_common+0xa4>
    b07a:	3701      	adds	r7, #1
    b07c:	e7d1      	b.n	b022 <_printf_common+0x7e>
	...

0000b080 <_printf_i>:
    b080:	b5f0      	push	{r4, r5, r6, r7, lr}
    b082:	b08b      	sub	sp, #44	; 0x2c
    b084:	9206      	str	r2, [sp, #24]
    b086:	000a      	movs	r2, r1
    b088:	3243      	adds	r2, #67	; 0x43
    b08a:	9307      	str	r3, [sp, #28]
    b08c:	9005      	str	r0, [sp, #20]
    b08e:	9204      	str	r2, [sp, #16]
    b090:	7e0a      	ldrb	r2, [r1, #24]
    b092:	000c      	movs	r4, r1
    b094:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b096:	2a6e      	cmp	r2, #110	; 0x6e
    b098:	d100      	bne.n	b09c <_printf_i+0x1c>
    b09a:	e08f      	b.n	b1bc <_printf_i+0x13c>
    b09c:	d817      	bhi.n	b0ce <_printf_i+0x4e>
    b09e:	2a63      	cmp	r2, #99	; 0x63
    b0a0:	d02c      	beq.n	b0fc <_printf_i+0x7c>
    b0a2:	d808      	bhi.n	b0b6 <_printf_i+0x36>
    b0a4:	2a00      	cmp	r2, #0
    b0a6:	d100      	bne.n	b0aa <_printf_i+0x2a>
    b0a8:	e099      	b.n	b1de <_printf_i+0x15e>
    b0aa:	2a58      	cmp	r2, #88	; 0x58
    b0ac:	d054      	beq.n	b158 <_printf_i+0xd8>
    b0ae:	0026      	movs	r6, r4
    b0b0:	3642      	adds	r6, #66	; 0x42
    b0b2:	7032      	strb	r2, [r6, #0]
    b0b4:	e029      	b.n	b10a <_printf_i+0x8a>
    b0b6:	2a64      	cmp	r2, #100	; 0x64
    b0b8:	d001      	beq.n	b0be <_printf_i+0x3e>
    b0ba:	2a69      	cmp	r2, #105	; 0x69
    b0bc:	d1f7      	bne.n	b0ae <_printf_i+0x2e>
    b0be:	6821      	ldr	r1, [r4, #0]
    b0c0:	681a      	ldr	r2, [r3, #0]
    b0c2:	0608      	lsls	r0, r1, #24
    b0c4:	d523      	bpl.n	b10e <_printf_i+0x8e>
    b0c6:	1d11      	adds	r1, r2, #4
    b0c8:	6019      	str	r1, [r3, #0]
    b0ca:	6815      	ldr	r5, [r2, #0]
    b0cc:	e025      	b.n	b11a <_printf_i+0x9a>
    b0ce:	2a73      	cmp	r2, #115	; 0x73
    b0d0:	d100      	bne.n	b0d4 <_printf_i+0x54>
    b0d2:	e088      	b.n	b1e6 <_printf_i+0x166>
    b0d4:	d808      	bhi.n	b0e8 <_printf_i+0x68>
    b0d6:	2a6f      	cmp	r2, #111	; 0x6f
    b0d8:	d029      	beq.n	b12e <_printf_i+0xae>
    b0da:	2a70      	cmp	r2, #112	; 0x70
    b0dc:	d1e7      	bne.n	b0ae <_printf_i+0x2e>
    b0de:	2220      	movs	r2, #32
    b0e0:	6809      	ldr	r1, [r1, #0]
    b0e2:	430a      	orrs	r2, r1
    b0e4:	6022      	str	r2, [r4, #0]
    b0e6:	e003      	b.n	b0f0 <_printf_i+0x70>
    b0e8:	2a75      	cmp	r2, #117	; 0x75
    b0ea:	d020      	beq.n	b12e <_printf_i+0xae>
    b0ec:	2a78      	cmp	r2, #120	; 0x78
    b0ee:	d1de      	bne.n	b0ae <_printf_i+0x2e>
    b0f0:	0022      	movs	r2, r4
    b0f2:	2178      	movs	r1, #120	; 0x78
    b0f4:	3245      	adds	r2, #69	; 0x45
    b0f6:	7011      	strb	r1, [r2, #0]
    b0f8:	4a6c      	ldr	r2, [pc, #432]	; (b2ac <_printf_i+0x22c>)
    b0fa:	e030      	b.n	b15e <_printf_i+0xde>
    b0fc:	000e      	movs	r6, r1
    b0fe:	681a      	ldr	r2, [r3, #0]
    b100:	3642      	adds	r6, #66	; 0x42
    b102:	1d11      	adds	r1, r2, #4
    b104:	6019      	str	r1, [r3, #0]
    b106:	6813      	ldr	r3, [r2, #0]
    b108:	7033      	strb	r3, [r6, #0]
    b10a:	2301      	movs	r3, #1
    b10c:	e079      	b.n	b202 <_printf_i+0x182>
    b10e:	0649      	lsls	r1, r1, #25
    b110:	d5d9      	bpl.n	b0c6 <_printf_i+0x46>
    b112:	1d11      	adds	r1, r2, #4
    b114:	6019      	str	r1, [r3, #0]
    b116:	2300      	movs	r3, #0
    b118:	5ed5      	ldrsh	r5, [r2, r3]
    b11a:	2d00      	cmp	r5, #0
    b11c:	da03      	bge.n	b126 <_printf_i+0xa6>
    b11e:	232d      	movs	r3, #45	; 0x2d
    b120:	9a04      	ldr	r2, [sp, #16]
    b122:	426d      	negs	r5, r5
    b124:	7013      	strb	r3, [r2, #0]
    b126:	4b62      	ldr	r3, [pc, #392]	; (b2b0 <_printf_i+0x230>)
    b128:	270a      	movs	r7, #10
    b12a:	9303      	str	r3, [sp, #12]
    b12c:	e02f      	b.n	b18e <_printf_i+0x10e>
    b12e:	6820      	ldr	r0, [r4, #0]
    b130:	6819      	ldr	r1, [r3, #0]
    b132:	0605      	lsls	r5, r0, #24
    b134:	d503      	bpl.n	b13e <_printf_i+0xbe>
    b136:	1d08      	adds	r0, r1, #4
    b138:	6018      	str	r0, [r3, #0]
    b13a:	680d      	ldr	r5, [r1, #0]
    b13c:	e005      	b.n	b14a <_printf_i+0xca>
    b13e:	0640      	lsls	r0, r0, #25
    b140:	d5f9      	bpl.n	b136 <_printf_i+0xb6>
    b142:	680d      	ldr	r5, [r1, #0]
    b144:	1d08      	adds	r0, r1, #4
    b146:	6018      	str	r0, [r3, #0]
    b148:	b2ad      	uxth	r5, r5
    b14a:	4b59      	ldr	r3, [pc, #356]	; (b2b0 <_printf_i+0x230>)
    b14c:	2708      	movs	r7, #8
    b14e:	9303      	str	r3, [sp, #12]
    b150:	2a6f      	cmp	r2, #111	; 0x6f
    b152:	d018      	beq.n	b186 <_printf_i+0x106>
    b154:	270a      	movs	r7, #10
    b156:	e016      	b.n	b186 <_printf_i+0x106>
    b158:	3145      	adds	r1, #69	; 0x45
    b15a:	700a      	strb	r2, [r1, #0]
    b15c:	4a54      	ldr	r2, [pc, #336]	; (b2b0 <_printf_i+0x230>)
    b15e:	9203      	str	r2, [sp, #12]
    b160:	681a      	ldr	r2, [r3, #0]
    b162:	6821      	ldr	r1, [r4, #0]
    b164:	1d10      	adds	r0, r2, #4
    b166:	6018      	str	r0, [r3, #0]
    b168:	6815      	ldr	r5, [r2, #0]
    b16a:	0608      	lsls	r0, r1, #24
    b16c:	d522      	bpl.n	b1b4 <_printf_i+0x134>
    b16e:	07cb      	lsls	r3, r1, #31
    b170:	d502      	bpl.n	b178 <_printf_i+0xf8>
    b172:	2320      	movs	r3, #32
    b174:	4319      	orrs	r1, r3
    b176:	6021      	str	r1, [r4, #0]
    b178:	2710      	movs	r7, #16
    b17a:	2d00      	cmp	r5, #0
    b17c:	d103      	bne.n	b186 <_printf_i+0x106>
    b17e:	2320      	movs	r3, #32
    b180:	6822      	ldr	r2, [r4, #0]
    b182:	439a      	bics	r2, r3
    b184:	6022      	str	r2, [r4, #0]
    b186:	0023      	movs	r3, r4
    b188:	2200      	movs	r2, #0
    b18a:	3343      	adds	r3, #67	; 0x43
    b18c:	701a      	strb	r2, [r3, #0]
    b18e:	6863      	ldr	r3, [r4, #4]
    b190:	60a3      	str	r3, [r4, #8]
    b192:	2b00      	cmp	r3, #0
    b194:	db5c      	blt.n	b250 <_printf_i+0x1d0>
    b196:	2204      	movs	r2, #4
    b198:	6821      	ldr	r1, [r4, #0]
    b19a:	4391      	bics	r1, r2
    b19c:	6021      	str	r1, [r4, #0]
    b19e:	2d00      	cmp	r5, #0
    b1a0:	d158      	bne.n	b254 <_printf_i+0x1d4>
    b1a2:	9e04      	ldr	r6, [sp, #16]
    b1a4:	2b00      	cmp	r3, #0
    b1a6:	d064      	beq.n	b272 <_printf_i+0x1f2>
    b1a8:	0026      	movs	r6, r4
    b1aa:	9b03      	ldr	r3, [sp, #12]
    b1ac:	3642      	adds	r6, #66	; 0x42
    b1ae:	781b      	ldrb	r3, [r3, #0]
    b1b0:	7033      	strb	r3, [r6, #0]
    b1b2:	e05e      	b.n	b272 <_printf_i+0x1f2>
    b1b4:	0648      	lsls	r0, r1, #25
    b1b6:	d5da      	bpl.n	b16e <_printf_i+0xee>
    b1b8:	b2ad      	uxth	r5, r5
    b1ba:	e7d8      	b.n	b16e <_printf_i+0xee>
    b1bc:	6809      	ldr	r1, [r1, #0]
    b1be:	681a      	ldr	r2, [r3, #0]
    b1c0:	0608      	lsls	r0, r1, #24
    b1c2:	d505      	bpl.n	b1d0 <_printf_i+0x150>
    b1c4:	1d11      	adds	r1, r2, #4
    b1c6:	6019      	str	r1, [r3, #0]
    b1c8:	6813      	ldr	r3, [r2, #0]
    b1ca:	6962      	ldr	r2, [r4, #20]
    b1cc:	601a      	str	r2, [r3, #0]
    b1ce:	e006      	b.n	b1de <_printf_i+0x15e>
    b1d0:	0649      	lsls	r1, r1, #25
    b1d2:	d5f7      	bpl.n	b1c4 <_printf_i+0x144>
    b1d4:	1d11      	adds	r1, r2, #4
    b1d6:	6019      	str	r1, [r3, #0]
    b1d8:	6813      	ldr	r3, [r2, #0]
    b1da:	8aa2      	ldrh	r2, [r4, #20]
    b1dc:	801a      	strh	r2, [r3, #0]
    b1de:	2300      	movs	r3, #0
    b1e0:	9e04      	ldr	r6, [sp, #16]
    b1e2:	6123      	str	r3, [r4, #16]
    b1e4:	e054      	b.n	b290 <_printf_i+0x210>
    b1e6:	681a      	ldr	r2, [r3, #0]
    b1e8:	1d11      	adds	r1, r2, #4
    b1ea:	6019      	str	r1, [r3, #0]
    b1ec:	6816      	ldr	r6, [r2, #0]
    b1ee:	2100      	movs	r1, #0
    b1f0:	6862      	ldr	r2, [r4, #4]
    b1f2:	0030      	movs	r0, r6
    b1f4:	f000 f950 	bl	b498 <memchr>
    b1f8:	2800      	cmp	r0, #0
    b1fa:	d001      	beq.n	b200 <_printf_i+0x180>
    b1fc:	1b80      	subs	r0, r0, r6
    b1fe:	6060      	str	r0, [r4, #4]
    b200:	6863      	ldr	r3, [r4, #4]
    b202:	6123      	str	r3, [r4, #16]
    b204:	2300      	movs	r3, #0
    b206:	9a04      	ldr	r2, [sp, #16]
    b208:	7013      	strb	r3, [r2, #0]
    b20a:	e041      	b.n	b290 <_printf_i+0x210>
    b20c:	6923      	ldr	r3, [r4, #16]
    b20e:	0032      	movs	r2, r6
    b210:	9906      	ldr	r1, [sp, #24]
    b212:	9805      	ldr	r0, [sp, #20]
    b214:	9d07      	ldr	r5, [sp, #28]
    b216:	47a8      	blx	r5
    b218:	1c43      	adds	r3, r0, #1
    b21a:	d043      	beq.n	b2a4 <_printf_i+0x224>
    b21c:	6823      	ldr	r3, [r4, #0]
    b21e:	2500      	movs	r5, #0
    b220:	079b      	lsls	r3, r3, #30
    b222:	d40f      	bmi.n	b244 <_printf_i+0x1c4>
    b224:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b226:	68e0      	ldr	r0, [r4, #12]
    b228:	4298      	cmp	r0, r3
    b22a:	da3d      	bge.n	b2a8 <_printf_i+0x228>
    b22c:	0018      	movs	r0, r3
    b22e:	e03b      	b.n	b2a8 <_printf_i+0x228>
    b230:	0022      	movs	r2, r4
    b232:	2301      	movs	r3, #1
    b234:	3219      	adds	r2, #25
    b236:	9906      	ldr	r1, [sp, #24]
    b238:	9805      	ldr	r0, [sp, #20]
    b23a:	9e07      	ldr	r6, [sp, #28]
    b23c:	47b0      	blx	r6
    b23e:	1c43      	adds	r3, r0, #1
    b240:	d030      	beq.n	b2a4 <_printf_i+0x224>
    b242:	3501      	adds	r5, #1
    b244:	68e3      	ldr	r3, [r4, #12]
    b246:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b248:	1a9b      	subs	r3, r3, r2
    b24a:	429d      	cmp	r5, r3
    b24c:	dbf0      	blt.n	b230 <_printf_i+0x1b0>
    b24e:	e7e9      	b.n	b224 <_printf_i+0x1a4>
    b250:	2d00      	cmp	r5, #0
    b252:	d0a9      	beq.n	b1a8 <_printf_i+0x128>
    b254:	9e04      	ldr	r6, [sp, #16]
    b256:	0028      	movs	r0, r5
    b258:	0039      	movs	r1, r7
    b25a:	f7fe feff 	bl	a05c <__aeabi_uidivmod>
    b25e:	9b03      	ldr	r3, [sp, #12]
    b260:	3e01      	subs	r6, #1
    b262:	5c5b      	ldrb	r3, [r3, r1]
    b264:	0028      	movs	r0, r5
    b266:	7033      	strb	r3, [r6, #0]
    b268:	0039      	movs	r1, r7
    b26a:	f7fe fe71 	bl	9f50 <__udivsi3>
    b26e:	1e05      	subs	r5, r0, #0
    b270:	d1f1      	bne.n	b256 <_printf_i+0x1d6>
    b272:	2f08      	cmp	r7, #8
    b274:	d109      	bne.n	b28a <_printf_i+0x20a>
    b276:	6823      	ldr	r3, [r4, #0]
    b278:	07db      	lsls	r3, r3, #31
    b27a:	d506      	bpl.n	b28a <_printf_i+0x20a>
    b27c:	6863      	ldr	r3, [r4, #4]
    b27e:	6922      	ldr	r2, [r4, #16]
    b280:	4293      	cmp	r3, r2
    b282:	dc02      	bgt.n	b28a <_printf_i+0x20a>
    b284:	2330      	movs	r3, #48	; 0x30
    b286:	3e01      	subs	r6, #1
    b288:	7033      	strb	r3, [r6, #0]
    b28a:	9b04      	ldr	r3, [sp, #16]
    b28c:	1b9b      	subs	r3, r3, r6
    b28e:	6123      	str	r3, [r4, #16]
    b290:	9b07      	ldr	r3, [sp, #28]
    b292:	aa09      	add	r2, sp, #36	; 0x24
    b294:	9300      	str	r3, [sp, #0]
    b296:	0021      	movs	r1, r4
    b298:	9b06      	ldr	r3, [sp, #24]
    b29a:	9805      	ldr	r0, [sp, #20]
    b29c:	f7ff fe82 	bl	afa4 <_printf_common>
    b2a0:	1c43      	adds	r3, r0, #1
    b2a2:	d1b3      	bne.n	b20c <_printf_i+0x18c>
    b2a4:	2001      	movs	r0, #1
    b2a6:	4240      	negs	r0, r0
    b2a8:	b00b      	add	sp, #44	; 0x2c
    b2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b2ac:	0000f92e 	.word	0x0000f92e
    b2b0:	0000f91d 	.word	0x0000f91d

0000b2b4 <_putc_r>:
    b2b4:	b570      	push	{r4, r5, r6, lr}
    b2b6:	0006      	movs	r6, r0
    b2b8:	000d      	movs	r5, r1
    b2ba:	0014      	movs	r4, r2
    b2bc:	2800      	cmp	r0, #0
    b2be:	d004      	beq.n	b2ca <_putc_r+0x16>
    b2c0:	6983      	ldr	r3, [r0, #24]
    b2c2:	2b00      	cmp	r3, #0
    b2c4:	d101      	bne.n	b2ca <_putc_r+0x16>
    b2c6:	f7ff fb75 	bl	a9b4 <__sinit>
    b2ca:	4b12      	ldr	r3, [pc, #72]	; (b314 <_putc_r+0x60>)
    b2cc:	429c      	cmp	r4, r3
    b2ce:	d111      	bne.n	b2f4 <_putc_r+0x40>
    b2d0:	6874      	ldr	r4, [r6, #4]
    b2d2:	68a3      	ldr	r3, [r4, #8]
    b2d4:	3b01      	subs	r3, #1
    b2d6:	60a3      	str	r3, [r4, #8]
    b2d8:	2b00      	cmp	r3, #0
    b2da:	da05      	bge.n	b2e8 <_putc_r+0x34>
    b2dc:	69a2      	ldr	r2, [r4, #24]
    b2de:	4293      	cmp	r3, r2
    b2e0:	db12      	blt.n	b308 <_putc_r+0x54>
    b2e2:	b2eb      	uxtb	r3, r5
    b2e4:	2b0a      	cmp	r3, #10
    b2e6:	d00f      	beq.n	b308 <_putc_r+0x54>
    b2e8:	6823      	ldr	r3, [r4, #0]
    b2ea:	b2e8      	uxtb	r0, r5
    b2ec:	1c5a      	adds	r2, r3, #1
    b2ee:	6022      	str	r2, [r4, #0]
    b2f0:	701d      	strb	r5, [r3, #0]
    b2f2:	bd70      	pop	{r4, r5, r6, pc}
    b2f4:	4b08      	ldr	r3, [pc, #32]	; (b318 <_putc_r+0x64>)
    b2f6:	429c      	cmp	r4, r3
    b2f8:	d101      	bne.n	b2fe <_putc_r+0x4a>
    b2fa:	68b4      	ldr	r4, [r6, #8]
    b2fc:	e7e9      	b.n	b2d2 <_putc_r+0x1e>
    b2fe:	4b07      	ldr	r3, [pc, #28]	; (b31c <_putc_r+0x68>)
    b300:	429c      	cmp	r4, r3
    b302:	d1e6      	bne.n	b2d2 <_putc_r+0x1e>
    b304:	68f4      	ldr	r4, [r6, #12]
    b306:	e7e4      	b.n	b2d2 <_putc_r+0x1e>
    b308:	0022      	movs	r2, r4
    b30a:	0029      	movs	r1, r5
    b30c:	0030      	movs	r0, r6
    b30e:	f7ff f98d 	bl	a62c <__swbuf_r>
    b312:	e7ee      	b.n	b2f2 <_putc_r+0x3e>
    b314:	0000f8cc 	.word	0x0000f8cc
    b318:	0000f8ec 	.word	0x0000f8ec
    b31c:	0000f8ac 	.word	0x0000f8ac

0000b320 <_sbrk_r>:
    b320:	2300      	movs	r3, #0
    b322:	b570      	push	{r4, r5, r6, lr}
    b324:	4c06      	ldr	r4, [pc, #24]	; (b340 <_sbrk_r+0x20>)
    b326:	0005      	movs	r5, r0
    b328:	0008      	movs	r0, r1
    b32a:	6023      	str	r3, [r4, #0]
    b32c:	f7f7 ff5c 	bl	31e8 <_sbrk>
    b330:	1c43      	adds	r3, r0, #1
    b332:	d103      	bne.n	b33c <_sbrk_r+0x1c>
    b334:	6823      	ldr	r3, [r4, #0]
    b336:	2b00      	cmp	r3, #0
    b338:	d000      	beq.n	b33c <_sbrk_r+0x1c>
    b33a:	602b      	str	r3, [r5, #0]
    b33c:	bd70      	pop	{r4, r5, r6, pc}
    b33e:	46c0      	nop			; (mov r8, r8)
    b340:	20003bbc 	.word	0x20003bbc

0000b344 <__sread>:
    b344:	b570      	push	{r4, r5, r6, lr}
    b346:	000c      	movs	r4, r1
    b348:	250e      	movs	r5, #14
    b34a:	5f49      	ldrsh	r1, [r1, r5]
    b34c:	f000 f8b2 	bl	b4b4 <_read_r>
    b350:	2800      	cmp	r0, #0
    b352:	db03      	blt.n	b35c <__sread+0x18>
    b354:	6d63      	ldr	r3, [r4, #84]	; 0x54
    b356:	181b      	adds	r3, r3, r0
    b358:	6563      	str	r3, [r4, #84]	; 0x54
    b35a:	bd70      	pop	{r4, r5, r6, pc}
    b35c:	89a3      	ldrh	r3, [r4, #12]
    b35e:	4a02      	ldr	r2, [pc, #8]	; (b368 <__sread+0x24>)
    b360:	4013      	ands	r3, r2
    b362:	81a3      	strh	r3, [r4, #12]
    b364:	e7f9      	b.n	b35a <__sread+0x16>
    b366:	46c0      	nop			; (mov r8, r8)
    b368:	ffffefff 	.word	0xffffefff

0000b36c <__swrite>:
    b36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b36e:	001f      	movs	r7, r3
    b370:	898b      	ldrh	r3, [r1, #12]
    b372:	0005      	movs	r5, r0
    b374:	000c      	movs	r4, r1
    b376:	0016      	movs	r6, r2
    b378:	05db      	lsls	r3, r3, #23
    b37a:	d505      	bpl.n	b388 <__swrite+0x1c>
    b37c:	230e      	movs	r3, #14
    b37e:	5ec9      	ldrsh	r1, [r1, r3]
    b380:	2200      	movs	r2, #0
    b382:	2302      	movs	r3, #2
    b384:	f000 f874 	bl	b470 <_lseek_r>
    b388:	89a3      	ldrh	r3, [r4, #12]
    b38a:	4a05      	ldr	r2, [pc, #20]	; (b3a0 <__swrite+0x34>)
    b38c:	0028      	movs	r0, r5
    b38e:	4013      	ands	r3, r2
    b390:	81a3      	strh	r3, [r4, #12]
    b392:	0032      	movs	r2, r6
    b394:	230e      	movs	r3, #14
    b396:	5ee1      	ldrsh	r1, [r4, r3]
    b398:	003b      	movs	r3, r7
    b39a:	f000 f81f 	bl	b3dc <_write_r>
    b39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b3a0:	ffffefff 	.word	0xffffefff

0000b3a4 <__sseek>:
    b3a4:	b570      	push	{r4, r5, r6, lr}
    b3a6:	000c      	movs	r4, r1
    b3a8:	250e      	movs	r5, #14
    b3aa:	5f49      	ldrsh	r1, [r1, r5]
    b3ac:	f000 f860 	bl	b470 <_lseek_r>
    b3b0:	89a3      	ldrh	r3, [r4, #12]
    b3b2:	1c42      	adds	r2, r0, #1
    b3b4:	d103      	bne.n	b3be <__sseek+0x1a>
    b3b6:	4a05      	ldr	r2, [pc, #20]	; (b3cc <__sseek+0x28>)
    b3b8:	4013      	ands	r3, r2
    b3ba:	81a3      	strh	r3, [r4, #12]
    b3bc:	bd70      	pop	{r4, r5, r6, pc}
    b3be:	2280      	movs	r2, #128	; 0x80
    b3c0:	0152      	lsls	r2, r2, #5
    b3c2:	4313      	orrs	r3, r2
    b3c4:	81a3      	strh	r3, [r4, #12]
    b3c6:	6560      	str	r0, [r4, #84]	; 0x54
    b3c8:	e7f8      	b.n	b3bc <__sseek+0x18>
    b3ca:	46c0      	nop			; (mov r8, r8)
    b3cc:	ffffefff 	.word	0xffffefff

0000b3d0 <__sclose>:
    b3d0:	b510      	push	{r4, lr}
    b3d2:	230e      	movs	r3, #14
    b3d4:	5ec9      	ldrsh	r1, [r1, r3]
    b3d6:	f000 f815 	bl	b404 <_close_r>
    b3da:	bd10      	pop	{r4, pc}

0000b3dc <_write_r>:
    b3dc:	b570      	push	{r4, r5, r6, lr}
    b3de:	0005      	movs	r5, r0
    b3e0:	0008      	movs	r0, r1
    b3e2:	0011      	movs	r1, r2
    b3e4:	2200      	movs	r2, #0
    b3e6:	4c06      	ldr	r4, [pc, #24]	; (b400 <_write_r+0x24>)
    b3e8:	6022      	str	r2, [r4, #0]
    b3ea:	001a      	movs	r2, r3
    b3ec:	f7f7 fed4 	bl	3198 <_write>
    b3f0:	1c43      	adds	r3, r0, #1
    b3f2:	d103      	bne.n	b3fc <_write_r+0x20>
    b3f4:	6823      	ldr	r3, [r4, #0]
    b3f6:	2b00      	cmp	r3, #0
    b3f8:	d000      	beq.n	b3fc <_write_r+0x20>
    b3fa:	602b      	str	r3, [r5, #0]
    b3fc:	bd70      	pop	{r4, r5, r6, pc}
    b3fe:	46c0      	nop			; (mov r8, r8)
    b400:	20003bbc 	.word	0x20003bbc

0000b404 <_close_r>:
    b404:	2300      	movs	r3, #0
    b406:	b570      	push	{r4, r5, r6, lr}
    b408:	4c06      	ldr	r4, [pc, #24]	; (b424 <_close_r+0x20>)
    b40a:	0005      	movs	r5, r0
    b40c:	0008      	movs	r0, r1
    b40e:	6023      	str	r3, [r4, #0]
    b410:	f7f7 fefc 	bl	320c <_close>
    b414:	1c43      	adds	r3, r0, #1
    b416:	d103      	bne.n	b420 <_close_r+0x1c>
    b418:	6823      	ldr	r3, [r4, #0]
    b41a:	2b00      	cmp	r3, #0
    b41c:	d000      	beq.n	b420 <_close_r+0x1c>
    b41e:	602b      	str	r3, [r5, #0]
    b420:	bd70      	pop	{r4, r5, r6, pc}
    b422:	46c0      	nop			; (mov r8, r8)
    b424:	20003bbc 	.word	0x20003bbc

0000b428 <_fstat_r>:
    b428:	2300      	movs	r3, #0
    b42a:	b570      	push	{r4, r5, r6, lr}
    b42c:	4c06      	ldr	r4, [pc, #24]	; (b448 <_fstat_r+0x20>)
    b42e:	0005      	movs	r5, r0
    b430:	0008      	movs	r0, r1
    b432:	0011      	movs	r1, r2
    b434:	6023      	str	r3, [r4, #0]
    b436:	f7f7 feec 	bl	3212 <_fstat>
    b43a:	1c43      	adds	r3, r0, #1
    b43c:	d103      	bne.n	b446 <_fstat_r+0x1e>
    b43e:	6823      	ldr	r3, [r4, #0]
    b440:	2b00      	cmp	r3, #0
    b442:	d000      	beq.n	b446 <_fstat_r+0x1e>
    b444:	602b      	str	r3, [r5, #0]
    b446:	bd70      	pop	{r4, r5, r6, pc}
    b448:	20003bbc 	.word	0x20003bbc

0000b44c <_isatty_r>:
    b44c:	2300      	movs	r3, #0
    b44e:	b570      	push	{r4, r5, r6, lr}
    b450:	4c06      	ldr	r4, [pc, #24]	; (b46c <_isatty_r+0x20>)
    b452:	0005      	movs	r5, r0
    b454:	0008      	movs	r0, r1
    b456:	6023      	str	r3, [r4, #0]
    b458:	f7f7 fee0 	bl	321c <_isatty>
    b45c:	1c43      	adds	r3, r0, #1
    b45e:	d103      	bne.n	b468 <_isatty_r+0x1c>
    b460:	6823      	ldr	r3, [r4, #0]
    b462:	2b00      	cmp	r3, #0
    b464:	d000      	beq.n	b468 <_isatty_r+0x1c>
    b466:	602b      	str	r3, [r5, #0]
    b468:	bd70      	pop	{r4, r5, r6, pc}
    b46a:	46c0      	nop			; (mov r8, r8)
    b46c:	20003bbc 	.word	0x20003bbc

0000b470 <_lseek_r>:
    b470:	b570      	push	{r4, r5, r6, lr}
    b472:	0005      	movs	r5, r0
    b474:	0008      	movs	r0, r1
    b476:	0011      	movs	r1, r2
    b478:	2200      	movs	r2, #0
    b47a:	4c06      	ldr	r4, [pc, #24]	; (b494 <_lseek_r+0x24>)
    b47c:	6022      	str	r2, [r4, #0]
    b47e:	001a      	movs	r2, r3
    b480:	f7f7 fece 	bl	3220 <_lseek>
    b484:	1c43      	adds	r3, r0, #1
    b486:	d103      	bne.n	b490 <_lseek_r+0x20>
    b488:	6823      	ldr	r3, [r4, #0]
    b48a:	2b00      	cmp	r3, #0
    b48c:	d000      	beq.n	b490 <_lseek_r+0x20>
    b48e:	602b      	str	r3, [r5, #0]
    b490:	bd70      	pop	{r4, r5, r6, pc}
    b492:	46c0      	nop			; (mov r8, r8)
    b494:	20003bbc 	.word	0x20003bbc

0000b498 <memchr>:
    b498:	b2c9      	uxtb	r1, r1
    b49a:	1882      	adds	r2, r0, r2
    b49c:	4290      	cmp	r0, r2
    b49e:	d101      	bne.n	b4a4 <memchr+0xc>
    b4a0:	2000      	movs	r0, #0
    b4a2:	4770      	bx	lr
    b4a4:	7803      	ldrb	r3, [r0, #0]
    b4a6:	428b      	cmp	r3, r1
    b4a8:	d0fb      	beq.n	b4a2 <memchr+0xa>
    b4aa:	3001      	adds	r0, #1
    b4ac:	e7f6      	b.n	b49c <memchr+0x4>

0000b4ae <__malloc_lock>:
    b4ae:	4770      	bx	lr

0000b4b0 <__malloc_unlock>:
    b4b0:	4770      	bx	lr
	...

0000b4b4 <_read_r>:
    b4b4:	b570      	push	{r4, r5, r6, lr}
    b4b6:	0005      	movs	r5, r0
    b4b8:	0008      	movs	r0, r1
    b4ba:	0011      	movs	r1, r2
    b4bc:	2200      	movs	r2, #0
    b4be:	4c06      	ldr	r4, [pc, #24]	; (b4d8 <_read_r+0x24>)
    b4c0:	6022      	str	r2, [r4, #0]
    b4c2:	001a      	movs	r2, r3
    b4c4:	f7f7 fe46 	bl	3154 <_read>
    b4c8:	1c43      	adds	r3, r0, #1
    b4ca:	d103      	bne.n	b4d4 <_read_r+0x20>
    b4cc:	6823      	ldr	r3, [r4, #0]
    b4ce:	2b00      	cmp	r3, #0
    b4d0:	d000      	beq.n	b4d4 <_read_r+0x20>
    b4d2:	602b      	str	r3, [r5, #0]
    b4d4:	bd70      	pop	{r4, r5, r6, pc}
    b4d6:	46c0      	nop			; (mov r8, r8)
    b4d8:	20003bbc 	.word	0x20003bbc
    b4dc:	000001c6 	.word	0x000001c6
    b4e0:	0000019e 	.word	0x0000019e
    b4e4:	000001a2 	.word	0x000001a2
    b4e8:	000001a6 	.word	0x000001a6
    b4ec:	000001aa 	.word	0x000001aa
    b4f0:	000001ae 	.word	0x000001ae
    b4f4:	000001b2 	.word	0x000001b2
    b4f8:	000001b6 	.word	0x000001b6
    b4fc:	000001ba 	.word	0x000001ba
    b500:	000001be 	.word	0x000001be
    b504:	00000264 	.word	0x00000264
    b508:	0000023c 	.word	0x0000023c
    b50c:	00000242 	.word	0x00000242
    b510:	00000248 	.word	0x00000248
    b514:	00000248 	.word	0x00000248
    b518:	0000024e 	.word	0x0000024e
    b51c:	0000024e 	.word	0x0000024e
    b520:	0000024e 	.word	0x0000024e
    b524:	00000254 	.word	0x00000254
    b528:	0000025a 	.word	0x0000025a
    b52c:	00000100 	.word	0x00000100
    b530:	00000366 	.word	0x00000366
    b534:	0000033e 	.word	0x0000033e
    b538:	00000344 	.word	0x00000344
    b53c:	0000034a 	.word	0x0000034a
    b540:	0000034a 	.word	0x0000034a
    b544:	00000350 	.word	0x00000350
    b548:	00000350 	.word	0x00000350
    b54c:	00000350 	.word	0x00000350
    b550:	00000356 	.word	0x00000356
    b554:	0000035c 	.word	0x0000035c
    b558:	00000c8e 	.word	0x00000c8e
    b55c:	00000eda 	.word	0x00000eda
    b560:	00000eda 	.word	0x00000eda
    b564:	00000eda 	.word	0x00000eda
    b568:	00000eda 	.word	0x00000eda
    b56c:	00000eda 	.word	0x00000eda
    b570:	00000eda 	.word	0x00000eda
    b574:	00000eda 	.word	0x00000eda
    b578:	00000eda 	.word	0x00000eda
    b57c:	00000eda 	.word	0x00000eda
    b580:	00000eda 	.word	0x00000eda
    b584:	00000eda 	.word	0x00000eda
    b588:	00000eda 	.word	0x00000eda
    b58c:	00000eda 	.word	0x00000eda
    b590:	00000eda 	.word	0x00000eda
    b594:	00000eda 	.word	0x00000eda
    b598:	00000c76 	.word	0x00000c76
    b59c:	00000eda 	.word	0x00000eda
    b5a0:	00000eda 	.word	0x00000eda
    b5a4:	00000eda 	.word	0x00000eda
    b5a8:	00000eda 	.word	0x00000eda
    b5ac:	00000eda 	.word	0x00000eda
    b5b0:	00000eda 	.word	0x00000eda
    b5b4:	00000eda 	.word	0x00000eda
    b5b8:	00000eda 	.word	0x00000eda
    b5bc:	00000eda 	.word	0x00000eda
    b5c0:	00000eda 	.word	0x00000eda
    b5c4:	00000eda 	.word	0x00000eda
    b5c8:	00000eda 	.word	0x00000eda
    b5cc:	00000eda 	.word	0x00000eda
    b5d0:	00000eda 	.word	0x00000eda
    b5d4:	00000eda 	.word	0x00000eda
    b5d8:	00000c86 	.word	0x00000c86
    b5dc:	00000eda 	.word	0x00000eda
    b5e0:	00000eda 	.word	0x00000eda
    b5e4:	00000eda 	.word	0x00000eda
    b5e8:	00000eda 	.word	0x00000eda
    b5ec:	00000eda 	.word	0x00000eda
    b5f0:	00000eda 	.word	0x00000eda
    b5f4:	00000eda 	.word	0x00000eda
    b5f8:	00000eda 	.word	0x00000eda
    b5fc:	00000eda 	.word	0x00000eda
    b600:	00000eda 	.word	0x00000eda
    b604:	00000eda 	.word	0x00000eda
    b608:	00000eda 	.word	0x00000eda
    b60c:	00000eda 	.word	0x00000eda
    b610:	00000eda 	.word	0x00000eda
    b614:	00000eda 	.word	0x00000eda
    b618:	00000c7e 	.word	0x00000c7e
    b61c:	00000c96 	.word	0x00000c96
    b620:	00000c5e 	.word	0x00000c5e
    b624:	00000c6e 	.word	0x00000c6e
    b628:	00000c66 	.word	0x00000c66
    b62c:	00000002 	.word	0x00000002
    b630:	00000003 	.word	0x00000003
    b634:	00000028 	.word	0x00000028
    b638:	00000029 	.word	0x00000029
    b63c:	00000004 	.word	0x00000004
    b640:	00000005 	.word	0x00000005
    b644:	00000006 	.word	0x00000006
    b648:	00000007 	.word	0x00000007
    b64c:	00000020 	.word	0x00000020
    b650:	00000021 	.word	0x00000021
    b654:	00000022 	.word	0x00000022
    b658:	00000023 	.word	0x00000023
    b65c:	00000024 	.word	0x00000024
    b660:	00000025 	.word	0x00000025
    b664:	00000026 	.word	0x00000026
    b668:	00000027 	.word	0x00000027
    b66c:	00000008 	.word	0x00000008
    b670:	00000009 	.word	0x00000009
    b674:	0000000a 	.word	0x0000000a
    b678:	0000000b 	.word	0x0000000b
    b67c:	42000800 	.word	0x42000800
    b680:	42000c00 	.word	0x42000c00
    b684:	42001000 	.word	0x42001000
    b688:	42001400 	.word	0x42001400
    b68c:	42001800 	.word	0x42001800
    b690:	42001c00 	.word	0x42001c00
    b694:	000024e2 	.word	0x000024e2
    b698:	000024de 	.word	0x000024de
    b69c:	000024de 	.word	0x000024de
    b6a0:	00002544 	.word	0x00002544
    b6a4:	00002544 	.word	0x00002544
    b6a8:	000024f6 	.word	0x000024f6
    b6ac:	000024e8 	.word	0x000024e8
    b6b0:	000024fc 	.word	0x000024fc
    b6b4:	00002532 	.word	0x00002532
    b6b8:	00002704 	.word	0x00002704
    b6bc:	000026e4 	.word	0x000026e4
    b6c0:	000026e4 	.word	0x000026e4
    b6c4:	00002770 	.word	0x00002770
    b6c8:	000026f6 	.word	0x000026f6
    b6cc:	00002712 	.word	0x00002712
    b6d0:	000026e8 	.word	0x000026e8
    b6d4:	00002720 	.word	0x00002720
    b6d8:	00002760 	.word	0x00002760
    b6dc:	42002c00 	.word	0x42002c00
    b6e0:	42003000 	.word	0x42003000
    b6e4:	42003400 	.word	0x42003400
    b6e8:	42003800 	.word	0x42003800
    b6ec:	42003c00 	.word	0x42003c00
    b6f0:	10000800 	.word	0x10000800
    b6f4:	40002000 	.word	0x40002000
    b6f8:	00008000 	.word	0x00008000
    b6fc:	0000346a 	.word	0x0000346a
    b700:	000033e0 	.word	0x000033e0
    b704:	00003434 	.word	0x00003434
    b708:	00003434 	.word	0x00003434
    b70c:	00003434 	.word	0x00003434
    b710:	0000346a 	.word	0x0000346a
    b714:	00003434 	.word	0x00003434
    b718:	00003434 	.word	0x00003434
    b71c:	00003b92 	.word	0x00003b92
    b720:	00003bd2 	.word	0x00003bd2
    b724:	00003c12 	.word	0x00003c12
    b728:	00003c52 	.word	0x00003c52
    b72c:	00003c84 	.word	0x00003c84
    b730:	00003cb2 	.word	0x00003cb2
    b734:	00003cf0 	.word	0x00003cf0
    b738:	000045ea 	.word	0x000045ea
    b73c:	000045ea 	.word	0x000045ea
    b740:	000045ea 	.word	0x000045ea
    b744:	000046ce 	.word	0x000046ce
    b748:	000045ea 	.word	0x000045ea
    b74c:	000045ea 	.word	0x000045ea
    b750:	000045ea 	.word	0x000045ea
    b754:	000045ea 	.word	0x000045ea
    b758:	000045ea 	.word	0x000045ea
    b75c:	000045ea 	.word	0x000045ea
    b760:	000045ea 	.word	0x000045ea
    b764:	000045ea 	.word	0x000045ea
    b768:	000045ea 	.word	0x000045ea
    b76c:	000045ea 	.word	0x000045ea
    b770:	000045ea 	.word	0x000045ea
    b774:	000045ea 	.word	0x000045ea
    b778:	000045ea 	.word	0x000045ea
    b77c:	000045ea 	.word	0x000045ea
    b780:	000045ea 	.word	0x000045ea
    b784:	000045ea 	.word	0x000045ea
    b788:	0000460a 	.word	0x0000460a
    b78c:	0000460a 	.word	0x0000460a
    b790:	0000460a 	.word	0x0000460a
    b794:	0000460a 	.word	0x0000460a
    b798:	0000460a 	.word	0x0000460a
    b79c:	0000460a 	.word	0x0000460a
    b7a0:	0000460a 	.word	0x0000460a
    b7a4:	0000460a 	.word	0x0000460a
    b7a8:	0000460a 	.word	0x0000460a
    b7ac:	0000460a 	.word	0x0000460a
    b7b0:	0000462e 	.word	0x0000462e
    b7b4:	0000462e 	.word	0x0000462e
    b7b8:	0000462e 	.word	0x0000462e
    b7bc:	0000462e 	.word	0x0000462e
    b7c0:	0000462e 	.word	0x0000462e
    b7c4:	0000462e 	.word	0x0000462e
    b7c8:	0000462e 	.word	0x0000462e
    b7cc:	0000462e 	.word	0x0000462e
    b7d0:	0000462e 	.word	0x0000462e
    b7d4:	0000462e 	.word	0x0000462e
    b7d8:	00004652 	.word	0x00004652
    b7dc:	00004652 	.word	0x00004652
    b7e0:	00004652 	.word	0x00004652
    b7e4:	00004652 	.word	0x00004652
    b7e8:	00004652 	.word	0x00004652
    b7ec:	00004652 	.word	0x00004652
    b7f0:	0000466c 	.word	0x0000466c
    b7f4:	0000466c 	.word	0x0000466c
    b7f8:	0000466c 	.word	0x0000466c
    b7fc:	0000466c 	.word	0x0000466c
    b800:	0000466c 	.word	0x0000466c
    b804:	0000466c 	.word	0x0000466c
    b808:	0000466c 	.word	0x0000466c
    b80c:	0000466c 	.word	0x0000466c
    b810:	0000466c 	.word	0x0000466c
    b814:	00004686 	.word	0x00004686
    b818:	00004686 	.word	0x00004686
    b81c:	000046aa 	.word	0x000046aa
    b820:	000046aa 	.word	0x000046aa
    b824:	000046ce 	.word	0x000046ce
    b828:	000046ce 	.word	0x000046ce
    b82c:	000046aa 	.word	0x000046aa
    b830:	34333231 	.word	0x34333231
    b834:	00003635 	.word	0x00003635
    b838:	efcdab00 	.word	0xefcdab00
    b83c:	00efcdab 	.word	0x00efcdab
    b840:	b2d60600 	.word	0xb2d60600
    b844:	f8f005f0 	.word	0xf8f005f0
    b848:	00000000 	.word	0x00000000
    b84c:	6e6e6f43 	.word	0x6e6e6f43
    b850:	65746365 	.word	0x65746365
    b854:	6f742064 	.word	0x6f742064
    b858:	65657020 	.word	0x65657020
    b85c:	65642072 	.word	0x65642072
    b860:	65636976 	.word	0x65636976
    b864:	74697720 	.word	0x74697720
    b868:	64612068 	.word	0x64612068
    b86c:	73657264 	.word	0x73657264
    b870:	78302073 	.word	0x78302073
    b874:	78323025 	.word	0x78323025
    b878:	78323025 	.word	0x78323025
    b87c:	78323025 	.word	0x78323025
    b880:	78323025 	.word	0x78323025
    b884:	78323025 	.word	0x78323025
    b888:	78323025 	.word	0x78323025
    b88c:	00000000 	.word	0x00000000
    b890:	6e6e6f43 	.word	0x6e6e6f43
    b894:	69746365 	.word	0x69746365
    b898:	48206e6f 	.word	0x48206e6f
    b89c:	6c646e61 	.word	0x6c646e61
    b8a0:	64252065 	.word	0x64252065
    b8a4:	00000000 	.word	0x00000000
    b8a8:	2078614d 	.word	0x2078614d
    b8ac:	626d756e 	.word	0x626d756e
    b8b0:	6f207265 	.word	0x6f207265
    b8b4:	6f632066 	.word	0x6f632066
    b8b8:	63656e6e 	.word	0x63656e6e
    b8bc:	6e6f6974 	.word	0x6e6f6974
    b8c0:	61657220 	.word	0x61657220
    b8c4:	64656863 	.word	0x64656863
    b8c8:	6425203a 	.word	0x6425203a
    b8cc:	3d3d3d20 	.word	0x3d3d3d20
    b8d0:	7369443e 	.word	0x7369443e
    b8d4:	6e6e6f63 	.word	0x6e6e6f63
    b8d8:	69746365 	.word	0x69746365
    b8dc:	2e2e676e 	.word	0x2e2e676e
    b8e0:	0000002e 	.word	0x0000002e
    b8e4:	6f736552 	.word	0x6f736552
    b8e8:	6e69766c 	.word	0x6e69766c
    b8ec:	61522067 	.word	0x61522067
    b8f0:	6d6f646e 	.word	0x6d6f646e
    b8f4:	64646120 	.word	0x64646120
    b8f8:	73736572 	.word	0x73736572
    b8fc:	69616620 	.word	0x69616620
    b900:	2a64656c 	.word	0x2a64656c
    b904:	0000002a 	.word	0x0000002a
    b908:	69766544 	.word	0x69766544
    b90c:	43206563 	.word	0x43206563
    b910:	656e6e6f 	.word	0x656e6e6f
    b914:	6f697463 	.word	0x6f697463
    b918:	6146206e 	.word	0x6146206e
    b91c:	64656c69 	.word	0x64656c69
    b920:	53202d20 	.word	0x53202d20
    b924:	75746174 	.word	0x75746174
    b928:	25203a73 	.word	0x25203a73
    b92c:	00000064 	.word	0x00000064
    b930:	69766544 	.word	0x69766544
    b934:	64206563 	.word	0x64206563
    b938:	20646165 	.word	0x20646165
    b93c:	6e657665 	.word	0x6e657665
    b940:	65722074 	.word	0x65722074
    b944:	76696563 	.word	0x76696563
    b948:	00006465 	.word	0x00006465
    b94c:	434c5442 	.word	0x434c5442
    b950:	30303031 	.word	0x30303031
    b954:	72505820 	.word	0x72505820
    b958:	6f4d206f 	.word	0x6f4d206f
    b95c:	656c7564 	.word	0x656c7564
    b960:	5442203a 	.word	0x5442203a
    b964:	3031434c 	.word	0x3031434c
    b968:	5a2d3030 	.word	0x5a2d3030
    b96c:	00000052 	.word	0x00000052
    b970:	434c5442 	.word	0x434c5442
    b974:	30303031 	.word	0x30303031
    b978:	736f4820 	.word	0x736f4820
    b97c:	6e492074 	.word	0x6e492074
    b980:	66726574 	.word	0x66726574
    b984:	20656361 	.word	0x20656361
    b988:	54524155 	.word	0x54524155
    b98c:	646f4d20 	.word	0x646f4d20
    b990:	2d343a65 	.word	0x2d343a65
    b994:	65726957 	.word	0x65726957
    b998:	6142202c 	.word	0x6142202c
    b99c:	61726475 	.word	0x61726475
    b9a0:	253a6574 	.word	0x253a6574
    b9a4:	00000064 	.word	0x00000064
    b9a8:	74696e49 	.word	0x74696e49
    b9ac:	696c6169 	.word	0x696c6169
    b9b0:	676e697a 	.word	0x676e697a
    b9b4:	4c544220 	.word	0x4c544220
    b9b8:	30303143 	.word	0x30303143
    b9bc:	00000030 	.word	0x00000030
    b9c0:	434c5442 	.word	0x434c5442
    b9c4:	30303031 	.word	0x30303031
    b9c8:	696e4920 	.word	0x696e4920
    b9cc:	6c616974 	.word	0x6c616974
    b9d0:	74617a69 	.word	0x74617a69
    b9d4:	206e6f69 	.word	0x206e6f69
    b9d8:	6c696166 	.word	0x6c696166
    b9dc:	00006465 	.word	0x00006465
    b9e0:	61656c50 	.word	0x61656c50
    b9e4:	63206573 	.word	0x63206573
    b9e8:	6b636568 	.word	0x6b636568
    b9ec:	65687420 	.word	0x65687420
    b9f0:	6e6f6320 	.word	0x6e6f6320
    b9f4:	75676966 	.word	0x75676966
    b9f8:	69746172 	.word	0x69746172
    b9fc:	61206e6f 	.word	0x61206e6f
    ba00:	6320646e 	.word	0x6320646e
    ba04:	656e6e6f 	.word	0x656e6e6f
    ba08:	6f697463 	.word	0x6f697463
    ba0c:	202f206e 	.word	0x202f206e
    ba10:	64726168 	.word	0x64726168
    ba14:	65726177 	.word	0x65726177
    ba18:	6e6f6320 	.word	0x6e6f6320
    ba1c:	7463656e 	.word	0x7463656e
    ba20:	0000726f 	.word	0x0000726f
    ba24:	434c5442 	.word	0x434c5442
    ba28:	30303031 	.word	0x30303031
    ba2c:	69684320 	.word	0x69684320
    ba30:	44492070 	.word	0x44492070
    ba34:	7830203a 	.word	0x7830203a
    ba38:	00583625 	.word	0x00583625
    ba3c:	454d5441 	.word	0x454d5441
    ba40:	4c422d4c 	.word	0x4c422d4c
    ba44:	00000045 	.word	0x00000045
    ba48:	434c5442 	.word	0x434c5442
    ba4c:	30303031 	.word	0x30303031
    ba50:	69684320 	.word	0x69684320
    ba54:	64692070 	.word	0x64692070
    ba58:	69746e65 	.word	0x69746e65
    ba5c:	61636966 	.word	0x61636966
    ba60:	6e6f6974 	.word	0x6e6f6974
    ba64:	69616620 	.word	0x69616620
    ba68:	0064656c 	.word	0x0064656c
    ba6c:	69766544 	.word	0x69766544
    ba70:	6e206563 	.word	0x6e206563
    ba74:	20656d61 	.word	0x20656d61
    ba78:	20746573 	.word	0x20746573
    ba7c:	6c696166 	.word	0x6c696166
    ba80:	00006465 	.word	0x00006465
    ba84:	61204442 	.word	0x61204442
    ba88:	65726464 	.word	0x65726464
    ba8c:	67207373 	.word	0x67207373
    ba90:	66207465 	.word	0x66207465
    ba94:	656c6961 	.word	0x656c6961
    ba98:	00000064 	.word	0x00000064
    ba9c:	41204442 	.word	0x41204442
    baa0:	65726464 	.word	0x65726464
    baa4:	303a7373 	.word	0x303a7373
    baa8:	32302578 	.word	0x32302578
    baac:	32302558 	.word	0x32302558
    bab0:	32302558 	.word	0x32302558
    bab4:	32302558 	.word	0x32302558
    bab8:	32302558 	.word	0x32302558
    babc:	32302558 	.word	0x32302558
    bac0:	41202c58 	.word	0x41202c58
    bac4:	65726464 	.word	0x65726464
    bac8:	54207373 	.word	0x54207373
    bacc:	3a657079 	.word	0x3a657079
    bad0:	00006425 	.word	0x00006425
    bad4:	20746553 	.word	0x20746553
    bad8:	20454c42 	.word	0x20454c42
    badc:	69766544 	.word	0x69766544
    bae0:	63206563 	.word	0x63206563
    bae4:	69666e6f 	.word	0x69666e6f
    bae8:	61727567 	.word	0x61727567
    baec:	6e6f6974 	.word	0x6e6f6974
    baf0:	69616620 	.word	0x69616620
    baf4:	0064656c 	.word	0x0064656c
    baf8:	20746553 	.word	0x20746553
    bafc:	20454c42 	.word	0x20454c42
    bb00:	69766544 	.word	0x69766544
    bb04:	41206563 	.word	0x41206563
    bb08:	65726464 	.word	0x65726464
    bb0c:	66207373 	.word	0x66207373
    bb10:	656c6961 	.word	0x656c6961
    bb14:	00000064 	.word	0x00000064
    bb18:	69766544 	.word	0x69766544
    bb1c:	6f206563 	.word	0x6f206563
    bb20:	6f207475 	.word	0x6f207475
    bb24:	79732066 	.word	0x79732066
    bb28:	6520636e 	.word	0x6520636e
    bb2c:	746e6576 	.word	0x746e6576
    bb30:	63657220 	.word	0x63657220
    bb34:	65766965 	.word	0x65766965
    bb38:	00000064 	.word	0x00000064
    bb3c:	69766544 	.word	0x69766544
    bb40:	64206563 	.word	0x64206563
    bb44:	6f637369 	.word	0x6f637369
    bb48:	63656e6e 	.word	0x63656e6e
    bb4c:	20646574 	.word	0x20646574
    bb50:	73616552 	.word	0x73616552
    bb54:	303a6e6f 	.word	0x303a6e6f
    bb58:	32302578 	.word	0x32302578
    bb5c:	61482078 	.word	0x61482078
    bb60:	656c646e 	.word	0x656c646e
    bb64:	2578303d 	.word	0x2578303d
    bb68:	00000078 	.word	0x00000078
    bb6c:	72696150 	.word	0x72696150
    bb70:	20676e69 	.word	0x20676e69
    bb74:	6f666e69 	.word	0x6f666e69
    bb78:	74616d72 	.word	0x74616d72
    bb7c:	206e6f69 	.word	0x206e6f69
    bb80:	7020666f 	.word	0x7020666f
    bb84:	20726565 	.word	0x20726565
    bb88:	69766564 	.word	0x69766564
    bb8c:	69206563 	.word	0x69206563
    bb90:	6f6e2073 	.word	0x6f6e2073
    bb94:	76612074 	.word	0x76612074
    bb98:	616c6961 	.word	0x616c6961
    bb9c:	2e656c62 	.word	0x2e656c62
    bba0:	00000000 	.word	0x00000000
    bba4:	61656c50 	.word	0x61656c50
    bba8:	75206573 	.word	0x75206573
    bbac:	6961706e 	.word	0x6961706e
    bbb0:	68742072 	.word	0x68742072
    bbb4:	65642065 	.word	0x65642065
    bbb8:	65636976 	.word	0x65636976
    bbbc:	6f726620 	.word	0x6f726620
    bbc0:	6570206d 	.word	0x6570206d
    bbc4:	64207265 	.word	0x64207265
    bbc8:	63697665 	.word	0x63697665
    bbcc:	6f6d2865 	.word	0x6f6d2865
    bbd0:	656c6962 	.word	0x656c6962
    bbd4:	65732029 	.word	0x65732029
    bbd8:	6e697474 	.word	0x6e697474
    bbdc:	6d207367 	.word	0x6d207367
    bbe0:	20756e65 	.word	0x20756e65
    bbe4:	20646e61 	.word	0x20646e61
    bbe8:	72617473 	.word	0x72617473
    bbec:	61702074 	.word	0x61702074
    bbf0:	6e697269 	.word	0x6e697269
    bbf4:	67612067 	.word	0x67612067
    bbf8:	006e6961 	.word	0x006e6961
    bbfc:	72636e45 	.word	0x72636e45
    bc00:	69747079 	.word	0x69747079
    bc04:	52206e6f 	.word	0x52206e6f
    bc08:	65757165 	.word	0x65757165
    bc0c:	52207473 	.word	0x52207473
    bc10:	796c7065 	.word	0x796c7065
    bc14:	69614620 	.word	0x69614620
    bc18:	0064656c 	.word	0x0064656c
    bc1c:	72636e45 	.word	0x72636e45
    bc20:	69747079 	.word	0x69747079
    bc24:	66206e6f 	.word	0x66206e6f
    bc28:	656c6961 	.word	0x656c6961
    bc2c:	00000064 	.word	0x00000064
    bc30:	72636e45 	.word	0x72636e45
    bc34:	69747079 	.word	0x69747079
    bc38:	63206e6f 	.word	0x63206e6f
    bc3c:	6c706d6f 	.word	0x6c706d6f
    bc40:	64657465 	.word	0x64657465
    bc44:	63757320 	.word	0x63757320
    bc48:	73736563 	.word	0x73736563
    bc4c:	6c6c7566 	.word	0x6c6c7566
    bc50:	00000079 	.word	0x00000079
    bc54:	20454c42 	.word	0x20454c42
    bc58:	69766544 	.word	0x69766544
    bc5c:	6e206563 	.word	0x6e206563
    bc60:	6620746f 	.word	0x6620746f
    bc64:	646e756f 	.word	0x646e756f
    bc68:	636e6520 	.word	0x636e6520
    bc6c:	74707972 	.word	0x74707972
    bc70:	206e6f69 	.word	0x206e6f69
    bc74:	6f666e69 	.word	0x6f666e69
    bc78:	00000000 	.word	0x00000000
    bc7c:	2d454c42 	.word	0x2d454c42
    bc80:	616e614d 	.word	0x616e614d
    bc84:	3a726567 	.word	0x3a726567
    bc88:	6e6b6e55 	.word	0x6e6b6e55
    bc8c:	206e776f 	.word	0x206e776f
    bc90:	6e657645 	.word	0x6e657645
    bc94:	78303d74 	.word	0x78303d74
    bc98:	00005825 	.word	0x00005825

0000bc9c <ble_mgr_custom_event_handle>:
	...
    bca4:	00003369 0000338d 00000000              i3...3......

0000bcb0 <ble_mgr_gap_handle>:
    bcb0:	00003225 000034bd 0000323d 00000000     %2...4..=2......
	...
    bcc8:	00004055 000033b1 00003237 0000353d     U@...3..72..=5..
    bcd8:	00004491 00003735 00003555 00003889     .D..57..U5...8..
    bce8:	000039dd 000032a1 000042a5 00000000     .9...2...B......
	...

0000bd00 <ble_mgr_gatt_server_handle>:
	...
    bd18:	00003229 00003271 0000322d 00000000     )2..q2..-2......
    bd28:	2055544d 6e616843 46206567 656c6961     MTU Change Faile
    bd38:	43202c64 656e6e6f 6f697463 6148206e     d, Connection Ha
    bd48:	656c646e 2c64253a 65704f20 69746172     ndle:%d, Operati
    bd58:	253a6e6f 00000064 72696150 20676e69     on:%d...Pairing 
    bd68:	6c696166 2e2e6465 6174732e 20737574     failed...status 
    bd78:	00006425 63736944 656e6e6f 6e697463     %d..Disconnectin
    bd88:	2e2e2067 00002e2e 72696150 20676e69     g ......Pairing 
    bd98:	636f7270 72756465 6f632065 656c706d     procedure comple
    bda8:	20646574 63637573 66737365 796c6c75     ted successfully
    bdb8:	00000000 20454c42 69766544 6e206563     ....BLE Device n
    bdc8:	6620746f 646e756f 206f7420 726f7473     ot found to stor
    bdd8:	68742065 61702065 6e697269 6e692067     e the pairing in
    bde8:	00006f66 65746e45 68742072 61502065     fo..Enter the Pa
    bdf8:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
    be08:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
    be18:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
    be28:	6e697463 2e2e2067 0000002e 63736944     cting ......Disc
    be38:	656e6e6f 52207463 65757165 46207473     onnect Request F
    be48:	656c6961 00000064 61656c50 45206573     ailed...Please E
    be58:	7265746e 65687420 6c6f6620 69776f6c     nter the followi
    be68:	5020676e 2d737361 65646f63 206e6f28     ng Pass-code(on 
    be78:	6568746f 65442072 65636976 00003a29     other Device):..
    be88:	72696150 79656b2d 70657220 6620796c     Pair-key reply f
    be98:	656c6961 00000064 20424f4f 74616546     ailed...OOB Feat
    bea8:	20657275 20746f4e 70707573 6574726f     ure Not supporte
    beb8:	00000064 65746e45 20646572 73736150     d...Entered Pass
    bec8:	646f632d 00003a65 72696150 71655220     -code:..Pair Req
    bed8:	74736575 41202d20 65687475 6369746e     uest - Authentic
    bee8:	6f697461 6146206e 64656c69 00000000     ation Failed....
    bef8:	6f666e49 78616d3a 6d756d69 2e6f6e20     Info:maximum no.
    bf08:	7320666f 206e6163 69766564 72206563     of scan device r
    bf18:	68636165 2e2e6465 6f74532e 6e697070     eached...Stoppin
    bf28:	63532067 00006e61 6c696146 74206465     g Scan..Failed t
    bf38:	7473206f 7320706f 6e6e6163 00676e69     o stop scanning.
    bf48:	0000000d 6e616353 676e696e 61662020     ....Scanning  fa
    bf58:	64656c69 00000000 53756c42 46204b44     iled....BluSDK F
    bf68:	776d7269 20657261 73726556 3a6e6f69     irmware Version:
    bf78:	252e5825 58252e58 00000000 6f727245     %X.%X.%X....Erro
    bf88:	694c3a72 72617262 65762079 6f697372     r:Library versio
    bf98:	6f64206e 276e7365 616d2074 20686374     n doesn't match 
    bfa8:	68746977 4b445320 72657620 6e6f6973     with SDK version
    bfb8:	6c50202e 65736165 65737520 2e582520     . Please use %X.
    bfc8:	76205825 69737265 6f206e6f 696c2066     %X version of li
    bfd8:	72617262 00000079 6f727245 46203a72     brary...Error: F
    bfe8:	656c6961 6f742064 74656720 756c4220     ailed to get Blu
    bff8:	204b4453 6d726946 65726177 72655620     SDK Firmware Ver
    c008:	6e6f6973 00000000 76616c53 65732065     sion....Slave se
    c018:	69727563 72207974 65757165 66207473     curity request f
    c028:	656c6961 00000064 72636e45 69747079     ailed...Encrypti
    c038:	4e206e6f 7320746f 74726174 00006465     on Not started..
    c048:	76616c53 65532065 69727563 52207974     Slave Security R
    c058:	2d207165 74754120 746e6568 74616369     eq - Authenticat
    c068:	206e6f69 6c696146 00006465              ion Failed..

0000c074 <tc_interrupt_vectors.13592>:
    c074:	15141312 00000016 a5d5c51b 87a60002     ................
    c084:	393611e5 f05abac0 a5d5c51b 87a60002     ..69..Z.........
    c094:	393611e5 f05abad8 a5d5c51b 87a60002     ..69..Z.........
    c0a4:	393611e5 f05abae1 a5d5c51b 87a60002     ..69..Z.........
    c0b4:	393611e5 f05abaf1 a5d5c51b 87a60002     ..69..Z.........
    c0c4:	393611e5 f05abaf2 a5d5c51b 87a60002     ..69..Z.........
    c0d4:	393611e5 f05abaf3 a5d5c51b 87a60002     ..69..Z.........
    c0e4:	393611e5 f05abaf4 a5d5c51b 87a60002     ..69..Z.........
    c0f4:	393611e5 f05abaf5 a5d5c51b 87a60002     ..69..Z.........
    c104:	393611e5 f05abaf6 a5d5c51b 87a60002     ..69..Z.........
    c114:	393611e5 f05abaf7 a5d5c51b 87a60002     ..69..Z.........
    c124:	393611e5 f05abaf8                       ..69..Z.

0000c12c <app_gap_handle>:
	...
    c144:	00004fc1 0000545d 00000000 00000000     .O..]T..........
	...

0000c17c <app_gatt_server_handle>:
	...
    c184:	000059a1 00000000 00000000 00000000     .Y..............
	...
    c1a4:	6c707041 74616369 206e6f69 6e6e6f63     Application conn
    c1b4:	65746365 00002064 6c707041 74616369     ected ..Applicat
    c1c4:	206e6f69 63736964 656e6e6f 64657463     ion disconnected
    c1d4:	00000020 6f636552 6e696472 61762067      ...Recording va
    c1e4:	2065756c 25203a3a 00000064 72617453     lue :: %d...Star
    c1f4:	676e6974 206f7420 6f636572 00006472     ting to record..
    c204:	656d6954 6d617473 3a3a2070 00642520     Timestamp :: %d.
    c214:	656d6954 6d617473 72772070 65747469     Timestamp writte
    c224:	6f74206e 616c6620 00006873 706f7453     n to flash..Stop
    c234:	676e6970 63657220 6964726f 0000676e     ping recording..
    c244:	6c696146 206f7420 64616572 63657220     Fail to read rec
    c254:	6964726f 7620676e 65756c61 00000000     ording value....
    c264:	636e7953 6c615620 3a206575 6425203a     Sync Value :: %d
    c274:	00000000 72617453 676e6974 206f7420     ....Starting to 
    c284:	636e7973 00000000 706f7453 676e6970     sync....Stopping
    c294:	6e797320 00000063 6c696146 206f7420      sync...Fail to 
    c2a4:	64616572 6e797320 61762063 0065756c     read sync value.
    c2b4:	73657250 65727573 00000000 656d6954     Pressure....Time
    c2c4:	6d617473 00000070 6f636552 00006472     stamp...Record..
    c2d4:	636e7953 00000000 706f7453 6e795320     Sync....Stop Syn
    c2e4:	00000063 73657250 65727573 61655220     c...Pressure Rea
    c2f4:	00000064 74746142 00797265 74746142     d...Battery.Batt
    c304:	20797265 64616552 00000000 65727453     ery Read....Stre
    c314:	6e696d61 00000067 65727453 44206d61     aming...Stream D
    c324:	00617461 6c696146 74206465 6e49206f     ata.Failed to In
    c334:	61697469 657a696c 73756320 206d6f74     itialize custom 
    c344:	69766e65 6d6e6f72 20746e65 76726573     environment serv
    c354:	00656369 65676150 666f2073 74616420     ice.Pages of dat
    c364:	3a3a2061 00642520 736e6553 3a20726f     a :: %d.Sensor :
    c374:	6425203a 00000000 72452323 20726f72     : %d....##Error 
    c384:	6e656877 67655220 65747369 676e6972     when Registering
    c394:	42544120 31434c54 20303030 6c6c6163      ATBTLC1000 call
    c3a4:	6b636162 00000073 64616552 74614220     backs...Read Bat
    c3b4:	79726574 203a3a20 00006425 6e616843     tery :: %d..Chan
    c3c4:	20646567 74746142 20797265 25203a3a     ged Battery :: %
    c3d4:	00252564 64616552 20676e69 61746164     d%%.Reading data
    c3e4:	002e2e2e 6c696166 206f7420 646e6573     ....fail to send
    c3f4:	64707520 20657461 69746f6e 61636966      update notifica
    c404:	6e6f6974 00000020 6c696146 206f7420     tion ...Fail to 
    c414:	6e676973 20796669 20646e65 6420666f     signify end of d
    c424:	20617461 73206e6f 20636e79 72616863     ata on sync char
    c434:	65746361 74736972 00206369 20646e45     acteristic .End 
    c444:	6420666f 00617461 72617453 64612074     of data.Start ad
    c454:	74726576 6e697369 00000067 202a2a2a     vertising...*** 
    c464:	6c696146 74206465 7473206f 20747261     Failed to start 
    c474:	65766461 73697472 6e656d65 00000074     advertisement...
    c484:	65676150 76615320 00216465 252c6425     Page Saved!.%d,%
    c494:	00000064                                d...

0000c498 <tc_interrupt_vectors.13592>:
    c498:	15141312 21575216 656d7441 6f43206c     .....RW!Atmel Co
    c4a8:	022e7072                                         rp.

0000c4ab <CSWTCH.50>:
    c4ab:	00100402                                         ...

0000c4ae <CSWTCH.52>:
    c4ae:	03010300 03030303 03030303 03020303              ...............

0000c4bd <char_uuid>:
    c4bd:	29022803                                         .(

0000c4bf <client_conf_uuid>:
    c4bf:	29002902                                         .)

0000c4c1 <extended_props_uuid>:
    c4c1:	28022900                                         .)

0000c4c3 <include_uuid>:
    c4c3:	29042802                                         .(

0000c4c5 <presentation_format_uuid>:
    c4c5:	29032904                                         .)

0000c4c7 <server_conf_uuid>:
    c4c7:	01002903                                         .)

0000c4c9 <unNull>:
	...

0000c4ca <user_desc_uuid>:
    c4ca:	33ac2901                                         .)

0000c4cc <dummy_buffer>:
    c4cc:	200033ac                                .3. 

0000c4d0 <interface_send_msg>:
    c4d0:	200037b0 00215752 0000fea5              .7. RW!.....

0000c4dc <gu32fw_version>:
    c4dc:	10008194                                ....

0000c4e0 <gu32rf_version>:
    c4e0:	10008198                                ....

0000c4e4 <patch_data>:
    c4e4:	b083b5ff 460f4614 f0024610 9001fddf     .....F.F.F......
    c4f4:	02040a20 350b4625 46289000 fdd6f002      ...%F.5..(F....
    c504:	283f2600 8938d008 d0082806 46384629     .&?(..8..(..)F8F
    c514:	f0029a06 2601fdd1 b0074630 9801bdf0     .......&0F......
    c524:	d5010700 e7f72602 28007838 2834d012     .....&..8x.(..4(
    c534:	2005d1f2 23181de1 0240462a fdc2f002     ... ...#*F@.....
    c544:	80812106 71812105 71c12107 680949a1     .!...!.q.!.q.I.h
    c554:	e7e14788 98001db9 fd12f001 b5f8e7dc     .G..............
    c564:	02000a10 4616461f 300b460c fd9ef002     .....F.F.F.0....
    c574:	d031283f 88214898 28008980 1d82d005     ?(1..H!....(....
    c584:	42914d94 2402d103 2200e010 2800e7f8     .M.B...$..."...(
    c594:	1c82d004 d1034291 e0072400 e7f92200     .....B...$..."..
    c5a4:	d0002800 42811d00 2401d10a 6800488b     .(.....B...$.H.h
    c5b4:	b2812301 488a4632 fd84f002 e0097004     .#..2F.H.....p..
    c5c4:	46322306 48874639 fd7cf002 80018821     .#2F9F.H..|.!...
    c5d4:	71012180 47886829 bdf82000 0a10b5f8     .!.q)h.G. ......
    c5e4:	46170200 300b460c fd60f002 d052283f     ...F.F.0..`.?(R.
    c5f4:	78220a39 26000209 4d77487a 2a003109     9."x...&zHwM.1.*
    c604:	2a01d004 2a02d017 e025d145 1d928862     ...*...*E.%.b...
    c614:	463ab293 fd56f002 89a84607 d0002800     ..:F..V..F...(..
    c624:	80381c80 8862713e 1d21807a f0021d78     ..8.>qb.z.!.x...
    c634:	4638fd4f 2308e02c f002463a 89a9fd43     O.8F,..#:F..C...
    c644:	d0002900 80011d09 21027106 88628041     .).......q.!A.b.
    c654:	0a127142 e01b7182 463a230e fd32f002     Bq...q...#:F..2.
    c664:	290089a9 1d89d000 71068001 80412108     ...).......q.!A.
    c674:	71428862 71820a12 71c288a2 72020a12     b.Bq...q...q...r
    c684:	724288e2 72820a12 72c28922 73020a12     ..Br...r"..r...s
    c694:	68094950 20004788 b5ffbdf8 02200a14     PI.h.G. ...... .
    c6a4:	b0811c40 f002b280 2800fd01 2814d050     @..........(P..(
    c6b4:	2815d04e 4e4cd012 59f000a7 5c0a2131     N..(..LN...Y1!.\
    c6c4:	d50e06d1 31404601 2b007d4b 2001d009     .....F@1K}.+... 
    c6d4:	213d7548 f0024620 e039fd01 b0052002     Hu=! F....9.. ..
    c6e4:	0711bdf0 2100d503 75413040 493fe7f6     .......!@0Au..?I
    c6f4:	6c891ce0 43502206 f0021808 59f1fcf5     ...l."PC.......Y
    c704:	20014605 75483140 49372000 59ca9e02     .F. @1Hu. 7I...Y
    c714:	18364601 5c533129 1c407876 b2c04033     .F6.)1S\vx@.3@..
    c724:	28085453 4830d3f1 59c02201 43118b81     ST.(..0H.".Y...C
    c734:	20098381 22087028 1c68492d fcc8f002     ... (p."-Ih.....
    c744:	21fd7868 70684008 46202109 f808f000     hx.!.@hp.! F....
    c754:	e7c42000 4927b510 f0022014 bd10fccb     . ....'I. ......
    c764:	4606b5f8 b2841cc0 460f4820 20066c81     ...F.... H.F.l. 
    c774:	180d4360 1c400230 9000b280 f0024620     `C..0.@..... F..
    c784:	4819fcbf 598100b6 7c493120 d00107c9     ...H...Y 1I|....
    c794:	b2ff1d3f 1cc90239 46058069 30405980     ?...9...i..F.Y@0
    c7a4:	1c497c81 49147481 184100e0 310859a8     .|I..t.I..A..Y.1
    c7b4:	f0026880 59a8fcab f0026880 9800fcad     .h.....Y.h......
    c7c4:	fc74f002 834859a9 98002115 fcaaf002     ..t..YH..!......
    c7d4:	0000bdf8 100400e4 100408e4 10040018     ................
    c7e4:	00000e0a 00000c14 1004083c 10040b5c     ........<...\...
    c7f4:	0001e66c 10008358 10040a5c 4610b510     l...X...\......F
    c804:	f002460c cc07fc53 fa65f002 bd102000     .F..S.....e.. ..
    c814:	4614b570 f0024610 2306fc49 21044622     p..F.F..I..#"F.!
    c824:	f0024824 4604fc4f f0022000 4605f8ea     $H..O..F. .....F
    c834:	1ca02104 fc7cf002 122970a5 120970e1     .!....|..p)..p..
    c844:	12097121 20017161 20007060 7020491a     !q..aq. `p. .I p
    c854:	46206809 20004788 b570bd70 46104614     .h F.G. p.p..F.F
    c864:	fc24f002 23064813 21044622 f0021c40     ..$..H.#"F.!@...
    c874:	4604fc29 f0022000 4605f8f2 1ca02104     )..F. .....F.!..
    c884:	fc56f002 0a2970a5 0a0970e1 0a097121     ..V..p)..p..!q..
    c894:	20017161 20007060 70204907 46206809     aq. `p. .I p.h F
    c8a4:	20004788 b510bd70 20154904 fc22f002     .G. p....I. ..".
    c8b4:	0000bd10 00003801 100400e4 10008398     .....8..........
    c8c4:	4854b51c 22036941 43110392 20016141     ..THAi."...CAa. 
    c8d4:	fc34f002 fc38f002 6800484f 4e4f4780     ..4...8.OH.h.GON
    c8e4:	07407b30 28030f40 494dd803 68092000     0{@.@..(..MI. .h
    c8f4:	484c4788 25007801 d00e2900 ca06a24a     .GLH.x.%.)..J...
    c904:	91009201 22007005 46682105 fc22f002     .....p.".!hF..".
    c914:	21052200 f0024668 68b0fc23 d4030040     .".!hF..#..h@...
    c924:	78014843 d0fc2900 4c424943 68606809     CH.x.)..CIBL.h`h
    c934:	49424788 f0022003 f000fc19 f000fc62     .GBI. ......b...
    c944:	68a0fcf3 68b04780 d40a0040 28017820     ...h.G.h@... x.(
    c954:	7860d1fc d0042800 493a7065 60c84838     ..`x.(..ep:I8H.`
    c964:	f002e7fe f7fffc09 f7fffef5 4836ff9c     ..............6H
    c974:	47806800 4835b662 fc04f002 07007b30     .h.Gb.5H....0{..
    c984:	f002d501 4c32fc05 15a66860 606043b0     ......2L`h...C``
    c994:	20064930 47886809 43306860 68a06060     0I. .h.G`h0C``.h
    c9a4:	430801f1 4e2c60a0 4f2d4c2c 28007830     ...C.`,N,L-O0x.(
    c9b4:	7820d012 d00f2800 482a7025 23086800     .. x.(..%p*H.h.#
    c9c4:	2203b281 f0024828 4928fb7d 68097105     ..."(H..}.(I.q.h
    c9d4:	49276001 47886809 fbe0f002 47806838     .`'I.h.G....8h.G
    c9e4:	d0e32800 f0024823 e7dffbdf 20004601     .(..#H.......F. 
    c9f4:	d00d2900 d1072902 780a490d d0042a02     .)...)...I.x.*..
    ca04:	29017809 481cd100 481b4770 47703010     .x.)...HpG.H.0pG
    ca14:	4770481a 40010000 10040160 10040828     .HpG...@`...(...
    ca24:	100401c0 10040025 54554f42 00000021     ....%...BOUT!...
    ca34:	100400d9 10040000 10040104 1000618f     .............a..
    ca44:	05fa0004 e000ed00 10040154 100403bc     ........T.......
    ca54:	4000f400 10040210 100082d0 1000829c     ...@............
    ca64:	1004010c 10040018 00000339 100082d4     ........9.......
    ca74:	100400e4 100405ec 1000824c 0001e2bc     ........L.......
    ca84:	47304e00 4afdb5f0 49fd6816 48fd4bfd     .N0G...J.h.I.K.H
    ca94:	128c3340 2e0012cd 6886d026 400e6857     @3......&..hWh.@
    caa4:	0fff073f 4337047f 689e6087 6851400e     ?.....7C.`.h.@Qh
    cab4:	0fc90709 43310449 69416099 40216853     ....I.1C.`AiSh!@
    cac4:	0fdb075b 430b01db 69416143 40296853     [......CCaAiSh)@
    cad4:	0fdb079b 430b019b 49eb6143 400b6943     .......CCa.ICi.@
    cae4:	07c96851 e02e0fc9 68d64ae8 07f60d76     Qh.......J.hv...
    caf4:	68d6d12c 07f60d36 6886d028 400e68d7     ,..h6...(..h.h.@
    cb04:	0fff033f 4337047f 689e6087 68d1400e     ?.....7C.`.h.@.h
    cb14:	0fc90309 43310449 69416099 402168d3     ....I.1C.`Ai.h!@
    cb24:	0fdb04db 430b01db 69416143 402968d3     .......CCaAi.h)@
    cb34:	0fdb051b 430b019b 49d36143 400b6943     .......CCa.ICi.@
    cb44:	054968d1 03c90fc9 61414319 b530bdf0     .hI......CAa..0.
    cb54:	200049cf 49cf6108 22016848 60484310     .I. .a.IHh.".CH`
    cb64:	698849cd 4398158b 48cc6188 28006800     .I.i...C.a.H.h.(
    cb74:	4acbd104 24046910 61104320 4cc96908     ...J.i.$ C.a.i.L
    cb84:	22037825 2d0102d2 4390d100 03ad2501     %x."...-...C.%..
    cb94:	610843a8 250268c8 43a87824 d1012c01     .C.a.h.%$x.C.,..
    cba4:	43a0241c 43a02420 43904398 43904abe     .$.C $.C.C.C.J.C
    cbb4:	bd3060c8 4cbe4fbd 68382600 28004780     .`0..O.L.&8h.G.(
    cbc4:	7a20d10d d00a2802 faf4f002 d0fb2802     .. z.(.......(..
    cbd4:	faf0f002 d1022800 2001bf00 7a207220     .....(.....  r z
    cbe4:	28002500 2801d040 2802d053 48b1d1e5     .%.(@..(S..(...H
    cbf4:	28008800 48b0d002 47806800 fae0f002     ...(...H.h.G....
    cc04:	28007860 f002d001 f002fae1 489bfae5     `x.(...........H
    cc14:	48a169c1 61013040 fae4f002 680048a7     .i.H@0.a.....H.h
    cc24:	48a74780 47806800 68c04898 0f400740     .G.H.h.G.H.h@.@.
    cc34:	d8032803 200149a3 47886809 20016aa1     .(...I. .h.G.j. 
    cc44:	78a04788 70a01c40 6800489f 6a204780     .G.x@..p.H.h.G j
    cc54:	d0012800 47806a20 ff79f7ff 2001499b     .(.. j.G..y..I. 
    cc64:	61886809 e01bb662 280079e0 bf30d100     .h.ab....y.(..0.
    cc74:	78284d97 d1a02801 fabaf002 f002702e     .M(x.(.......p..
    cc84:	4894fabd 28006800 4892d197 fa7af002     ...H.h.(...H..z.
    cc94:	2004e793 fab8f002 47806838 d0012800     ... ....8h.G.(..
    cca4:	e78a7226 fab6f002 3040487b 48736901     &r......{H@0.isH
    ccb4:	f00261c1 2800fab5 f002d1fb f002fa99     .a.....(........
    ccc4:	7a20fab5 d0362802 72272702 78004882     .. z.(6..''r.H.x
    ccd4:	d00407c0 43050438 1c407920 79607120     ....8..C y@. q`y
    cce4:	1c404629 20057160 43010400 78e07066     )F@.`q. ...Cfp.x
    ccf4:	1c404d66 7c2870e0 d01f2801 43082000     fM@..p(|.(... .C
    cd04:	43084976 fa98f002 6aa1742e 47882000     vI.C.....t.j. .G
    cd14:	69814861 61814339 69814871 439122c0     aH.i9C.aqH.i.".C
    cd24:	69816181 43911582 4c6e6181 47806820     .a.i...C.anL h.G
    cd34:	d1fb2800 f002e7fe e73efa61 02402001     .(......a.>.. @.
    cd44:	b510e7dd 8410f3ef b6724a67 68506811     ........gJr..hPh
    cd54:	23001c49 60114158 f0026050 b662f95d     I..#XA.`P`..].b.
    cd64:	8810f384 b5f0bd10 207c4960 4c606048     ........`I| H``L
    cd74:	1c614847 600130c0 495f4b5e 600a1e5a     GHa..0.`^K_IZ..`
    cd84:	60451ce5 604b1c5b 60841d64 340c4c3b     ..E`[.K`d..`;L.4
    cd94:	4c5a608c 60c51ce5 1d6560ca 610b6105     .`ZL...`.`e..a.a
    cda4:	61441de4 34104c35 4c55614c 61851ce5     ..Da5L.4LaUL...a
    cdb4:	1d62618a 61cb61c2 62041de4 3014482f     .ab..a.a...b/H.0
    cdc4:	494d6208 3140484f 4a2c6008 7a134d4e     .bMIOH@1.`,JNM.z
    cdd4:	484f4c4e 2b01494f 4e50d117 80334b4e     NLOHOI.+..PNNK3.
    cde4:	23014e4f 4e4f6173 80332304 60034b4e     ON.#saON.#3.NK.`
    cdf4:	60434b4e 4b4e8025 4b4e60c3 4b4e6103     NKC`%.NK.`NK.aNK
    ce04:	880b800b 23006083 69967213 681f4b23     .....`.#.r.i#K.h
    ce14:	d01542be 6196681e 2a00681a 4a47d007     .B...h.a.h.*..GJ
    ce24:	4a478022 4a4760c2 4a476102 8025e005     ".GJ.`GJ.aGJ..%.
    ce34:	60c24a3f 61024a3f 800a4a3f 60818809     ?J.`?J.a?J.....`
    ce44:	68484942 07122207 60484310 49404839     BIHh."...CH`9H@I
    ce54:	62081e40 b51fbdf0 ca07a23e c307466b     @..b....>...kF..
    ce64:	25004c3f 21092200 f0004668 9503fb5b     ?L.%.".!hF..[...
    ce74:	1c409803 42a09003 e7f3d3fa 1000826c     ..@....B....l...
    ce84:	fffdffff 40020800 ffff7fff 10040828     .......@....(...
    ce94:	4000b200 40014000 4000b000 1000851c     ...@.@.@...@....
    cea4:	e000ed00 100400d9 20018000 1004018c     ........... ....
    ceb4:	1004001c 10040094 100400a0 10040170     ............p...
    cec4:	10040160 100401c0 10040154 1004015c     `.......T...\...
    ced4:	10040141 100405ec 10040168 00400001     A.......h.....@.
    cee4:	4000e200 10040188 10040240 40025100     ...@....@....Q.@
    cef4:	00019e57 10005725 4000b300 00019f09     W...%W.....@....
    cf04:	000052f5 000001ff 000005d7 10040090     .R..............
    cf14:	4000e040 10040096 000009c4 1000829e     @..@............
    cf24:	4000f000 1004009c 03020000 06050403     ...@............
    cf34:	01021617 00001603 0000291c 000004a6     .........)......
    cf44:	01020c0d 00000c03 00001f12 40024000     .............@.@
    cf54:	40041840 10033a05 00000300 00000000     @..@.:..........
    cf64:	00002710 49032001 60410700 60c14902     .'... .I..A`.I.`
    cf74:	f968f002 0001e1ad 10005afb 4c3ab5f8     ..h......Z....:L
    cf84:	28006920 4839d006 28006800 4837d102      i.(..9H.h.(..7H
    cf94:	f8f8f002 4f374e36 2d006925 0628d063     ....6N7O%i.-c.(.
    cfa4:	2080d503 f00261a0 07a8f953 2002d503     ... .a..S...... 
    cfb4:	f00261a0 0728f953 2008d507 200061a0     .a..S.(.... .a. 
    cfc4:	f952f002 f001482c 05e8fb84 20ffd505     ..R.,H......... 
    cfd4:	61a03001 f0022001 05a8f947 2001d504     .0.a. ..G...... 
    cfe4:	61a00240 f946f002 d5030668 61a02040     @..a..F.h...@ .a
    cff4:	f946f002 d50306e8 61a02010 f946f002     ..F...... .a..F.
    d004:	d51e0768 20014918 63c831c0 28006bc8     h....I. .1.c.k.(
    d014:	69e0d1fc 60084919 20044919 47886809     ...i.I.`.I. .h.G
    d024:	61a02004 20004917 48176208 47806800     . .a.I. .b.H.h.G
    d034:	28008830 6838d005 f0024780 f002f92d     0..(..8h.G..-...
    d044:	07e8f907 8830d00a d1072800 61a02001     ......0..(... .a
    d054:	47806838 f920f002 f8faf002 d59b06a8     8h.G.. .........
    d064:	61a02020 bdf8e798 40040000 100405ec       .a.......@....
    d074:	10040094 10040174 10008408 1000828c     ....t...........
    d084:	10040210 4000b000 10040110 b0049e02     .......@........
    d094:	0000e000 888bb570 43532206 24004a11     ....p...."SC.J.$
    d0a4:	835c189b 8410f3ef b6724b0f 1c6d681d     ..\......Kr..hm.
    d0b4:	6b83601d 2b003038 888dd00e 43752606     .`.k80.+.....&uC
    d0c4:	4e0a6843 19ad889b 43732606 8b53189a     Ch.N.....&sC..S.
    d0d4:	03db0bdb 8353432b f8e4f002 f384b662     ....+CS.....b...
    d0e4:	bd708810 40030380 10008290 0000039a     ..p....@........
    d0f4:	4604b5fe f8dcf002 f0029000 4607f8df     ...F...........F
    d104:	46257a20 0f000700 90013564 78a84626      z%F....d5..&F.x
    d114:	28003624 f002d10a f000f8d7 4829f89b     $6.(..........)H
    d124:	1c496801 49286001 72082001 f0024630     .hI..`(I. .r0F..
    d134:	4621f8d1 f0024825 78a9f8b5 29004824     ..!F%H.....x$H.)
    d144:	9900d103 d00042f9 99018801 008b2202     .....B......."..
    d154:	18594920 8df2800a 9a00804a 19d278a9      IY.....J....x..
    d164:	4d1d4311 d1204a1d 07c98801 4916d01d     .C.M.J ........I
    d174:	800b2300 2d00682d 2301d000 4a188013     .#..-h.-...#...J
    d184:	63d32301 2b006bd3 4a15d1fc 6a123ac0     .#.c.k.+...J.:.j
    d194:	6849604a d30729e6 491268a2 624a1e52     J`Ih.)...h.IR.Jb
    d1a4:	620a8882 62888840 4907bdfe 80082001     ...b@..b...I. ..
    d1b4:	2b00682b 2304d001 2303e000 80488013     +h.+...#...#..H.
    d1c4:	0000bdfe 100082d4 10008294 1004085c     ............\...
    d1d4:	1004007c 40030000 1000851c 1004009c     |......@........
    d1e4:	400400c0 40024040 68094916 0a814348     ...@@@.@.I.hHC..
    d1f4:	18890bc2 18080c00 30ff30ff 0a803002     .........0.0.0..
    d204:	b5704770 88204c10 ffeef7ff 46064b0f     pGp..L ......K.F
    d214:	f7ff8818 b285ffe9 f7ff8858 0571ffe5     ........X.....q.
    d224:	b28002aa 43014311 63c14809 88218858     .....C.C.H.cX.!.
    d234:	d9004281 88194608 d8004288 f0024608     .B...F...B...F..
    d244:	bd70f84f 10040204 1000829e 10040090     O.p.............
    d254:	40040000 4a064805 7a016c80 69528101     ...@.H.J.l.z..Ri
    d264:	1d927b12 43110212 47708101 10040b5c     .{.....C..pG\...
    d274:	10040870 4c05b510 68006960 d0042800     p......L`i.h.(..
    d284:	f834f002 20006961 bd106008 10040870     ..4.ai. .`..p...
    d294:	0a04b510 2810b2c0 dc0ed034 d023280c     .......(4....(#.
    d2a4:	2803dc06 280ad017 280bd020 e019d111     ...(...( ..(....
    d2b4:	d013280d d10c280e 2837e012 dc04d01a     .(...(....7(....
    d2c4:	d0152811 d1042812 2838e01a 2839d014     .(...(....8(..9(
    d2d4:	f002d014 0221f811 bd104308 e7fa200a     ......!..C... ..
    d2e4:	e7f8200b e7f62008 e7f42009 e7f22007     . ... ... ... ..
    d2f4:	e7f02005 e7ee2014 e7ec2015 e7ea200e     . ... ... ... ..
    d304:	e7e82006 e7e62004 4605b570 2070794c     . ... ..p..FLyp 
    d314:	46284304 fff6f001 23004601 46284622     .C(F.....F.#"F(F
    d324:	fff6f001 0000bd70 2003b510 fff6f001     ....p...... ....
    d334:	20034902 fedef001 0000bd10 1000819c     .I. ............
    d344:	4618b570 4601460d 23822400 f0014838     p..F.F.F.$.#8H..
    d354:	7969feb9 2900682a 2980d001 2112d901     ..iy*h.)...)...!
    d364:	792be027 d0082b08 d00f2b10 d01b2b20     '.+y.+...+.. +..
    d374:	5d13e01e 70ab1905 428c1c64 e016d3f9     ...]...pd..B....
    d384:	19055b13 0a1b70ab 1ca470eb d3f7428c     .[...p...p...B..
    d394:	e00c0049 19055913 0a1b70ab 0a1b70eb     I....Y...p...p..
    d3a4:	0a1b712b 1d24716b d3f3428c 70410089     +q..kq$..B....Ap
    d3b4:	70012100 78424601 1c92390c 491d814a     .!.p.FBx.9..J..I
    d3c4:	47886809 bd702000 4618b510 4601460c     .h.G. p....F.F.F
    d3d4:	23014817 f001301d 4a17fe75 70117821     .H.#.0..u..J!x.p
    d3e4:	70012100 68094913 20004788 4810bd10     .!.p.I.h.G. ...H
    d3f4:	4619b510 301e2308 fe64f001 71012100     ...F.#.0..d..!.q
    d404:	6849490d 490b6001 47886809 bd102000     .IIh.`.I.h.G. ..
    d414:	4619b510 23012067 f00100c0 4a06fe53     ...Fg .#....S..J
    d424:	60512100 49037001 47886809 bd102000     .!Q`.p.I.h.G. ..
    d434:	00000319 100400e4 100082d0 4604b510     ...............F
    d444:	6800483a b2812203 f0014839 4620ff6d     :H.h."..9H..m. F
    d454:	ff70f001 b570bd10 d0030006 d00c2e01     ..p...p.........
    d464:	ff6ef001 7fa84d33 d00a2800 3416462c     ..n.3M...(..,F.4
    d474:	d0122801 d1292802 2000e025 ffdef7ff     .(...().%.. ....
    d484:	7fe8e7f0 d0212801 d01f2805 d01d2806     .....(!..(...(..
    d494:	d01b2807 ffd2f7ff 7fe8bd70 d1152801     .(......p....(..
    d4a4:	f0014620 78a0ff53 d0032800 d9062822      F..S..x.(.."(..
    d4b4:	e7ef7fe8 46018823 46182200 491ee010     ....#..F.".F...I
    d4c4:	ff4af001 7fe8bd70 d0032801 f0014630     ..J.p....(..0F..
    d4d4:	bd70ff37 f0014620 78a1ff39 4a168820     7.p. F..9..x ..J
    d4e4:	ff40f001 ff44f001 b510bd70 f0012003     ..@...D.p.... ..
    d4f4:	4c10ff45 f0016920 6a20fef9 d0032800     E..L i.... j.(..
    d504:	ff42f001 62202000 28006820 4809d005     ..B..  b h.(...H
    d514:	ff40f001 ff44f001 2100bd10 f0012004     ..@...D....!. ..
    d524:	bd10fe01 689b4b03 4718685b 10040018     .....K.h[h.G....
    d534:	0000033b 10040bb0 100082dc b0069e03     ;...............
    d544:	0000e004 b0059e02 0000e070 468eb5f0     ........p......F
    d554:	22004971 4614680b 600b1c5b 08831cc0     qI.".h.F[..`....
    d564:	1d1b009b d2002b0c f3ef230c 46848010     .....+...#.....F
    d574:	4670b672 07801820 48680f01 1808461d     r.pF .....hH.F..
    d584:	4e676980 e012350c 42b78807 e7fed000     .igN.5.....B....
    d594:	429f8847 42afd30a 6881d202 d0052900     G..B...B...h.)..
    d5a4:	d0022a00 42b98851 4602d900 28006840     .*..Q..B...F@h.(
    d5b4:	2a00d1ea 8850d003 d20042a8 1c644603     ...*..P..B...Fd.
    d5c4:	2c04b2e4 2a00d202 e001d0d3 d00e2a00     ...,...*.....*..
    d5d4:	42988850 6890d10c d0012800 60416851     P..B...h.(..QhA`
    d5e4:	28006850 6891d001 46106081 e7fee004     Ph.(...h.`.F....
    d5f4:	b2801ac0 18808050 494a8043 46618001     ....P...C.JI..aF
    d604:	f381b662 1d008810 b510bdf0 009a4603     b............F..
    d614:	005b4c42 69921912 2000191b 42918d1b     BL[....i... ...B
    d624:	18d2d303 d300428a bd102001 4684b5f8     .....B... .....F
    d634:	27004839 1c496841 46616041 d0082900     9H.'AhI.A`aF.)..
    d644:	88291f0d 42914a37 6881d004 60811c49     ..).7J.B...hI..`
    d654:	e7febdf8 80284834 2400886e 8010f3ef     ....4H(.n..$....
    d664:	b6729000 46384661 ffcff7ff d0042800     ..r.aF8F.....(..
    d674:	00b9482a 69841808 1c7fe001 2f04b2ff     *H.....i......./
    d684:	2c00d202 e001d0ee d0012c00 d80045a4     ...,.....,...E..
    d694:	4923e7fe 88222000 d000428a 8862e7fe     ..#I. "..B....b.
    d6a4:	42aa1912 8860d111 b2811980 68608061     ...B..`.....a.`h
    d6b4:	4282190a 8842d12b 80611889 60616841     ...B+.B...a.Aha`
    d6c4:	28006840 6084d023 42a5e021 2800d215     @h.(#..`!..B...(
    d6d4:	6045d000 19a860a8 42a08029 6860d109     ..E`.`..)..B..`h
    d6e4:	68606068 d0002800 88606085 80681980     h``h.(...``...h.
    d6f4:	606ce00d 806e60a5 4620e009 2c006864     ..l`.`n... Fdh.,
    d704:	2200d1c9 606a6045 806e60a8 b6628029     ..."E`j`.`n.).b.
    d714:	f3809800 bdf88810 10008304 10040bd4     ................
    d724:	0000a55a 00008338 0000f00f 4980b510     Z...8..........I
    d734:	68092000 d0102900 497f487e e0066800     . .h.)..~H.I.h..
    d744:	428a8882 7982d102 d0072a09 28006800     ...B...y.*...h.(
    d754:	2001d1f6 fe2af001 bd102001 f0014874     ... ..*.. ..tH..
    d764:	4601fe19 f0014873 e7f5fd9d 4605b5f8     ...FsH.........F
    d774:	48724604 6ac03c0c 0fc007c0 88e09000     .FrH.<.j........
    d784:	d0082805 4a6e88a1 42912700 b2c0d114     .(....nJ.'.B....
    d794:	d0052804 4621e010 f001486a e0c2fe0d     .(....!FjH......
    d7a4:	49698920 00800a00 28005808 3040d004      .iI.....X.(..@0
    d7b4:	22fd7f41 77414011 88a04621 310c4e5e     A..".@Aw!F..^N.1
    d7c4:	d13042b0 b2c288e0 d12c2a09 29527a89     .B0......*,..zR)
    d7d4:	f001d129 0700fc6b f3efd416 b6728110     )...k.........r.
    d7e4:	68004853 d11a2800 e0054852 42b28882     SH.h.(..RH.....B
    d7f4:	7982d102 d0122a09 28006800 b662d1f6     ...y.*...h.(..b.
    d804:	8810f381 d00e2f00 8510f3ef 4848b672     ...../......r.HH
    d814:	f0014621 b662fd47 8810f385 b662e083     !F..G.b.......b.
    d824:	8810f381 f3efe7f0 b6728710 46214841     ..........r.AH!F
    d834:	fd38f001 494588a0 d10c4288 280979a0     ..8...EI.B...y.(
    d844:	483bd109 fda6f001 d0042800 46014a39     ..;H.....(..9J.F
    d854:	f0014610 b662fd27 8810f387 460888a1     .F..'.b........F
    d864:	381238ff 79a0d102 d0062801 1ec04837     .8.8...y.(..7H..
    d874:	d1074281 280b79a0 88e0d104 02000a00     .B...y.(........
    d884:	80e03014 d10a42b1 b2c188e0 d106290b     .0...B.......)..
    d894:	29068929 0a00d103 30140200 88e080e0     )..).......0....
    d8a4:	d0112804 28048920 9800d10e d0042800     .(.. ..(.....(..
    d8b4:	68004827 d0042800 4926e006 62082001     'H.h.(....&I. .b
    d8c4:	4823e002 fc5ef001 88e04923 42886809     ..#H..^.#I...h.B
    d8d4:	491bd129 1c8988a0 d10c4288 f001201b     )..I.....B... ..
    d8e4:	4604fd0b fbe2f001 d11c2801 46202100     ...F.....(...! F
    d8f4:	fc18f001 210de017 42880209 8960d113     .......!...B..`.
    d904:	d1102802 340c7b60 d0012844 d10a2845     .(..`{.4D(..E(..
    d914:	280c7820 280dd005 280ed003 280fd001      x.(...(...(...(
    d924:	f7ffd101 2001fca7 fd40f001 0000bdf8     ....... ..@.....
    d934:	10008310 10040bd4 00000a01 4000b1c0     ...............@
    d944:	00000e01 10040c20 100408c4 00000c16     .... ...........
    d954:	100405ec 4000b000 10040018 68514ac8     .......@.....JQh
    d964:	d0032801 00490849 47706051 43012001     .(..I.I.Q`pG. .C
    d974:	49c4e7fa 02ca6208 62084310 62084390     ...I.b...C.b.C.b
    d984:	49c04770 28002202 6888d00b 00400840     pG.I.".(...h@.@.
    d994:	69c86088 40184bbc 69c861c8 61c84310     .`.i.K.@.a.i.C.a
    d9a4:	69c84770 61c84390 4ab769c8 431043d2     pG.i.C.a.i.J.C.C
    d9b4:	688861c8 43102201 47706088 694849b1     .a.h.".C.`pG.IHi
    d9c4:	09c04ab2 01c07812 0f920752 2259d003     .J...x..R.....Y"
    d9d4:	61484310 22554770 b510e7fa 49ac48ad     .CHapGU".....H.I
    d9e4:	49ad6001 49ad6041 f7ff6081 49a5f84b     .`.IA`.I.`..K..I
    d9f4:	22036948 43900412 04522201 61484310     Hi."...C."R..CHa
    da04:	49a7bd10 22016808 43100652 49a56008     ...I.h."R..C.`.I
    da14:	22416808 43900452 68124aa3 d1012a00     .hA"R..C.J.h.*..
    da24:	43904aa2 05122207 60084390 b5fe4770     .J.C."...C.`pG..
    da34:	4d9f2400 f7ff4e9f 2001ffc1 ffa1f7ff     .$.M.N..... ....
    da44:	0527489d 210d1838 fcbcf001 489b9001     .H'.8..!.......H
    da54:	1838210d fcb6f001 48999000 180f0061     .!8........Ha...
    da64:	46390480 fcb4f001 46394a95 f0014350     ..9F.....J9FPC..
    da74:	4a93fcaf 43504639 fcaaf001 4348219d     ...J9FPC.....!HC
    da84:	04492101 219d1840 02090c80 46211842     .!I.@..!....B.!F
    da94:	4359230c 50689801 7803487c 0f9b075b     .#YC..hP|H.x[...
    daa4:	4b88d001 4b88e000 607b194f 609a194b     ...K...KO.{`K..`
    dab4:	50729a00 07407800 d0010f80 e0004883     ..rP.x@......H..
    dac4:	19894883 1c646048 2c28b2e4 2201d3b8     .H..H`d...(,..."
    dad4:	05d24880 4b806002 21006043 4c7f6081     .H...`.KC`.!.`.L
    dae4:	610160c4 61826141 620261c3 62816244     .`.aAa.a.a.bDb.b
    daf4:	460862c1 ff45f7ff ff6ff7ff 78004863     .b.F..E...o.cH.x
    db04:	0f810740 d0014876 e0014976 1f894975     @...vH..vI..uI..
    db14:	68416001 43912280 f7ff6041 bdfeff72     .`Ah.".CA`..r...
    db24:	f7ffb510 f7ffff4b 2000ff58 ff29f7ff     ....K...X.. ..).
    db34:	6848496b 4310158a f7ff6048 bd10ff62     kIHh...CH`..b...
    db44:	4770b240 2200b510 4b672115 e0020209     @.pG...".!gK....
    db54:	602218c4 42881d00 bd10d3fa 48634964     .."`...B....dIcH
    db64:	48636008 6b023840 438a03c1 6302430a     .`cH@8.k...C.C.c
    db74:	494b4770 3180485f 48606048 6141495e     pGKI_H.1H``H^IAa
    db84:	6181495f 61c1495f 3113495a 48416201     _I.a_I.aZI.1.bAH
    db94:	68c13040 09894a5c 01896812 60c14311     @0.h\J...h...C.`
    dba4:	68814838 03922201 60814391 b5104770     8H.h."...C.`pG..
    dbb4:	20004604 ffc6f7ff 49542003 62c80400     .F. ..... TI...b
    dbc4:	62204853 62604853 61604853 202c2106     SH bSH`bSH`a.!, 
    dbd4:	48525501 485262a0 48526020 48526060     .URH.bRH `RH``RH
    dbe4:	f7ff61e0 f001ffbb 4925fbf9 60882000     .a........%I. .`
    dbf4:	3840483f 01096b81 05820909 63814311     ?H@8.k.......C.c
    dc04:	20034920 20096348 05804948 f7ff60c8      I. Hc. HI...`..
    dc14:	f7ffff0e 4946ffae 6188200c b510bd10     ......FI. .a....
    dc24:	88004844 d0032800 02002005 ff8af7ff     DH...(... ......
    dc34:	68004841 61604c13 68004840 61484915     AH.h.L`a@H.h.IHa
    dc44:	49322003 62c80400 ff88f7ff fbc6f001     . 2I...b........
    dc54:	f889f7ff 38404826 01096b81 05820909     ....&H@8.k......
    dc64:	63814311 68004836 20034780 20096360     .C.c6H.h.G. `c. 
    dc74:	0580492e f7ff60c8 f7ffff53 bd10ff7a     .I...`..S...z...
    dc84:	4000f000 40020000 feefcfff 100083b4     ...@...@........
    dc94:	00002402 40020800 6438ee11 00010ee4     .$.....@..8d....
    dca4:	40041800 40020180 1000851c 04000700     ...@...@........
    dcb4:	40022800 40022a00 4b100007 4b180007     .(.@.*.@...K...K
    dcc4:	00000962 463d59af 423d55af 430155af     b....Y=F.U=B.U.C
    dcd4:	420155af 40022c00 00048060 00008060     .U.B.,.@`...`...
    dce4:	4000f400 0f60010d 40030000 054a0756     ...@..`....@V.J.
    dcf4:	40040080 00000303 d6d6e8ff 40041900     ...@...........@
    dd04:	8199afc4 0000516a 10008318 40041a80     ....jQ.........@
    dd14:	0001b645 0001b637 0001b35b 0001b363     E...7...[...c...
    dd24:	0001b32f 0001b349 100067e5 40024000     /...I....g...@.@
    dd34:	4000e200 10008294 10008320 10008324     ...@.... ...$...
    dd44:	10040184 03892101 d3004288 49794608     .....!...B...FyI
    dd54:	43486809 0b420ac1 0c421851 0c821851     .hHC..B.Q.B.Q...
    dd64:	0cc21851 0d021851 0d821851 0e021851     Q...Q...Q...Q...
    dd74:	0e421851 0e821851 18511c40 18400f80     Q.B.Q...@.Q...@.
    dd84:	1e40d000 47704770 2600b5fe 90002040     ..@.pGpG...&@ ..
    dd94:	78004869 d0242801 8010f3ef 4c679001     iH.x.($.......gL
    dda4:	2001b672 f0018060 2800fb1f 2002d07d     r.. `......(}.. 
    ddb4:	80602601 f9fef001 d0fb2802 80602003     .&`......(... `.
    ddc4:	f9f8f001 d0f12800 20044d5c 350c8060     .....(..\M. `..5
    ddd4:	280078e8 2005d0ea 88288060 d1642800     .x.(... `.(..(d.
    dde4:	4630e001 2006bdfe f7ff8060 2800fc9f     ..0F... `......(
    ddf4:	2007d15b 48528060 48529000 28008800     [.. `.RH..RH...(
    de04:	4851d004 880078a9 e002180f 686178a8     ..QH.x.......xah
    de14:	20081847 484d8060 28008800 f001d003     G.. `.MH...(....
    de24:	2800fae9 2009d0fb 46398060 f0014668     ...(... `.9FhF..
    de34:	2800fae7 200ad079 f0018060 2800fae7     ...(y.. `......(
    de44:	200bd073 46398060 f0014668 2800fae5     s.. `.9FhF.....(
    de54:	4f3dd06b 88399800 28071a40 200cd365     k.=O..9.@..(e.. 
    de64:	f0018060 2800fadf 200fd020 48388060     `......( .. `.8H
    de74:	47806800 d0032800 68004836 d4540780     .h.G.(..6H.h..T.
    de84:	80602010 20004934 48346208 493468c0     . `.4I. .b4H.h4I
    de94:	0e800680 f0016008 f001facb 4928facf     .....`........(I
    dea4:	42889800 2000d104 e03ee00a e03c2600     ...B... ..>..&<.
    deb4:	88094924 d0012900 e0008839 1a406861     $I...)..9...ah@.
    dec4:	20119000 48278060 63c12101 29006bc1     ... `.'H.!.c.k.)
    ded4:	4824d1fc 69c038c0 60384f23 f7ff9800     ..$H.8.i#O8`....
    dee4:	60a0ff31 80602012 68a07929 faacf001     1..`. `.)y.h....
    def4:	491e2001 60080780 1c407820 20137020     . .I...` x@. p. 
    df04:	481b8060 22ff6981 431132c1 48196181     `..H.i.".2.C.a.H
    df14:	60786940 38404811 60b86940 6a804816     @ix`.H@8@i.`.H.j
    df24:	48164780 00496801 b662d5fc f3809801     .G.H.hI...b.....
    df34:	e7568810 10040204 10040140 100400f0     ..V.....@.......
    df44:	0000ffff 10040094 1004009c 10008296     ................
    df54:	1004018c 4000e000 4000b000 40020840     .......@...@@..@
    df64:	10008318 400400c0 1000831c e000e100     .......@........
    df74:	4000e200 40020000 10040d90 e000e200     ...@...@........
    df84:	4605b538 4608460c fa64f001 70084669     8..F.F.F..d.iF.p
    df94:	d0182800 d0152807 2105460a f0014628     .(...(...F.!(F..
    dfa4:	7920fa5f d00d2801 d00b280b f0014628     _. y.(...(..(F..
    dfb4:	4601f9a9 78024668 43022060 46282301     ...FhF.x` .C.#(F
    dfc4:	f9a6f001 7920bd38 00804903 4621580a     ....8. y.I...X!F
    dfd4:	47904628 0000bd38 100082a0 0ec906c1     (F.G8...........
    dfe4:	40882001 6008492f 06c14770 20010ec9     . .@/I.`pG..... 
    dff4:	492c4088 60083180 06c14770 20010ec9     .@,I.1.`pG..... 
    e004:	49294088 47706008 f001b570 2501fa2f     .@)I.`pGp.../..%
    e014:	106c03ed 4a251063 d0122800 60102000     ..l.c.%J.(... .`
    e024:	63901e40 f7ff2018 6950ffe8 61504328     @..c. ....Pi(CPa
    e034:	43206950 69506150 61504318 f7ff2018     Pi CPaPi.CPa. ..
    e044:	481bffdc 481b6390 07896801 6ad1d006     ...H.c.H.h.....j
    e054:	62d14329 43296b11 62156311 06896801     )C.b.k)C.c.b.h..
    e064:	d0060f89 43216ad1 6b1162d1 63114321     .....j!C.b.k!C.c
    e074:	68006214 0f800580 6ad0d006 62d04318     .b.h.......j.C.b
    e084:	43186b10 62136310 f7ff2018 201fffa7     .k.C.c.b. ..... 
    e094:	ffa4f7ff f7ff2015 201bffa1 ff9ef7ff     ..... ..... ....
    e0a4:	0000bd70 e000e100 e000e280 40011000     p..............@
    e0b4:	0000ffff 4000f000 4852b5f8 68c04952     .......@..RHRI.h
    e0c4:	0f8400c0 4d516908 2b01686b 2b05d00a     .....iQMkh.+...+
    e0d4:	220cd008 2c014310 2c02d01e 2c03d01f     ...".C.,...,...,
    e0e4:	e01fd122 6a964a4a 403e4f4a 433e4f4a     "...JJ.jJO>@JO>C
    e0f4:	6ad66296 403e4f49 433e2701 688a62d6     .b.jIO>@.'>C.b.h
    e104:	40324e47 43324e47 684a608a 02362677     GN2@GN2C.`Jhw&6.
    e114:	604a43b2 e0064a44 04122205 2203e003     .CJ`DJ..."....."
    e124:	e0000212 43102230 07d96108 4c3f4321     ....0".C.a..!C?L
    e134:	68202600 d0022900 62012120 6206e000     .& h.).. !.b...b
    e144:	280068e8 b2c0d005 f91cf000 f0007b28     .h.(........({..
    e154:	6824f982 483662a6 68a96800 f00100c0     ..$h.b6H.h.h....
    e164:	6260f937 6920e000 07c06960 4931d1fb     7.`b.. i`i....1I
    e174:	60082001 30804824 09096801 60010109     . .`$H.0.h.....`
    e184:	69a060a6 43082102 bdf861a0 460eb5f7     .`.i.!.C.a.....F
    e194:	290a4605 7828d10c d1092804 280e7868     .F.)..(x.(..hx.(
    e1a4:	7928d106 d103281f 28207968 2609d100     ..(y.(..hy (...&
    e1b4:	68e04c16 d0022800 f000b2c0 4811f92b     .L.h.(......+..H
    e1c4:	68c04f1a 0f8000c0 6860d104 d0012801     .O.h......`h.(..
    e1d4:	d1032805 68416838 d5fc0689 46284631     .(..8hAh....1F(F
    e1e4:	f0009a02 68e0ffb7 d0092800 68416838     .......h.(..8hAh
    e1f4:	d5fc06c9 f000206e 7b20fb9d f92bf000     ....n .... {..+.
    e204:	0000bdfe 10040828 4000b040 100083b0     ....(...@..@....
    e214:	4000b180 c0c0ffff 02030000 ffffc0c0     ...@............
    e224:	ff8888ff 00111100 00003c0c 1004015c     .........<..\...
    e234:	100083cc e000e100 493ab5fe 68094838     ..........:I8H.h
    e244:	4d394788 4a382000 3d504b38 24261c41     .G9M. 8J8KP=A.&$
    e254:	43440749 0f49260a 434618a4 807c18f7     I.DC.&I...FC..|.
    e264:	4361240a 19494c31 19343c40 1c408761     .$aC1LI.@<4.a.@.
    e274:	dbeb2808 68204c2e 438821f0 430821e0     .(...L h.!.C.!.C
    e284:	482b6020 30c02196 0a526b02 430a0252      `+H.!.0.kR.R..C
    e294:	6b016302 40114a27 43114a27 48276301     .c.k'J.@'J.C.c'H
    e2a4:	682060e0 438800e1 68206020 43881049     .` h...C ` hI..C
    e2b4:	22066020 46684922 ff0af000 88084669      `.""IhF....iF..
    e2c4:	04098849 62614301 88884669 682062a0     I....CabiF...b h
    e2d4:	43881561 60204308 21074815 61013080     a..C.C `.H.!.0.a
    e2e4:	39184916 49156301 63413124 39c0490e     .I.9.c.I$1Ac.I.9
    e2f4:	48146381 7c00210a 19404348 f7fe62e0     .c.H.!.|HC@..b..
    e304:	2001ff80 f8b8f001 f8bcf001 7800480e     ... .........H.x
    e314:	d0012800 f8bcf001 f8c0f001 0000bdfe     .(..............
    e324:	10040d90 100400ec 00000aca 40030a80     ...............@
    e334:	40040000 fc00ffff 01e50000 0000033a     ...@........:...
    e344:	0001f8b2 10040b9c 100400a4 21004803     .............H.!
    e354:	60016041 21026801 47706001 4000d000     A`.`.h.!.`pG...@
    e364:	6802b510 43086b10 20046310 fe36f7ff     ...h.k.C.c. ..6.
    e374:	b510bd10 6b106802 63104388 f7ff2004     .....h.k.C.c. ..
    e384:	bd10fe34 2101b5f0 0f240704 2300460a     4......!..$..F.#
    e394:	40a24daf d82a2818 28074cae 6863d801     .M.@.(*..L.(..ch
    e3a4:	280fe006 68a3d801 2817e002 68e3d800     ...(...h...(...h
    e3b4:	0ef70746 40be2607 280743b3 6063d801     F....&.@.C.(..c`
    e3c4:	280fe006 60a3d801 2817e002 60e3d800     ...(...`...(...`
    e3d4:	d2082810 68534aa0 430b4081 69136053     .(...JSh.@.CS`.i
    e3e4:	6113430b 499de001 7728e00d 4603bdf0     .C.a...I..(w...F
    e3f4:	2b033b2c 4c9ad8fa 07866923 40b10fb6     ,;.+...L#i.....@
    e404:	6123438b 684b4997 604b4313 4313690b     .C#a.IKh.CK`.i.C
    e414:	e7ea610b 2101b530 28104a8d 4b8ed206     .a..0..!.J.(...K
    e424:	460d685c 43ac4085 e007605c 0f240704     \h.F.@.C\`....$.
    e434:	40a32301 d2032818 e0054888 bd307751     .#.@.(...H..Qw0.
    e444:	2803382c 4887d804 439c6844 e7f56044     ,8.(...HDh.CD`..
    e454:	77502000 2201bd30 d2052810 684b497e     . Pw0..".(..~IKh
    e464:	43134082 e00e604b 0f120702 40912101     .@.CK`.......!.@
    e474:	d2012818 e0034879 2803382c 4879d803     .(..yH..,8.(..yH
    e484:	430a6842 49726042 77482000 b5f84770     Bh.CB`rI. HwpG..
    e494:	46164607 2004460d fda7f7ff 20014c6c     .F.F.F. ....lL. 
    e4a4:	60e660a7 77a06065 e0048425 0a096801     .`.`e`.w%....h..
    e4b4:	31fe0209 68206001 68816800 d1f507c9     ...1.` h.h.h....
    e4c4:	f7ff2004 7f20fd8b ffa4f7ff 20094966     . .... .....fI. 
    e4d4:	bdf86048 2500b570 e03e4c5d 2a007fa2     H`..p..%]L>....*
    e4e4:	6862d027 d00d2a00 780268a0 60a01c40     '.bh.*...h.x@..`
    e4f4:	68016808 02090a09 60014311 1e406860     .h.h.....C.``h@.
    e504:	e01b6060 0a096801 31fe0209 48566001     ``...h.....1.`VH
    e514:	1e496841 68406041 d10f2800 7f2077a5     AhI.A`@h.(...w .
    e524:	ff99f7ff 290068e1 2000d008 478860e5     .....h.)... .`.G
    e534:	6801e004 02090a09 600131fe 69616820     ...h.....1.` hai
    e544:	29006800 d0086840 69207008 61201e40     .h.)@h...p i@. a
    e554:	1c496961 28006161 6821d005 68c26808     aiI.aa.(..!h.h.h
    e564:	d1bb07d2 6165bd70 68202101 ff01f7ff     ....p.ea.! h....
    e574:	290069a1 2000d0f6 478861a5 b5f0bd70     .i.)... .a.Gp...
    e584:	4606b087 4668211c ff8ef000 2e004f37     ...F.!hF....7O..
    e594:	7838d106 d1032800 482d2124 ff84f000     ..8x.(..$!-H....
    e5a4:	46692000 74087048 744a2201 70887008     . iFHp.t."Jt.p.p
    e5b4:	7b00482f 0f400740 d80b2803 492d00c2     /H.{@.@..(....-I
    e5c4:	5a8b4668 18518243 8282884a 82c2888a     hF.ZC.Q.J.......
    e5d4:	830188c9 4c284d1e d0022e01 d00d2e00     .....M(L........
    e5e4:	7820e012 d0022800 28027820 4821d10c     .. x.(.. x.(..!H
    e5f4:	4922466a f0003808 e005ff5d 28007838     jF"I.8..]...8x.(
    e604:	481cd102 60283808 28007820 7820d002     ...H.8(` x.(.. x
    e614:	d1032802 78004814 feb4f7ff 68282101     .(...H.x.....!(h
    e624:	fea7f7ff f0002014 7820ff4b d00c2800     ..... ..K. x.(..
    e634:	28027820 4912d107 f0002014 2101ff47      x.(...I. ..G..!
    e644:	f7ff6828 b007fe8d 490ebdf0 0000e7f4     (h.........I....
    e654:	10041e00 4000b040 40010000 40011000     ....@..@...@...@
    e664:	4000f400 40013000 100083c4 10040000     ...@.0.@........
    e674:	10040828 10040198 100400d9 40006000     (............`.@
    e684:	10007179 0001d1c7 4afdb510 4bfd6951     yq.........JQi.K
    e694:	781b09c9 075b01c9 d0050f9c 2b010f9b     ...x..[........+
    e6a4:	2b02d004 e008d005 e0044bf7 331c4bf6     ...+.....K...K.3
    e6b4:	4bf5e001 5c1b330e 61514319 69514af3     ...K.3.\.CQa.JQi
    e6c4:	4399231e 33234bf0 00405c18 61504308     .#.C.K#3.\@..CPa
    e6d4:	b5f0bd10 68064dee 684168ab 4604b08b     .....M.h.hAh...F
    e6e4:	d102429e 428168e8 4aead072 27076810     .B...h.Br..J.h.'
    e6f4:	43b8023f 1a7f00cf 398c49e3 5c711879     ?..C.....I.9y.q\
    e704:	0d490749 60114301 42986820 b2c0d002     I.I..C.` h.B....
    e714:	ffbaf7ff 686148de 428168c0 48dcd104     .....Hah.h.B...H
    e724:	68806821 d0784281 900948db 900248db     !h.h.Bx..H...H..
    e734:	20012500 f925f7ff 68c648d5 46866880     .%. ..%..H.h.h.F
    e744:	200c462b 98094343 6879181f 45706820     +F. CC....yh hpE
    e754:	227fd019 43910212 78124aca 46940752     ..."...C.J.xR..F
    e764:	d0060f92 0f924662 d0042a01 d0052a02     ....bF...*...*..
    e774:	4ac5e009 4ac4e004 e001321c 320e4ac2     ...J...J.2...J.2
    e784:	02125c12 68624311 42b24694 460ad00e     .\...Cbh.F.B...F
    e794:	07492103 4661438a 00ca9200 49ba1a52     .!I..CaF....R..I
    e7a4:	1851398c 9a005c40 43110741 98026079     .9Q.@\..A..Cy`..
    e7b4:	684f1819 0200207f 48b24387 07407800     ..Oh. ...C.H.x@.
    e7c4:	d0060f82 28010f80 2802d007 e00ed009     .......(...(....
    e7d4:	48ade028 5c806822 4aabe007 32156820     (..H"h.\...J h.2
    e7e4:	4aa9e002 1dd26820 02005c10 68604307     ...J h...\...C`h
    e7f4:	d00b42b0 220300c3 07521a18 43974ba2     .B....."..R..K.C
    e804:	68223b46 5c1018c0 43070740 1c6d604f     F;"h...\@..CO`m.
    e814:	d3952d28 f7ff2000 489df8b4 60816821     (-... .....H!h.`
    e824:	60c16861 bdf0b00b 4a974601 324a2000     ah.`.....F.J. J2
    e834:	5ad30043 d303428b b2c01c40 d3f72806     C..Z.B..@....(..
    e844:	46014770 20004a90 00433238 428b5ad3     pG.F.J. 82C..Z.B
    e854:	1c40d303 2809b2c0 4770d3f7 4c8cb570     ..@....(..pGp..L
    e864:	34602200 33164623 35e4461d 29007d21     ."`4#F.3.F.5!}.)
    e874:	0051d010 42865a5e 5a5ed302 e001360b     ..Q.^Z.B..^Z.6..
    e884:	3e0b5a5e 1c52526e 2a08b2d2 2000d3ee     ^Z.>nRR....*... 
    e894:	bd707520 5a6e0051 d8ee4286 42865a6e      up.Q.nZ.B..nZ.B
    e8a4:	5a5ed3ee d9eb4286 b570e7e7 22004d78     ..^Z.B....p.xM."
    e8b4:	462b3580 461c330a 7a2934e2 d0102900     .5+F.3.F.4)z.)..
    e8c4:	5a5e0051 d3024286 36125a5e 5a5ee001     Q.^Z.B..^Z.6..^Z
    e8d4:	52663e12 b2d21c52 d3ee2a06 72282000     .>fRR....*... (r
    e8e4:	0051bd70 42865a66 5a66d8ee d3ee4286     p.Q.fZ.B..fZ.B..
    e8f4:	42865a5e e7e7d3eb 01004969 03411a08     ^Z.B....iI....A.
    e904:	18890302 18890282 18890242 18890202     ........B.......
    e914:	18890182 18890102 188900c2 21011808     ...............!
    e924:	280004c9 1840dd02 47701500 15001a08     ...(..@...pG....
    e934:	47704240 0080b508 28009000 1e40dd01     @BpG.......(..@.
    e944:	bd08e7fa 4605b5f0 b0894856 24006841     .......FVH..Ah.$
    e954:	04122207 22054391 43110412 484d6041     ."...C."...CA`MH
    e964:	4a516841 0a090209 01c909c9 d1014295     AhQJ.........B..
    e974:	e0044a4e 1f124a4c d1014295 43114a4c     NJ..LJ...B..LJ.C
    e984:	21056041 02894e48 60313e0c 69914a49     A`.!HN...>1`IJ.i
    e994:	0909230c 43190109 68816191 43992338     .#.....C.a.h8#.C
    e9a4:	43192318 69106081 43081511 48366110     .#.C.`.i...C.a6H
    e9b4:	6d473822 f7ff2028 2109ffbd f0004668     "8Gm( .....!hF..
    e9c4:	e00bfd73 03c06870 200ad5fc ffb2f7ff     s...ph..... ....
    e9d4:	19046828 03c06870 1e7fd4fc d1f12f00     (h..ph......./..
    e9e4:	68414830 04122207 22014391 43110452     0HAh."...C."R..C
    e9f4:	48256041 6d413822 f0004620 b009fce9     A`%H"8Am F......
    ea04:	b570bdf0 48284605 1f002400 ff9af7ff     ..p..F(H.$......
    ea14:	6b894929 d40b00c9 31404927 6989698a     )I.k....'I@1.i.i
    ea24:	d5030612 0e490649 e001424c 0e64064c     ....I.I.LB..L.d.
    ea34:	2d001b00 6028d000 ff5ef7ff 491fbd70     ...-..(`..^.p..I
    ea44:	18400280 01820201 01421889 00c21889     ..@.......B.....
    ea54:	18081889 04892101 0cc01840 b5704770     .....!..@...pGp.
    ea64:	48114604 ff6ef7ff 6b8a4913 d42a0092     .F.H..n..I.k..*.
    ea74:	01926b8a d5236b8a 0dd201d2 e0234252     .k...k#.....RB#.
    ea84:	40020000 100083b4 100084f2 40020800     ...@...........@
    ea94:	100083d0 4000f400 40022800 40022a00     .......@.(.@.*.@
    eaa4:	000076a0 4000f000 4000b1cc fb000002     .v.....@...@....
    eab4:	f9000003 4000b000 4000a000 00003d43     .......@...@C=..
    eac4:	0dd201d2 2200e000 00496b89 49fdd412     .......".kI....I
    ead4:	6989698b 4bfc021d 4019d507 d9012908     .i.i...K...@.)..
    eae4:	e0002101 42492100 4019e005 d9012908     .!...!IB...@.)..
    eaf4:	e0002101 1a802100 00d2226b 43411a80     .!...!..k"....AC
    eb04:	04800089 04911808 21011840 18400449     ........@..!I.@.
    eb14:	2c000c80 6020d000 ff91f7ff b57cbd70     ...,.. `....p.|.
    eb24:	d0342800 6ce04ce9 d0302800 f7ff4668     .(4..L.l.(0.hF..
    eb34:	a801ff96 ff65f7ff f7ff9801 9800feb6     ......e.........
    eb44:	fe8cf7ff f7ff9800 4606fe7c f7ff9801     ........|..F....
    eb54:	4605fe6b fb2ef000 d1182801 39c84621     k..F.....(..!F.9
    eb64:	61089801 61489800 f000c160 2800fba1     ...a..Ha`......(
    eb74:	6d20d007 d0042801 f0002000 2805fa97     .. m.(... .....(
    eb84:	48d2d105 f7ff38c8 2000fda4 bd7c6520     ...H.8.....  e|.
    eb94:	e7c42001 60032300 041b6803 2301d5fc     . ...#.`.h.....#
    eba4:	49cb408b 600b4313 29006801 4608dafc     .@.I.C.`.h.)...F
    ebb4:	b5f04770 b08549c7 22006f0a 680a9201     pG...I...o."...h
    ebc4:	d07d2a00 d07b2800 688048c3 0ec404c0     .*}..({..H.h....
    ebd4:	940448c2 4dc268c0 4ec20b80 d02a07c0     .H...h.M...N..*.
    ebe4:	1d0048bb 91002107 69a99002 61a94331     .H...!.....i1C.a
    ebf4:	99009a01 ffcef7ff 49bb0847 400f0440     ........G..I@..@
    ec04:	43070c40 43b069a8 9a0161a8 98029900     @..C.i.C.a......
    ec14:	ffc0f7ff 49b40846 400e0440 43060c40     ....F..I@..@@..C
    ec24:	0b300b39 1a409103 4240d500 f0000280     9.0...@...@B....
    ec34:	4605fbcf 48a6e03c 30084fac 20069002     ...F<..H.O.0... 
    ec44:	6ec89000 0209217d d1db4288 e7d94fa8     ...n}!...B...O..
    ec54:	94044605 d20342be d2042c1f e0021c64     .F...B...,..d...
    ec64:	d0002c00 499c1e64 221f6888 43900212     .,..d..I.h."...C
    ec74:	43020222 2001608a fe5cf7ff 99009a01     "..C.`. ..\.....
    ec84:	f7ff9802 0846ff87 04404997 0c40400e     ......F..I@..@@.
    ec94:	98034306 1a080b31 d5009903 02804240     .C..1.......@B..
    eca4:	fb96f000 d0052c1f d0032c00 da0142a8     .....,...,...B..
    ecb4:	dccd2805 dd0a42a8 68884987 e000221f     .(...B...I.h."..
    ecc4:	0212e005 9a044390 43020212 b005608a     .....C.....C.`..
    ecd4:	2001bdf0 4b7fe76d 0052b510 60da331c     ... m..K..R..3.`
    ece4:	64d04a7a 28006551 d0024618 f9d0f000     zJ.dQe.(.F......
    ecf4:	f000bd10 bd10fbf1 497eb500 604a2200     ..........~I."J`
    ed04:	60482001 f7ff2002 604afe15 f7ff20c8     . H`. ....J`. ..
    ed14:	bd00fe11 b08db5f0 90072000 69804869     ......... ..iH.i
    ed24:	90030e00 68414874 08499106 60410049     ....tHAh..I.I.A`
    ed34:	68814869 00c908c9 60811d89 69684d6d     iH.h.......`mMhi
    ed44:	496e9009 b2c06968 61684308 68c1486c     ..nIhi...ChalH.h
    ed54:	496c9108 210160c1 0409486b 21ff6201     ..lI.`.!kH...b.!
    ed64:	3108486a 496a6081 22016808 43109005     jH.1.`jI.h."...C
    ed74:	46106008 fe05f7fe 00406968 61680840     .`.F....hi@.@.ha
    ed84:	60e84864 0060692c 61280840 ffb4f7ff     dH.`,i`.@.(a....
    ed94:	3040485b 03af6a00 0d460600 43384620     [H@0.j....F. F8C
    eda4:	f7ff6128 4856ffa9 6a003040 0f400600     (a....VH@0.j..@.
    edb4:	69684306 40084958 43010531 61694339     .ChiXI.@1..C9Cia
    edc4:	07402003 61284320 ff96f7ff 494c2700     . @. C(a.....'LI
    edd4:	463d463e 463a3140 4b4b624a 6218484f     >F=F@1:FJbKKOH.b
    ede4:	304120ff fda6f7ff 62482001 304120ff     . A0..... Hb. A0
    edf4:	fda0f7ff 624a6a88 484819c7 1c404b42     .....jJb..HHBK@.
    ee04:	20046218 fd96f7ff 62482001 304120ff     .b. ..... Hb. A0
    ee14:	fd90f7ff 1c6d6a88 2d101986 2000d3dc     .....jm....-... 
    ee24:	1bb96248 f000483e 4607fad3 38404825     Hb..>H.....F%H@8
    ee34:	28006b80 9803db03 d0002800 48390087     .k.(.....(....9H
    ee44:	900b2500 00694838 0480180e f0004631     .%..8Hi.....1F..
    ee54:	4a35fabf 43504631 fabaf000 46314a32     ..5J1FPC....2J1F
    ee64:	f0004350 2101fab5 04c94378 0d001840     PC.....!xC..@...
    ee74:	d90028ff 2d0020ff 9007d100 9a0b210c     .(... .-.....!..
    ee84:	188a4369 0a096891 43010209 1c6d6091     iC...h.....C.`m.
    ee94:	d3d72d28 61044817 61419909 9805491c     (-...H.a..Aa.I..
    eea4:	491a6008 60882000 62084917 98084914     .`.I. .`.I.b.I..
    eeb4:	200060c8 fd65f7fe 9806490f 98076048     .`. ..e..I..H`..
    eec4:	bdf0b00d 4000a040 007fff00 100084d0     ....@..@........
    eed4:	4000c000 100083d0 4000f400 10040828     ...@.......@(...
    eee4:	4000b000 00000200 3fff8000 018cba80     ...@.......?....
    eef4:	01964000 40020000 4000f000 6a029100     .@.....@...@...j
    ef04:	40020840 0000800f 40041800 40024a00     @..@.......@.J.@
    ef14:	40025000 05c62762 800fffff 0001007f     .P.@b'..........
    ef24:	0013b800 40022800 00000962 2400b5fe     .....(.@b......$
    ef34:	d0162804 d1132806 f7ff2001 f000fe3a     .(...(... ..:...
    ef44:	2001f896 fdebf7ff 90002001 23049002     ... ..... .....#
    ef54:	a1194a18 481d9401 fac4f000 fedaf7ff     .J.....H........
    ef64:	481bbdfe 491b6800 4d186809 491a1a40     ...H.h.I.h.M@..I
    ef74:	3d1c4348 18406869 68686068 42b04e17     HC.=ih@.h`hh.N.B
    ef84:	4631d30f f0006868 4915fa23 684b680a     ..1Fhh..#..I.hKh
    ef94:	415c1880 604c6008 68684631 fa18f000     ..\A.`L`1Fhh....
    efa4:	480a6069 f874f000 f836f000 f85ff000     i`.H..t...6..._.
    efb4:	0000bdfe 10007835 74616256 6574565f     ....5x..Vbat_Vte
    efc4:	435f706d 62696c61 00000000 100083ec     mp_Calib........
    efd4:	1000828c 1000831c 00000271 0007a120     ........q... ...
    efe4:	10040240 492c4602 43c02000 e0046809     @....F,I. .C.h..
    eff4:	d101428a 47702000 29006989 4770d1f8     .B... pG.i.)..pG
    f004:	4604b510 4608460b ffecf7ff d0022800     ...F.F.F.....(..
    f014:	61986820 bd106023 4e1fb5f8 462f2500      h.a#`.....N.%/F
    f024:	e0216830 69844a1d 68136881 1a596852     0h!..J.i.h.hRhY.
    f034:	d31741ba 29007901 4b18d00c 681968c2     .A...y.)...K.h.h
    f044:	1851685b 60814605 29006901 6940d00b     [hQ..F.`.i.)..@i
    f054:	e0084788 42816831 6034d101 61ace000     .G..1h.B..4`...a
    f064:	e7f16187 46204605 d1db2800 b510bdf8     .a...F F.(......
    f074:	6800480b 480b0841 61411e49 2207490a     .H.hA..HI.Aa.I."
    f084:	021c69cb 23000a24 618361cc bd106102     .i..$..#.a.a.a..
    f094:	48014601 0000e7b4 1004021c 10040240     .F.H........@...
    f0a4:	100083cc e000e000 e000ed04 4801b403     ...............H
    f0b4:	bd019001 0001a2f9 4801b403 bd019001     ...........H....
    f0c4:	0001a08f 4801b403 bd019001 00019fe9     .......H........
    f0d4:	4801b403 bd019001 0001de29 4801b403     ...H....)......H
    f0e4:	bd019001 0000428b 4801b403 bd019001     .....B.....H....
    f0f4:	00019069 4801b403 bd019001 0001a251     i......H....Q...
    f104:	4801b403 bd019001 0001c909 4801b403     ...H...........H
    f114:	bd019001 000052f5 4801b403 bd019001     .....R.....H....
    f124:	00005d41 4801b403 bd019001 0001a2a1     A].....H........
    f134:	4801b403 bd019001 0001de5b 4801b403     ...H....[......H
    f144:	bd019001 0001de17 4801b403 bd019001     ...........H....
    f154:	0001bb9d 4801b403 bd019001 0001bf11     .......H........
    f164:	4801b403 bd019001 0001d0ad 4801b403     ...H...........H
    f174:	bd019001 00019c6d 4801b403 bd019001     ....m......H....
    f184:	0001bb7d 4801b403 bd019001 0001dbdd     }......H........
    f194:	4801b403 bd019001 00000215 4801b403     ...H...........H
    f1a4:	bd019001 0001b83b 4801b403 bd019001     ....;......H....
    f1b4:	0001dc5b 4801b403 bd019001 0001cf37     [......H....7...
    f1c4:	4801b403 bd019001 0001d6f5 4801b403     ...H...........H
    f1d4:	bd019001 0001b7fb 4801b403 bd019001     ...........H....
    f1e4:	00000b15 4801b403 bd019001 0001bdd5     .......H........
    f1f4:	4801b403 bd019001 0001d4d1 4801b403     ...H...........H
    f204:	bd019001 0001d4ed 4801b403 bd019001     ...........H....
    f214:	0001cffb 4801b403 bd019001 00000ab7     .......H........
    f224:	4801b403 bd019001 00000e17 4801b403     ...H...........H
    f234:	bd019001 000000d5 4801b403 bd019001     ...........H....
    f244:	0001cdbf 4801b403 bd019001 000011e3     .......H........
    f254:	4801b403 bd019001 00012edd 4801b403     ...H...........H
    f264:	bd019001 00006685 4801b403 bd019001     .....f.....H....
    f274:	00006651 4801b403 bd019001 00012faf     Qf.....H...../..
    f284:	4801b403 bd019001 00006647 4801b403     ...H....Gf.....H
    f294:	bd019001 00005081 4801b403 bd019001     .....P.....H....
    f2a4:	0001ba01 4801b403 bd019001 000190bf     .......H........
    f2b4:	4801b403 bd019001 000131af 4801b403     ...H.....1.....H
    f2c4:	bd019001 00005df3 4801b403 bd019001     .....].....H....
    f2d4:	000082af 4801b403 bd019001 0000533d     .......H....=S..
    f2e4:	4801b403 bd019001 0001ba1d 4801b403     ...H...........H
    f2f4:	bd019001 0001a0b1 4801b403 bd019001     ...........H....
    f304:	00018bdb 4801b403 bd019001 0000b0b5     .......H........
    f314:	4801b403 bd019001 000119e9 4801b403     ...H...........H
    f324:	bd019001 0001a27d 4801b403 bd019001     ....}......H....
    f334:	0001a07f 4801b403 bd019001 00019ab5     .......H........
    f344:	4801b403 bd019001 00019831 4801b403     ...H....1......H
    f354:	bd019001 00019af1 4801b403 bd019001     ...........H....
    f364:	00019a85 4801b403 bd019001 00019b05     .......H........
    f374:	4801b403 bd019001 00019a45 4801b403     ...H....E......H
    f384:	bd019001 00019ca1 4801b403 bd019001     ...........H....
    f394:	00019f09 4801b403 bd019001 00019095     .......H........
    f3a4:	4801b403 bd019001 00019711 4801b403     ...H...........H
    f3b4:	bd019001 00019c81 4801b403 bd019001     ...........H....
    f3c4:	0001d577 4801b403 bd019001 0001dd01     w......H........
    f3d4:	4801b403 bd019001 0001dcd5 4801b403     ...H...........H
    f3e4:	bd019001 0001b2a7 4801b403 bd019001     ...........H....
    f3f4:	00019c47 4801b403 bd019001 0001b731     G......H....1...
    f404:	4801b403 bd019001 0001a543 4801b403     ...H....C......H
    f414:	bd019001 00001399 4801b403 bd019001     ...........H....
    f424:	000131d3 4801b403 bd019001 000196d1     .1.....H........
    f434:	4801b403 bd019001 0001c9db 4801b403     ...H...........H
    f444:	bd019001 0001c93d 4801b403 bd019001     ....=......H....
    f454:	00006839 4801b403 bd019001 00012565     9h.....H....e%..
    f464:	4801b403 bd019001 00011aef 4801b403     ...H...........H
    f474:	bd019001 0001cc03 4801b403 bd019001     ...........H....
    f484:	00006a2d 4801b403 bd019001 0001c9ff     -j.....H........
    f494:	4801b403 bd019001 00006a01 4801b403     ...H.....j.....H
    f4a4:	bd019001 0001c999 4801b403 bd019001     ...........H....
    f4b4:	0001de5b 4801b403 bd019001 0001d25b     [......H....[...
    f4c4:	4801b403 bd019001 000007bd 4801b403     ...H...........H
    f4d4:	bd019001 000007d7 4801b403 bd019001     ...........H....
    f4e4:	0001d751 4801b403 bd019001 0001d6fd     Q......H........
    f4f4:	61007072 10000000 00000000 10008244     rp.a........D...
    f504:	100400d8 00010001 00000805 00019685     ................
    f514:	00000300 10005fe5 00000301 000192f7     ....._..........
    f524:	00000302 00019379 00000303 000193a3     ....y...........
    f534:	00000304 000193d5 0000030a 00019403     ................
    f544:	00000305 0001947f 0000030f 000194b1     ................
    f554:	00000312 000194e5 00000313 00019535     ............5...
    f564:	00000314 0001956b 00000315 000195ab     ....k...........
    f574:	00000316 000195f1 00000317 0001963b     ............;...
    f584:	00000318 0001942b 00000333 1000606d     ....+...3...m`..
    f594:	00000334 10006093 00000335 100060b5     4....`..5....`..
    f5a4:	100081ac 00000013 0001befb 10006e31     ............1n..
    f5b4:	0001bef3 0001bef5 0001d099 10007133     ............3q..
    f5c4:	0001d0fd 0001d0ff 00000000 00000004     ................
    f5d4:	00000001 100061e1 100061e9 10005d31     .....a...a..1]..
	...
    f5f4:	00010001 00000000 00000000 00000000     ................
    f604:	00012669 000126c9 000127a1 00012813     i&...&...'...(..
    f614:	10005fad 00012875 0001289f 000128f3     ._..u(...(...(..
    f624:	0001291f 0001296b 00012997 00000000     .)..k)...)......
	...
    f678:	00000011 00000000 00000000 00000000     ................
    f688:	00000c13 10005203 00000e0b 10005281     .....R.......R..
    f698:	00000a01 10005185 00000111 1000533f     .....Q......?S..
	...
    f6b0:	10008328 00000004 10008348 10008350     (.......H...P...
    f6c0:	10008368 00080001 00000000 00000000     h...............
    f6d0:	00003800 100054a1 00003801 100054b5     .8...T...8...T..
    f6e0:	00003802 100054ff 00000000 00000000     .8...T..........
    f6f0:	10008370 00000003 00000000 10008390     p...............
    f700:	100083a8 00080001 00000000 00000000     ................
    f710:	00000101 00000000 0001c200 00000000     ................
    f720:	0001cccb 0000002f 00000000 018cba80     ..../...........
    f730:	00000001 00000000 000000ff 000000ff     ................
    f740:	00000000 00000fa0 00000000 00000000     ................
	...
    f7a4:	04320001 035803c5 02eb02fd 02b502c7     ..2...X.........
    f7b4:	029002a3 07980001 06e0073c 05fa0656     ........<...V...
    f7c4:	0000059e 00000000 00000000 00000000     ................
    f7d4:	01010101 02010101 02020202 03030202     ................
    f7e4:	03030303 04040403 04040404 04040404     ................
    f7f4:	05040404 05050505 05050505 05050505     ................
    f804:	05050505 05050505 01010101 01010101     ................
    f814:	01010101 01010101 01010101 02020201     ................
    f824:	02020202 03030303 04030303 04040404     ................
    f834:	04040404 04040404 05050504 05050505     ................
    f844:	05050505 05050505 05050505 44340505     ..............4D
    f854:	78675655 55443479 79786756 5c594838     UVgxy4DUVgxy8HY\
    f864:	477f7e6d 67585849 49477978 7e6d5c59     m~.GIXXgxyGIY\m~
    f874:	0708087f 01030507 00000001 00000001     ................
    f884:	00000002 00006464 00000000 00000000     ....dd..........
	...

0000f8a8 <_global_impure_ptr>:
    f8a8:	200000d4                                ... 

0000f8ac <__sf_fake_stderr>:
	...

0000f8cc <__sf_fake_stdin>:
	...

0000f8ec <__sf_fake_stdout>:
	...
    f90c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    f91c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    f92c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    f93c:	00006665                                ef..

0000f940 <_init>:
    f940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f942:	46c0      	nop			; (mov r8, r8)
    f944:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f946:	bc08      	pop	{r3}
    f948:	469e      	mov	lr, r3
    f94a:	4770      	bx	lr

0000f94c <__init_array_start>:
    f94c:	000000dd 	.word	0x000000dd

0000f950 <_fini>:
    f950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f952:	46c0      	nop			; (mov r8, r8)
    f954:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f956:	bc08      	pop	{r3}
    f958:	469e      	mov	lr, r3
    f95a:	4770      	bx	lr

0000f95c <__fini_array_start>:
    f95c:	000000b5 	.word	0x000000b5
